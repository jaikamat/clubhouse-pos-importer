{"version":3,"sources":["utils/api_resources.ts","utils/makeAuthHeader.ts","context/loginQuery.ts","context/AuthProvider.tsx","ManageInventory/allLocationInventoryQuery.ts","ManageInventory/TotalStoreInventory.tsx","utils/createDisplayName.ts","utils/getCardImage.ts","utils/ScryfallCard.ts","context/cardSearchQuery.ts","context/InventoryContext.tsx","common/createToast.tsx","common/CardImage.tsx","utils/dropdownOptions.ts","utils/checkCardFinish.ts","utils/finishCondition.ts","utils/parseQoh.ts","common/QohLabels.tsx","common/Language.tsx","common/marketPriceQuery.ts","common/MarketPrice.tsx","ui/SetIcon.tsx","ui/CardHeader.tsx","ManageInventory/addCardToInventoryQuery.ts","ManageInventory/ManageInventoryListItem.tsx","ui/Typography.tsx","common/autocompleteQuery.ts","ui/ControlledSearchBar.tsx","ui/Loading.tsx","ManageInventory/ManageInventory.tsx","context/getSuspendedSaleQuery.ts","context/deleteSuspendedSaleQuery.ts","context/createSuspendedSaleQuery.ts","context/finishSaleQuery.tsx","context/SaleContext.tsx","utils/sortSaleList.ts","ui/FormikSelectField.tsx","Sale/SaleSearchCard.tsx","Sale/SaleSearchCardList.tsx","utils/price.ts","common/Price.tsx","ui/CardImageTooltip.tsx","Sale/SaleCartItem.tsx","utils/sum.ts","Sale/SaleCartPriceTotal.tsx","Sale/FinishSale.tsx","Sale/SaleCartList.tsx","Sale/PrintList.tsx","Sale/getSuspendedSalesQuery.ts","Sale/SuspendSaleButton.tsx","utils/pluralize.ts","common/TotalCardsLabel.tsx","Sale/Sale.tsx","utils/formatDate.ts","BrowseSales/BrowseSalesItem.tsx","BrowseSales/BrowseSalesList.tsx","BrowseSales/browseSalesQuery.ts","BrowseSales/BrowseSales.tsx","PublicInventory/PublicCard.tsx","PublicInventory/publicCardSearchQuery.ts","PublicInventory/PublicInventory.tsx","BrowseInventory/setNameQuery.ts","ui/FormikControlledSearchBar.tsx","ui/FormikDropdown.tsx","context/ReceivingContext.tsx","BrowseInventory/BrowseInventoryForm.tsx","BrowseInventory/BrowseInventoryRow.tsx","BrowseInventory/filteredCardsQuery.ts","BrowseInventory/BrowseInventory.tsx","Login/Login.tsx","Logout/Logout.tsx","context/receivingQuery.tsx","Receiving/ReceivingSearchItem.tsx","Receiving/ReceivingCartItem.tsx","Receiving/CashReport.tsx","Receiving/ReceivingListModal.tsx","Receiving/ReceivingListTotals.tsx","Receiving/printCashReport.ts","Receiving/ReceivingCart.tsx","Receiving/Receiving.tsx","AuthenticatedRoute.tsx","LandingPage/clubhouse_products.png","LandingPage/tables.jpg","LandingPage/learn_to_play.jpg","LandingPage/ch2.jpg","LandingPage/Home.tsx","BrowseReceiving/browseReceivingQuery.ts","ui/MetaData.tsx","utils/displayEmpty.ts","BrowseReceiving/receivedByIdQuery.ts","BrowseReceiving/BrowseReceivingListDialog.tsx","BrowseReceiving/BrowseReceivingItem.tsx","ui/FormikNativeDatePicker.tsx","BrowseReceiving/BrowseReceivingFilterDialog.tsx","ui/Placeholder.tsx","BrowseReceiving/BrowseReceiving.tsx","NavBar/NavLinks.tsx","NavBar/NavBar.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["REACT_APP_ENVIRONMENT","process","env","getPrefix","FINISH_SALE","GET_CARD_FROM_ALL_LOCATIONS","ADD_CARD_TO_INVENTORY","RECEIVE_CARDS","GET_CARDS_BY_FILTER","GET_SET_NAMES","SUSPEND_SALE","LOGIN","GET_SALES_BY_TITLE","RECEIVING","GET_CARDS_WITH_INFO_PUBLIC","GET_CARDS_WITH_INFO","AUTOCOMPLETE","GET_LIVE_PRICE","makeAuthHeader","Authorization","localStorage","getItem","loginQuery","username","password","currentLocation","a","axios","post","toLowerCase","headers","data","AuthContext","React","createContext","loggedIn","currentUser","handleLogout","handleLogin","Promise","useAuthContext","useContext","AuthProvider","children","useState","setLoggedIn","setCurrentLocation","setCurrentUser","token","setItem","console","log","Provider","value","removeItem","allLocationInventoryQuery","title","get","params","StyledContainer","styled","display","FlexContainer","alignItems","marginLeft","QohLabel","label","Label","color","undefined","image","Detail","TotalStoreInventory","searchResults","ch1","foilQty","nonfoilQty","ch2","quantities","setQuantities","loading","setLoading","useEffect","Loader","active","inline","size","Header","sub","createDisplayName","card","name","frame_effects","border_color","lang","set","foil","nonfoil","promo_types","displayName","includes","length","toUpperCase","getCardImage","myImage","image_uris","normal","e","card_faces","ScryfallCard","id","printed_name","set_name","rarity","colors","type_line","display_name","cardImage","color_identity","tcgplayer_id","qoh","this","cardSearchQuery","cardName","inStockOnly","matchInStock","map","d","InventoryContext","changeCardQuantity","handleSearchSelect","InventoryProvider","setSearchResults","term","cards","copiedState","targetIndex","findIndex","ToastContainer","Message","createToast","header","message","duration","toaster","notify","compact","position","StyledImage","Image","boxShadow","zIndex","transition","CardImage","hover","hovered","setHovered","src","onMouseOver","onMouseOut","style","transform","finishes","key","text","cardConditions","checkCardFinish","selectedFinish","finishDisabled","displayFinishCondition","finishCondition","FOIL_NM","FOIL_LP","FOIL_MP","FOIL_HP","NONFOIL_NM","NONFOIL_LP","NONFOIL_MP","NONFOIL_HP","parseQoh","createInventoryLineItems","inventoryQty","matchStrings","matches","quantity","filter","m","LabelWithPopup","popupLineItems","Popup","content","msg","trigger","QohLabels","foilQuantity","nonfoilQuantity","foilLineItems","nonfoilLineItems","LANG_CODES","en","es","fr","de","it","pt","ja","ko","ru","zhs","zht","he","la","grc","ar","sa","px","Language","languageCode","marketPriceQuery","scryfallId","Axios","marketPrices","medianPrices","LabelStyle","props","displayPrice","price","toFixed","MarketPrice","finish","round","showMid","market","setMarket","median","setMedian","isFoil","_isMounted","Number","n","loader","Icon","Math","ceil","StyledIcon","fontSize","SetIcon","rarityClass","className","TcgPriceButton","tcgId","tcgUrl","Button","icon","disabled","labelPosition","as","href","target","CardHeader","Item","addCardToInventoryQuery","payload","validate","errors","isInteger","ManageInventoryListItem","setSelectedFinish","initialFormValues","selectedCondition","onSubmit","resetForm","parseInt","cardInfo","$","focus","select","useFormik","initialValues","validateOnMount","values","handleSubmit","setFieldValue","isSubmitting","isValid","Paper","variant","Box","p","Group","divided","Content","Description","Form","Field","control","Input","type","onChange","_","onFocus","Select","options","primary","onClick","HeaderText","Typography","SectionText","autocompleteQuery","ControlledSearchBar","onBlur","results","setResults","internalValue","setInternalValue","fetchResults","v","formattedResults","el","debouncedFetch","useCallback","debounce","handleSearchChange","val","handleResultSelect","result","setTimeout","Search","onSearchChange","onResultSelect","placeholder","selectFirstResult","Loading","justifyContent","width","py","CircularProgress","ManageInventory","setTerm","Grid","container","justify","Divider","Segment","spacing","item","xs","getSuspendedSaleQuery","saleId","deleteSuspendedSaleQuery","delete","createSuspendedSaleQuery","finishSaleQuery","defaultSuspendedSale","_id","notes","list","SaleContext","saleListCards","searchTerm","suspendedSale","addToSaleList","removeFromSaleList","restoreSale","suspendSale","deleteSuspendedSale","finalizeSale","resetSaleState","SaleProvider","setSaleListCards","setSearchTerm","setSuspendedSale","sale","modeledData","c","response","customerName","saleList","ops","sale_data","Sale","saleID","qtyToSell","oldState","newCard","idx","splice","push","ORDER","helpSort","arrayConst","colorsLength","cardFace","sort","b","localeCompare","indexOf","sortSaleList","newState","FormikSelectField","error","SaleSearchCard","conditionSelectOptions","removeZeroedQuantites","pickBy","Object","entries","conditionFinish","qty","split","join","createConditionOptions","selectedFinishCondition","quantityToSell","defaultValue","castVal","parseFloat","step","BrowseCardList","isNaN","getPrice","DisplayPrice","num","useStyles","makeStyles","transparentBackground","backgroundColor","borderRounded","borderRadius","CardImageTooltip","Tooltip","placement","classes","tooltip","SaleCartItem","verticalAlign","Column","tablet","computer","cursor","Price","textAlign","circular","sum","nums","reduce","acc","curr","SaleCartPriceTotal","total","FinishSale","submit","setSubmit","showModal","setShowModal","handleFinalizeSale","modalTrigger","floated","Modal","basic","open","inverted","Actions","SaleCartList","clearing","PrintWrapper","div","PrintList","componentRef","useRef","handlePrint","useReactToPrint","current","ref","slc","getSuspendedSalesQuery","ClearMargin","CharLimit","SuspendSaleButton","saleListLength","sales","setSales","setSaleID","modalOpen","setModalOpen","setCustomerName","setNotes","setDisabled","suspendBtn","restoreBtn","deleteBtn","loadingBtn","setLoadingBtn","getSales","suspendedSales","clearFields","submitSuspendSale","submitRestoreSale","submitDeleteSale","Fragment","columns","stackable","relaxed","substring","TextArea","fluid","s","info","pluralize","word","TotalCardsLabel","listLength","lg","formatDate","date","moment","format","BrowseSalesItem","card_list","quantitySold","Table","Row","Cell","createTime","BrowseSalesList","celled","unstackable","HeaderCell","Body","browseSalesQuery","BrowseSales","salesList","setSalesList","Wrapper","InventoryWrapper","InventoryRow","ImageWrapper","cardImageRatio","SurImage","PublicCard","publicCardSearchQuery","GridContainer","gridGap","gridTemplateColumns","justifyItems","StyledFormGroup","initialState","selectedLocation","initialFormState","locationOptions","PublicInventory","state","setState","formSubmitted","setFormSubmitted","fetchCards","location","widths","Subheader","setNameQuery","FormikControlledSearchBar","event","element","FormikDropdown","Trade","Dropdown","formatDropdownOptions","priceOperatorDropdownOptions","finishDropdownOptions","sortByDropdownOptions","sortByDirectionDropdownOptions","sortByColorDropdownOptions","colorSpecificityDropdownOptions","typeLineOptions","frameOptions","initialFilters","setName","priceOperator","sortBy","colorsArray","sortByDirection","colorSpecificity","typeLine","frame","BrowseInventoryForm","doSubmit","editionDropdownOptions","setEditionDropdownOptions","names","setNameOptions","concatWithBlankOption","handleChange","search","multiple","conditionMap","NM","LP","MP","HP","BrowseInventoryRow","quantityInStock","image_uri","condition","filteredCardsQuery","filters","page","BrowseInventory","count","currentPage","numPages","isLoading","cachedFilters","showPages","searchTouched","fetchData","pages","range","slice","showLeftPageButtons","showRightPageButtons","Container","Dimmer","marginTop","secondary","striped","colSpan","Menu","Footer","LoginContainer","FormContainer","locationDropdownOptions","Login","validateOnChange","to","raised","Logout","receivingQuery","customerContact","TRADE_TYPES","CASH","Cash","CREDIT","Credit","defaultContext","receivingList","addToList","removeFromList","activeTradeType","selectAll","commitToInventory","resetSearchResults","ReceivingContext","ReceivingProvider","setReceivingList","cardsToCommit","creditPrice","cashPrice","marketPrice","tradeType","previousState","cardsToAdd","Array","uuid_key","uuid","selectType","ReceivingSearchItem","handleFocus","Error","handleInventoryAdd","min","TRADE_TYPE","ReceivingCartItem","whiteSpace","CashReport","countByPriceAndID","chain","temp_uuid","groupBy","mapValues","mergedWithQty","uniqBy","tradeQty","totalCashOut","sumBy","ReceivingListModal","cashTotal","creditTotal","closeOnDimmerClick","onClose","scrolling","List","FlexRow","FlexCol","StatisticColor","Statistic","ReceivingListTotals","showCashModal","setShowCashModal","Or","divToPrint","document","getElementById","popup","window","write","innerHTML","close","printCashReport","Value","ReceivingCart","Receiving","AdminOnly","AdminRoute","light","main","dark","primaryRgb","desktopMediaQuery","tabletMediaQuery","HeroImageContainer","height","rounded","LocationImageContainer","ImageGradient","backgroundImage","ImageGradient2","HeroText","h1","SubheaderText","HeaderContainer","flexDirection","padding","ServicesContainer","gridTemplateRows","LocationsContainer","LocationContainer","TextWidth","IconContainer","SectionDivider","bottom","paddingLeft","paddingBottom","paddingRight","paddingTop","Home","learn_to_play","clubhouse_products","rel","link","browseReceivingQuery","startDate","endDate","meta","MetaData","displayEmpty","str","receivedByIdQuery","receivedId","BrowseReceivingListDialog","setData","Dialog","maxWidth","fullWidth","DialogTitle","DialogContent","arr","received_cards","created_at","created_by","customer_name","customer_contact","bulk_card_data","trade","modeledCard","ListItem","ListItemText","DialogActions","BrowseReceivingItem","received","dialogOpen","setDialogOpen","received_card_list","r","Card","CardActionArea","disableRipple","CardContent","FormikNativeDatePicker","max","BrowseReceivingFilterDialog","onDialogClose","enableReinitialize","disableElevation","typography","font","fontWeight","fontWeightBold","flexContainer","minHeight","Placeholder","subtract","BrowseReceiving","obj1","obj2","setFilters","receivedList","setReceivedList","formValues","pb","md","JSON","stringify","rl","NavLinks","pathname","useLocation","button","component","RouterLink","selected","replace","ListItemIcon","palette","flexGrow","menuLinkText","common","white","menuButton","marginRight","NavBar","drawerOpen","setDrawerOpen","AppBar","Toolbar","IconButton","edge","Drawer","anchor","direction","align","version","contentContainer","theme","createMuiTheme","App","ThemeProvider","exact","path","Boolean","hostname","match","ReactDOM","render","basename","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2377c6c1.chunk.js","sourcesContent":["// Maps all GCF and Scryfall API endpoints for code re-use\nconst { REACT_APP_ENVIRONMENT } = process.env;\n\n/**\n * Check the environment for dev - if dev, we reach out\n * to all endpoints appended by `_test` instead of production\n */\nconst env = REACT_APP_ENVIRONMENT === 'development' ? '_test' : '';\n\n/**\n * Asserts the development env and returns the proper path prefix for resources\n */\nconst getPrefix = () => {\n    return REACT_APP_ENVIRONMENT === 'development'\n        ? 'http://localhost:7331'\n        : 'https://clubhouse-collection.appspot.com';\n};\n\nexport const FINISH_SALE = `${getPrefix()}/auth/finishSale`;\nexport const GET_CARD_FROM_ALL_LOCATIONS = `${getPrefix()}/getCardFromAllLocations`;\nexport const ADD_CARD_TO_INVENTORY = `${getPrefix()}/auth/addCardToInventory`;\nexport const RECEIVE_CARDS = `${getPrefix()}/auth/receiveCards`;\nexport const GET_CARDS_BY_FILTER = `${getPrefix()}/auth/getCardsByFilter`;\nexport const GET_SET_NAMES = `${getPrefix()}/auth/getDistinctSetNames`;\nexport const SUSPEND_SALE = `${getPrefix()}/auth/suspendSale`;\nexport const LOGIN = `${getPrefix()}/jwt`;\nexport const GET_SALES_BY_TITLE = `${getPrefix()}/auth/getSaleByTitle`;\nexport const RECEIVING = `${getPrefix()}/auth/getReceivedCards`;\nexport const GET_ALL_SALES = `${getPrefix()}/auth/allSales`;\nexport const GET_CARDS_WITH_INFO_PUBLIC = `${getPrefix()}/getCardsWithInfo`;\nexport const GET_CARDS_WITH_INFO = `${getPrefix()}/auth/getCardsWithInfo`;\nexport const AUTOCOMPLETE = `${getPrefix()}/autocomplete`;\nexport const SCRYFALL_SEARCH = 'https://api.scryfall.com/cards/search';\nexport const GET_LIVE_PRICE = `https://us-central1-clubhouse-collection.cloudfunctions.net/getPriceFromTcg${env}`;\n","/**\n * This function is a helper for Axios, it yields an object for Axios params\n */\nexport default function makeAuthHeader() {\n    const header = {\n        Authorization: `Bearer ${localStorage.getItem('clubhouse_JWT')}`,\n    };\n    return header;\n}\n","import axios from 'axios';\nimport { LOGIN } from '../utils/api_resources';\nimport makeAuthHeader from '../utils/makeAuthHeader';\n\ntype ClubhouseLocation = 'ch1' | 'ch2';\n\ninterface ResponseData {\n    token: string;\n}\n\nconst loginQuery = async (\n    username: string,\n    password: string,\n    currentLocation: ClubhouseLocation\n) => {\n    try {\n        const { data } = await axios.post<ResponseData>(\n            LOGIN,\n            {\n                username: username.toLowerCase(),\n                password,\n                currentLocation,\n            },\n            { headers: makeAuthHeader() }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default loginQuery;\n","import React, { FC, useContext, useState } from 'react';\nimport loginQuery from './loginQuery';\n\ninterface Props {}\n\nexport type ClubhouseLocation = 'ch1' | 'ch2';\n\ninterface Context {\n    loggedIn: boolean;\n    handleLogin: (\n        username: string,\n        password: string,\n        currentLocation: ClubhouseLocation\n    ) => Promise<any>;\n    handleLogout: () => void;\n    currentLocation: ClubhouseLocation | null;\n    currentUser: string | null;\n}\n\nexport const AuthContext = React.createContext<Context>({\n    loggedIn: false,\n    currentLocation: null,\n    currentUser: null,\n    handleLogout: () => null,\n    handleLogin: () => new Promise(() => null),\n});\n\nexport const useAuthContext = () => useContext(AuthContext);\n\nconst AuthProvider: FC<Props> = ({ children }) => {\n    const [loggedIn, setLoggedIn] = useState(\n        !!localStorage.getItem('clubhouse_JWT')\n    );\n\n    const [\n        currentLocation,\n        setCurrentLocation,\n    ] = useState<ClubhouseLocation | null>(\n        localStorage.getItem('currentLocation') as ClubhouseLocation\n    );\n\n    const [currentUser, setCurrentUser] = useState<string | null>(\n        localStorage.getItem('currentUser')\n    );\n\n    const handleLogin = async (\n        username: string,\n        password: string,\n        currentLocation: ClubhouseLocation\n    ) => {\n        try {\n            const data = await loginQuery(username, password, currentLocation);\n\n            if (data.token) {\n                localStorage.setItem('clubhouse_JWT', data.token);\n                setLoggedIn(!!localStorage.getItem('clubhouse_JWT'));\n\n                localStorage.setItem('currentLocation', currentLocation);\n                setCurrentLocation(currentLocation);\n\n                localStorage.setItem('currentUser', username);\n                setCurrentUser(username);\n            }\n\n            return data;\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const handleLogout = () => {\n        localStorage.removeItem('clubhouse_JWT');\n        setLoggedIn(!!localStorage.getItem('clubhouse_JWT'));\n\n        localStorage.removeItem('currentLocation');\n        setCurrentLocation(null);\n\n        localStorage.removeItem('currentUser');\n        setCurrentUser(null);\n    };\n\n    return (\n        <AuthContext.Provider\n            value={{\n                loggedIn,\n                currentLocation,\n                currentUser,\n                handleLogin,\n                handleLogout,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport default AuthProvider;\n","import axios from 'axios';\nimport { GET_CARD_FROM_ALL_LOCATIONS } from '../utils/api_resources';\n\ninterface Quantities {\n    foilQty: number;\n    nonfoilQty: number;\n}\n\nexport interface ResponseData {\n    ch1: Quantities;\n    ch2: Quantities;\n}\n\ninterface Payload {\n    title: string;\n}\n\n/**\n * Fetches total inventory for the given card name across all store locations\n */\nconst allLocationInventoryQuery = async ({ title }: Payload) => {\n    try {\n        const { data } = await axios.get<ResponseData>(\n            GET_CARD_FROM_ALL_LOCATIONS,\n            {\n                params: { title },\n            }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default allLocationInventoryQuery;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Header, Label, Loader } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport allLocationInventoryQuery, {\n    ResponseData,\n} from './allLocationInventoryQuery';\n\nconst StyledContainer = styled('div')({\n    display: 'inline',\n});\n\nconst FlexContainer = styled('div')({\n    display: 'flex',\n    alignItems: 'center',\n    '& > *': {\n        marginLeft: '10px',\n    },\n});\n\ninterface QohLabelProps {\n    label: string;\n    value: number;\n}\n\nconst QohLabel: FC<QohLabelProps> = ({ label, value }) => (\n    <Label color={value > 0 ? 'blue' : undefined} image>\n        {label}\n        <Label.Detail>{value}</Label.Detail>\n    </Label>\n);\n\ninterface Props {\n    title: string;\n    searchResults: ScryfallCard[];\n}\n\n// TODO: refetch on result set change\nconst TotalStoreInventory: FC<Props> = ({ title, searchResults }) => {\n    const [quantities, setQuantities] = useState<ResponseData>({\n        ch1: { foilQty: 0, nonfoilQty: 0 },\n        ch2: { foilQty: 0, nonfoilQty: 0 },\n    });\n\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                setLoading(true);\n                const data = await allLocationInventoryQuery({ title });\n                setQuantities(data);\n                setLoading(false);\n            } catch (err) {\n                console.log(err);\n            }\n        })();\n    }, [title, searchResults]);\n\n    if (loading) {\n        return (\n            <FlexContainer>\n                <span>Loading totals for all locations</span>\n                <div>\n                    <Loader active inline size=\"small\" />\n                </div>\n            </FlexContainer>\n        );\n    }\n\n    return (\n        <FlexContainer>\n            <div>\n                <Header sub>Beaverton totals:</Header>\n                <StyledContainer>\n                    <QohLabel label=\"Foil\" value={quantities.ch1.foilQty} />\n                    <QohLabel\n                        label=\"Nonfoil\"\n                        value={quantities.ch1.nonfoilQty}\n                    />\n                </StyledContainer>\n            </div>\n            <div>\n                <Header sub>Hillsboro totals:</Header>\n                <StyledContainer>\n                    <QohLabel label=\"Foil\" value={quantities.ch2.foilQty} />\n                    <QohLabel\n                        label=\"Nonfoil\"\n                        value={quantities.ch2.nonfoilQty}\n                    />\n                </StyledContainer>\n            </div>\n        </FlexContainer>\n    );\n};\n\nexport default TotalStoreInventory;\n","import { ScryfallCard } from './ScryfallCard';\n\ntype Card = Pick<\n    ScryfallCard,\n    | 'name'\n    | 'frame_effects'\n    | 'border_color'\n    | 'lang'\n    | 'set'\n    | 'foil'\n    | 'nonfoil'\n    | 'promo_types'\n>;\n\n/** Computes the proper displayName for a card, depending on its properties */\nconst createDisplayName = (card: Card) => {\n    const {\n        name,\n        frame_effects,\n        border_color,\n        lang,\n        set,\n        foil,\n        nonfoil,\n        promo_types,\n    } = card;\n\n    let displayName: string = name;\n\n    // Covers strixhaven etched foil mystical archive cards\n    if (set === 'sta' && foil === true && nonfoil === false) {\n        displayName += ` (Etched foil)`;\n    } else if (promo_types.includes('godzillaseries')) {\n        // Covers cards like Godzilla series\n        displayName += ` (IP series)`;\n    } else if (frame_effects.includes('showcase')) {\n        // Covers showcase cards like comic-art Illuna, Apex of Wishes\n        displayName += ` (Showcase)`;\n    } else if (frame_effects.length === 0 && border_color === 'borderless') {\n        // Covers cards like comic-art Vivien, Monsters' Advocate\n        displayName += ` (Borderless)`;\n    } else if (frame_effects.includes('extendedart')) {\n        // Covers cards with extended left and roght border art\n        displayName += ` (Extended art)`;\n    }\n\n    if (lang !== 'en') displayName += ` (${lang.toUpperCase()})`;\n\n    return displayName;\n};\n\nexport default createDisplayName;\n","import { ScryfallCard } from './ScryfallCard';\n\nconst getCardImage = (card: ScryfallCard) => {\n    let myImage: string;\n\n    try {\n        // If normal prop doesn't exist, move to catch block for flip card faces\n        myImage = card.image_uris.normal;\n    } catch (e) {\n        myImage = card.card_faces[0].image_uris.normal;\n    }\n\n    return myImage;\n};\nexport default getCardImage;\n","import createDisplayName from './createDisplayName';\nimport getCardImage from './getCardImage';\n\n// Language codes from Scryfall. See https://scryfall.com/docs/api/languages for reference.\nexport type LanguageCode =\n    | 'en'\n    | 'es'\n    | 'fr'\n    | 'de'\n    | 'it'\n    | 'pt'\n    | 'ja'\n    | 'ko'\n    | 'ru'\n    | 'zhs'\n    | 'zht'\n    | 'he'\n    | 'la'\n    | 'grc'\n    | 'ar'\n    | 'sa'\n    | 'px';\n\nexport type FinishCondition =\n    | 'FOIL_NM'\n    | 'FOIL_LP'\n    | 'FOIL_MP'\n    | 'FOIL_HP'\n    | 'NONFOIL_NM'\n    | 'NONFOIL_LP'\n    | 'NONFOIL_MP'\n    | 'NONFOIL_HP';\n\nexport interface QOH {\n    FOIL_NM: number;\n    FOIL_LP: number;\n    FOIL_MP: number;\n    FOIL_HP: number;\n    NONFOIL_NM: number;\n    NONFOIL_LP: number;\n    NONFOIL_MP: number;\n    NONFOIL_HP: number;\n}\n\nexport interface ImageURIs {\n    normal: string;\n}\n\nexport interface CardFace {\n    colors: string[];\n    type_line: string;\n    color_identity: string[];\n    image_uris: ImageURIs;\n}\n\nexport interface ScryfallApiCard {\n    id: string;\n    name: string;\n    printed_name: string;\n    set: string;\n    set_name: string;\n    rarity: string;\n    image_uris: ImageURIs;\n    card_faces: CardFace[];\n    nonfoil: boolean;\n    foil: boolean;\n    colors: string[];\n    type_line: string;\n    frame_effects: string[];\n    lang: LanguageCode;\n    border_color: string;\n    display_name: string;\n    cardImage: string;\n    color_identity: string[];\n    qoh?: Partial<QOH>;\n    quantity?: number;\n    qtyToSell?: number;\n    finishCondition?: string;\n    price?: number;\n    promo_types?: string[];\n    tcgplayer_id?: number;\n}\n\n/**\n * TODO: We should return this from the API. The backend should control this data shape\n *\n * This class wraps the Scryfall API request data and models it to something we can control.\n * Also acts as a safeguard for any future updates to Scryfall's API data model and makes\n * the code easier to maintain and debug.\n */\nexport class ScryfallCard {\n    public id: string;\n    public name: string;\n    public printed_name: string | null;\n    public set: string;\n    public set_name: string;\n    public rarity: string;\n    public image_uris: { normal: string };\n    public card_faces: CardFace[];\n    public nonfoil: boolean;\n    public foil: boolean;\n    public colors: string[];\n    public type_line: string;\n    public frame_effects: string[];\n    public lang: LanguageCode;\n    public border_color: string;\n    public display_name: string;\n    public cardImage: string;\n    public color_identity: string[];\n    public promo_types: string[];\n    public tcgplayer_id: number | null;\n    public qoh: Partial<QOH>;\n\n    public constructor(card: ScryfallApiCard) {\n        this.id = card.id;\n        this.name = card.name;\n        this.printed_name = card.printed_name || null;\n        this.set = card.set;\n        this.set_name = card.set_name;\n        this.rarity = card.rarity;\n        this.image_uris = card.image_uris || null;\n        this.card_faces = card.card_faces || null;\n        this.nonfoil = card.nonfoil;\n        this.foil = card.foil;\n        this.colors = card.colors;\n        this.type_line = card.type_line;\n        this.frame_effects = card.frame_effects || [];\n        this.lang = card.lang;\n        this.border_color = card.border_color;\n        this.color_identity = card.color_identity || null;\n        this.promo_types = card.promo_types || [];\n        this.cardImage = getCardImage(this);\n        this.display_name = createDisplayName(this);\n        this.tcgplayer_id = card.tcgplayer_id || null;\n        this.qoh = card.qoh ? card.qoh : {};\n    }\n}\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { ScryfallApiCard, ScryfallCard } from '../utils/ScryfallCard';\nimport { GET_CARDS_WITH_INFO } from '../utils/api_resources';\n\ninterface Params {\n    cardName: string;\n    inStockOnly: boolean;\n}\n\n/**\n * Fetches cards from the DB by title when a user selects a title after querying.\n * This function merges the data (inventory quantity and card objects) from two endpoints into one array.\n */\nconst cardSearchQuery = async ({ cardName, inStockOnly }: Params) => {\n    try {\n        const { data } = await axios.get<ScryfallApiCard[]>(\n            GET_CARDS_WITH_INFO,\n            {\n                params: {\n                    title: cardName,\n                    matchInStock: inStockOnly,\n                },\n                headers: makeAuthHeader(),\n            }\n        );\n\n        return data.map((d) => new ScryfallCard(d));\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default cardSearchQuery;\n","import React, { createContext, FC, useState } from 'react';\nimport { QOH, ScryfallCard } from '../utils/ScryfallCard';\nimport cardSearchQuery from './cardSearchQuery';\n\ninterface Props {}\n\ninterface Context {\n    searchResults: ScryfallCard[];\n    changeCardQuantity: (id: string, qoh: Partial<QOH>) => void;\n    handleSearchSelect: (term: string) => void;\n}\n\nexport const InventoryContext = createContext<Context>({\n    searchResults: [],\n    changeCardQuantity: () => null,\n    handleSearchSelect: () => null,\n});\n\nconst InventoryProvider: FC<Props> = ({ children }) => {\n    const [searchResults, setSearchResults] = useState<ScryfallCard[]>([]);\n\n    const handleSearchSelect = async (term: string) => {\n        const cards = await cardSearchQuery({\n            cardName: term,\n            inStockOnly: false,\n        });\n\n        setSearchResults(cards);\n    };\n\n    const changeCardQuantity = (id: string, qoh: Partial<QOH>) => {\n        const copiedState = [...searchResults];\n        const targetIndex = copiedState.findIndex((e) => e.id === id);\n        copiedState[targetIndex].qoh = qoh;\n        setSearchResults(copiedState);\n    };\n\n    return (\n        <InventoryContext.Provider\n            value={{ searchResults, changeCardQuantity, handleSearchSelect }}\n        >\n            {children}\n        </InventoryContext.Provider>\n    );\n};\n\nexport default InventoryProvider;\n","import React from 'react';\nimport { Message } from 'semantic-ui-react';\nimport toaster from 'toasted-notes';\nimport styled from 'styled-components';\n\nconst ToastContainer = styled(Message)`\n    position: relative;\n    right: 10px;\n    bottom: 10px;\n`;\n\ninterface CreateToastArgs {\n    color: string;\n    header: string;\n    message?: string;\n    duration?: number;\n}\n\nconst createToast = ({\n    color,\n    header,\n    message,\n    duration = 2000,\n}: CreateToastArgs) => {\n    return toaster.notify(\n        () => (\n            <ToastContainer color={color} compact>\n                <Message.Header>{header}</Message.Header>\n                {message}\n            </ToastContainer>\n        ),\n        {\n            position: 'bottom-right',\n            duration: duration,\n        }\n    );\n};\n\nexport default createToast;\n","import React, { FC, useState } from 'react';\nimport { Image } from 'semantic-ui-react';\nimport styled from 'styled-components';\n\ninterface Props {\n    image: string;\n    hover?: boolean;\n}\n\nconst StyledImage = styled(Image)({\n    boxShadow: '2px 2px 5px 0 rgba(0,0,0,.25)',\n    zIndex: 10,\n    transition: 'all .2s ease-in-out',\n});\n\nconst CardImage: FC<Props> = ({ image, hover }) => {\n    const [hovered, setHovered] = useState<boolean>(false);\n\n    return (\n        <StyledImage\n            src={image}\n            onMouseOver={() => (hover ? setHovered(true) : null)}\n            onMouseOut={() => (hover ? setHovered(false) : null)}\n            style={{\n                transform: `${hovered ? 'scale(1.75)' : 'scale(1)'}`,\n            }}\n        />\n    );\n};\n\nexport default CardImage;\n","export const finishes = [\n    { key: 'NONFOIL', text: 'Nonfoil', value: 'NONFOIL' },\n    { key: 'FOIL', text: 'Foil', value: 'FOIL' },\n];\n\nexport const cardConditions = [\n    { key: 'NM', text: 'Near Mint', value: 'NM' },\n    { key: 'LP', text: 'Light Play', value: 'LP' },\n    { key: 'MP', text: 'Moderate Play', value: 'MP' },\n    { key: 'HP', text: 'Heavy Play', value: 'HP' },\n];\n","export type Finish = 'FOIL' | 'NONFOIL';\n\ninterface CardFinishState {\n    selectedFinish: Finish;\n    finishDisabled: boolean;\n}\n\n/**\n * Seeds state from props. Used to determine if cards have only foil, nonfoil, or both printings\n * from their `foil` and `nonfoil` properties\n *\n * @param {Boolean} nonfoilProp\n * @param {Boolean} foilProp\n */\nexport default function checkCardFinish(\n    nonfoil: boolean,\n    foil: boolean\n): CardFinishState {\n    if (!nonfoil && foil) {\n        return { selectedFinish: 'FOIL', finishDisabled: true };\n    } else if (nonfoil && !foil) {\n        return { selectedFinish: 'NONFOIL', finishDisabled: true };\n    } else {\n        return { selectedFinish: 'NONFOIL', finishDisabled: false };\n    }\n}\n","import { QOH } from '../utils/ScryfallCard';\n\ntype FinishConditionLabels = Record<keyof QOH, string>;\n\nconst displayFinishCondition = (finishCondition: keyof QOH) => {\n    const finishConditionLabels: FinishConditionLabels = {\n        FOIL_NM: 'Foil (NM)',\n        FOIL_LP: 'Foil (LP)',\n        FOIL_MP: 'Foil (MP)',\n        FOIL_HP: 'Foil (HP)',\n        NONFOIL_NM: 'Nonfoil (NM)',\n        NONFOIL_LP: 'Nonfoil (LP)',\n        NONFOIL_MP: 'Nonfoil (MP)',\n        NONFOIL_HP: 'Nonfoil (HP)',\n    };\n\n    return finishConditionLabels[finishCondition];\n};\n\nexport default displayFinishCondition;\n","import { QOH } from './ScryfallCard';\n\nexport default function parseQoh(qoh: Partial<QOH>) {\n    const foilQty =\n        (qoh.FOIL_NM || 0) +\n        (qoh.FOIL_LP || 0) +\n        (qoh.FOIL_MP || 0) +\n        (qoh.FOIL_HP || 0);\n\n    const nonfoilQty =\n        (qoh.NONFOIL_NM || 0) +\n        (qoh.NONFOIL_LP || 0) +\n        (qoh.NONFOIL_MP || 0) +\n        (qoh.NONFOIL_HP || 0);\n\n    return [foilQty, nonfoilQty] as const;\n}\n","import React, { FC } from 'react';\nimport { Label, Popup } from 'semantic-ui-react';\nimport displayFinishCondition from '../utils/finishCondition';\nimport parseQoh from '../utils/parseQoh';\nimport { QOH } from '../utils/ScryfallCard';\n\nexport const createInventoryLineItems = (\n    inventoryQty: Partial<QOH>,\n    matchStrings: (keyof QOH)[]\n): string[] => {\n    const matches = matchStrings\n        .map((finishCondition) => {\n            const quantity = inventoryQty[finishCondition];\n            if (quantity && quantity > 0)\n                return `${displayFinishCondition(\n                    finishCondition\n                )}: ${quantity}`;\n        })\n        .filter((m): m is string => !!m);\n\n    if (matches.length === 0) return ['None in stock'];\n    return matches;\n};\n\ninterface Props {\n    inventoryQty: Partial<QOH>;\n}\n\ninterface LabelWithPopupProps {\n    quantity: number;\n    label: string;\n    popupLineItems: string[];\n}\n\nconst LabelWithPopup: FC<LabelWithPopupProps> = ({\n    quantity,\n    label,\n    popupLineItems,\n}) => (\n    <Popup\n        content={popupLineItems.map((msg) => (\n            <div>{msg}</div>\n        ))}\n        trigger={\n            <Label color={quantity > 0 ? 'blue' : undefined} image>\n                {label}\n                <Label.Detail>{quantity}</Label.Detail>\n            </Label>\n        }\n    />\n);\n\n// This component parses the `qoh` object from mongo into something more presentable\nconst QohLabels: FC<Props> = ({ inventoryQty }) => {\n    const [foilQuantity, nonfoilQuantity] = parseQoh(inventoryQty);\n\n    const foilLineItems = createInventoryLineItems(inventoryQty, [\n        'FOIL_NM',\n        'FOIL_LP',\n        'FOIL_MP',\n        'FOIL_HP',\n    ]);\n\n    const nonfoilLineItems = createInventoryLineItems(inventoryQty, [\n        'NONFOIL_NM',\n        'NONFOIL_LP',\n        'NONFOIL_MP',\n        'NONFOIL_HP',\n    ]);\n\n    return (\n        <>\n            <LabelWithPopup\n                label=\"Foil\"\n                quantity={foilQuantity}\n                popupLineItems={foilLineItems}\n            />\n            <LabelWithPopup\n                label=\"Nonfoil\"\n                quantity={nonfoilQuantity}\n                popupLineItems={nonfoilLineItems}\n            />\n        </>\n    );\n};\n\nexport default QohLabels;\n","import React, { FC } from 'react';\nimport { Label } from 'semantic-ui-react';\nimport { LanguageCode } from '../utils/ScryfallCard';\n\nconst LANG_CODES: Record<LanguageCode, string> = {\n    en: 'English',\n    es: 'Spanish',\n    fr: 'French',\n    de: 'German',\n    it: 'Italian',\n    pt: 'Portuguese',\n    ja: 'Japanese',\n    ko: 'Korean',\n    ru: 'Russian',\n    zhs: 'Simplified Chinese',\n    zht: 'Traditional Chinese',\n    he: 'Hebrew',\n    la: 'Latin',\n    grc: 'Ancient Greek',\n    ar: 'Arabic',\n    sa: 'Sanskrit',\n    px: 'Phyrexian',\n};\ninterface Props {\n    languageCode: LanguageCode;\n}\n\nconst Language: FC<Props> = ({ languageCode }) => (\n    <Label image color=\"grey\">\n        {LANG_CODES[languageCode]}\n    </Label>\n);\n\nexport default Language;\n","import Axios from 'axios';\nimport { GET_LIVE_PRICE } from '../utils/api_resources';\n\ninterface ResponseData {\n    marketPrices: { foil: number; normal: number };\n    medianPrices: { foil: number; normal: number };\n}\n\ninterface Payload {\n    scryfallId: string;\n}\n\nconst marketPriceQuery = async ({ scryfallId }: Payload) => {\n    try {\n        const { data } = await Axios.get<ResponseData>(GET_LIVE_PRICE, {\n            params: { scryfallId },\n        });\n\n        const { marketPrices, medianPrices } = data;\n\n        return {\n            marketPrices,\n            medianPrices,\n        };\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default marketPriceQuery;\n","import React, { useState, useEffect, FC } from 'react';\nimport { Label, Icon } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport marketPriceQuery from './marketPriceQuery';\n\nconst LabelStyle = styled(Label)`\n    background-color: ${(props) =>\n        !!props.foil ? '#ffcfdf' : null} !important;\n    background-image: ${(props) =>\n        !!props.foil\n            ? 'linear-gradient(90deg, #ffcfdf 0%, #b0f3f1 74%)'\n            : null} !important;\n`;\n\ninterface Response {\n    data: {\n        marketPrices: { foil: number; normal: number };\n        medianPrices: { foil: number; normal: number };\n    };\n}\n\ntype Finish = 'FOIL' | 'NONFOIL';\n\ninterface Props {\n    id: string;\n    finish: Finish;\n    round: boolean;\n    showMid: boolean;\n}\n\n// Rounds the passed number to the nearest fifty cents\nconst roundNearestStep = (n: number) => Math.ceil(n * 2) / 2;\n\nconst displayPrice = (price: number | null) =>\n    !!price ? `$${price.toFixed(2)}` : 'N/A';\n\nconst MarketPrice: FC<Props> = ({ id, finish, round, showMid = true }) => {\n    const [market, setMarket] = useState<number | null>(null);\n    const [median, setMedian] = useState<number | null>(null);\n    const [loading, setLoading] = useState<boolean>(false);\n    const isFoil = finish === 'FOIL';\n\n    useEffect(() => {\n        (async function fetchData() {\n            let _isMounted = true;\n            setLoading(true);\n\n            const { marketPrices, medianPrices } = await marketPriceQuery({\n                scryfallId: id,\n            });\n\n            if (_isMounted) {\n                if (isFoil) {\n                    setMarket(Number(marketPrices.foil));\n                    setMedian(Number(medianPrices.foil));\n                } else {\n                    setMarket(Number(marketPrices.normal));\n                    setMedian(Number(medianPrices.normal));\n                }\n\n                setLoading(false);\n            }\n\n            return () => (_isMounted = false);\n        })();\n    }, [id, finish]);\n\n    const loader = (\n        <span>\n            Loading <Icon loading name=\"spinner\" />\n        </span>\n    );\n\n    return (\n        <>\n            <LabelStyle foil={isFoil}>\n                {loading ? (\n                    loader\n                ) : (\n                    <span>\n                        Mkt.{' '}\n                        {round\n                            ? displayPrice(\n                                  market ? roundNearestStep(market) : null\n                              )\n                            : displayPrice(market)}\n                    </span>\n                )}\n            </LabelStyle>\n            {showMid && (\n                <LabelStyle foil={isFoil}>\n                    {loading ? (\n                        loader\n                    ) : (\n                        <span>Mid. {displayPrice(median)}</span>\n                    )}\n                </LabelStyle>\n            )}\n        </>\n    );\n};\n\nexport default MarketPrice;\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\n\ninterface Props {\n    set: string;\n    rarity?: string;\n}\n\nconst StyledIcon = styled('i')({\n    fontSize: '20px',\n});\n\nconst SetIcon: FC<Props> = ({ set, rarity }) => {\n    const rarityClass = rarity ? `ss-${rarity}` : '';\n    return <StyledIcon className={`ss ss-fw ss-${set} ${rarityClass}`} />;\n};\n\nexport default SetIcon;\n","import React, { FC } from 'react';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport { Label, Item, Button, Icon } from 'semantic-ui-react';\nimport QohLabels from '../common/QohLabels';\nimport Language from '../common/Language';\nimport MarketPrice from '../common/MarketPrice';\nimport { Finish } from '../utils/checkCardFinish';\nimport SetIcon from './SetIcon';\n\ninterface Props {\n    card: ScryfallCard;\n    selectedFinish: Finish;\n    showMid?: boolean;\n    round?: boolean;\n}\n\n// TODO: remove this shim after TCG api approval and integration\nconst TcgPriceButton: FC<{ tcgId: number | null }> = ({ tcgId }) => {\n    const tcgUrl = `https://www.tcgplayer.com/product/${tcgId}`;\n\n    return (\n        <Button\n            icon\n            disabled={!tcgId}\n            color=\"twitter\"\n            labelPosition=\"right\"\n            size=\"mini\"\n            as=\"a\"\n            href={tcgUrl}\n            target=\"_blank\"\n        >\n            {!tcgId ? 'Link unavailable' : 'View on TCG'}\n            <Icon name=\"external share\" />\n        </Button>\n    );\n};\n\nconst CardHeader: FC<Props> = ({\n    card,\n    selectedFinish,\n    showMid = false,\n    round = false,\n}) => {\n    const {\n        id,\n        display_name,\n        set,\n        rarity,\n        set_name,\n        qoh,\n        lang,\n        tcgplayer_id,\n    } = card;\n\n    return (\n        <Item.Header as=\"h3\">\n            {display_name}\n            <SetIcon set={set} rarity={rarity} />\n            <Label color=\"grey\">\n                {set_name} ({set.toUpperCase()})\n            </Label>\n            <QohLabels inventoryQty={qoh} />\n            <MarketPrice\n                id={id}\n                finish={selectedFinish}\n                showMid={showMid}\n                round={round}\n            />\n            <Language languageCode={lang} />\n            <TcgPriceButton tcgId={tcgplayer_id} />\n        </Item.Header>\n    );\n};\n\nexport default CardHeader;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { ADD_CARD_TO_INVENTORY } from '../utils/api_resources';\nimport { QOH } from '../utils/ScryfallCard';\n\ninterface CardInfo {\n    id: string;\n    name: string;\n    set_name: string;\n    set: string;\n}\n\ninterface Payload {\n    quantity: number;\n    finishCondition: string;\n    cardInfo: CardInfo;\n}\n\ninterface ResponseData {\n    _id: string;\n    name: string;\n    set: string;\n    qoh: Partial<QOH>;\n}\n\nconst addCardToInventoryQuery = async (payload: Payload) => {\n    try {\n        const { data } = await axios.post<ResponseData>(\n            ADD_CARD_TO_INVENTORY,\n            payload,\n            { headers: makeAuthHeader() }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default addCardToInventoryQuery;\n","import React, { FC, useContext, useState } from 'react';\nimport { Input, Button, Form, Select, Item } from 'semantic-ui-react';\nimport $ from 'jquery';\nimport { FormikErrors, FormikHelpers, useFormik } from 'formik';\nimport createToast from '../common/createToast';\nimport CardImage from '../common/CardImage';\nimport { finishes, cardConditions } from '../utils/dropdownOptions';\nimport checkCardFinish from '../utils/checkCardFinish';\nimport { InventoryContext } from '../context/InventoryContext';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport CardHeader from '../ui/CardHeader';\nimport addCardToInventoryQuery from './addCardToInventoryQuery';\nimport { Box, Paper } from '@material-ui/core';\n\ninterface Props {\n    card: ScryfallCard;\n}\n\ninterface FormValues {\n    selectedFinish: Finish;\n    selectedCondition: string;\n    quantity: string;\n}\n\ntype Finish = 'FOIL' | 'NONFOIL';\n\nconst validate = ({ quantity }: FormValues) => {\n    let errors: FormikErrors<FormValues> = {};\n\n    if (!Number(quantity) || !Number.isInteger(+quantity) || +quantity > 100) {\n        errors.quantity = 'error';\n    }\n\n    return errors;\n};\n\nconst ManageInventoryListItem: FC<Props> = ({ card }) => {\n    const { foil, nonfoil, name, set_name, set, id, cardImage } = card;\n\n    const [selectedFinish, setSelectedFinish] = useState<Finish>(\n        checkCardFinish(nonfoil, foil).selectedFinish\n    );\n\n    const { changeCardQuantity } = useContext(InventoryContext);\n\n    const initialFormValues: FormValues = {\n        selectedFinish: checkCardFinish(nonfoil, foil).selectedFinish,\n        selectedCondition: 'NM',\n        quantity: '0',\n    };\n\n    const onSubmit = async (\n        { quantity, selectedFinish, selectedCondition }: FormValues,\n        { resetForm }: FormikHelpers<FormValues>\n    ) => {\n        try {\n            const { qoh } = await addCardToInventoryQuery({\n                quantity: parseInt(quantity, 10),\n                finishCondition: `${selectedFinish}_${selectedCondition}`,\n                cardInfo: { id, name, set_name, set },\n            });\n\n            // Imperatively reset the form using Formik actions\n            resetForm();\n\n            changeCardQuantity(id, qoh);\n\n            createToast({\n                color: 'green',\n                header: `${quantity}x ${name} ${\n                    parseInt(quantity, 10) > 0 ? 'added' : 'removed'\n                }!`,\n                duration: 2000,\n            });\n\n            // Highlight the input after successful card add\n            $('#searchBar').focus().select();\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const {\n        values,\n        handleSubmit,\n        setFieldValue,\n        isSubmitting,\n        isValid,\n    } = useFormik({\n        initialValues: initialFormValues,\n        validate,\n        onSubmit,\n        validateOnMount: true,\n    });\n\n    return (\n        <Paper variant=\"outlined\">\n            <Box p={2}>\n                <Item.Group divided>\n                    <Item>\n                        <Item.Image size=\"tiny\">\n                            <CardImage image={cardImage} hover />\n                        </Item.Image>\n                        <Item.Content>\n                            <CardHeader\n                                card={card}\n                                selectedFinish={selectedFinish}\n                                round\n                            />\n                            <Item.Description>\n                                <Form>\n                                    <Form.Group>\n                                        <Form.Field\n                                            control={Input}\n                                            type=\"number\"\n                                            label=\"Quantity\"\n                                            value={values.quantity}\n                                            onChange={(\n                                                _: any,\n                                                { value }: { value: number }\n                                            ) =>\n                                                setFieldValue('quantity', value)\n                                            }\n                                            onFocus={() => {\n                                                if (+values.quantity === 0) {\n                                                    setFieldValue(\n                                                        'quantity',\n                                                        ''\n                                                    );\n                                                }\n                                            }}\n                                        />\n                                        <Form.Field\n                                            label=\"Finish\"\n                                            control={Select}\n                                            value={values.selectedFinish}\n                                            options={finishes}\n                                            disabled={\n                                                checkCardFinish(nonfoil, foil)\n                                                    .finishDisabled\n                                            }\n                                            onChange={(\n                                                _: any,\n                                                { value }: { value: Finish }\n                                            ) => {\n                                                setSelectedFinish(value);\n                                                setFieldValue(\n                                                    'selectedFinish',\n                                                    value\n                                                );\n                                            }}\n                                        />\n                                        <Form.Field\n                                            label=\"Condition\"\n                                            control={Select}\n                                            value={values.selectedCondition}\n                                            options={cardConditions}\n                                            onChange={(\n                                                _: any,\n                                                { value }: { value: string }\n                                            ) =>\n                                                setFieldValue(\n                                                    'selectedCondition',\n                                                    value\n                                                )\n                                            }\n                                        />\n                                        <Form.Button\n                                            label=\"Add to Inventory?\"\n                                            control={Button}\n                                            primary\n                                            disabled={!isValid || isSubmitting}\n                                            onClick={() => handleSubmit()}\n                                            loading={isSubmitting}\n                                        >\n                                            Submit\n                                        </Form.Button>\n                                    </Form.Group>\n                                </Form>\n                            </Item.Description>\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Box>\n        </Paper>\n    );\n};\n\nexport default ManageInventoryListItem;\n","import { Typography } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nexport const HeaderText: FC = ({ children }) => {\n    return <Typography variant=\"h4\">{children}</Typography>;\n};\n\nexport const SectionText: FC = ({ children }) => {\n    return (\n        <Typography variant=\"h6\">\n            <b>{children}</b>\n        </Typography>\n    );\n};\n","import axios from 'axios';\nimport { AUTOCOMPLETE } from '../utils/api_resources';\n\nconst autocompleteQuery = async (cardName: string) => {\n    try {\n        const { data } = await axios.get<string[]>(AUTOCOMPLETE, {\n            params: {\n                title: cardName,\n            },\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default autocompleteQuery;\n","import React, { FC, SyntheticEvent, useCallback, useState } from 'react';\nimport { Search, SearchProps, SearchResultData } from 'semantic-ui-react';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport autocompleteQuery from '../common/autocompleteQuery';\n\ninterface Props {\n    value: string;\n    onChange: (result: string) => void;\n    onBlur?: (event: SyntheticEvent, data: SearchProps) => void;\n}\n\nconst ControlledSearchBar: FC<Props> = ({ value, onChange, onBlur }) => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [results, setResults] = useState<{ title: string }[]>([]);\n    const [internalValue, setInternalValue] = useState<string | undefined>(\n        value\n    );\n\n    const fetchResults = async (v: string) => {\n        setLoading(true);\n        const data = await autocompleteQuery(v);\n        const formattedResults = data.map((el) => ({ title: el }));\n        setResults(formattedResults);\n        setLoading(false);\n    };\n\n    // Cache so it doesn't create a new instance each render\n    const debouncedFetch = useCallback(_.debounce(fetchResults, 500), []);\n\n    // `value` is the search input string\n    const handleSearchChange = async (\n        _: SyntheticEvent,\n        { value: val }: SearchProps\n    ) => {\n        setInternalValue(val);\n\n        // Skip undefined and short internalValues\n        if (!val || val.length < 3) {\n            setResults([]);\n            return;\n        }\n\n        await debouncedFetch(val);\n    };\n\n    const handleResultSelect = async (\n        _: SyntheticEvent,\n        { result }: SearchResultData\n    ) => {\n        // This line is a hacky way to get around the fact that if we just select(), then\n        // when the user manually clicks the first (or any) result in the resultlist, it does not select,\n        // presumably because there is some collision between selecting the resultList element and focusing the input\n        setTimeout(() => $('#searchBar').select(), 10);\n        try {\n            setLoading(true);\n            setInternalValue(result.title);\n            await onChange(result.title);\n            setLoading(false);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    const onFocus = (e: React.MouseEvent<HTMLElement, MouseEvent>) =>\n        (e.target as HTMLInputElement).select();\n\n    return (\n        <Search\n            value={internalValue}\n            onSearchChange={handleSearchChange}\n            onResultSelect={handleResultSelect}\n            loading={loading}\n            results={results}\n            placeholder=\"Enter a card title\"\n            selectFirstResult={true}\n            id=\"searchBar\"\n            onFocus={onFocus}\n            onBlur={onBlur} // Used to clear state in the Browse Inventory feature\n        />\n    );\n};\n\nexport default ControlledSearchBar;\n","import { Box, CircularProgress } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nconst Loading: FC = () => {\n    return (\n        <Box display=\"flex\" justifyContent=\"center\" width={1} py={3}>\n            <CircularProgress />\n        </Box>\n    );\n};\n\nexport default Loading;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Segment, Header, Icon, Divider } from 'semantic-ui-react';\nimport TotalStoreInventory from './TotalStoreInventory';\nimport { InventoryContext } from '../context/InventoryContext';\nimport ManageInventoryListItem from './ManageInventoryListItem';\nimport { Grid } from '@material-ui/core';\nimport { HeaderText } from '../ui/Typography';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport Loading from '../ui/Loading';\n\nexport default function ManageInventory() {\n    const [term, setTerm] = useState<string>('');\n    const [loading, setLoading] = useState<boolean>(false);\n    const { searchResults, handleSearchSelect } = useContext(InventoryContext);\n\n    useEffect(() => {\n        if (term) {\n            (async () => {\n                setLoading(true);\n                await handleSearchSelect(term);\n                setLoading(false);\n            })();\n        }\n    }, [term]);\n\n    return (\n        <>\n            <ControlledSearchBar value={term} onChange={(v) => setTerm(v)} />\n            <br />\n            <Grid container justify=\"space-between\">\n                <HeaderText>Manage Inventory</HeaderText>\n                {searchResults.length > 0 && (\n                    <TotalStoreInventory\n                        searchResults={searchResults}\n                        title={searchResults[0].name}\n                    />\n                )}\n            </Grid>\n            <Divider />\n            {loading ? (\n                <Loading />\n            ) : (\n                <>\n                    {!searchResults.length && (\n                        <Segment placeholder>\n                            <Header icon>\n                                <Icon name=\"search\" />\n                                <em>\n                                    \"For the first time in his life, Grakk felt\n                                    a little warm and fuzzy inside.\"\n                                </em>\n                            </Header>\n                        </Segment>\n                    )}\n                    <Grid container spacing={2}>\n                        {searchResults.map((card) => (\n                            <Grid item xs={12} key={card.id}>\n                                <ManageInventoryListItem card={card} />\n                            </Grid>\n                        ))}\n                    </Grid>\n                </>\n            )}\n        </>\n    );\n}\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { SUSPEND_SALE } from '../utils/api_resources';\nimport { SaleListCard } from './SaleContext';\n\nexport interface SuspendedSale {\n    _id: string;\n    name: string;\n    notes: string;\n    list: SaleListCard[];\n}\n\nconst getSuspendedSaleQuery = async (saleId: string) => {\n    try {\n        const { data } = await axios.get<SuspendedSale>(\n            `${SUSPEND_SALE}/${saleId}`,\n            {\n                headers: makeAuthHeader(),\n            }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default getSuspendedSaleQuery;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { SUSPEND_SALE } from '../utils/api_resources';\n\nconst deleteSuspendedSaleQuery = async (saleId: string) => {\n    try {\n        const { data } = await axios.delete<void>(`${SUSPEND_SALE}/${saleId}`, {\n            headers: makeAuthHeader(),\n        });\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default deleteSuspendedSaleQuery;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { SUSPEND_SALE } from '../utils/api_resources';\nimport { SaleListCard } from './SaleContext';\n\ninterface Payload {\n    customerName: string;\n    notes: string;\n    saleList: SaleListCard[];\n}\n\ninterface ResponseData {\n    ops: [{ name: string }];\n}\n\nconst createSuspendedSaleQuery = async (payload: Payload) => {\n    try {\n        const { data } = await axios.post<ResponseData>(SUSPEND_SALE, payload, {\n            headers: makeAuthHeader(),\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default createSuspendedSaleQuery;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { FINISH_SALE } from '../utils/api_resources';\nimport { Trade } from './ReceivingContext';\nimport { SaleListCard } from './SaleContext';\n\ninterface Payload {\n    cards: SaleListCard[];\n}\n\ninterface ResponseData {\n    sale_data: {\n        Sale: {\n            saleID: string;\n        };\n    };\n}\n\nconst finishSaleQuery = async (payload: Payload) => {\n    try {\n        const { data } = await axios.post<ResponseData>(FINISH_SALE, payload, {\n            headers: makeAuthHeader(),\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default finishSaleQuery;\n","import React, { useState, createContext, FC } from 'react';\nimport $ from 'jquery';\nimport sortSaleList from '../utils/sortSaleList';\nimport createToast from '../common/createToast';\nimport getSuspendedSaleQuery, { SuspendedSale } from './getSuspendedSaleQuery';\nimport deleteSuspendedSaleQuery from './deleteSuspendedSaleQuery';\nimport createSuspendedSaleQuery from './createSuspendedSaleQuery';\nimport finishSaleQuery from './finishSaleQuery';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport cardSearchQuery from './cardSearchQuery';\n\ninterface Props {}\n\ninterface SuspendSaleArgs {\n    customerName: string;\n    notes: string;\n}\n\nexport type SaleListCard = ScryfallCard & {\n    finishCondition: string;\n    qtyToSell: number;\n    price: number;\n};\n\nexport interface SaleContext {\n    saleListCards: SaleListCard[];\n    searchResults: ScryfallCard[];\n    searchTerm: string;\n    suspendedSale: SuspendedSale;\n    handleResultSelect: (term: string) => void;\n    addToSaleList: (\n        card: ScryfallCard,\n        finishCondition: string,\n        qtyToSell: number,\n        price: number\n    ) => void;\n    removeFromSaleList: (id: string, finishCondition: string) => void;\n    restoreSale: (saleId: string) => void;\n    suspendSale: (args: SuspendSaleArgs) => void;\n    deleteSuspendedSale: () => void;\n    finalizeSale: () => void;\n    resetSaleState: () => void;\n}\n\nconst defaultSuspendedSale: SuspendedSale = {\n    _id: '',\n    name: '',\n    notes: '',\n    list: [],\n};\n\nexport const SaleContext = createContext<SaleContext>({\n    saleListCards: [],\n    searchResults: [],\n    searchTerm: '',\n    suspendedSale: defaultSuspendedSale,\n    handleResultSelect: () => null,\n    addToSaleList: () => null,\n    removeFromSaleList: () => null,\n    restoreSale: () => null,\n    suspendSale: () => null,\n    deleteSuspendedSale: () => null,\n    finalizeSale: () => null,\n    resetSaleState: () => null,\n});\n\nexport const SaleProvider: FC<Props> = ({ children }) => {\n    const [saleListCards, setSaleListCards] = useState<SaleListCard[]>([]);\n    const [searchTerm, setSearchTerm] = useState<string>('');\n    const [searchResults, setSearchResults] = useState<ScryfallCard[]>([]);\n    const [suspendedSale, setSuspendedSale] = useState<SuspendedSale>(\n        defaultSuspendedSale\n    );\n\n    /**\n     * Executes after a user selects an autocompleted suggestion\n     */\n    const handleResultSelect = async (term: string) => {\n        const cards = await cardSearchQuery({\n            cardName: term,\n            inStockOnly: true,\n        });\n\n        setSearchResults(cards);\n        setSearchTerm(term);\n\n        if (cards.length === 0) {\n            $('#searchBar').focus().select();\n        }\n    };\n\n    /**\n     * Adds product to the sale list\n     */\n    const addToSaleList = (\n        card: ScryfallCard,\n        finishCondition: string,\n        qtyToSell: number,\n        price: number\n    ) => {\n        const oldState = [...saleListCards];\n\n        const newCard: SaleListCard = {\n            ...card,\n            finishCondition,\n            qtyToSell,\n            price,\n        };\n\n        // Need to make sure same ID's with differing conditions are separate line-items\n        const idx = oldState.findIndex((el) => {\n            return (\n                el.id === newCard.id && el.finishCondition === finishCondition\n            );\n        });\n\n        if (idx !== -1) {\n            oldState.splice(idx, 1, newCard);\n        } else {\n            oldState.push(newCard);\n        }\n\n        setSaleListCards(sortSaleList(oldState));\n    };\n\n    /**\n     * Removes product from the sale list\n     */\n    const removeFromSaleList = (id: string, finishCondition: string) => {\n        const newState = [...saleListCards].filter((c) => {\n            return !(c.id === id && c.finishCondition === finishCondition);\n        });\n\n        setSaleListCards(newState);\n    };\n\n    /**\n     * Restores a sale (assigns a saleList to state) from a suspended sale from the db\n     */\n    const restoreSale = async (id: string) => {\n        try {\n            const sale = await getSuspendedSaleQuery(id);\n\n            const modeledData = sale.list.map((c) => c);\n\n            setSaleListCards(modeledData);\n            setSuspendedSale(sale);\n\n            createToast({\n                color: 'green',\n                header: `You are viewing ${sale.name}'s sale`,\n            });\n        } catch (e) {\n            console.log(e.response);\n            createToast({ color: 'red', header: `Error` });\n        }\n    };\n\n    /**\n     * Suspends a sale (persists it to mongo) via the SuspendedSale component and API\n     */\n    const suspendSale = async ({\n        customerName,\n        notes,\n    }: {\n        customerName: string;\n        notes: string;\n    }) => {\n        const { _id } = suspendedSale;\n\n        try {\n            if (!!_id)\n                // If we're suspended, delete the previous to replace\n                await deleteSuspendedSaleQuery(_id);\n\n            const data = await createSuspendedSaleQuery({\n                customerName: customerName,\n                notes: notes,\n                saleList: saleListCards,\n            });\n\n            resetSaleState();\n\n            createToast({\n                color: 'green',\n                header: `${data.ops[0].name}'s sale was suspended`,\n            });\n        } catch (e) {\n            console.log(e.response);\n            createToast({\n                color: 'red',\n                header: `Error`,\n                message: e.response.data || 'Error suspending sale',\n            });\n        }\n    };\n\n    const deleteSuspendedSale = async () => {\n        try {\n            const { _id, name } = suspendedSale;\n            await deleteSuspendedSaleQuery(_id);\n\n            resetSaleState();\n\n            createToast({\n                color: 'green',\n                header: `${name}'s sale was deleted`,\n            });\n        } catch (e) {\n            console.log(e.response);\n            createToast({\n                color: 'red',\n                header: `Error`,\n                message: e.response.data || 'Error deleting suspended sale',\n            });\n        }\n    };\n\n    /**\n     * Extracts the saleList state and uses it to complete sale\n     */\n    const finalizeSale = async () => {\n        const { _id } = suspendedSale;\n\n        try {\n            // Must delete currently suspended sale to faithfully restore inventory prior to sale\n            if (!!_id) await deleteSuspendedSaleQuery(_id);\n\n            const { sale_data } = await finishSaleQuery({\n                cards: saleListCards,\n            });\n\n            createToast({\n                color: 'green',\n                header: 'Sale created in Lightspeed!',\n                message: `The id number is #${sale_data.Sale.saleID}`,\n            });\n\n            resetSaleState();\n        } catch (e) {\n            createToast({\n                color: 'red',\n                header: 'Error',\n                message: e.response.data || 'Sale was not created',\n            });\n\n            resetSaleState();\n        }\n    };\n\n    const resetSaleState = () => {\n        setSaleListCards([]);\n        setSearchResults([]);\n        setSearchTerm('');\n        setSuspendedSale(defaultSuspendedSale);\n    };\n\n    return (\n        <SaleContext.Provider\n            value={{\n                saleListCards,\n                searchTerm,\n                searchResults,\n                suspendedSale,\n                handleResultSelect,\n                addToSaleList,\n                removeFromSaleList,\n                restoreSale,\n                suspendSale,\n                deleteSuspendedSale,\n                finalizeSale,\n                resetSaleState,\n            }}\n        >\n            {children}\n        </SaleContext.Provider>\n    );\n};\n","import { ScryfallCard } from './ScryfallCard';\n\n/**\n * Takes in an unordered group of cards and sorts them according to The Clubhouse's specs:\n * WUBRG, then multicolor, then colorless, then land, alphabetically within each color/category\n */\nexport default function sortSaleList<T extends ScryfallCard>(cards: T[]) {\n    const ORDER = ['W', 'U', 'B', 'R', 'G', 'MULTI', 'COLORLESS', 'LAND'];\n\n    /**\n     * Main helper function that manages sort order\n     * @param {Object} card\n     */\n    function helpSort(card: ScryfallCard) {\n        let arrayConst = null;\n\n        let colorsLength = null;\n        let cardFace = null;\n\n        try {\n            // If colors don't exist, it's a flip card or storybook frame\n            colorsLength = card.colors.length;\n            cardFace = card;\n        } catch (e) {\n            try {\n                // Storybook frames from Eldraine may throw error\n                colorsLength = card.card_faces[0].colors.length;\n                cardFace = card.card_faces[0];\n            } catch (e) {\n                colorsLength = card.colors.length;\n                cardFace = card;\n            }\n        }\n\n        // Apply logic to return correct constant enum\n        if (colorsLength === 0) {\n            arrayConst = 'COLORLESS';\n        } else if (colorsLength === 1) {\n            arrayConst = cardFace.colors[0];\n        } else if (colorsLength > 1) {\n            arrayConst = 'MULTI';\n        }\n\n        // Drill into colorless cards, if they are lands or not\n        if (arrayConst === 'COLORLESS') {\n            if (cardFace.color_identity) {\n                if (cardFace.color_identity.length === 1) {\n                    arrayConst = cardFace.color_identity[0];\n                }\n                if (cardFace.color_identity.length > 1) {\n                    arrayConst = 'MULTI';\n                }\n            }\n            if (cardFace.type_line.includes('Land')) {\n                arrayConst = 'LAND';\n            }\n        }\n\n        // Final check to guard against a null arrayConst\n        if (!arrayConst) {\n            arrayConst = 'LAND';\n        }\n\n        return arrayConst;\n    }\n\n    const alphaSort = cards.sort((a, b) => {\n        return a.name.localeCompare(b.name);\n    });\n\n    const sorted = alphaSort.sort((a, b) => {\n        return ORDER.indexOf(helpSort(a)) - ORDER.indexOf(helpSort(b));\n    });\n\n    return sorted;\n}\n","import { Form, Select, FormFieldProps } from 'semantic-ui-react';\n\ntype FormSelectFieldProps<T> = {\n    label: string;\n    name: string;\n    onChange: (value: string) => void;\n    options: T[];\n    error?: string;\n} & Omit<FormFieldProps, 'label' | 'name' | 'options' | 'onChange'>;\n\nfunction FormikSelectField<T>({\n    label,\n    name,\n    options,\n    onChange,\n    error,\n    ...props\n}: FormSelectFieldProps<T>) {\n    return (\n        <Form.Field\n            error={error}\n            control={Select}\n            label={label}\n            placeholder={label}\n            options={options}\n            name={name}\n            onChange={(_: any, { value }: { value: string }) => {\n                onChange(value);\n            }}\n            {...props}\n        />\n    );\n}\n\nexport default FormikSelectField;\n","import React, { useContext, FC, ChangeEvent } from 'react';\nimport { Form, Input, Button, Item } from 'semantic-ui-react';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport CardImage from '../common/CardImage';\nimport { SaleContext } from '../context/SaleContext';\nimport { ScryfallCard, QOH } from '../utils/ScryfallCard';\nimport CardHeader from '../ui/CardHeader';\nimport { FormikErrors, useFormik } from 'formik';\nimport FormikSelectField from '../ui/FormikSelectField';\nimport { Box, Paper } from '@material-ui/core';\n\ninterface ConditionOptions {\n    text: string;\n    value: keyof QOH;\n    key: string;\n}\n\n/**\n * Creates a list of conditions for the dropdown menu from the `qoh`\n * Note: Is this not needed if we default select initially?\n * @param {Object} qoh\n * @param {String} id\n */\nfunction createConditionOptions(\n    qoh: Partial<QOH>,\n    id: string\n): ConditionOptions[] {\n    const removeZeroedQuantites = _.pickBy(qoh, (p) => p && p > 0); // Quantites of zero not included\n\n    return Object.entries(removeZeroedQuantites).map((d) => {\n        const [conditionFinish, qty] = d;\n\n        return {\n            text: `${conditionFinish.split('_').join(' | ')} | Qty: ${qty}`,\n            value: conditionFinish as keyof QOH,\n            key: `${id}${conditionFinish}`,\n        };\n    });\n}\n\ntype Finish = 'FOIL' | 'NONFOIL';\n\ninterface FormValues {\n    quantityToSell: number;\n    price: number;\n    selectedFinishCondition: keyof QOH;\n}\n\ninterface Props {\n    card: ScryfallCard;\n}\n\nconst SaleSearchCard: FC<Props> = ({ card }) => {\n    const { addToSaleList } = useContext(SaleContext);\n\n    const conditionSelectOptions = createConditionOptions(card.qoh, card.id);\n\n    const handleAddToSale = ({\n        selectedFinishCondition,\n        quantityToSell,\n        price,\n    }: FormValues) => {\n        addToSaleList(card, selectedFinishCondition, quantityToSell, price);\n\n        // Highlight the input after successful card add\n        $('#searchBar').focus().select();\n    };\n\n    const initialFormValues = {\n        selectedFinishCondition: conditionSelectOptions[0].value,\n        price: 0,\n        quantityToSell: 0,\n    };\n\n    const validate = ({\n        quantityToSell,\n        price,\n        selectedFinishCondition: selectedFinish,\n    }: FormValues) => {\n        const errors: FormikErrors<FormValues> = {};\n\n        if (!quantityToSell) errors.quantityToSell = 'error';\n        if (!price) errors.price = 'error';\n\n        if (!selectedFinish) {\n            errors.selectedFinishCondition = 'error';\n        }\n\n        if (quantityToSell > card.qoh[selectedFinish]!) {\n            errors.quantityToSell = 'error';\n        }\n\n        if (price < 0) {\n            errors.price = 'error';\n        }\n\n        if (quantityToSell < 1) {\n            errors.quantityToSell = 'error';\n        }\n\n        return errors;\n    };\n\n    const { handleSubmit, setFieldValue, values, isValid } = useFormik({\n        initialValues: initialFormValues,\n        validate,\n        onSubmit: handleAddToSale,\n        validateOnMount: true,\n    });\n\n    return (\n        <Paper variant=\"outlined\">\n            <Box p={2}>\n                <Item.Group divided>\n                    <Item>\n                        <Item.Image size=\"tiny\">\n                            <CardImage image={card.cardImage} />\n                        </Item.Image>\n                        <Item.Content>\n                            <CardHeader\n                                card={card}\n                                selectedFinish={\n                                    values.selectedFinishCondition.split(\n                                        '_'\n                                    )[0] as Finish\n                                }\n                                showMid\n                                round\n                            />\n                            <Item.Description>\n                                <Form>\n                                    <Form.Group>\n                                        <FormikSelectField\n                                            label=\"Select finish/condition\"\n                                            name=\"selectedFinishCondition\"\n                                            options={conditionSelectOptions}\n                                            defaultValue={\n                                                initialFormValues.selectedFinishCondition\n                                            }\n                                            onChange={(v) => {\n                                                setFieldValue(\n                                                    'selectedFinishCondition',\n                                                    v\n                                                );\n                                                setFieldValue(\n                                                    'quantityToSell',\n                                                    0\n                                                );\n                                            }}\n                                        />\n                                        <Form.Field\n                                            control={Input}\n                                            type=\"number\"\n                                            label=\"Quantity to sell\"\n                                            value={values.quantityToSell}\n                                            onChange={(\n                                                _: any,\n                                                { value }: { value: string }\n                                            ) => {\n                                                const castVal = parseInt(\n                                                    value,\n                                                    10\n                                                );\n\n                                                if (\n                                                    castVal >\n                                                    card.qoh[\n                                                        values\n                                                            .selectedFinishCondition\n                                                    ]!\n                                                ) {\n                                                    return;\n                                                }\n\n                                                setFieldValue(\n                                                    'quantityToSell',\n                                                    castVal\n                                                );\n                                            }}\n                                            onFocus={(\n                                                e: ChangeEvent<HTMLInputElement>\n                                            ) => e.target.select()}\n                                        />\n                                        <Form.Field\n                                            control={Input}\n                                            type=\"number\"\n                                            label=\"Price\"\n                                            value={values.price}\n                                            onChange={(\n                                                _: any,\n                                                { value }: { value: string }\n                                            ) => {\n                                                const castVal = parseFloat(\n                                                    value\n                                                );\n                                                setFieldValue('price', castVal);\n                                            }}\n                                            onFocus={(\n                                                e: ChangeEvent<HTMLInputElement>\n                                            ) => e.target.select()}\n                                            step={0.5}\n                                        />\n                                        <Form.Button\n                                            type=\"submit\"\n                                            label=\"Add to sale?\"\n                                            control={Button}\n                                            primary\n                                            onClick={() => handleSubmit()}\n                                            disabled={!isValid}\n                                        >\n                                            Sell\n                                        </Form.Button>\n                                    </Form.Group>\n                                </Form>\n                            </Item.Description>\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Box>\n        </Paper>\n    );\n};\n\nexport default SaleSearchCard;\n","import React, { FC } from 'react';\nimport SaleSearchCard from './SaleSearchCard';\nimport { Segment, Header, Icon } from 'semantic-ui-react';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport { Grid } from '@material-ui/core';\nimport Loading from '../ui/Loading';\n\ninterface Props {\n    loading: boolean;\n    term: string;\n    cards: ScryfallCard[];\n}\n\nconst BrowseCardList: FC<Props> = ({ loading, term, cards }) => {\n    // Creates text to notify the user of zero-result searches\n    const searchNotification = () => {\n        if (term && !cards.length) {\n            // Check to make sure the user has searched and no results\n            return (\n                <p>\n                    Zero results for <em>{term}</em>\n                </p>\n            );\n        }\n        return (\n            <p>\n                <em>\"Don't give the people what they want\"</em>\n            </p>\n        );\n    };\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    if (cards.length === 0) {\n        return (\n            <Segment placeholder>\n                <Header icon>\n                    <Icon name=\"search\" />\n                    <span>{searchNotification()}</span>\n                </Header>\n            </Segment>\n        );\n    }\n\n    return (\n        <Grid container spacing={2}>\n            {cards.map((card) => {\n                return (\n                    <Grid item xs={12} key={card.id}>\n                        <SaleSearchCard card={card} />\n                    </Grid>\n                );\n            })}\n        </Grid>\n    );\n};\n\nexport default BrowseCardList;\n","export type Price = number | string | null;\n\nexport function price(val: Price) {\n    if (val === null) return '$0.00';\n    let price: number = typeof val === 'string' ? Number(val) : val;\n    if (isNaN(price)) return '$0.00';\n    return `$${price.toFixed(2)}`;\n}\n","import React, { FC } from 'react';\nimport { Price, price } from '../utils/price';\n\ninterface Props {\n    num: Price;\n}\n\nexport function getPrice(val: Price) {\n    if (val === null) return '$0.00';\n    let price: number = typeof val === 'string' ? Number(val) : val;\n    if (isNaN(price)) return '$0.00';\n    return `$${price.toFixed(2)}`;\n}\n\nconst DisplayPrice: FC<Props> = ({ num }) => <span>{price(num)}</span>;\n\nexport default DisplayPrice;\n","import { makeStyles, Tooltip } from '@material-ui/core';\nimport { FC } from 'react';\nimport { Image } from 'semantic-ui-react';\n\ninterface Props {\n    cardImage: string;\n}\n\nconst useStyles = makeStyles({\n    transparentBackground: {\n        backgroundColor: 'transparent',\n    },\n    borderRounded: {\n        borderRadius: '7px 7px 7px 7px',\n    },\n});\n\nconst CardImageTooltip: FC<Props> = ({ cardImage, children }) => {\n    const { transparentBackground, borderRounded } = useStyles();\n\n    return (\n        <Tooltip\n            placement=\"bottom-start\"\n            title={\n                <Image className={borderRounded} size=\"small\" src={cardImage} />\n            }\n            classes={{\n                tooltip: transparentBackground,\n            }}\n        >\n            <span>{children}</span>\n        </Tooltip>\n    );\n};\n\nexport default CardImageTooltip;\n","import React, { useState, useContext, FC } from 'react';\nimport { Button, Grid, Header, Label, Segment } from 'semantic-ui-react';\nimport { SaleContext, SaleListCard } from '../context/SaleContext';\nimport Price from '../common/Price';\nimport SetIcon from '../ui/SetIcon';\nimport CardImageTooltip from '../ui/CardImageTooltip';\n\ninterface Props {\n    card: SaleListCard;\n}\n\nconst SaleCartItem: FC<Props> = ({\n    card: {\n        display_name,\n        set,\n        finishCondition,\n        qtyToSell,\n        price,\n        rarity,\n        id,\n        cardImage,\n    },\n}) => {\n    const [hovered, setHovered] = useState(false);\n    const { removeFromSaleList } = useContext(SaleContext);\n\n    return (\n        <Segment>\n            <Grid verticalAlign=\"middle\">\n                <Grid.Column tablet={16} computer={11}>\n                    <div>\n                        <CardImageTooltip cardImage={cardImage}>\n                            <Header as=\"h4\" style={{ cursor: 'help' }}>\n                                {display_name}\n                            </Header>\n                        </CardImageTooltip>\n                    </div>\n                    <SetIcon set={set} rarity={rarity} />\n                    <Label color=\"grey\">{set.toUpperCase()}</Label>\n                    <div className=\"line-item-price\">\n                        {qtyToSell}x @ <Price num={price} />\n                        {' • '}\n                        {finishCondition && (\n                            <span>\n                                {finishCondition.split('_')[1]} {' | '}\n                                {finishCondition.split('_')[0]}\n                            </span>\n                        )}\n                    </div>\n                </Grid.Column>\n                <Grid.Column tablet={16} computer={5} textAlign=\"right\">\n                    <Button\n                        compact\n                        icon=\"cancel\"\n                        circular\n                        onClick={() => removeFromSaleList(id, finishCondition)}\n                        onMouseOver={() => setHovered(true)}\n                        onMouseOut={() => setHovered(false)}\n                        color={hovered ? 'red' : undefined}\n                    />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    );\n};\n\nexport default SaleCartItem;\n","/**\n * Sums numbers up\n */\nexport default function sum(nums: number[]): number {\n    return nums.reduce((acc, curr) => acc + curr, 0);\n}\n","import React, { FC } from 'react';\nimport Price from '../common/Price';\nimport { SaleListCard } from '../context/SaleContext';\nimport sum from '../utils/sum';\n\ninterface Props {\n    saleList: SaleListCard[];\n}\n\nconst SaleCartPriceTotal: FC<Props> = ({ saleList }) => {\n    const total = sum(saleList.map((c) => c.qtyToSell * Number(c.price)));\n\n    return (\n        <div id=\"sale-price-total\">\n            <Price num={total} />\n        </div>\n    );\n};\n\nexport default SaleCartPriceTotal;\n","import React, { useState, useContext, FC } from 'react';\nimport { Modal, Button, Header, Icon } from 'semantic-ui-react';\nimport { SaleContext } from '../context/SaleContext';\n\ninterface Props {}\n\nconst FinishSale: FC<Props> = () => {\n    const [submit, setSubmit] = useState({ loading: false, disabled: false });\n    const [showModal, setShowModal] = useState(false);\n    const { finalizeSale } = useContext(SaleContext);\n\n    const handleFinalizeSale = async () => {\n        setSubmit({ loading: true, disabled: true });\n        await finalizeSale();\n    };\n\n    const modalTrigger = (\n        <Button floated=\"right\" primary onClick={() => setShowModal(true)}>\n            Finalize sale\n        </Button>\n    );\n\n    return (\n        <Modal basic open={showModal} trigger={modalTrigger}>\n            <Modal.Content>\n                <Header inverted as=\"h2\">\n                    Finalize this sale?\n                </Header>\n                <p>\n                    Click 'Yes' to create a sale in Lightspeed. Ensure that you\n                    have all cards pulled and double-checked the customer list.\n                    Undoing this action will require manual data entry!\n                </p>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button\n                    basic\n                    color=\"red\"\n                    inverted\n                    onClick={() => setShowModal(false)}\n                >\n                    <Icon name=\"remove\" /> No\n                </Button>\n                <Button\n                    color=\"green\"\n                    inverted\n                    onClick={handleFinalizeSale}\n                    loading={submit.loading}\n                    disabled={submit.disabled}\n                >\n                    <Icon name=\"checkmark\" /> Yes\n                </Button>\n            </Modal.Actions>\n        </Modal>\n    );\n};\n\nexport default FinishSale;\n","import React, { FC } from 'react';\nimport SaleCartItem from './SaleCartItem';\nimport { Segment, Header, Icon } from 'semantic-ui-react';\nimport SaleCartPriceTotal from './SaleCartPriceTotal';\nimport FinishSale from './FinishSale';\nimport { SaleListCard } from '../context/SaleContext';\n\ninterface Props {\n    saleList: SaleListCard[];\n}\n\nconst SaleCartList: FC<Props> = ({ saleList }) => {\n    if (saleList.length === 0) {\n        return (\n            <Segment placeholder>\n                <Header icon>\n                    <Icon name=\"plus\" />\n                    <em>\"Give them what they need\"</em>\n                </Header>\n            </Segment>\n        );\n    }\n\n    return (\n        <>\n            <Segment.Group>\n                {saleList.map((card) => (\n                    <SaleCartItem\n                        key={`${card.id}${card.finishCondition}${card.qtyToSell}`}\n                        card={card}\n                    />\n                ))}\n            </Segment.Group>\n            <Segment clearing>\n                <Header floated=\"left\">\n                    <Header sub>Subtotal</Header>\n                    <SaleCartPriceTotal saleList={saleList} />\n                </Header>\n                <FinishSale />\n            </Segment>\n        </>\n    );\n};\n\nexport default SaleCartList;\n","import React, { FC, useRef } from 'react';\nimport { useReactToPrint } from 'react-to-print';\nimport { Button, Icon } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport Price from '../common/Price';\nimport { SaleListCard } from '../context/SaleContext';\nimport SaleCartPriceTotal from './SaleCartPriceTotal';\n\ninterface Props {\n    saleListCards: SaleListCard[];\n}\n\nconst PrintWrapper = styled.div`\n    @media print {\n        background-color: white;\n        margin: 0;\n        padding: 0;\n        font-size: 30px;\n        line-height: 40px;\n        z-index: 5000;\n        overflow: hidden;\n    }\n    @media screen {\n        display: none !important;\n    }\n`;\n\nconst PrintList: FC<Props> = ({ saleListCards }) => {\n    const componentRef = useRef<HTMLDivElement>(null);\n\n    const handlePrint = useReactToPrint({\n        content: () => componentRef.current,\n    });\n\n    return (\n        <>\n            <div>\n                <Button size=\"tiny\" onClick={handlePrint} icon>\n                    <Icon name=\"print\" />\n                </Button>\n            </div>\n            <PrintWrapper ref={componentRef}>\n                <ul>\n                    {saleListCards.map((slc) => {\n                        return (\n                            <li key={slc.id}>\n                                <b>\n                                    {slc.display_name} | x{slc.qtyToSell} |{' '}\n                                    {slc.finishCondition} | {slc.set_name} |{' '}\n                                    <Price num={slc.price} />\n                                </b>\n                            </li>\n                        );\n                    })}\n                </ul>\n                <span>\n                    <b>\n                        Subtotal:{' '}\n                        <SaleCartPriceTotal saleList={saleListCards} />\n                    </b>\n                </span>\n            </PrintWrapper>\n        </>\n    );\n};\n\nexport default PrintList;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { SUSPEND_SALE } from '../utils/api_resources';\nimport { SuspendedSale } from '../context/getSuspendedSaleQuery';\n\nconst getSuspendedSalesQuery = async () => {\n    try {\n        const { data } = await axios.get<SuspendedSale[]>(SUSPEND_SALE, {\n            headers: makeAuthHeader(),\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default getSuspendedSalesQuery;\n","import React, { useState, useEffect, FC } from 'react';\nimport {\n    Modal,\n    Button,\n    Grid,\n    Form,\n    Message,\n    TextAreaProps,\n    DropdownProps,\n} from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { SaleContext } from '../context/SaleContext';\nimport { SuspendedSale } from '../context/getSuspendedSaleQuery';\nimport getSuspendedSalesQuery from './getSuspendedSalesQuery';\n\ninterface Props {\n    id: string;\n    saleListLength: number;\n    restoreSale: SaleContext['restoreSale'];\n    deleteSuspendedSale: SaleContext['deleteSuspendedSale'];\n    suspendSale: SaleContext['suspendSale'];\n}\n\ninterface SuspendButtonState {\n    suspendBtn: boolean;\n    restoreBtn: boolean;\n    deleteBtn: boolean;\n}\n\nconst Divider = styled.div`\n    border-left: 1px solid rgba(0, 0, 0, 0.2);\n    height: 100%;\n`;\n\nconst ClearMargin = styled.div`\n    margin-top: 0px;\n    margin-bottom: 0px;\n`;\n\nconst CharLimit = styled.p`\n    font-size: 12px;\n    color: rgba(0, 0, 0, 0.2);\n    float: right;\n`;\n\nconst SuspendSaleButton: FC<Props> = ({\n    restoreSale,\n    deleteSuspendedSale,\n    saleListLength,\n    suspendSale,\n    id,\n}) => {\n    const [sales, setSales] = useState<SuspendedSale[]>([]);\n    const [saleID, setSaleID] = useState<string>('');\n    const [modalOpen, setModalOpen] = useState<boolean>(false);\n    const [customerName, setCustomerName] = useState<string>('');\n    const [notes, setNotes] = useState<string>('');\n    const [disabled, setDisabled] = useState<boolean>(false);\n    const [loadingBtn, setLoadingBtn] = useState<SuspendButtonState>({\n        suspendBtn: false,\n        restoreBtn: false,\n        deleteBtn: false,\n    });\n\n    const getSales = async () => {\n        const suspendedSales = await getSuspendedSalesQuery();\n\n        setSales(suspendedSales);\n    };\n\n    const clearFields = () => {\n        setCustomerName('');\n        setNotes('');\n        setSaleID('');\n    };\n\n    // Get the previously suspended sales on mount and parent state (_id) change\n    useEffect(() => {\n        getSales();\n    }, [id]); // If the parent-level suspended-sale _id changes, we fetch again\n\n    const modalTrigger = (\n        <div>\n            <Button\n                size=\"tiny\"\n                id=\"suspend-sale-btn\"\n                onClick={() => setModalOpen(true)}\n                icon=\"ellipsis horizontal\"\n            />\n        </div>\n    );\n\n    const submitSuspendSale = async () => {\n        setDisabled(true);\n        setLoadingBtn({ ...loadingBtn, suspendBtn: true });\n        await suspendSale({ customerName, notes });\n        setModalOpen(false); // Close the modal to avoid \"flicker\" when state re-renders\n        await getSales(); // Parent _id does not change, re-fetch sales\n        clearFields();\n        setDisabled(false);\n        setLoadingBtn({ ...loadingBtn, suspendBtn: false });\n    };\n\n    const submitRestoreSale = async () => {\n        setDisabled(true);\n        setLoadingBtn({ ...loadingBtn, restoreBtn: true });\n        await restoreSale(saleID);\n        setModalOpen(false);\n        clearFields();\n        setDisabled(false);\n        setLoadingBtn({ ...loadingBtn, restoreBtn: false });\n    };\n\n    const submitDeleteSale = async () => {\n        setDisabled(true);\n        setLoadingBtn({ ...loadingBtn, deleteBtn: true });\n        await deleteSuspendedSale();\n        setModalOpen(false);\n        clearFields();\n        setDisabled(false);\n        setLoadingBtn({ ...loadingBtn, deleteBtn: false });\n    };\n\n    return (\n        <React.Fragment>\n            <Modal trigger={modalTrigger} open={modalOpen}>\n                <Modal.Header>Sales menu</Modal.Header>\n                <Modal.Content>\n                    <Grid columns={2} stackable relaxed=\"very\">\n                        {saleListLength > 0 && (\n                            <React.Fragment>\n                                <Grid.Column width=\"7\">\n                                    <h3>Suspend Sale</h3>\n                                    <Form>\n                                        <ClearMargin>\n                                            <Form.Input\n                                                id=\"suspend-sale-name\"\n                                                label=\"Customer Name\"\n                                                placeholder=\"Jace, the Mind Sculptor\"\n                                                value={customerName}\n                                                onChange={(e, { value }) =>\n                                                    setCustomerName(\n                                                        value.substring(0, 50)\n                                                    )\n                                                }\n                                            />\n                                        </ClearMargin>\n                                        <ClearMargin>\n                                            <CharLimit>\n                                                {customerName.length}/50\n                                            </CharLimit>\n                                        </ClearMargin>\n                                        <ClearMargin>\n                                            <Form.TextArea\n                                                label=\"Notes\"\n                                                placeholder=\"Sometimes, I forget things...\"\n                                                value={notes}\n                                                onChange={(\n                                                    e,\n                                                    { value }: TextAreaProps\n                                                ) => {\n                                                    if (\n                                                        typeof value ===\n                                                        'string'\n                                                    ) {\n                                                        setNotes(\n                                                            value.substring(\n                                                                0,\n                                                                150\n                                                            )\n                                                        );\n                                                    }\n                                                }}\n                                            />\n                                        </ClearMargin>\n                                        <ClearMargin>\n                                            <CharLimit>\n                                                {notes.length}/150\n                                            </CharLimit>\n                                        </ClearMargin>\n                                        <Form.Button\n                                            id=\"suspend-sale-submit\"\n                                            primary\n                                            disabled={disabled || !customerName}\n                                            loading={loadingBtn.suspendBtn}\n                                            onClick={submitSuspendSale}\n                                        >\n                                            Suspend Sale\n                                        </Form.Button>\n                                    </Form>\n                                </Grid.Column>\n                                <Grid.Column width=\"1\">\n                                    <Divider />\n                                </Grid.Column>\n                            </React.Fragment>\n                        )}\n                        <Grid.Column width=\"7\">\n                            <h3>Restore Sale</h3>\n                            {sales.length > 0 && (\n                                <React.Fragment>\n                                    <Form>\n                                        <Form.Select\n                                            fluid\n                                            label=\"Previously suspended sales\"\n                                            options={sales.map((s) => {\n                                                return {\n                                                    key: s._id,\n                                                    text: s.name,\n                                                    value: s._id,\n                                                };\n                                            })}\n                                            placeholder=\"Select a sale\"\n                                            onChange={(\n                                                e,\n                                                { value }: DropdownProps\n                                            ) => {\n                                                if (typeof value === 'string') {\n                                                    setSaleID(value);\n                                                }\n                                            }}\n                                        />\n                                        <Form.Button\n                                            primary\n                                            disabled={disabled || !saleID}\n                                            loading={loadingBtn.restoreBtn}\n                                            onClick={submitRestoreSale}\n                                        >\n                                            Restore Sale\n                                        </Form.Button>\n                                    </Form>\n                                </React.Fragment>\n                            )}\n                            {sales.length === 0 && (\n                                <Message info>\n                                    <Message.Header>No sales</Message.Header>\n                                    Suspend a sale first\n                                </Message>\n                            )}\n                        </Grid.Column>\n                    </Grid>\n                </Modal.Content>\n                <Modal.Actions>\n                    {!!id && (\n                        <Button\n                            color=\"red\"\n                            disabled={disabled}\n                            loading={loadingBtn.deleteBtn}\n                            onClick={submitDeleteSale}\n                        >\n                            Delete current Sale\n                        </Button>\n                    )}\n                    <Button\n                        primary\n                        disabled={disabled}\n                        onClick={() => setModalOpen(false)}\n                    >\n                        Cancel\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nexport default SuspendSaleButton;\n","export default function pluralize(quantity: number, word: string) {\n    return `${word}${quantity === 1 ? '' : 's'}`;\n}\n","import React, { FC } from 'react';\nimport { Label } from 'semantic-ui-react';\nimport pluralize from '../utils/pluralize';\n\ninterface Props {\n    listLength: number;\n}\n\nconst TotalCardsLabel: FC<Props> = ({ listLength }) => {\n    if (listLength === 0) return null;\n\n    return (\n        <div>\n            <Label color=\"grey\">\n                {listLength} {pluralize(listLength, 'card')}\n            </Label>\n        </div>\n    );\n};\n\nexport default TotalCardsLabel;\n","import React, { useContext, FC, useState, useEffect } from 'react';\nimport { Divider } from 'semantic-ui-react';\nimport BrowseCardList from './SaleSearchCardList';\nimport SaleCartList from './SaleCartList';\nimport PrintList from './PrintList';\nimport SuspendSaleButton from './SuspendSaleButton';\nimport { SaleContext } from '../context/SaleContext';\nimport TotalCardsLabel from '../common/TotalCardsLabel';\nimport TotalStoreInventory from '../ManageInventory/TotalStoreInventory';\nimport sum from '../utils/sum';\nimport { Box, Grid } from '@material-ui/core';\nimport { HeaderText } from '../ui/Typography';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\n\ninterface Props {}\n\nconst Sale: FC<Props> = () => {\n    const [term, setTerm] = useState<string>('');\n    const [loading, setLoading] = useState<boolean>(false);\n    const {\n        saleListCards,\n        searchTerm,\n        searchResults,\n        handleResultSelect,\n        suspendedSale,\n        restoreSale,\n        deleteSuspendedSale,\n        suspendSale,\n    } = useContext(SaleContext);\n\n    useEffect(() => {\n        if (term) {\n            (async () => {\n                setLoading(true);\n                await handleResultSelect(term);\n                setLoading(false);\n            })();\n        }\n    }, [term]);\n\n    return (\n        <>\n            <ControlledSearchBar value={term} onChange={(v) => setTerm(v)} />\n            <br />\n            <Grid container spacing={2}>\n                <Grid item xs={12} lg={8}>\n                    <Grid container justify=\"space-between\">\n                        <HeaderText>Inventory</HeaderText>\n                        {searchResults.length > 0 && (\n                            <TotalStoreInventory\n                                searchResults={searchResults}\n                                title={searchResults[0].name}\n                            />\n                        )}\n                    </Grid>\n                    <Divider />\n                    <BrowseCardList\n                        loading={loading}\n                        term={searchTerm}\n                        cards={searchResults}\n                    />\n                </Grid>\n                <Grid item xs={12} lg={4}>\n                    <Grid container justify=\"space-between\">\n                        <Box display=\"flex\" alignItems=\"center\">\n                            <HeaderText>\n                                {suspendedSale.name === ''\n                                    ? 'Sale Items'\n                                    : `${suspendedSale.name}'s Items`}\n                            </HeaderText>\n                            <TotalCardsLabel\n                                listLength={sum(\n                                    saleListCards.map((c) => c.qtyToSell)\n                                )}\n                            />\n                        </Box>\n                        <Box display=\"flex\">\n                            <SuspendSaleButton\n                                restoreSale={restoreSale}\n                                suspendSale={suspendSale}\n                                saleListLength={saleListCards.length}\n                                deleteSuspendedSale={deleteSuspendedSale}\n                                id={suspendedSale._id}\n                            />\n                            {saleListCards.length > 0 && (\n                                <PrintList saleListCards={saleListCards} />\n                            )}\n                        </Box>\n                    </Grid>\n                    <Divider />\n                    <SaleCartList saleList={saleListCards} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default Sale;\n","import moment from 'moment';\n\nfunction formatDate(date: string) {\n    return moment(date).format('MM/DD/YYYY - h:mm A');\n}\n\nexport default formatDate;\n","import React, { FC } from 'react';\nimport { Table } from 'semantic-ui-react';\nimport sum from '../utils/sum';\nimport { Sale } from './browseSalesQuery';\nimport formatDate from '../utils/formatDate';\n\ninterface Props {\n    sale: Sale;\n}\n\nconst BrowseSalesItem: FC<Props> = ({ sale }) => {\n    const { card_list, sale_data } = sale;\n\n    const quantitySold = sum(card_list.map((c) => Number(c.qtyToSell)));\n\n    return (\n        <Table.Row>\n            <Table.Cell>{sale_data.saleID}</Table.Cell>\n            <Table.Cell>{formatDate(sale_data.createTime)}</Table.Cell>\n            <Table.Cell>{quantitySold}</Table.Cell>\n        </Table.Row>\n    );\n};\n\nexport default BrowseSalesItem;\n","import React, { FC } from 'react';\nimport BrowseSalesItem from './BrowseSalesItem';\nimport { Table } from 'semantic-ui-react';\nimport { Sale } from './browseSalesQuery';\n\ninterface Props {\n    list: Sale[];\n}\n\nconst BrowseSalesList: FC<Props> = ({ list }) => {\n    return (\n        <Table celled unstackable compact>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Sale ID</Table.HeaderCell>\n                    <Table.HeaderCell>Date of Sale</Table.HeaderCell>\n                    <Table.HeaderCell>Quantity Sold</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n                {list.map((sale) => (\n                    <BrowseSalesItem sale={sale} />\n                ))}\n            </Table.Body>\n        </Table>\n    );\n};\n\nexport default BrowseSalesList;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { GET_SALES_BY_TITLE } from '../utils/api_resources';\nimport { SaleListCard } from '../context/SaleContext';\n\ninterface SaleData {\n    total: string;\n    saleID: string;\n    timeStamp: string;\n    createTime: string;\n}\n\nexport interface Sale {\n    _id: string;\n    sale_data: SaleData;\n    card_list: SaleListCard[];\n}\n\ninterface Payload {\n    cardName: string;\n}\n\nconst browseSalesQuery = async ({ cardName }: Payload) => {\n    try {\n        const { data } = await axios.get<Sale[]>(GET_SALES_BY_TITLE, {\n            params: { cardName: cardName },\n            headers: makeAuthHeader(),\n        });\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default browseSalesQuery;\n","import React, { FC, useEffect, useState } from 'react';\nimport BrowseSalesList from './BrowseSalesList';\nimport { Divider } from 'semantic-ui-react';\nimport browseSalesQuery, { Sale } from './browseSalesQuery';\nimport { HeaderText } from '../ui/Typography';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport Loading from '../ui/Loading';\nimport { Typography } from '@material-ui/core';\n\nconst BrowseSales: FC = () => {\n    const [term, setTerm] = useState<string>('');\n    const [loading, setLoading] = useState<boolean>(false);\n    const [salesList, setSalesList] = useState<Sale[]>([]);\n\n    const handleSearchSelect = async (cardName: string) => {\n        const sales = await browseSalesQuery({ cardName });\n        setSalesList(sales);\n    };\n\n    useEffect(() => {\n        if (term) {\n            (async () => {\n                setLoading(true);\n                await handleSearchSelect(term);\n                setLoading(false);\n            })();\n        }\n    }, [term]);\n\n    return (\n        <div>\n            <ControlledSearchBar value={term} onChange={(v) => setTerm(v)} />\n            <br />\n            <HeaderText>Browse Sales</HeaderText>\n            <Divider />\n\n            {loading ? (\n                <Loading />\n            ) : (\n                <>\n                    {term !== '' && (\n                        <Typography>\n                            {salesList.length} results for <em>{term}</em>\n                        </Typography>\n                    )}\n\n                    <BrowseSalesList list={salesList} />\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default BrowseSales;\n","import React, { FC } from 'react';\nimport { Image as SurImage, Label } from 'semantic-ui-react';\nimport MarketPrice from '../common/MarketPrice';\nimport styled from 'styled-components';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport parseQoh from '../utils/parseQoh';\n\ninterface Props {\n    card: ScryfallCard;\n}\n\n// These numbers were the originally calculated px values\nconst cardImageRatio = 418.3 / 300;\nconst cardImageWidth = 275;\nconst cardImageHeight = cardImageRatio * cardImageWidth;\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: ${cardImageWidth}px;\n`;\n\nconst InventoryWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    justify-content: space-between;\n    padding: 5px;\n    background-color: rgba(0, 0, 0, 0.9);\n    border-radius: 10px 10px 10px 10px;\n    box-shadow: 2px 2px 5px 0 rgba(0, 0, 0, 0.25);\n`;\n\nconst InventoryRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    margin: 5px;\n`;\n\nconst ImageWrapper = styled.div`\n    width: ${cardImageWidth}px;\n    height: ${cardImageHeight}px;\n    box-shadow: 2px 2px 5px 0 rgba(0, 0, 0, 0.25);\n    background: repeating-linear-gradient(\n        45deg,\n        #bfbfbf,\n        #bfbfbf 10px,\n        #b0b0b0 10px,\n        #b0b0b0 20px\n    );\n    border-radius: 15px;\n`;\n\nconst Image = styled(SurImage)({\n    borderRadius: '15px',\n});\n\nconst PublicCard: FC<Props> = ({ card }) => {\n    const { id, cardImage } = card;\n    const [foilQty, nonfoilQty] = parseQoh(card.qoh);\n\n    return (\n        <Wrapper>\n            <ImageWrapper>\n                <Image src={cardImage} size=\"medium\" />\n            </ImageWrapper>\n            <InventoryWrapper>\n                {foilQty > 0 && (\n                    <InventoryRow>\n                        <Label color=\"blue\" image>\n                            Foil<Label.Detail>{foilQty}</Label.Detail>\n                        </Label>\n                        <MarketPrice\n                            id={id}\n                            finish=\"FOIL\"\n                            round\n                            showMid={false}\n                        />\n                    </InventoryRow>\n                )}\n                {nonfoilQty > 0 && (\n                    <InventoryRow>\n                        <Label color=\"blue\" image>\n                            Nonfoil<Label.Detail>{nonfoilQty}</Label.Detail>\n                        </Label>\n                        <MarketPrice\n                            id={id}\n                            finish=\"NONFOIL\"\n                            round\n                            showMid={false}\n                        />\n                    </InventoryRow>\n                )}\n            </InventoryWrapper>\n        </Wrapper>\n    );\n};\n\nexport default PublicCard;\n","import axios from 'axios';\nimport { ScryfallCard, ScryfallApiCard } from '../utils/ScryfallCard';\nimport { GET_CARDS_WITH_INFO_PUBLIC } from '../utils/api_resources';\nimport { ClubhouseLocation } from '../context/AuthProvider';\n\ninterface Params {\n    title: string;\n    matchInStock: boolean;\n    location: ClubhouseLocation;\n}\n\n/**\n * Fetches cards from the DB by title when a user selects a title after querying.\n * This function merges the data (inventory quantity and card objects) from two endpoints into one array.\n */\nconst publicCardSearchQuery = async (params: Params) => {\n    try {\n        const { data } = await axios.get<ScryfallApiCard[]>(\n            GET_CARDS_WITH_INFO_PUBLIC,\n            {\n                params,\n            }\n        );\n\n        return data.map((d) => new ScryfallCard(d));\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default publicCardSearchQuery;\n","import React, { FC, SyntheticEvent, useState } from 'react';\nimport { Grid, Segment, Header, Icon, Form, Select } from 'semantic-ui-react';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport { FormikErrors, useFormik } from 'formik';\nimport { ClubhouseLocation } from '../context/AuthProvider';\nimport styled from 'styled-components';\nimport PublicCard from './PublicCard';\nimport publicCardSearchQuery from './publicCardSearchQuery';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\n\ninterface State {\n    searchResults: ScryfallCard[];\n    searchTerm: string;\n    selectedLocation: ClubhouseLocation;\n}\n\ninterface FormValues {\n    searchTerm: string;\n    selectedLocation: ClubhouseLocation;\n}\n\nconst GridContainer = styled('div')({\n    display: 'grid',\n    gridGap: '20px',\n    gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))',\n    justifyItems: 'center',\n});\n\nconst StyledFormGroup = styled(Form.Group)({\n    alignItems: 'flex-end',\n});\n\nconst initialState: State = {\n    searchResults: [],\n    searchTerm: '',\n    selectedLocation: 'ch1',\n};\n\nconst initialFormState: FormValues = {\n    searchTerm: '',\n    selectedLocation: 'ch1',\n};\n\nconst locationOptions = [\n    { key: 'beaverton', text: 'CH Beaverton', value: 'ch1' },\n    { key: 'hillsboro', text: 'CH Hillsboro', value: 'ch2' },\n];\n\nconst validate = ({ searchTerm }: FormValues) => {\n    let errors: FormikErrors<FormValues> = {};\n\n    if (!searchTerm) {\n        errors.searchTerm = 'error';\n    }\n\n    return errors;\n};\n\nconst PublicInventory: FC = () => {\n    const [state, setState] = useState<State>(initialState);\n    const [formSubmitted, setFormSubmitted] = useState<boolean>(false);\n\n    const fetchCards = async ({\n        title,\n        location,\n    }: {\n        title: string;\n        location: ClubhouseLocation;\n    }) => {\n        try {\n            const cards = await publicCardSearchQuery({\n                title,\n                location,\n                matchInStock: true,\n            });\n\n            setState({\n                ...state,\n                searchResults: cards,\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const onSubmit = async ({ searchTerm, selectedLocation }: FormValues) => {\n        await fetchCards({\n            title: searchTerm,\n            location: selectedLocation,\n        });\n\n        setFormSubmitted(true);\n    };\n\n    const { values, handleSubmit, setFieldValue, isSubmitting } = useFormik({\n        initialValues: initialFormState,\n        validate,\n        onSubmit,\n    });\n\n    return (\n        <>\n            <Form>\n                <StyledFormGroup widths=\"5\">\n                    <Form.Field>\n                        <label>Card search</label>\n                        <ControlledSearchBar\n                            value={values.searchTerm}\n                            onChange={(value) =>\n                                setFieldValue('searchTerm', value)\n                            }\n                        />\n                    </Form.Field>\n                    <Form.Field\n                        label=\"Store location\"\n                        control={Select}\n                        value={values.selectedLocation}\n                        options={locationOptions}\n                        onChange={(\n                            _: SyntheticEvent,\n                            { value }: { value: ClubhouseLocation }\n                        ) => setFieldValue('selectedLocation', value)}\n                    />\n                    <Form.Button\n                        type=\"submit\"\n                        primary\n                        disabled={!values.searchTerm}\n                        loading={isSubmitting}\n                        onClick={() => handleSubmit()}\n                    >\n                        Search\n                    </Form.Button>\n                </StyledFormGroup>\n            </Form>\n            <br />\n            <Grid stackable={true}>\n                <Grid.Column>\n                    <Header as=\"h2\">\n                        Inventory Search\n                        <Header.Subheader>\n                            <em>\n                                Card prices subject to change. Consult a\n                                Clubhouse employee for final estimates\n                            </em>\n                        </Header.Subheader>\n                    </Header>\n                    {state.searchResults.length > 0 ? (\n                        <GridContainer>\n                            {state.searchResults.map((c) => (\n                                <PublicCard key={c.id} card={c} />\n                            ))}\n                        </GridContainer>\n                    ) : (\n                        <Segment placeholder>\n                            <Header icon>\n                                <Icon name=\"search\" />\n                                {formSubmitted ? (\n                                    <span>No cards found in stock</span>\n                                ) : (\n                                    <span>Search for a card</span>\n                                )}\n                            </Header>\n                        </Segment>\n                    )}\n                </Grid.Column>\n            </Grid>\n        </>\n    );\n};\n\nexport default PublicInventory;\n","import axios from 'axios';\nimport { GET_SET_NAMES } from '../utils/api_resources';\nimport makeAuthHeader from '../utils/makeAuthHeader';\n\nconst setNameQuery = async () => {\n    try {\n        const { data } = await axios.get<string[]>(GET_SET_NAMES, {\n            headers: makeAuthHeader(),\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default setNameQuery;\n","import { Form } from 'semantic-ui-react';\nimport { FC, SyntheticEvent } from 'react';\nimport ControlledSearchBar from './ControlledSearchBar';\n\ninterface FormikControlledSearchBarProps {\n    label: string;\n    value: string;\n    onChange: (value: string) => void;\n}\n\nexport const FormikControlledSearchBar: FC<FormikControlledSearchBarProps> = ({\n    label,\n    value,\n    onChange,\n}) => {\n    return (\n        <Form.Field>\n            <label>{label}</label>\n            <ControlledSearchBar\n                value={value}\n                onChange={(value) => {\n                    onChange(value);\n                }}\n                // Reset form state after user blurs cardName\n                onBlur={(event: SyntheticEvent<Element, Event>) => {\n                    const element = event.target as HTMLInputElement;\n                    onChange(element.value);\n                }}\n            />\n        </Form.Field>\n    );\n};\n\nexport default FormikControlledSearchBar;\n","import { FormFieldProps, Dropdown, DropdownProps } from 'semantic-ui-react';\nimport { SyntheticEvent } from 'react';\n\ntype FormikDropdownFieldProps<T> = {\n    name: string;\n    onChange: (value: DropdownProps['value']) => void;\n    options: T[];\n} & Omit<FormFieldProps, 'name' | 'options' | 'onChange'>;\n\nfunction FormikDropdown<T>({\n    label,\n    name,\n    onChange,\n    options,\n    ...props\n}: FormikDropdownFieldProps<T>) {\n    return (\n        <Dropdown\n            options={options}\n            name={name}\n            onChange={(_: SyntheticEvent, data: DropdownProps) => {\n                onChange(data.value);\n            }}\n            {...props}\n        />\n    );\n}\n\nexport default FormikDropdown;\n","import React, { useState, createContext, FC } from 'react';\nimport { sortBy } from 'lodash';\nimport { v4 as uuid } from 'uuid';\nimport createToast from '../common/createToast';\nimport receivingQuery from './receivingQuery';\nimport cardSearchQuery from './cardSearchQuery';\nimport { ScryfallCard } from '../utils/ScryfallCard';\n\ninterface Props {}\n\nexport enum Trade {\n    Cash = 'CASH',\n    Credit = 'CREDIT',\n}\n\n// Customers can only receive cash or credit for their assets\nconst TRADE_TYPES = { CASH: Trade.Cash, CREDIT: Trade.Credit };\n\nexport type ReceivingCard = ScryfallCard & {\n    uuid_key: string;\n    finishCondition: string;\n    cashPrice: number | null;\n    marketPrice: number | null;\n    creditPrice: number | null;\n    tradeType: Trade;\n};\n\ninterface Context {\n    searchResults: ScryfallCard[];\n    receivingList: ReceivingCard[];\n    handleSearchSelect: (term: string) => void;\n    addToList: (\n        quantity: number,\n        card: ScryfallCard,\n        meta: AddToListMeta\n    ) => void;\n    removeFromList: (uuid: string) => void;\n    activeTradeType: (uuid: string, tradeType: Trade) => void;\n    selectAll: (trade: Trade) => void;\n    commitToInventory: (\n        customerName: string,\n        customerContact: string | null\n    ) => void;\n    resetSearchResults: () => void;\n}\n\nconst defaultContext: Context = {\n    searchResults: [],\n    receivingList: [],\n    handleSearchSelect: () => null,\n    addToList: () => null,\n    removeFromList: () => null,\n    activeTradeType: () => null,\n    selectAll: () => null,\n    commitToInventory: () => null,\n    resetSearchResults: () => null,\n};\n\ninterface AddToListMeta {\n    cashPrice: number | null;\n    marketPrice: number | null;\n    creditPrice: number | null;\n    finishCondition: string;\n}\n\nexport const ReceivingContext = createContext<Context>(defaultContext);\n\nconst ReceivingProvider: FC<Props> = ({ children }) => {\n    const [searchResults, setSearchResults] = useState<ScryfallCard[]>([]);\n    const [receivingList, setReceivingList] = useState<ReceivingCard[]>([]);\n\n    const handleSearchSelect = async (term: string) => {\n        const cards = await cardSearchQuery({\n            cardName: term,\n            inStockOnly: false,\n        });\n\n        setSearchResults(cards);\n    };\n\n    /**\n     * Adds a card to the receiving list, with a unique uuid\n     */\n    const addToList = (\n        quantity: number,\n        card: ScryfallCard,\n        { cashPrice, marketPrice, creditPrice, finishCondition }: AddToListMeta\n    ) => {\n        const previousState = [...receivingList];\n\n        // Each line-item represents one card\n        const cardsToAdd: ReceivingCard[] = [...new Array(quantity)].map(() => {\n            const newCard: ReceivingCard = {\n                ...card,\n                cashPrice,\n                marketPrice,\n                creditPrice,\n                finishCondition,\n                // Set to cash if customer doesn't want credit\n                tradeType: creditPrice === 0 ? Trade.Cash : Trade.Credit,\n                uuid_key: uuid(),\n            };\n\n            return newCard;\n        });\n\n        setReceivingList(sortBy([...previousState, ...cardsToAdd], 'name'));\n    };\n\n    /**\n     * Removes a card from the receiving list using the uuid\n     */\n    const removeFromList = (uuid_key: string) => {\n        const copiedState = [...receivingList];\n        setReceivingList(copiedState.filter((e) => e.uuid_key !== uuid_key));\n    };\n\n    /**\n     * Determines whether line-items use cash or credit.\n     * Assigns a new trade type.\n     */\n    const activeTradeType = (uuid_key: string, tradeType: Trade) => {\n        setReceivingList(\n            [...receivingList].map((card) => {\n                if (card.uuid_key === uuid_key) {\n                    card.tradeType = TRADE_TYPES[tradeType];\n                }\n                return card;\n            })\n        );\n    };\n\n    /**\n     * Sets all items to a tradeType, if possible\n     */\n    const selectAll = (selectType: Trade) => {\n        const { CASH, CREDIT } = TRADE_TYPES;\n\n        const newState = [...receivingList].map((card) => {\n            if (\n                selectType === CASH &&\n                card.cashPrice !== null &&\n                card.cashPrice > 0\n            )\n                card.tradeType = selectType;\n            else if (\n                selectType === CREDIT &&\n                card.creditPrice !== null &&\n                card.creditPrice > 0\n            )\n                card.tradeType = selectType;\n\n            return card;\n        });\n\n        setReceivingList(newState);\n    };\n\n    /**\n     * Persists all passed cards to inventory\n     */\n    const commitToInventory = async (\n        customerName: string,\n        customerContact: string | null\n    ) => {\n        try {\n            const cardsToCommit = receivingList.map((card) => ({\n                quantity: 1, // Only committing one per line-item\n                id: card.id,\n                name: card.name,\n                set_name: card.set_name,\n                finishCondition: card.finishCondition,\n                set: card.set,\n                creditPrice: card.creditPrice,\n                cashPrice: card.cashPrice,\n                marketPrice: card.marketPrice,\n                tradeType: card.tradeType,\n            }));\n\n            await receivingQuery({\n                cards: cardsToCommit,\n                customerName,\n                customerContact,\n            });\n\n            setSearchResults([]);\n            setReceivingList([]);\n\n            createToast({\n                color: 'green',\n                header: `${receivingList.length} cards were added to inventory!`,\n                duration: 2000,\n            });\n        } catch (e) {\n            console.log(e);\n            createToast({\n                color: 'red',\n                header: 'Error',\n                message: e.response.data || 'Error receiving cards',\n                duration: 2000,\n            });\n        }\n    };\n\n    const resetSearchResults = () => setSearchResults([]);\n\n    return (\n        <ReceivingContext.Provider\n            value={{\n                searchResults,\n                receivingList,\n                handleSearchSelect,\n                addToList,\n                removeFromList,\n                activeTradeType,\n                selectAll,\n                commitToInventory,\n                resetSearchResults,\n            }}\n        >\n            {children}\n        </ReceivingContext.Provider>\n    );\n};\n\nexport default ReceivingProvider;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Form, Input, Segment } from 'semantic-ui-react';\nimport { FormikHelpers, useFormik } from 'formik';\nimport FormSelectField from '../ui/FormikSelectField';\nimport setNameQuery from './setNameQuery';\nimport { Filters } from './filteredCardsQuery';\nimport FormikControlledSearchBar from '../ui/FormikControlledSearchBar';\nimport FormikDropdown from '../ui/FormikDropdown';\n\nconst formatDropdownOptions: DropdownOption[] = [\n    { key: 'qw', value: '', text: 'None' },\n    { key: 'we', value: 'standard', text: 'Standard' },\n    { key: 'er', value: 'future', text: 'Future' },\n    { key: 'rt', value: 'historic', text: 'Historic' },\n    { key: 'ty', value: 'pioneer', text: 'Pioneer' },\n    { key: 'yu', value: 'modern', text: 'Modern' },\n    { key: 'ui', value: 'legacy', text: 'Legacy' },\n    { key: 'io', value: 'pauper', text: 'Pauper' },\n    { key: 'op', value: 'vintage', text: 'Vintage' },\n    { key: 'as', value: 'penny', text: 'Penny' },\n    { key: 'sd', value: 'commander', text: 'Commander' },\n    { key: 'df', value: 'brawl', text: 'Brawl' },\n    { key: 'fg', value: 'duel', text: 'Duel' },\n    { key: 'gh', value: 'oldschool', text: 'Oldschool' },\n];\n\nconst priceOperatorDropdownOptions: DropdownOption[] = [\n    { key: 'gte', value: 'gte', text: '>=' },\n    { key: 'lte', value: 'lte', text: '<=' },\n    { key: 'gtx', value: 'gt', text: '>' },\n    { key: 'ltx', value: 'lt', text: '<' },\n];\n\nconst finishDropdownOptions: DropdownOption[] = [\n    { key: 'nonfoil_foil', value: '', text: 'None' },\n    { key: 'nonfoil', value: 'NONFOIL', text: 'Nonfoil' },\n    { key: 'foil', value: 'FOIL', text: 'Foil' },\n];\n\nconst sortByDropdownOptions: DropdownOption[] = [\n    { key: 'pricesort', value: 'price', text: 'Price' },\n    { key: 'alphasort', value: 'name', text: 'Card Name' },\n];\n\nconst sortByDirectionDropdownOptions: DropdownOption[] = [\n    { key: 'descdirsort', value: 1, text: 'Ascending' },\n    { key: 'ascdirsort', value: -1, text: 'Descending' },\n];\n\nconst sortByColorDropdownOptions: DropdownOption[] = [\n    { key: 'w', value: 'W', text: 'White' },\n    { key: 'u', value: 'U', text: 'Blue' },\n    { key: 'b', value: 'B', text: 'Black' },\n    { key: 'r', value: 'R', text: 'Red' },\n    { key: 'g', value: 'G', text: 'Green' },\n];\n\nconst colorSpecificityDropdownOptions: DropdownOption[] = [\n    { key: 'all', value: '', text: 'None' },\n    { key: 'colorless', value: 'colorless', text: 'Colorless only' },\n    { key: 'mono', value: 'mono', text: 'Monocolor only' },\n    { key: 'multi', value: 'multi', text: 'Multicolor only' },\n];\n\nconst typeLineOptions: DropdownOption[] = [\n    { key: 'na', value: '', text: 'None' },\n    { key: 'artifact', value: 'Artifact', text: 'Artifact' },\n    { key: 'creature', value: 'Creature', text: 'Creature' },\n    { key: 'enchantment', value: 'Enchantment', text: 'Enchantment' },\n    { key: 'instant', value: 'Instant', text: 'Instant' },\n    { key: 'land', value: 'Land', text: 'Land' },\n    { key: 'planeswalker', value: 'Planeswalker', text: 'Planeswalker' },\n    { key: 'sorcery', value: 'Sorcery', text: 'Sorcery' },\n    { key: 'tribal', value: 'Tribal', text: 'Tribal' },\n];\n\nconst frameOptions: DropdownOption[] = [\n    { key: 'na', value: '', text: 'None' },\n    { key: 'borderless', value: 'borderless', text: 'Borderless' },\n    { key: 'extendedArt', value: 'extendedArt', text: 'Extended Art' },\n    { key: 'showcase', value: 'showcase', text: 'Showcase' },\n];\n\ninterface DropdownOption {\n    key: string;\n    value: string | number;\n    text: string;\n}\n\ninterface FormValues {\n    title: string;\n    setName: string;\n    format: string;\n    price: number;\n    finish: string;\n    colorsArray: string[];\n    colorSpecificity: string;\n    typeLine: string;\n    frame: string;\n    sortByDirection: number;\n    priceOperator: string;\n    sortBy: string;\n}\n\nexport const initialFilters: FormValues = {\n    title: '',\n    setName: '',\n    format: '',\n    price: 0,\n    priceOperator: 'gte',\n    finish: '',\n    sortBy: 'price',\n    colorsArray: [],\n    sortByDirection: -1,\n    colorSpecificity: '',\n    typeLine: '',\n    frame: '',\n};\n\n// No validations needed for now\nconst validate = () => {\n    return {};\n};\n\ninterface Props {\n    doSubmit: (v: Filters, page: number) => Promise<void>;\n}\n\nconst BrowseInventoryForm: FC<Props> = ({ doSubmit }) => {\n    const [editionDropdownOptions, setEditionDropdownOptions] = useState<\n        DropdownOption[]\n    >([]);\n\n    const onSubmit = async (\n        values: FormValues,\n        {}: FormikHelpers<FormValues>\n    ) => {\n        try {\n            await doSubmit(\n                {\n                    title: values.title || undefined,\n                    setName: values.setName || undefined,\n                    format: values.format || undefined,\n                    price: Number(values.price) || undefined,\n                    finish: values.finish || undefined,\n                    colors:\n                        values.colorsArray.length > 0\n                            ? values.colorsArray.sort().join('')\n                            : undefined,\n                    colorSpecificity: values.colorSpecificity || undefined,\n                    type: values.typeLine || undefined,\n                    frame: values.frame || undefined,\n                    sortByDirection: values.sortByDirection,\n                    priceOperator: values.priceOperator,\n                    sortBy: values.sortBy,\n                },\n                // Always start at page 1 after filtering\n                1\n            );\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    useEffect(() => {\n        (async () => {\n            const names = await setNameQuery();\n\n            const setNameOptions = names.map((name, idx) => ({\n                key: `set${idx}`,\n                value: name,\n                text: name,\n            }));\n\n            const concatWithBlankOption = [\n                { key: 'snull', value: '', text: 'None' },\n                ...setNameOptions,\n            ];\n\n            setEditionDropdownOptions(concatWithBlankOption);\n        })();\n    }, []);\n\n    const { handleChange, setFieldValue, handleSubmit, values } = useFormik({\n        initialValues: initialFilters,\n        validate,\n        onSubmit,\n    });\n\n    return (\n        <Segment>\n            <h3>Filters</h3>\n\n            <Form>\n                <Form.Group widths=\"4\">\n                    <FormikControlledSearchBar\n                        label=\"Card name\"\n                        value={values.title}\n                        onChange={(v) => setFieldValue('title', v)}\n                    />\n                    <FormSelectField\n                        name=\"format\"\n                        label=\"Format\"\n                        options={formatDropdownOptions}\n                        onChange={(v) => setFieldValue('format', v)}\n                    />\n                    <FormSelectField\n                        name=\"setName\"\n                        label=\"Edition\"\n                        options={editionDropdownOptions}\n                        onChange={(v) => setFieldValue('setName', v)}\n                        search\n                    />\n                    <FormSelectField\n                        name=\"finish\"\n                        label=\"Finish\"\n                        options={finishDropdownOptions}\n                        onChange={(v) => setFieldValue('finish', v)}\n                    />\n                </Form.Group>\n                <Form.Group widths=\"4\">\n                    <FormSelectField\n                        name=\"colorsArray\"\n                        label=\"Colors\"\n                        options={sortByColorDropdownOptions}\n                        onChange={(v) => setFieldValue('colorsArray', v)}\n                        multiple\n                    />\n                    <FormSelectField\n                        name=\"colorSpecificity\"\n                        label=\"Color specificity\"\n                        options={colorSpecificityDropdownOptions}\n                        onChange={(v) => setFieldValue('colorSpecificity', v)}\n                    />\n                    <FormSelectField\n                        name=\"typeLine\"\n                        label=\"Type Line\"\n                        options={typeLineOptions}\n                        onChange={(v) => setFieldValue('typeLine', v)}\n                    />\n                    <FormSelectField\n                        name=\"frame\"\n                        label=\"Frame Effects\"\n                        options={frameOptions}\n                        onChange={(v) => setFieldValue('frame', v)}\n                    />\n                    <Form.Field>\n                        <label>Price Filter</label>\n                        <Input\n                            label={\n                                <FormikDropdown\n                                    name=\"priceOperator\"\n                                    options={priceOperatorDropdownOptions}\n                                    onChange={(v) =>\n                                        setFieldValue('priceOperator', v)\n                                    }\n                                    defaultValue=\"gte\"\n                                />\n                            }\n                            placeholder=\"Enter a price\"\n                            labelPosition=\"left\"\n                            name=\"price\"\n                            type=\"number\"\n                            onChange={handleChange}\n                        />\n                    </Form.Field>\n                </Form.Group>\n                <h3>{'Sort & Order'}</h3>\n                <Form.Group>\n                    <FormSelectField\n                        name=\"sortBy\"\n                        label=\"Sort by\"\n                        options={sortByDropdownOptions}\n                        defaultValue={initialFilters.price}\n                        onChange={(v) => setFieldValue('sortBy', v)}\n                    />\n                    <FormSelectField\n                        name=\"sortByDirection\"\n                        label=\"Order\"\n                        options={sortByDirectionDropdownOptions}\n                        defaultValue={initialFilters.sortByDirection}\n                        onChange={(v) => setFieldValue('sortByDirection', v)}\n                    />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Button\n                        type=\"submit\"\n                        onClick={() => handleSubmit()}\n                        primary\n                    >\n                        Submit\n                    </Form.Button>\n                </Form.Group>\n            </Form>\n        </Segment>\n    );\n};\n\nexport default BrowseInventoryForm;\n","import React, { FC } from 'react';\nimport { Table, Icon } from 'semantic-ui-react';\nimport Price from '../common/Price';\nimport CardImageTooltip from '../ui/CardImageTooltip';\nimport SetIcon from '../ui/SetIcon';\nimport { ResponseCard } from './filteredCardsQuery';\n\nconst conditionMap = {\n    NM: 'Near Mint',\n    LP: 'Light Play',\n    MP: 'Moderate Play',\n    HP: 'Heavy Play',\n};\n\ntype Condition = keyof typeof conditionMap;\n\ninterface Props {\n    card: ResponseCard;\n}\n\nconst BrowseInventoryRow: FC<Props> = ({\n    card: {\n        finishCondition,\n        quantityInStock,\n        name,\n        set_name,\n        price,\n        set,\n        rarity,\n        image_uri,\n    },\n}) => {\n    const finish = finishCondition.split('_')[0];\n    const condition = finishCondition.split('_')[1] as Condition;\n\n    return (\n        <Table.Row>\n            <Table.Cell>\n                <CardImageTooltip cardImage={image_uri}>\n                    <span style={{ cursor: 'help' }}>{name} </span>\n                </CardImageTooltip>\n                {finish === 'FOIL' && <Icon name=\"star\" color=\"blue\" />}\n            </Table.Cell>\n            <Table.Cell>\n                <SetIcon set={set} rarity={rarity} />\n                {set_name}\n            </Table.Cell>\n            <Table.Cell>{conditionMap[condition]}</Table.Cell>\n            <Table.Cell>{quantityInStock}</Table.Cell>\n            <Table.Cell>\n                <Price num={price} />\n            </Table.Cell>\n        </Table.Row>\n    );\n};\n\nexport default BrowseInventoryRow;\n","import axios from 'axios';\nimport { GET_CARDS_BY_FILTER } from '../utils/api_resources';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { FinishCondition } from '../utils/ScryfallCard';\n\nexport interface Filters {\n    title?: string;\n    setName?: string;\n    format?: string;\n    price?: number;\n    finish?: string;\n    colors?: string;\n    colorSpecificity?: string;\n    type?: string;\n    frame?: string;\n    sortByDirection: number;\n    priceOperator: string;\n    sortBy: string;\n}\n\ntype Params = Filters & { page: number };\n\nexport interface ResponseCard {\n    _id: string;\n    image_uri: string;\n    name: string;\n    price: number;\n    rarity: string;\n    set: string;\n    set_name: string;\n    finishCondition: FinishCondition;\n    quantityInStock: number;\n}\n\ninterface ResponseData {\n    cards: ResponseCard[];\n    total: number;\n}\n\nconst filteredCardsQuery = async (filters: Filters, page: number) => {\n    const params: Params = { ...filters, page };\n\n    const { data } = await axios.get<ResponseData>(GET_CARDS_BY_FILTER, {\n        params,\n        headers: makeAuthHeader(),\n    });\n\n    return data;\n};\n\nexport default filteredCardsQuery;\n","import React, { FC, useState } from 'react';\nimport BrowseInventoryForm, { initialFilters } from './BrowseInventoryForm';\nimport BrowseInventoryRow from './BrowseInventoryRow';\nimport {\n    Table,\n    Menu,\n    Icon,\n    Dimmer,\n    Loader,\n    Segment,\n    Header,\n    Container,\n} from 'semantic-ui-react';\nimport _ from 'lodash';\nimport filteredCardsQuery, {\n    Filters,\n    ResponseCard,\n} from './filteredCardsQuery';\nconst LIMIT = 100; // Matching the backend for now\n\ninterface State {\n    cards: ResponseCard[];\n    count: number;\n    currentPage: number;\n    numPages: number;\n    isLoading: boolean;\n    cachedFilters: Filters;\n    showPages: any[];\n    searchTouched: boolean;\n}\n\nconst BrowseInventory: FC = () => {\n    const [state, setState] = useState<State>({\n        cards: [],\n        count: 0,\n        currentPage: 0,\n        numPages: 0,\n        isLoading: false,\n        cachedFilters: initialFilters,\n        showPages: [],\n        searchTouched: false, // Tracks whether the user has initially searched for the 'no results' message\n    });\n\n    const fetchData = async (filters: Filters, page: number) => {\n        try {\n            setState({ ...state, isLoading: true });\n\n            const { cards, total } = await filteredCardsQuery(filters, page);\n\n            const numPages = Math.ceil(total / LIMIT);\n            const pages = _.range(1, numPages + 1);\n            let showPages;\n\n            // Logic that controls the visibility of page number links\n            // Default max number pages to display is 5\n            if (page <= 3) {\n                showPages = pages.slice(0, 5);\n            } else if (page >= numPages - 2) {\n                showPages = pages.slice(numPages - 5, numPages);\n            } else {\n                showPages = pages.slice(page - 2, page + 3);\n            }\n\n            setState({\n                ...state,\n                cards: cards,\n                count: total,\n                isLoading: false,\n                numPages: numPages,\n                currentPage: page,\n                showPages: showPages,\n                searchTouched: true,\n                // Set the filters for pagination requests later\n                cachedFilters: filters,\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const {\n        cards,\n        isLoading,\n        currentPage,\n        numPages,\n        showPages,\n        count,\n        cachedFilters,\n    } = state;\n    const showLeftPageButtons = !(currentPage === 1);\n    const showRightPageButtons = !(currentPage === numPages);\n\n    return (\n        <Container>\n            <Dimmer\n                active={isLoading}\n                inverted\n                page\n                style={{ marginTop: '52.63px' }}\n            >\n                <Loader size=\"large\">Loading</Loader>\n            </Dimmer>\n            <Segment secondary>\n                <Icon name=\"exclamation triangle\" color=\"blue\" />\n                Prices from this table are updated weekly and are subject to\n                fluctuations. Consult 'New Sale' or 'Manage Inventory' for\n                up-to-date values\n            </Segment>\n            <BrowseInventoryForm doSubmit={fetchData} />\n            {!!cards.length && (\n                <Table celled striped compact>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell colSpan=\"5\">\n                                <Menu floated>\n                                    <Menu.Item>\n                                        Viewing page {currentPage} of {numPages}\n                                    </Menu.Item>\n                                </Menu>\n                                <Menu floated=\"right\">\n                                    {showLeftPageButtons && (\n                                        <Menu.Item\n                                            as=\"a\"\n                                            icon\n                                            onClick={() =>\n                                                fetchData(\n                                                    cachedFilters,\n                                                    currentPage - 1\n                                                )\n                                            }\n                                        >\n                                            <Icon name=\"chevron left\" />\n                                        </Menu.Item>\n                                    )}\n                                    <React.Fragment>\n                                        {showPages.map((p) => {\n                                            return (\n                                                <Menu.Item\n                                                    key={`page-${p}`}\n                                                    onClick={() =>\n                                                        fetchData(\n                                                            cachedFilters,\n                                                            p\n                                                        )\n                                                    }\n                                                    active={currentPage === p}\n                                                    disabled={currentPage === p}\n                                                    as=\"a\"\n                                                >\n                                                    {p}\n                                                </Menu.Item>\n                                            );\n                                        })}\n                                    </React.Fragment>\n                                    {showRightPageButtons && (\n                                        <Menu.Item\n                                            as=\"a\"\n                                            icon\n                                            onClick={() =>\n                                                fetchData(\n                                                    cachedFilters,\n                                                    currentPage + 1\n                                                )\n                                            }\n                                        >\n                                            <Icon name=\"chevron right\" />\n                                        </Menu.Item>\n                                    )}\n                                </Menu>\n                            </Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Name</Table.HeaderCell>\n                            <Table.HeaderCell>Edition</Table.HeaderCell>\n                            <Table.HeaderCell>Condition</Table.HeaderCell>\n                            <Table.HeaderCell>Qty</Table.HeaderCell>\n                            <Table.HeaderCell>Price</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {cards.map((card) => (\n                            <BrowseInventoryRow\n                                key={`${card._id}-${card.finishCondition}`}\n                                card={card}\n                            />\n                        ))}\n                    </Table.Body>\n                    <Table.Footer>\n                        <Table.Row>\n                            <Table.HeaderCell colSpan=\"5\">\n                                <Menu floated>\n                                    <Menu.Item>\n                                        Total results: {count}\n                                    </Menu.Item>\n                                </Menu>\n                                <Menu floated=\"right\">\n                                    {showLeftPageButtons && (\n                                        <Menu.Item\n                                            as=\"a\"\n                                            icon\n                                            onClick={() =>\n                                                fetchData(\n                                                    cachedFilters,\n                                                    currentPage - 1\n                                                )\n                                            }\n                                        >\n                                            <Icon name=\"chevron left\" />\n                                        </Menu.Item>\n                                    )}\n                                    <React.Fragment>\n                                        {showPages.map((p) => {\n                                            return (\n                                                <Menu.Item\n                                                    key={`page-${p}`}\n                                                    onClick={() =>\n                                                        fetchData(\n                                                            cachedFilters,\n                                                            p\n                                                        )\n                                                    }\n                                                    active={currentPage === p}\n                                                    disabled={currentPage === p}\n                                                    as=\"a\"\n                                                >\n                                                    {p}\n                                                </Menu.Item>\n                                            );\n                                        })}\n                                    </React.Fragment>\n                                    {showRightPageButtons && (\n                                        <Menu.Item\n                                            as=\"a\"\n                                            icon\n                                            onClick={() =>\n                                                fetchData(\n                                                    cachedFilters,\n                                                    currentPage + 1\n                                                )\n                                            }\n                                        >\n                                            <Icon name=\"chevron right\" />\n                                        </Menu.Item>\n                                    )}\n                                </Menu>\n                            </Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Footer>\n                </Table>\n            )}\n            {!cards.length && (\n                <Segment placeholder>\n                    <Header icon>\n                        <Icon name=\"search\" />\n                        {state.searchTouched\n                            ? 'No results found'\n                            : 'Use the filters to browse inventory'}\n                    </Header>\n                </Segment>\n            )}\n        </Container>\n    );\n};\n\nexport default BrowseInventory;\n","import React from 'react';\nimport createToast from '../common/createToast';\nimport { Form, Button, Segment } from 'semantic-ui-react';\nimport { Redirect } from 'react-router-dom';\nimport { ClubhouseLocation, useAuthContext } from '../context/AuthProvider';\nimport styled from 'styled-components';\nimport { FormikErrors, useFormik } from 'formik';\nimport FormikSelectField from '../ui/FormikSelectField';\n\ninterface FormValues {\n    username: string;\n    password: string;\n    location: ClubhouseLocation | null;\n}\n\nconst LoginContainer = styled.div`\n    margin-top: 15px;\n    display: flex;\n    justify-content: center;\n`;\n\nconst FormContainer = styled(Segment)`\n    width: 400px;\n    padding: 25px 25px 25px 25px !important;\n`;\n\nconst initialFormValues: FormValues = {\n    username: '',\n    password: '',\n    location: null,\n};\n\nconst locationDropdownOptions = [\n    {\n        key: 'beaverton',\n        text: 'Beaverton',\n        value: 'ch1',\n    },\n    {\n        key: 'hillsboro',\n        text: 'Hillsboro',\n        value: 'ch2',\n    },\n];\n\nconst validate = ({ username, password, location }: FormValues) => {\n    const errors: FormikErrors<FormValues> = {};\n\n    if (!username) {\n        errors.username = 'Required';\n    }\n\n    if (!password) {\n        errors.password = 'Required';\n    }\n\n    if (!location) {\n        errors.location = 'Please select a location';\n    }\n\n    return errors;\n};\n\nconst Login = () => {\n    const { loggedIn, handleLogin } = useAuthContext();\n\n    const onSubmit = async ({ username, password, location }: FormValues) => {\n        if (!location) return;\n\n        const data = await handleLogin(username, password, location);\n\n        if (data.token) {\n            createToast({\n                color: 'green',\n                header: 'Success',\n                message: `Enjoy your time here!`,\n            });\n        } else {\n            createToast({\n                color: 'red',\n                header: 'Error',\n                message: data,\n            });\n        }\n    };\n\n    const {\n        handleChange,\n        handleSubmit,\n        setFieldValue,\n        errors,\n        isSubmitting,\n    } = useFormik({\n        initialValues: initialFormValues,\n        validate,\n        onSubmit,\n        validateOnChange: false,\n    });\n\n    if (loggedIn) return <Redirect to=\"/manage-inventory\" />;\n\n    return (\n        <LoginContainer>\n            <FormContainer raised loading={isSubmitting}>\n                <Form>\n                    <Form.Field>\n                        <label>Username</label>\n                        <Form.Input\n                            error={errors.username}\n                            onChange={handleChange}\n                            name=\"username\"\n                        />\n                    </Form.Field>\n                    <Form.Field>\n                        <label>Password</label>\n                        <Form.Input\n                            error={errors.password}\n                            type=\"password\"\n                            onChange={handleChange}\n                            name=\"password\"\n                        />\n                    </Form.Field>\n                    <FormikSelectField\n                        error={errors.location}\n                        label=\"Location\"\n                        name=\"location\"\n                        placeholder=\"Select location\"\n                        options={locationDropdownOptions}\n                        onChange={(v) => {\n                            setFieldValue('location', v);\n                        }}\n                    />\n                    <Button\n                        primary\n                        fluid\n                        type=\"submit\"\n                        onClick={() => handleSubmit()}\n                    >\n                        Submit\n                    </Button>\n                </Form>\n            </FormContainer>\n        </LoginContainer>\n    );\n};\n\nexport default Login;\n","import React, { FC } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useAuthContext } from '../context/AuthProvider';\n\nconst Logout: FC = () => {\n    const { handleLogout } = useAuthContext();\n    handleLogout();\n    return <Redirect to=\"/login\" />;\n};\n\nexport default Logout;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { RECEIVE_CARDS } from '../utils/api_resources';\nimport { Trade } from './ReceivingContext';\n\ninterface ReceivingQueryCard {\n    quantity: number;\n    finishCondition: string;\n    id: string;\n    name: string;\n    set_name: string;\n    set: string;\n    marketPrice: number | null;\n    cashPrice: number | null;\n    creditPrice: number | null;\n    tradeType: Trade;\n}\n\ninterface Payload {\n    cards: ReceivingQueryCard[];\n    customerName: string;\n    customerContact: string | null;\n}\n\nconst receivingQuery = async ({\n    cards,\n    customerName,\n    customerContact,\n}: Payload) => {\n    try {\n        // We do not expect to use the return type, so we designate it `void`\n        const { data } = await axios.post<void>(\n            RECEIVE_CARDS,\n            { cards, customerName, customerContact },\n            { headers: makeAuthHeader() }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default receivingQuery;\n","import React, { useContext, FC, ChangeEvent } from 'react';\nimport $ from 'jquery';\nimport { Input, Button, Form, Item } from 'semantic-ui-react';\nimport CardImage from '../common/CardImage';\nimport createToast from '../common/createToast';\nimport { ReceivingContext } from '../context/ReceivingContext';\nimport { finishes, cardConditions } from '../utils/dropdownOptions';\nimport checkCardFinish, { Finish } from '../utils/checkCardFinish';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport CardHeader from '../ui/CardHeader';\nimport { FormikErrors, useFormik } from 'formik';\nimport FormikSelectField from '../ui/FormikSelectField';\nimport { Box, Paper } from '@material-ui/core';\n\ninterface Props {\n    card: ScryfallCard;\n}\n\ntype Condition = 'NM' | 'LP' | 'MP' | 'HP';\n\ninterface FormValues {\n    quantity: number;\n    cashPrice: number;\n    creditPrice: number;\n    marketPrice: number;\n    selectedCondition: Condition;\n    selectedFinish: Finish;\n}\n\nconst validate = ({\n    quantity,\n    cashPrice,\n    creditPrice,\n    marketPrice,\n    selectedFinish,\n    selectedCondition,\n}: FormValues) => {\n    const errors: FormikErrors<FormValues> = {};\n\n    if (!quantity) errors.quantity = 'error';\n\n    if (!cashPrice && !creditPrice) {\n        errors.cashPrice = 'error';\n        errors.creditPrice = 'error';\n    }\n\n    if (cashPrice) {\n        // Cards with cash prices must have market prices specified\n        if (!marketPrice) errors.marketPrice = 'error';\n    }\n\n    if (!selectedFinish) errors.selectedFinish = 'error';\n    if (!selectedCondition) errors.selectedCondition = 'error';\n\n    return errors;\n};\n\nconst ReceivingSearchItem: FC<Props> = ({ card }) => {\n    const initialValues: FormValues = {\n        quantity: 1,\n        cashPrice: 0,\n        creditPrice: 0,\n        marketPrice: 0,\n        selectedCondition: 'NM',\n        selectedFinish: checkCardFinish(card.nonfoil, card.foil).selectedFinish,\n    };\n\n    // Determines whether the select finish dropdown is permanently disabled, seeded from props\n    const finishDisabled = checkCardFinish(card.nonfoil, card.foil)\n        .finishDisabled;\n\n    const { addToList } = useContext(ReceivingContext);\n\n    const handleFocus = (e: ChangeEvent<HTMLInputElement>) => e.target.select();\n\n    const handleInventoryAdd = ({\n        quantity,\n        cashPrice,\n        creditPrice,\n        marketPrice,\n        selectedFinish,\n        selectedCondition,\n    }: FormValues) => {\n        if (!quantity) throw new Error('Quantity is missing');\n\n        addToList(quantity, card, {\n            cashPrice: cashPrice || 0,\n            marketPrice: marketPrice || 0,\n            creditPrice: creditPrice || 0,\n            finishCondition: `${selectedFinish}_${selectedCondition}`, // ex. NONFOIL_NM\n        });\n\n        createToast({\n            color: 'green',\n            header: `${quantity}x ${card.name} added to buylist!`,\n            duration: 2000,\n        });\n\n        // Highlight the input after successful card add\n        $('#searchBar').focus().select();\n    };\n\n    const {\n        handleSubmit,\n        setFieldValue,\n        values,\n        isValid,\n        handleChange,\n    } = useFormik({\n        initialValues,\n        validate,\n        onSubmit: (v, { resetForm }) => {\n            handleInventoryAdd(v);\n            resetForm();\n        },\n        validateOnMount: true,\n    });\n\n    const { cardImage } = card;\n\n    return (\n        <Paper variant=\"outlined\">\n            <Box p={2}>\n                <Item.Group divided>\n                    <Item>\n                        <Item.Image size=\"small\">\n                            <CardImage image={cardImage} />\n                        </Item.Image>\n                        <Item.Content>\n                            <CardHeader\n                                card={card}\n                                selectedFinish={values.selectedFinish}\n                                showMid\n                            />\n                            <Item.Description>\n                                <Form>\n                                    <Form.Group widths=\"equal\">\n                                        <Form.Field\n                                            fluid\n                                            control={Input}\n                                            type=\"number\"\n                                            label=\"Quantity\"\n                                            value={values.quantity}\n                                            onChange={(\n                                                _: any,\n                                                { value }: { value: string }\n                                            ) => {\n                                                const castVal = parseInt(value);\n                                                setFieldValue(\n                                                    'quantity',\n                                                    Math.min(\n                                                        castVal < 0\n                                                            ? 0\n                                                            : castVal,\n                                                        50\n                                                    )\n                                                );\n                                            }}\n                                            onFocus={(\n                                                e: ChangeEvent<HTMLInputElement>\n                                            ) => e.target.select()}\n                                        />\n                                        <Form.Field\n                                            fluid\n                                            label=\"Credit Price\"\n                                            name=\"creditPrice\"\n                                            control={Input}\n                                            type=\"number\"\n                                            value={values.creditPrice}\n                                            onChange={handleChange}\n                                            onFocus={handleFocus}\n                                            step=\"0.25\"\n                                        />\n                                        <Form.Field\n                                            fluid\n                                            label=\"Cash Price\"\n                                            name=\"cashPrice\"\n                                            control={Input}\n                                            type=\"number\"\n                                            value={values.cashPrice}\n                                            onChange={handleChange}\n                                            onFocus={handleFocus}\n                                            step=\"0.25\"\n                                        />\n                                        <Form.Field\n                                            fluid\n                                            label=\"Market Price\"\n                                            name=\"marketPrice\"\n                                            control={Input}\n                                            type=\"number\"\n                                            value={values.marketPrice}\n                                            onChange={handleChange}\n                                            onFocus={handleFocus}\n                                            step=\"0.25\"\n                                            disabled={!values.cashPrice}\n                                        />\n                                    </Form.Group>\n                                    <Form.Group widths=\"equal\">\n                                        <FormikSelectField\n                                            label=\"Finish\"\n                                            name=\"selectedFinish\"\n                                            options={finishes}\n                                            defaultValue={\n                                                initialValues.selectedFinish\n                                            }\n                                            onChange={(v) => {\n                                                setFieldValue(\n                                                    'selectedFinish',\n                                                    v\n                                                );\n                                            }}\n                                            disabled={finishDisabled}\n                                        />\n                                        <FormikSelectField\n                                            label=\"Condition\"\n                                            name=\"selectedCondition\"\n                                            options={cardConditions}\n                                            defaultValue={\n                                                initialValues.selectedCondition\n                                            }\n                                            onChange={(v) => {\n                                                setFieldValue(\n                                                    'selectedCondition',\n                                                    v\n                                                );\n                                            }}\n                                        />\n                                        <Form.Button\n                                            type=\"submit\"\n                                            label=\"Add to List?\"\n                                            control={Button}\n                                            primary\n                                            disabled={!isValid}\n                                            onClick={() => handleSubmit()}\n                                        >\n                                            Add\n                                        </Form.Button>\n                                    </Form.Group>\n                                </Form>\n                            </Item.Description>\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Box>\n        </Paper>\n    );\n};\n\nexport default ReceivingSearchItem;\n","import React, { useState, useContext, FC } from 'react';\nimport { Button, Label, Icon, Grid, Segment, Header } from 'semantic-ui-react';\nimport Price from '../common/Price';\nimport {\n    ReceivingCard,\n    ReceivingContext,\n    Trade,\n} from '../context/ReceivingContext';\nimport SetIcon from '../ui/SetIcon';\nimport CardImageTooltip from '../ui/CardImageTooltip';\n\ninterface Props {\n    card: ReceivingCard;\n}\n\n// Defines whether it uses cash or credit for trade types\nconst TRADE_TYPE = { CASH: 'CASH', CREDIT: 'CREDIT' };\n\nconst ReceivingCartItem: FC<Props> = ({\n    card: {\n        display_name,\n        set,\n        rarity,\n        cashPrice,\n        creditPrice,\n        finishCondition,\n        uuid_key,\n        tradeType,\n        cardImage,\n    },\n}) => {\n    const { CASH, CREDIT } = TRADE_TYPE;\n    const [hovered, setHovered] = useState(false);\n    const { removeFromList, activeTradeType } = useContext(ReceivingContext);\n\n    return (\n        <Segment>\n            <Grid verticalAlign=\"middle\">\n                <Grid.Column tablet={16} computer={11}>\n                    <div>\n                        <CardImageTooltip cardImage={cardImage}>\n                            <Header as=\"h4\" style={{ cursor: 'help' }}>\n                                {display_name}\n                            </Header>\n                        </CardImageTooltip>\n                    </div>\n                    <SetIcon set={set} rarity={rarity} />\n                    <Label color=\"grey\">{set.toUpperCase()}</Label>\n                    {finishCondition && (\n                        <span>\n                            {finishCondition.split('_')[1]} {' | '}\n                            {finishCondition.split('_')[0]}\n                        </span>\n                    )}\n                    <div>\n                        <span style={{ whiteSpace: 'nowrap' }}>\n                            Cash:{' '}\n                            <b>\n                                <Price num={cashPrice || 0} />\n                            </b>\n                        </span>\n                        {' • '}\n                        <span style={{ whiteSpace: 'nowrap' }}>\n                            Credit:{' '}\n                            <b>\n                                <Price num={creditPrice || 0} />\n                            </b>\n                        </span>\n                    </div>\n                </Grid.Column>\n                <Grid.Column tablet={16} computer={5} textAlign=\"right\">\n                    <Button\n                        compact\n                        active={tradeType === CASH}\n                        color={tradeType === CASH ? 'blue' : undefined}\n                        onClick={() => activeTradeType(uuid_key, Trade.Cash)}\n                        disabled={cashPrice === 0}\n                        icon\n                    >\n                        <Icon name=\"dollar sign\"></Icon>\n                    </Button>\n                    <Button\n                        compact\n                        active={tradeType === CREDIT}\n                        color={tradeType === CREDIT ? 'blue' : undefined}\n                        onClick={() => activeTradeType(uuid_key, Trade.Credit)}\n                        disabled={creditPrice === 0}\n                        icon\n                    >\n                        <Icon name=\"credit card outline\"></Icon>\n                    </Button>\n                    <Button\n                        compact\n                        icon=\"cancel\"\n                        circular\n                        onClick={() => removeFromList(uuid_key)}\n                        onMouseOver={() => setHovered(true)}\n                        onMouseOut={() => setHovered(false)}\n                        color={hovered ? 'red' : undefined}\n                    />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    );\n};\n\nexport default ReceivingCartItem;\n","import React, { FC } from 'react';\nimport _ from 'lodash';\nimport Price from '../common/Price';\nimport { Table } from 'semantic-ui-react';\nimport { ReceivingCard } from '../context/ReceivingContext';\n\ninterface Props {\n    receivingList: ReceivingCard[];\n}\n\n// Am I crazy or is this logic really convoluted?\n// Perhaps look at this down the line for improvement...\nconst CashReport: FC<Props> = ({ receivingList }) => {\n    // If id, cashPrice and marketPrice are the same, goes in one bucket\n    const countByPriceAndID = _.chain(receivingList)\n        .filter((c) => c.tradeType === 'CASH')\n        .map((c) => {\n            // Note: We're creating a unique uuid-esque comparator string based on:\n            // `id`, `cashPrice`, `marketPrice`, and `finishCondition`\n            return {\n                ...c,\n                temp_uuid: `${c.id}-${c.cashPrice}-${c.marketPrice}-${c.finishCondition}`,\n            };\n        })\n        .groupBy('temp_uuid')\n        .mapValues((val) => val.length)\n        .value();\n\n    const uniqLineItems = _.chain(receivingList)\n        .filter((c) => c.tradeType === 'CASH')\n        .map((c) => {\n            return {\n                ...c,\n                temp_uuid: `${c.id}-${c.cashPrice}-${c.marketPrice}-${c.finishCondition}`,\n            };\n        })\n        .uniqBy('temp_uuid')\n        .value();\n\n    const mergedWithQty = uniqLineItems.map((c) => {\n        return { ...c, tradeQty: countByPriceAndID[c.temp_uuid] }; // Add a trade quantity referencing the previous count\n    });\n\n    const totalCashOut = _.chain(receivingList)\n        .filter((c) => c.tradeType === 'CASH')\n        .sumBy((c) => c.cashPrice || 0)\n        .value();\n\n    return (\n        <React.Fragment>\n            <div id=\"cash-report\">\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell colSpan={6}>\n                                Employee Name:\n                            </Table.HeaderCell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.HeaderCell>Card Name</Table.HeaderCell>\n                            <Table.HeaderCell>Market Value</Table.HeaderCell>\n                            <Table.HeaderCell>Condition</Table.HeaderCell>\n                            <Table.HeaderCell>Quantity</Table.HeaderCell>\n                            <Table.HeaderCell>Cash Offer</Table.HeaderCell>\n                            <Table.HeaderCell>Cash Out</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {mergedWithQty.map((c) => {\n                            return (\n                                <Table.Row key={c.temp_uuid}>\n                                    <Table.Cell>{c.name}</Table.Cell>\n                                    <Table.Cell>\n                                        <Price num={c.marketPrice} />\n                                    </Table.Cell>\n                                    <Table.Cell>{c.finishCondition}</Table.Cell>\n                                    <Table.Cell>{c.tradeQty}</Table.Cell>\n                                    <Table.Cell>\n                                        <Price num={c.cashPrice} />\n                                    </Table.Cell>\n                                    <Table.Cell>\n                                        <Price\n                                            num={\n                                                c.tradeQty * (c.cashPrice || 0)\n                                            }\n                                        />\n                                    </Table.Cell>\n                                </Table.Row>\n                            );\n                        })}\n                    </Table.Body>\n                    <Table.Footer>\n                        <Table.HeaderCell colSpan={6}>\n                            Total: <Price num={totalCashOut} />\n                        </Table.HeaderCell>\n                    </Table.Footer>\n                </Table>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default CashReport;\n","import React, { useState, useContext, FC } from 'react';\nimport { Modal, Button, Form, List, Header } from 'semantic-ui-react';\nimport { ReceivingContext, Trade } from '../context/ReceivingContext';\nimport Price from '../common/Price';\nimport { FormikErrors, useFormik } from 'formik';\nimport sum from '../utils/sum';\n\ninterface Props {}\n\ninterface FormValues {\n    customerName: string;\n    customerContact: string;\n}\n\nconst initialFormValues: FormValues = {\n    customerName: '',\n    customerContact: '',\n};\n\n// TODO: Extract and generalize this\nconst validate = ({ customerName, customerContact }: FormValues) => {\n    const errors: FormikErrors<FormValues> = {};\n\n    if (!customerName) {\n        errors.customerName = 'Required';\n    }\n\n    if (customerName.length < 3) {\n        errors.customerName = 'Min 3 characters';\n    }\n\n    if (customerName.length > 50) {\n        errors.customerName = 'Max 50 characters';\n    }\n\n    if (customerContact.length > 50) {\n        errors.customerContact = 'Max 50 characters';\n    }\n\n    return errors;\n};\n\nconst ReceivingListModal: FC<Props> = () => {\n    const [loading, setLoading] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n\n    const { receivingList, commitToInventory } = useContext(ReceivingContext);\n\n    const onSubmit = async ({ customerName, customerContact }: FormValues) => {\n        setLoading(true);\n        await commitToInventory(\n            customerName,\n            customerContact ? customerContact : null\n        );\n        setLoading(false);\n    };\n\n    const { handleChange, handleSubmit, errors } = useFormik({\n        initialValues: initialFormValues,\n        validate,\n        onSubmit,\n    });\n\n    const cashTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Trade.Cash)\n            .map((c) => c.cashPrice || 0)\n    );\n\n    const creditTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Trade.Credit)\n            .map((c) => c.creditPrice || 0)\n    );\n\n    return (\n        <>\n            <Button\n                color=\"blue\"\n                disabled={receivingList.length === 0}\n                onClick={() => setShowModal(true)}\n            >\n                Commit to inventory\n            </Button>\n            {setShowModal && (\n                <Modal\n                    closeOnDimmerClick={false}\n                    open={showModal}\n                    onClose={() => setShowModal(false)}\n                >\n                    <Modal.Header>Receiving confirmation</Modal.Header>\n                    <Modal.Content scrolling>\n                        <Header as=\"h5\">\n                            Committing the following cards to inventory:\n                        </Header>\n                        <List>\n                            {receivingList.map((c) => {\n                                return (\n                                    <List.Item key={c.uuid_key}>\n                                        {`● ${c.name} | ${c.set_name} (\n                                        ${c.set.toUpperCase()})`}\n                                    </List.Item>\n                                );\n                            })}\n                        </List>\n                        <Header as=\"h5\">The customer is owed:</Header>\n                        <List>\n                            {cashTotal > 0 ? (\n                                <List.Item>\n                                    ● <Price num={cashTotal} /> in cold, hard\n                                    cash\n                                </List.Item>\n                            ) : null}\n                            {creditTotal > 0 ? (\n                                <List.Item>\n                                    ● <Price num={creditTotal} /> in store\n                                    credit\n                                </List.Item>\n                            ) : null}\n                        </List>\n                    </Modal.Content>\n                    <Modal.Content>\n                        <Form>\n                            <Form.Group widths=\"equal\">\n                                <Form.Field>\n                                    <label>Customer name</label>\n                                    <Form.Input\n                                        onChange={handleChange}\n                                        name=\"customerName\"\n                                        error={errors.customerName}\n                                    />\n                                </Form.Field>\n                                <Form.Field>\n                                    <label>Customer contact (optional)</label>\n                                    <Form.Input\n                                        onChange={handleChange}\n                                        name=\"customerContact\"\n                                        error={errors.customerContact}\n                                    />\n                                </Form.Field>\n                            </Form.Group>\n                        </Form>\n                    </Modal.Content>\n                    <Modal.Actions>\n                        <Button onClick={() => setShowModal(false)}>\n                            Cancel\n                        </Button>\n                        <Button\n                            color=\"blue\"\n                            type=\"submit\"\n                            loading={loading}\n                            disabled={loading}\n                            onClick={() => handleSubmit()}\n                        >\n                            Submit\n                        </Button>\n                    </Modal.Actions>\n                </Modal>\n            )}\n        </>\n    );\n};\n\nexport default ReceivingListModal;\n","import React, { useState, useContext, FC } from 'react';\nimport { Segment, Statistic, Button, Modal } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport Price from '../common/Price';\nimport CashReport from './CashReport';\nimport printCashReport from './printCashReport';\nimport ReceivingListModal from './ReceivingListModal';\nimport { ReceivingContext, Trade } from '../context/ReceivingContext';\nimport sum from '../utils/sum';\n\ninterface Props {}\n\nconst FlexRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nconst FlexCol = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n    min-height: 100px;\n`;\n\nconst StatisticColor = styled(Statistic.Label)`\n    color: gray !important;\n`;\n\nconst ReceivingListTotals: FC<Props> = () => {\n    const { Cash, Credit } = Trade;\n    const [showCashModal, setShowCashModal] = useState(false);\n    const { receivingList, selectAll } = useContext(ReceivingContext);\n\n    const openCashModal = () => setShowCashModal(true);\n    const closeCashModal = () => setShowCashModal(false);\n\n    const handlePrintCashReport = () => {\n        setShowCashModal(false); // Close the modal so users don't have to after printing in new tab\n        printCashReport();\n    };\n\n    const cashTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Cash)\n            .map((c) => c.cashPrice || 0)\n    );\n\n    const creditTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Credit)\n            .map((c) => c.creditPrice || 0)\n    );\n\n    return (\n        <Segment>\n            <FlexRow>\n                <FlexCol>\n                    <Button.Group>\n                        <Button\n                            id=\"select-all-cash\"\n                            onClick={() => selectAll(Trade.Cash)}\n                        >\n                            Select all cash\n                        </Button>\n                        <Button.Or />\n                        <Button\n                            id=\"select-all-credit\"\n                            onClick={() => selectAll(Trade.Credit)}\n                        >\n                            Select all credit\n                        </Button>\n                    </Button.Group>\n                    <Modal\n                        open={showCashModal}\n                        trigger={\n                            <Button\n                                color={cashTotal > 0 ? 'green' : undefined}\n                                disabled={cashTotal === 0}\n                                onClick={openCashModal}\n                            >\n                                Generate cash report\n                            </Button>\n                        }\n                    >\n                        <Modal.Content>\n                            <CashReport receivingList={receivingList} />\n                        </Modal.Content>\n                        <Modal.Actions>\n                            <Button\n                                onClick={handlePrintCashReport}\n                                color=\"blue\"\n                            >\n                                Print Report\n                            </Button>\n                            <Button onClick={closeCashModal}>Cancel</Button>\n                        </Modal.Actions>\n                    </Modal>\n                </FlexCol>\n                <FlexCol>\n                    <Segment>\n                        <div>\n                            <Statistic size=\"mini\">\n                                <StatisticColor>Cash Due</StatisticColor>\n                                <Statistic.Value id=\"cash-total\">\n                                    <Price num={cashTotal} />\n                                </Statistic.Value>\n                            </Statistic>\n                            <Statistic size=\"mini\">\n                                <StatisticColor>Credit Due</StatisticColor>\n                                <Statistic.Value id=\"credit-total\">\n                                    <Price num={creditTotal} />\n                                </Statistic.Value>\n                            </Statistic>\n                        </div>\n                        <ReceivingListModal />\n                    </Segment>\n                </FlexCol>\n            </FlexRow>\n        </Segment>\n    );\n};\n\nexport default ReceivingListTotals;\n","const printStyle = `\n    body {\n        font-family: 'helvetica neue', helvetica, arial, sans-serif;\n    }\n\n    table {\n        table-layout: fixed;\n        width: 100%;\n        border-collapse: collapse;\n        border: 1px solid gray;\n        text-align: left;\n    }\n\n    thead th:nth-child(1) {\n        width: 30%;\n    }\n\n    thead th:nth-child(2) {\n        width: 20%;\n    }\n\n    thead th:nth-child(3) {\n        width: 15%;\n    }\n\n    thead th:nth-child(4) {\n        width: 35%;\n    }\n\n    th, td {\n        border: 1px solid #ddd;\n        padding: 10px;\n    }\n\n    tfoot {\n        text-align: right !important;\n    }\n`;\n\n/**\n * We're creating a new tab here for the modal table and writing CSS to it - not the most elegant solution from a UX and\n * code standpoint, but time was of the essence for this release. Refactor down the road.\n *\n * The id cash-report is found on the cash report table\n */\nexport default function printCashReport() {\n    const divToPrint = document.getElementById('cash-report')!;\n    const popup = window.open('', '_blank');\n    if (popup) {\n        popup.document.open();\n        popup.document.write(`<html>`);\n        popup.document.write(`<head>`);\n        popup.document.write(`<title>Cash Report</title>`);\n        popup.document.write(`<style>${printStyle}</style>`);\n        popup.document.write(`</head>`);\n        popup.document.write(`<body onload=\"window.print()\">`);\n        popup.document.write(`${divToPrint.innerHTML}`);\n        popup.document.write(`</body>`);\n        popup.document.write(`</html>`);\n        popup.document.close();\n    }\n}\n","import React, { FC } from 'react';\nimport { Segment } from 'semantic-ui-react';\nimport { ReceivingCard } from '../context/ReceivingContext';\nimport ReceivingCartItem from './ReceivingCartItem';\nimport ReceivingListTotals from './ReceivingListTotals';\n\ninterface Props {\n    cards: ReceivingCard[];\n}\n\nconst ReceivingCart: FC<Props> = ({ cards }) => {\n    return (\n        <>\n            {cards.length > 0 && (\n                <Segment.Group>\n                    {cards.map((card) => (\n                        <ReceivingCartItem card={card} />\n                    ))}\n                </Segment.Group>\n            )}\n            {cards.length > 0 && <ReceivingListTotals />}\n        </>\n    );\n};\n\nexport default ReceivingCart;\n","import React, { FC, useContext, useEffect, useState } from 'react';\nimport ReceivingSearchItem from './ReceivingSearchItem';\nimport { Divider, Header, Icon, Segment } from 'semantic-ui-react';\nimport { ReceivingContext } from '../context/ReceivingContext';\nimport ReceivingCart from './ReceivingCart';\nimport TotalCardsLabel from '../common/TotalCardsLabel';\nimport TotalStoreInventory from '../ManageInventory/TotalStoreInventory';\nimport { Grid } from '@material-ui/core';\nimport { HeaderText } from '../ui/Typography';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport Loading from '../ui/Loading';\n\ninterface Props {}\n\nconst Receiving: FC<Props> = () => {\n    const [term, setTerm] = useState<string>('');\n    const [loading, setLoading] = useState<boolean>(false);\n    const {\n        searchResults,\n        receivingList,\n        handleSearchSelect,\n        resetSearchResults,\n    } = useContext(ReceivingContext);\n\n    // Reset the search results on componentDidUnmount to clear store\n    useEffect(() => {\n        return () => resetSearchResults();\n    }, []);\n\n    useEffect(() => {\n        if (term) {\n            (async () => {\n                setLoading(true);\n                await handleSearchSelect(term);\n                setLoading(false);\n            })();\n        }\n    }, [term]);\n\n    return (\n        <>\n            <ControlledSearchBar value={term} onChange={(v) => setTerm(v)} />\n            <br />\n            <Grid container spacing={2}>\n                <Grid item xs={12} lg={8}>\n                    <Grid container justify=\"space-between\">\n                        <HeaderText>Card Search</HeaderText>\n                        {searchResults.length > 0 && (\n                            <TotalStoreInventory\n                                searchResults={searchResults}\n                                title={searchResults[0].name}\n                            />\n                        )}\n                    </Grid>\n                    <Divider />\n                    {!loading && !searchResults.length && (\n                        <Segment placeholder>\n                            <Header icon>\n                                <Icon name=\"search\" />\n                                <em>\"So many cards, so little time.\"</em>\n                            </Header>\n                        </Segment>\n                    )}\n                    {loading ? (\n                        <Loading />\n                    ) : (\n                        <Grid container spacing={2}>\n                            {searchResults.map((card) => (\n                                <Grid item xs={12} key={card.id}>\n                                    <ReceivingSearchItem card={card} />\n                                </Grid>\n                            ))}\n                        </Grid>\n                    )}\n                </Grid>\n                <Grid item xs={12} lg={4}>\n                    <Grid container justify=\"space-between\">\n                        <HeaderText>Buylist</HeaderText>\n                        <TotalCardsLabel listLength={receivingList.length} />\n                    </Grid>\n                    <Divider />\n                    {!receivingList.length && (\n                        <Segment placeholder>\n                            <Header icon>\n                                <Icon name=\"search\" />\n                                <em>\"If you receive it, they will come.\"</em>\n                            </Header>\n                        </Segment>\n                    )}\n                    <ReceivingCart cards={receivingList} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default Receiving;\n","import React, { FC } from 'react';\nimport { Redirect, Route, RouteProps } from 'react-router';\nimport { useAuthContext } from './context/AuthProvider';\n\nconst AdminOnly: FC = ({ children }) => {\n    const { currentUser, currentLocation } = useAuthContext();\n\n    if (!currentUser || !currentLocation) {\n        return <Redirect to=\"/\" />;\n    }\n\n    return <>{children}</>;\n};\n\nconst AdminRoute: FC<RouteProps> = ({ children, ...props }) => {\n    return (\n        <Route {...props}>\n            <AdminOnly>{children}</AdminOnly>\n        </Route>\n    );\n};\n\nexport default AdminRoute;\n","export default __webpack_public_path__ + \"static/media/clubhouse_products.e622049f.png\";","export default __webpack_public_path__ + \"static/media/tables.451be904.jpg\";","export default __webpack_public_path__ + \"static/media/learn_to_play.91a17850.jpg\";","export default __webpack_public_path__ + \"static/media/ch2.f55f010a.jpg\";","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport clubhouse_products from './clubhouse_products.png';\nimport ch1 from './tables.jpg';\nimport learn_to_play from './learn_to_play.jpg';\nimport ch2 from './ch2.jpg';\n\nconst colors = {\n    primary: '#2185d0',\n    white: '#ffffff',\n    gray: {\n        light: '#99aab5',\n        main: '#2c2f33',\n        dark: '#23272a',\n    },\n};\n\nconst primaryRgb = '13, 49, 69,';\nconst bodyBackground = '#f8f5ef';\n\nconst desktopMediaQuery = `@media only screen and (min-width: 769px)`;\nconst tabletMediaQuery = `@media only screen and (max-width: 768px)`;\n\nconst headerHeight = 52;\nconst borderRadius = 7;\n\nconst HeroImageContainer = styled('div')({\n    width: '100%',\n    height: 500,\n});\n\nconst Container = styled('div')({\n    marginTop: headerHeight,\n});\n\ninterface ImageProps {\n    src: string;\n    rounded?: boolean;\n}\n\nconst Image = styled.div<ImageProps>`\n    background: url(${({ src }) => src});\n    background-size: cover;\n    height: 100%;\n    width: 100%;\n    border-radius: ${({ rounded }) => (rounded ? `${borderRadius}px` : '0px')};\n`;\n\nconst LocationImageContainer = styled('div')({\n    width: '100%',\n    height: 350,\n    borderRadius: borderRadius,\n});\n\nconst ImageGradient = styled('div')({\n    backgroundImage: `linear-gradient(\n        to top,\n        rgba(${primaryRgb} 0.9),\n        rgba(${primaryRgb} 0.85),\n        rgba(${primaryRgb} 0.70),\n        rgba(${primaryRgb} 0.60),\n        rgba(255, 255, 255, 0)\n    )`,\n    height: '100%',\n    width: '100%',\n});\n\nconst ImageGradient2 = styled('div')({\n    backgroundColor: `rgba(${primaryRgb} 0.85)`,\n    height: '100%',\n    width: '100%',\n    borderRadius: borderRadius,\n});\n\nconst HeroText = styled('h1')({\n    color: colors.white,\n    textAlign: 'center',\n    [tabletMediaQuery]: {\n        fontSize: 40,\n    },\n    [desktopMediaQuery]: {\n        fontSize: 50,\n    },\n});\n\ninterface HeaderTextProps {\n    inverted?: boolean;\n}\n\nconst HeaderText = styled.h1<HeaderTextProps>`\n    color: ${({ inverted }) => (inverted ? colors.white : colors.gray.main)};\n`;\n\nconst SectionText = styled('h2')({\n    color: colors.white,\n    textAlign: 'center',\n});\n\nconst SubheaderText = styled('div')({\n    color: colors.white,\n    fontSize: 18,\n});\n\nconst HeaderContainer = styled('div')({\n    display: 'flex',\n    height: 'inherit',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n});\n\nconst ServicesContainer = styled('div')({\n    display: 'grid',\n    gridGap: 60,\n    [tabletMediaQuery]: {\n        gridTemplateRows: '1fr 1fr 1fr',\n    },\n    [desktopMediaQuery]: {\n        gridTemplateColumns: '1fr 1fr 1fr',\n    },\n});\n\nconst LocationsContainer = styled('div')({\n    display: 'grid',\n    gridGap: 20,\n    [tabletMediaQuery]: {\n        gridTemplateRows: '1fr 1fr',\n    },\n    [desktopMediaQuery]: {\n        gridTemplateColumns: '1fr 1fr',\n    },\n});\n\nconst LocationContainer = styled('div')({\n    padding: 40,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    height: '100%',\n});\n\nconst Content = styled('div')({\n    padding: 20,\n});\n\ninterface DescriptionProps {\n    inverted?: boolean;\n}\n\nconst Description = styled.div<DescriptionProps>`\n    color: ${({ inverted }) => (inverted ? colors.white : colors.gray.main)};\n    font-size: 18px;\n`;\n\nconst TextWidth = styled('div')({\n    [tabletMediaQuery]: {\n        width: '100%',\n    },\n    [desktopMediaQuery]: {\n        width: '50%',\n    },\n});\n\nconst IconContainer = styled('div')({\n    padding: 40,\n    backgroundColor: colors.gray.main,\n    borderRadius: borderRadius,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n});\n\nconst SectionDivider = styled('div')({\n    width: '100%',\n    padding: 40,\n});\n\nconst Footer = styled('div')({\n    bottom: 0,\n    backgroundColor: colors.gray.dark,\n    [tabletMediaQuery]: {\n        padding: 20,\n    },\n    [desktopMediaQuery]: {\n        paddingLeft: 40,\n        paddingBottom: 20,\n        paddingRight: 40,\n        paddingTop: 40,\n    },\n});\n\ninterface FlexRowProps {\n    justify?: 'center' | 'space-between';\n}\n\nconst FlexRow = styled.div<FlexRowProps>`\n    display: flex;\n    justify-content: ${({ justify }) => justify || 'space-between'};\n    align-items: center;\n`;\n\nconst Home: FC = () => {\n    return (\n        <Container style={{ backgroundColor: bodyBackground }}>\n            <HeroImageContainer>\n                <Image src={learn_to_play}>\n                    <ImageGradient>\n                        <HeaderContainer>\n                            <HeroText>The Clubhouse is open 🎉</HeroText>\n                            <TextWidth>\n                                <SubheaderText>\n                                    <SectionText>\n                                        We are open all week for your tabletop\n                                        gaming needs!\n                                    </SectionText>\n                                </SubheaderText>\n                            </TextWidth>\n                            <br />\n                            <Link to=\"/public-inventory\">\n                                <Button size=\"huge\" primary>\n                                    Browse cards\n                                </Button>\n                            </Link>\n                        </HeaderContainer>\n                    </ImageGradient>\n                </Image>\n            </HeroImageContainer>\n            <SectionDivider />\n            <Content>\n                <HeaderText>Your local game store.</HeaderText>\n                <TextWidth>\n                    <Description>\n                        We take pride in our friendly community of players, and\n                        always ensure that our customers are well served.\n                    </Description>\n                </TextWidth>\n            </Content>\n            <Content>\n                <ServicesContainer>\n                    <div>\n                        <IconContainer>\n                            <Icon name=\"box\" size=\"huge\" inverted />\n                            <SectionText>Large product selection</SectionText>\n                        </IconContainer>\n                        <br />\n                        <Description>\n                            We stock an extensive selection of singles and CCG\n                            supplies just for you! When the deck-building itch\n                            strikes, turn to us\n                        </Description>\n                    </div>\n                    <div>\n                        <IconContainer>\n                            <Icon name=\"users\" size=\"huge\" inverted />\n                            <SectionText>Inclusive community</SectionText>\n                        </IconContainer>\n                        <br />\n                        <Description>\n                            Young or seasoned, beginner or advanced, we welcome\n                            all players!\n                        </Description>\n                    </div>\n                    <div>\n                        <IconContainer>\n                            <Icon name=\"dollar sign\" size=\"huge\" inverted />\n                            <SectionText>Cash or credit trade-ins</SectionText>\n                        </IconContainer>\n                        <br />\n                        <Description>\n                            Whether a whole collection or a single card, come on\n                            by and have one of our expert managers appraise it\n                            using competitive market rates\n                        </Description>\n                    </div>\n                </ServicesContainer>\n            </Content>\n            <SectionDivider />\n            <Content>\n                <HeaderText>Two convenient locations</HeaderText>\n                <LocationsContainer>\n                    <LocationImageContainer>\n                        <Image src={ch1} rounded>\n                            <ImageGradient2>\n                                <LocationContainer>\n                                    <HeaderText inverted>Beaverton</HeaderText>\n                                    <SectionDivider />\n                                    <div>\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"map marker alternate\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            13895 SW Farmington Rd, Beaverton,\n                                            OR 97005\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"clock\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            Mon - Fri 12pm to 7pm, Sat - Sun\n                                            11am to 7pm\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"phone\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            (503) 268-1449\n                                        </Description>\n                                    </div>\n                                </LocationContainer>\n                            </ImageGradient2>\n                        </Image>\n                    </LocationImageContainer>\n                    <LocationImageContainer>\n                        <Image src={ch2} rounded>\n                            <ImageGradient2>\n                                <LocationContainer>\n                                    <HeaderText inverted>Hillsboro</HeaderText>\n                                    <SectionDivider />\n                                    <div>\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"map marker alternate\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            1300 SW Oak St Suite B, Hillsboro,\n                                            OR 97123\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"clock\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            Mon - Fri 12pm to 7pm, Sat - Sun\n                                            11am to 7pm\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"phone\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            (971) 249-3096\n                                        </Description>\n                                    </div>\n                                </LocationContainer>\n                            </ImageGradient2>\n                        </Image>\n                    </LocationImageContainer>\n                </LocationsContainer>\n            </Content>\n            <SectionDivider />\n            <LocationImageContainer>\n                <Image src={clubhouse_products}>\n                    <ImageGradient>\n                        <HeaderContainer>\n                            <HeroText>We look forward to seeing you</HeroText>\n                            <TextWidth>\n                                <SubheaderText>\n                                    Follow us on Facebook or become a member of\n                                    our Discord community for up-to-date\n                                    announcements on store events, product\n                                    releases, pre-orders, and so much more!\n                                </SubheaderText>\n                            </TextWidth>\n                        </HeaderContainer>\n                    </ImageGradient>\n                </Image>\n            </LocationImageContainer>\n            <Footer>\n                <FlexRow>\n                    <Description inverted>© 2021 The Clubhouse</Description>\n                    <div>\n                        <a\n                            href=\"https://discord.gg/Wpej7dQ\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <Icon link name=\"discord\" size=\"huge\" inverted />\n                        </a>\n                        <a\n                            href=\"https://www.facebook.com/RGTClubhouse/\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <Icon link name=\"facebook\" size=\"huge\" inverted />\n                        </a>\n                    </div>\n                </FlexRow>\n                <FlexRow justify=\"center\">\n                    <Link to=\"/login\">\n                        <Button size=\"tiny\" color=\"black\">\n                            Staff login\n                        </Button>\n                    </Link>\n                </FlexRow>\n            </Footer>\n        </Container>\n    );\n};\n\nexport default Home;\n","import axios from 'axios';\nimport { FinishCondition } from '../utils/ScryfallCard';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { RECEIVING } from '../utils/api_resources';\nimport { Trade } from '../context/ReceivingContext';\nimport { ClubhouseLocation } from '../context/AuthProvider';\n\nexport interface ReceivedCard {\n    quantity: number;\n    marketPrice: number;\n    cashPrice: number;\n    creditPrice: number;\n    tradeType: Trade;\n    finishCondition: FinishCondition;\n    id: string;\n    name: string;\n    set_name: string;\n    set: string;\n}\n\ninterface ReceivedUser {\n    _id: string;\n    lightspeedEmployeeNumber: number;\n    locations: ClubhouseLocation[];\n    username: string;\n}\n\nexport interface Received {\n    _id: string;\n    created_at: string;\n    employee_number: string;\n    received_card_list: ReceivedCard[];\n    created_by: ReceivedUser;\n    customer_name: string | null;\n    customer_contact: string | null;\n}\n\ninterface Payload {\n    cardName: string | null;\n    startDate: string | null;\n    endDate: string | null;\n}\n\nconst browseReceivingQuery = async ({\n    cardName,\n    startDate,\n    endDate,\n}: Payload) => {\n    try {\n        const { data } = await axios.get<Received[]>(RECEIVING, {\n            params: { cardName, startDate, endDate },\n            headers: makeAuthHeader(),\n        });\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default browseReceivingQuery;\n","import { makeStyles } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nconst useStyles = makeStyles({\n    meta: {\n        '& > *:not(:last-of-type):after': {\n            content: '\" • \"',\n        },\n    },\n});\n\nconst MetaData: FC = ({ children }) => {\n    const { meta } = useStyles();\n    return <span className={meta}>{children}</span>;\n};\n\nexport default MetaData;\n","/**\n * Used for old entities did not have certain fields\n */\nconst displayEmpty = (str: string | null): string => {\n    return str ? str : '—';\n};\n\nexport default displayEmpty;\n","import axios from 'axios';\nimport { ClubhouseLocation } from '../context/AuthProvider';\nimport { Trade } from '../context/ReceivingContext';\nimport { RECEIVING } from '../utils/api_resources';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { FinishCondition, ScryfallApiCard } from '../utils/ScryfallCard';\n\ninterface ReceivedUser {\n    _id: string;\n    lightspeedEmployeeNumber: number;\n    locations: ClubhouseLocation[];\n    username: string;\n}\n\n/**\n * Individual receiving entities contain bulk card information\n * so users can view images, frames, etc.\n */\nexport interface ReceivedCard {\n    quantity: number;\n    marketPrice: number;\n    cashPrice: number;\n    creditPrice: number;\n    tradeType: Trade;\n    finishCondition: FinishCondition;\n    // TODO: this casing difference is mildly irritating...\n    bulk_card_data: ScryfallApiCard;\n}\n\nexport interface Received {\n    _id: string;\n    created_at: string;\n    employee_number: string;\n    received_cards: ReceivedCard[];\n    created_by: ReceivedUser;\n    customer_name: string | null;\n    customer_contact: string | null;\n}\n\nconst receivedByIdQuery = async (receivedId: string) => {\n    const { data } = await axios.get<Received>(`${RECEIVING}/${receivedId}`, {\n        headers: makeAuthHeader(),\n    });\n\n    // We still need to convert ScryfallApiCard to ScryfallCard downstream\n    return data;\n};\n\nexport default receivedByIdQuery;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Trade } from '../context/ReceivingContext';\nimport displayFinishCondition from '../utils/finishCondition';\nimport { price } from '../utils/price';\nimport {\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    DialogActions,\n    Button,\n    List,\n    ListItem,\n    ListItemText,\n    Typography,\n} from '@material-ui/core';\nimport MetaData from '../ui/MetaData';\nimport formatDate from '../utils/formatDate';\nimport displayEmpty from '../utils/displayEmpty';\nimport SetIcon from '../ui/SetIcon';\nimport receivedByIdQuery, { Received } from './receivedByIdQuery';\nimport Loading from '../ui/Loading';\nimport CardImageTooltip from '../ui/CardImageTooltip';\nimport { ScryfallCard } from '../utils/ScryfallCard';\n\ninterface Props {\n    receivedId: string;\n    onClose: () => void;\n}\n\nfunction alphaSort<T extends { bulk_card_data: { name: string } }>(arr: T[]) {\n    return [...arr].sort((a, b) =>\n        a.bulk_card_data.name.localeCompare(b.bulk_card_data.name)\n    );\n}\n\nfunction displayTrade(trade: Trade) {\n    if (trade === Trade.Credit) return 'Credit';\n    else if (trade === Trade.Cash) return 'Cash';\n}\n\nconst BrowseReceivingListDialog: FC<Props> = ({ receivedId, onClose }) => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [data, setData] = useState<Received | null>(null);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                setLoading(true);\n                const data = await receivedByIdQuery(receivedId);\n                setData(data);\n                setLoading(false);\n            } catch (err) {\n                console.log(err);\n            }\n        })();\n    }, []);\n\n    if (!data || loading) {\n        return (\n            <Dialog open onClose={onClose} maxWidth=\"md\" fullWidth>\n                <DialogTitle>Received cards</DialogTitle>\n                <DialogContent>\n                    <Loading />\n                </DialogContent>\n            </Dialog>\n        );\n    }\n\n    const {\n        received_cards: receivingList,\n        created_at,\n        created_by,\n        customer_name,\n        customer_contact,\n    } = data;\n\n    return (\n        <Dialog open onClose={onClose} maxWidth=\"md\" fullWidth>\n            <DialogTitle>\n                Received cards\n                <Typography color=\"textSecondary\">\n                    <MetaData>\n                        <span>{formatDate(created_at)}</span>\n                        <span>Received by {created_by.username}</span>\n                        <span>Customer: {displayEmpty(customer_name)}</span>\n                        <span>\n                            Customer contact: {displayEmpty(customer_contact)}\n                        </span>\n                    </MetaData>\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <List>\n                    {alphaSort(receivingList).map((card) => {\n                        const {\n                            finishCondition,\n                            tradeType,\n                            creditPrice,\n                            cashPrice,\n                            marketPrice,\n                        } = card;\n\n                        const modeledCard = new ScryfallCard(\n                            card.bulk_card_data\n                        );\n\n                        const {\n                            name,\n                            cardImage,\n                            set,\n                            set_name,\n                            rarity,\n                        } = modeledCard;\n\n                        return (\n                            <ListItem>\n                                <ListItemText\n                                    primary={\n                                        <>\n                                            <CardImageTooltip\n                                                cardImage={cardImage}\n                                            >\n                                                <span\n                                                    style={{ cursor: 'help' }}\n                                                >\n                                                    {name}{' '}\n                                                </span>\n                                            </CardImageTooltip>\n                                            <SetIcon\n                                                set={set}\n                                                rarity={rarity}\n                                            />\n                                            <span>({set_name})</span>\n                                        </>\n                                    }\n                                    secondary={\n                                        <MetaData>\n                                            <span>\n                                                {displayFinishCondition(\n                                                    finishCondition\n                                                )}\n                                            </span>\n                                            <span>\n                                                {displayTrade(tradeType)}\n                                            </span>\n                                            {tradeType === Trade.Credit && (\n                                                <span>\n                                                    Credit price:{' '}\n                                                    {price(creditPrice)}\n                                                </span>\n                                            )}\n                                            {tradeType === Trade.Cash && (\n                                                <>\n                                                    <span>\n                                                        Cash price:{' '}\n                                                        {price(cashPrice)}\n                                                    </span>\n                                                    <span>\n                                                        Market price:{' '}\n                                                        {price(marketPrice)}\n                                                    </span>\n                                                </>\n                                            )}\n                                        </MetaData>\n                                    }\n                                />\n                            </ListItem>\n                        );\n                    })}\n                </List>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} variant=\"outlined\" color=\"primary\">\n                    Dismiss\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default BrowseReceivingListDialog;\n","import React, { FC, useState } from 'react';\nimport { Label } from 'semantic-ui-react';\nimport { Received } from './browseReceivingQuery';\nimport pluralize from '../utils/pluralize';\nimport formatDate from '../utils/formatDate';\nimport {\n    Card,\n    CardActionArea,\n    CardContent,\n    Grid,\n    Typography,\n} from '@material-ui/core';\nimport BrowseReceivingListDialog from './BrowseReceivingListDialog';\nimport { sum } from 'lodash';\nimport { getPrice } from '../common/Price';\nimport MetaData from '../ui/MetaData';\nimport { Trade } from '../context/ReceivingContext';\nimport displayEmpty from '../utils/displayEmpty';\n\ninterface Props {\n    received: Received;\n}\n\nconst BrowseReceivingItem: FC<Props> = ({ received }) => {\n    const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n    const {\n        received_card_list,\n        created_at,\n        created_by,\n        customer_name,\n    } = received;\n\n    const cashPrice = sum(\n        received_card_list\n            .filter((r) => r.tradeType === Trade.Cash)\n            .map((r) => r.cashPrice)\n    );\n\n    const creditPrice = sum(\n        received_card_list\n            .filter((r) => r.tradeType === Trade.Credit)\n            .map((r) => r.creditPrice)\n    );\n\n    return (\n        <>\n            {dialogOpen && (\n                <BrowseReceivingListDialog\n                    receivedId={received._id}\n                    onClose={() => setDialogOpen(false)}\n                />\n            )}\n            <Card variant=\"outlined\">\n                <CardActionArea\n                    disableRipple\n                    onClick={() => setDialogOpen(true)}\n                >\n                    <CardContent>\n                        <Grid\n                            container\n                            spacing={2}\n                            justify=\"space-between\"\n                            alignItems=\"center\"\n                        >\n                            <Grid item>\n                                <Typography variant=\"h6\">\n                                    {`${received_card_list.length} ${pluralize(\n                                        received_card_list.length,\n                                        'card'\n                                    )}`}\n                                </Typography>\n                                <Typography color=\"textSecondary\">\n                                    <MetaData>\n                                        <span>{formatDate(created_at)}</span>\n                                        <span>\n                                            Received by {created_by.username}\n                                        </span>\n                                        <span>\n                                            Customer:{' '}\n                                            {displayEmpty(customer_name)}\n                                        </span>\n                                    </MetaData>\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Label\n                                    color={cashPrice > 0 ? 'blue' : undefined}\n                                    image\n                                >\n                                    Cash:\n                                    <Label.Detail>\n                                        {getPrice(cashPrice)}\n                                    </Label.Detail>\n                                </Label>\n                                <Label\n                                    color={creditPrice > 0 ? 'blue' : undefined}\n                                    image\n                                >\n                                    Credit:\n                                    <Label.Detail>\n                                        {getPrice(creditPrice)}\n                                    </Label.Detail>\n                                </Label>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </CardActionArea>\n            </Card>\n        </>\n    );\n};\n\nexport default BrowseReceivingItem;\n","import { Form, Input } from 'semantic-ui-react';\nimport { ChangeEvent, FC } from 'react';\n\ninterface FormikNativeDatePickerProps {\n    label: string;\n    name: string;\n    defaultValue: string;\n    handleChange: (e: ChangeEvent) => void;\n    min?: string;\n    max?: string;\n}\n\nexport const FormikNativeDatePicker: FC<FormikNativeDatePickerProps> = ({\n    label,\n    name,\n    defaultValue,\n    handleChange,\n    min,\n    max,\n}) => {\n    return (\n        <Form.Field>\n            <label>{label}</label>\n            <Input\n                id={name}\n                name={name}\n                type=\"date\"\n                onChange={handleChange}\n                defaultValue={defaultValue}\n                min={min}\n                max={max}\n            />\n        </Form.Field>\n    );\n};\n\nexport default FormikNativeDatePicker;\n","import React, { FC, useState } from 'react';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n} from '@material-ui/core';\nimport { useFormik } from 'formik';\nimport { Form } from 'semantic-ui-react';\nimport FormikControlledSearchBar from '../ui/FormikControlledSearchBar';\nimport FormikNativeDatePicker from '../ui/FormikNativeDatePicker';\n\nexport interface FormValues {\n    cardName: string;\n    startDate: string;\n    endDate: string;\n}\n\ninterface Props {\n    onSubmit: (v: FormValues) => void;\n    filters: FormValues;\n}\n\n// No validations needed for now\nconst validate = () => {\n    return {};\n};\n\nconst BrowseReceivingFilterDialog: FC<Props> = ({ onSubmit, filters }) => {\n    const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n\n    const onDialogOpen = () => setDialogOpen(true);\n    const onDialogClose = () => setDialogOpen(false);\n\n    const { handleChange, values, setFieldValue, handleSubmit } = useFormik({\n        initialValues: filters,\n        validate,\n        onSubmit: async (v: FormValues) => {\n            await onSubmit(v);\n            onDialogClose();\n        },\n        /**\n         * Formik will not update `initialValues` from externally-controlled sources (ie. props) if changed,\n         * even if the component is unmounted. We have to flip this switch to initialize with updated prop values\n         */\n        enableReinitialize: true,\n    });\n\n    return (\n        <>\n            <Button\n                disableElevation\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={onDialogOpen}\n            >\n                Filter\n            </Button>\n            {dialogOpen && (\n                <Dialog open onClose={onDialogClose} maxWidth=\"sm\" fullWidth>\n                    <DialogTitle>Receiving search</DialogTitle>\n                    <DialogContent>\n                        <Form>\n                            <FormikControlledSearchBar\n                                label=\"Card name\"\n                                value={values.cardName}\n                                onChange={(v) => setFieldValue('cardName', v)}\n                            />\n                            <FormikNativeDatePicker\n                                label=\"Start date\"\n                                name=\"startDate\"\n                                defaultValue={filters.startDate}\n                                handleChange={handleChange}\n                                max={values.endDate}\n                            />\n                            <FormikNativeDatePicker\n                                label=\"End date\"\n                                name=\"endDate\"\n                                defaultValue={filters.endDate}\n                                handleChange={handleChange}\n                                max={filters.endDate}\n                            />\n                        </Form>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button variant=\"outlined\" onClick={onDialogClose}>\n                            Cancel\n                        </Button>\n                        <Button\n                            disableElevation\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => handleSubmit()}\n                        >\n                            Search\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            )}\n        </>\n    );\n};\n\nexport default BrowseReceivingFilterDialog;\n","import React, { FC } from 'react';\nimport { Box, makeStyles, Paper, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles(({ typography, spacing }) => ({\n    font: {\n        fontWeight: typography.fontWeightBold,\n    },\n    container: {\n        boxShadow: '0 2px 25px 0 rgb(34 36 38 / 5%) inset',\n        backgroundColor: 'transparent',\n    },\n    flexContainer: {\n        minHeight: spacing(20),\n    },\n}));\n\nconst Placeholder: FC = ({ children }) => {\n    const { font, container, flexContainer } = useStyles();\n\n    return (\n        <Paper variant=\"outlined\" className={container}>\n            <Box\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                className={flexContainer}\n            >\n                <Typography variant=\"h6\" className={font}>\n                    {children}\n                </Typography>\n            </Box>\n        </Paper>\n    );\n};\n\nexport default Placeholder;\n","import React, { FC, useEffect, useState } from 'react';\nimport browseReceivingQuery, { Received } from './browseReceivingQuery';\nimport { Grid, Box, Typography, Button } from '@material-ui/core';\nimport BrowseReceivingItem from './BrowseReceivingItem';\nimport moment from 'moment';\nimport Loading from '../ui/Loading';\nimport { HeaderText, SectionText } from '../ui/Typography';\nimport BrowseReceivingFilterDialog, {\n    FormValues,\n} from './BrowseReceivingFilterDialog';\nimport Placeholder from '../ui/Placeholder';\n\ninterface Filters {\n    cardName: string;\n    startDate: string;\n    endDate: string;\n}\n\nconst initialFilters: Filters = {\n    cardName: '',\n    startDate: moment().subtract(30, 'days').format('YYYY-MM-DD'),\n    endDate: moment().format('YYYY-MM-DD'),\n};\n\nfunction shallowCompare(obj1: Filters, obj2: Filters) {\n    return JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\nconst BrowseReceiving: FC = () => {\n    const [filters, setFilters] = useState<Filters>(initialFilters);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [receivedList, setReceivedList] = useState<Received[]>([]);\n\n    const onSubmit = async (formValues: FormValues) => {\n        /**\n         * If the types of `Filters` changes, we can convert them here\n         * from the submitted form values.\n         */\n        setFilters({ ...filters, ...formValues }); // preserves order when using JSON.stringify to diff\n    };\n\n    const onClearFilters = () => setFilters(initialFilters);\n\n    useEffect(() => {\n        (async () => {\n            const { cardName, startDate, endDate } = filters;\n\n            setLoading(true);\n            const received = await browseReceivingQuery({\n                cardName: cardName ? cardName : null,\n                startDate,\n                endDate,\n            });\n            setLoading(false);\n            setReceivedList(received);\n        })();\n    }, [filters]);\n\n    return (\n        <div>\n            <Box pb={2}>\n                <HeaderText>Browse Receiving</HeaderText>\n            </Box>\n            <Grid container justify=\"space-between\" md={12} lg={6} spacing={2}>\n                <Grid item alignItems=\"center\" xs={12}>\n                    <Box\n                        display=\"flex\"\n                        justifyContent=\"space-between\"\n                        alignItems=\"center\"\n                    >\n                        <div>\n                            <SectionText>Results</SectionText>\n                            <Typography color=\"textSecondary\">\n                                {`Searching ${\n                                    filters.cardName || 'all cards'\n                                } from ${filters.startDate} to ${\n                                    filters.endDate\n                                }`}\n                            </Typography>\n                        </div>\n                        <div>\n                            {!shallowCompare(initialFilters, filters) && (\n                                <Button\n                                    color=\"primary\"\n                                    onClick={onClearFilters}\n                                >\n                                    Clear filters\n                                </Button>\n                            )}\n                            <BrowseReceivingFilterDialog\n                                filters={filters}\n                                onSubmit={onSubmit}\n                            />\n                        </div>\n                    </Box>\n                </Grid>\n                {loading ? (\n                    <Loading />\n                ) : receivedList.length === 0 ? (\n                    <Grid item xs={12}>\n                        <Placeholder>No results</Placeholder>\n                    </Grid>\n                ) : (\n                    receivedList.map((rl) => (\n                        <Grid item xs={12} key={rl._id}>\n                            <BrowseReceivingItem received={rl} />\n                        </Grid>\n                    ))\n                )}\n            </Grid>\n        </div>\n    );\n};\n\nexport default BrowseReceiving;\n","import React, { FC } from 'react';\nimport { Divider, List, ListItem, ListItemIcon } from '@material-ui/core';\nimport { useLocation, Link as RouterLink } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport ListAltIcon from '@material-ui/icons/ListAlt';\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\n\nconst NavLinks: FC<{}> = () => {\n    const { pathname } = useLocation();\n\n    return (\n        <List>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/manage-inventory\"\n                selected={pathname === '/manage-inventory'}\n                replace\n            >\n                <ListItemIcon>\n                    <AddIcon color=\"primary\" />\n                </ListItemIcon>\n                Manage Inventory\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/new-sale\"\n                selected={pathname === '/new-sale'}\n                replace\n            >\n                <ListItemIcon>\n                    <AttachMoneyIcon color=\"primary\" />\n                </ListItemIcon>\n                New Sale\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/receiving\"\n                selected={pathname === '/receiving'}\n                replace\n            >\n                <ListItemIcon>\n                    <ListAltIcon color=\"primary\" />\n                </ListItemIcon>\n                Receiving\n            </ListItem>\n            <Divider />\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/browse-inventory\"\n                selected={pathname === '/browse-inventory'}\n                replace\n            >\n                <ListItemIcon>\n                    <BusinessCenterIcon color=\"primary\" />\n                </ListItemIcon>\n                Browse Inventory\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/browse-sales\"\n                selected={pathname === '/browse-sales'}\n                replace\n            >\n                <ListItemIcon>\n                    <VisibilityIcon color=\"primary\" />\n                </ListItemIcon>\n                Browse Sales\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/browse-receiving\"\n                selected={pathname === '/browse-receiving'}\n                replace\n            >\n                <ListItemIcon>\n                    <ViewListIcon color=\"primary\" />\n                </ListItemIcon>\n                Browse Receiving\n            </ListItem>\n            <Divider />\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/logout\"\n                selected={pathname === '/logout'}\n                replace\n            >\n                <ListItemIcon>\n                    <ExitToAppIcon color=\"primary\" />\n                </ListItemIcon>\n                Log Out\n            </ListItem>\n        </List>\n    );\n};\n\nexport default NavLinks;\n","import React, { FC, useState } from 'react';\nimport {\n    AppBar,\n    Box,\n    Drawer,\n    Grid,\n    IconButton,\n    makeStyles,\n    Toolbar,\n    Typography,\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { ClubhouseLocation, useAuthContext } from '../context/AuthProvider';\nimport NavLinks from './NavLinks';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport { version } from '../../package.json';\n\nconst useStyles = makeStyles(({ spacing, typography, palette }) => ({\n    title: {\n        flexGrow: 1,\n    },\n    menuLinkText: {\n        fontWeight: typography.fontWeightBold,\n        '&:hover': {\n            color: palette.common.white,\n        },\n    },\n    list: {\n        width: 250,\n    },\n    menuButton: {\n        marginRight: spacing(2),\n    },\n}));\n\n// TODO: This information needs to be populated on the backend via a collection of shop entities\nconst getClubhouseLocationName = (location: ClubhouseLocation | null) => {\n    if (location === 'ch1') return 'Beaverton';\n    if (location === 'ch2') return 'Hillsboro';\n    return '';\n};\n\nconst NavBar: FC<{}> = () => {\n    const { loggedIn, currentLocation, currentUser } = useAuthContext();\n    const [drawerOpen, setDrawerOpen] = useState<boolean>(false);\n    const { title, list, menuButton, menuLinkText } = useStyles();\n\n    return (\n        <AppBar>\n            <Toolbar>\n                {loggedIn && (\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        className={menuButton}\n                        onClick={() => setDrawerOpen(true)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                )}\n                <div className={title}>\n                    <Typography\n                        color=\"inherit\"\n                        className={menuLinkText}\n                        component={RouterLink}\n                        variant=\"h6\"\n                        to=\"/\"\n                    >\n                        Clubhouse Collection\n                    </Typography>\n                </div>\n                <Typography\n                    color=\"inherit\"\n                    className={menuLinkText}\n                    component={RouterLink}\n                    variant=\"button\"\n                    to=\"/public-inventory\"\n                >\n                    Search cards\n                </Typography>\n                <Drawer\n                    anchor=\"left\"\n                    open={drawerOpen}\n                    onClose={() => setDrawerOpen(false)}\n                >\n                    <Box\n                        py={2}\n                        display=\"flex\"\n                        flexDirection=\"column\"\n                        justifyContent=\"space-between\"\n                        height={1}\n                    >\n                        <div>\n                            <Grid\n                                container\n                                direction=\"row\"\n                                alignItems=\"center\"\n                                justify=\"center\"\n                            >\n                                <LocationOnIcon color=\"primary\" />\n                                <Typography color=\"primary\" variant=\"h6\">\n                                    {getClubhouseLocationName(currentLocation)}\n                                </Typography>\n                            </Grid>\n                            <Typography color=\"textSecondary\" align=\"center\">\n                                Logged in as {currentUser}\n                            </Typography>\n                            <div\n                                className={list}\n                                onClick={() => setDrawerOpen(false)}\n                            >\n                                <NavLinks />\n                            </div>\n                        </div>\n                        <Typography color=\"textSecondary\" align=\"center\">\n                            Version {version}\n                        </Typography>\n                    </Box>\n                </Drawer>\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nexport default NavBar;\n","import React, { FC } from 'react';\nimport AuthProvider from './context/AuthProvider';\nimport { Switch, Route } from 'react-router-dom';\nimport ManageInventory from './ManageInventory/ManageInventory';\nimport Sale from './Sale/Sale';\nimport BrowseSales from './BrowseSales/BrowseSales';\nimport PublicInventory from './PublicInventory/PublicInventory';\nimport BrowseInventory from './BrowseInventory/BrowseInventory';\nimport Login from './Login/Login';\nimport Logout from './Logout/Logout';\nimport Receiving from './Receiving/Receiving';\nimport { SaleProvider } from './context/SaleContext';\nimport ReceivingProvider from './context/ReceivingContext';\nimport InventoryProvider from './context/InventoryContext';\nimport AdminRoute from './AuthenticatedRoute';\nimport Home from './LandingPage/Home';\nimport BrowseReceiving from './BrowseReceiving/BrowseReceiving';\nimport { createMuiTheme, makeStyles, ThemeProvider } from '@material-ui/core';\nimport NavBar from './NavBar/NavBar';\n\nconst useStyles = makeStyles(({ spacing }) => ({\n    contentContainer: {\n        paddingTop: spacing(10),\n        marginLeft: spacing(3),\n        marginRight: spacing(3),\n    },\n    backgroundColor: {\n        backgroundColor: '#f9fafb',\n        minHeight: '100vh',\n    },\n}));\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#2185d0',\n        },\n    },\n});\n\nconst App: FC = () => {\n    const { backgroundColor, contentContainer } = useStyles();\n\n    return (\n        <AuthProvider>\n            <ThemeProvider theme={theme}>\n                <NavBar />\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n                    <div className={backgroundColor}>\n                        <div className={contentContainer}>\n                            <AdminRoute exact path=\"/manage-inventory\">\n                                <InventoryProvider>\n                                    <ManageInventory />\n                                </InventoryProvider>\n                            </AdminRoute>\n                            <AdminRoute exact path=\"/new-sale\">\n                                <SaleProvider>\n                                    <Sale />\n                                </SaleProvider>\n                            </AdminRoute>\n                            <AdminRoute exact path=\"/receiving\">\n                                <ReceivingProvider>\n                                    <Receiving />\n                                </ReceivingProvider>\n                            </AdminRoute>\n                            <AdminRoute exact path=\"/browse-sales\">\n                                <BrowseSales />\n                            </AdminRoute>\n                            <AdminRoute exact path=\"/browse-inventory\">\n                                <BrowseInventory />\n                            </AdminRoute>\n                            <AdminRoute exact path=\"/browse-receiving\">\n                                <BrowseReceiving />\n                            </AdminRoute>\n                            <Route\n                                exact\n                                path=\"/public-inventory\"\n                                component={PublicInventory}\n                            />\n                            <Route exact path=\"/login\" component={Login} />\n                            <Route exact path=\"/logout\" component={Logout} />\n                        </div>\n                    </div>\n                </Switch>\n            </ThemeProvider>\n        </AuthProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport '@fontsource/roboto';\n\nReactDOM.render(\n    <HashRouter basename=\"/\">\n        <App />\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}