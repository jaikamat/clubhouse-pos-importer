{"version":3,"sources":["logos/magic-ball.png","api_resources.js","makeAuthHeader.js","SearchBar.js","QohParser.js","createToast.js","CardImage.js","Price.js","MarketPrice.js","ScryfallCardListItem.js","ScryfallCardList.js","Home.js","BrowseCardItem.js","BrowseCardList.js","SalePriceTotal.js","SaleLineItem.js","CustomerSaleList.js","PrintList.js","Sale.js","SalesListItem.js","SalesList.js","BrowseSales.js","PublicCardItem.js","PublicCardList.js","PublicInventory.js","DeckboxCloneForm.js","DeckboxCloneRow.js","DeckboxClone.js","AuthProvider.js","Login.js","Logout.js","Receiving/ReceivingSearchItem.js","Receiving/ReceivingSearchList.js","Receiving/ReceivingListItem.js","Receiving/CashReport.js","Receiving/ReceivingListTotals.js","Receiving/printCashReport.js","Receiving/Receiving.js","Main.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","env","process","REACT_APP_ENVIRONMENT","endpoints","GET_CARDS_BY_TITLE","GET_CARD_QTY_FROM_INVENTORY","FINISH_SALE","ADD_CARD_TO_INVENTORY","GET_INVENTORY_QUERY","GET_SALES_BY_TITLE","GET_SCRYFALL_BULK_BY_TITLE","GET_CARDS_BY_FILTER","GET_SET_NAMES","LOGIN","SCRYFALL_AUTOCOMPLETE","SCRYFALL_SEARCH","SCRYFALL_ID_SEARCH","makeAuthHeader","Authorization","localStorage","getItem","SearchBar","state","isLoading","term","autocomplete","results","defaultSearchValue","handleSearchChange","e","value","setState","length","setTimeout","a","axios","get","headers","data","formattedResults","map","el","title","slice","handleResultSelect","result","$","select","props","handleSearchSelect","this","Search","onSearchChange","_","debounce","leading","trailing","onResultSelect","loading","placeholder","selectFirstResult","id","onFocus","target","onBlur","React","Component","QohParser","inventoryQty","foilQty","nonfoilQty","FOIL_NM","FOIL_LP","FOIL_MP","FOIL_HP","NONFOIL_NM","NONFOIL_LP","NONFOIL_MP","NONFOIL_HP","foilColor","color","nonfoilColor","Fragment","Label","image","Detail","createToast","header","message","duration","toaster","notify","Message","compact","Header","position","style","boxShadow","zIndex","transition","CardImage","hovered","mouseOver","mouseOut","image_uris","card_faces","hover","Image","src","normal","size","transform","onMouseOver","onMouseOut","Price","num","price","Number","toFixed","isNaN","foilStyle","backgroundColor","backgroundImage","MarketPrice","finish","useState","setPrice","setLoading","useEffect","finishStatus","prices","tag","Icon","name","finishes","key","text","cardConditions","checkCardFinish","nonfoilProp","foilProp","selectedFinish","finishDisabled","ScryfallCardListItem","quantity","nonfoil","foil","selectedCondition","submitDisable","submitLoading","handleFinishChange","console","log","handleConditionChange","handleQuantityChange","val","parseInt","handleFocus","handleBlur","handleInventoryAdd","type","post","cardInfo","qoh","focus","set_name","set","rarity","Segment","Item","Group","divided","Content","as","className","fontSize","String","toUpperCase","Description","Form","Field","control","Input","label","onChange","Select","options","disabled","Button","primary","onClick","ScryfallCardList","cards","card","showImage","showImages","quantities","Home","searchResults","inventoryQuantities","params","ids","scryfallIds","inventoryRes","handleImageToggle","icon","createConditionOptions","removeZeroedQuantites","pickBy","p","Object","entries","d","conditionFinish","qty","split","join","createInitialSelectedFinish","keysMapped","keys","k","uniq","indexOf","BrowseCardItem","selectedFinishCondition","selectedFinishConditionQty","quantityToSell","conditionOptions","numVal","handleSelectedFinishCondition","handlePriceChange","property","handleAddToSale","addToSaleList","Dropdown","selection","step","BrowseCardList","SalePriceTotal","saleList","total","reduce","acc","qtyToSell","SaleLineItem","finishCondition","deleteLineItem","setHovered","Table","Row","Cell","singleLine","circular","CustomerSaleList","removeFromSaleList","Body","PrintList","printClicked","print","window","saleListCards","display","float","c","sortSaleList","ORDER","helpSort","arrayConst","colorsLength","cardFace","colors","type_line","includes","sort","b","localeCompare","initialState","showModal","searchTerm","Sale","newCard","oldState","idx","findIndex","splice","push","sortedCards","newState","reject","finalizeSale","saleID","sale_data","closeModal","Grid","alignItems","stackable","Column","width","Divider","clearing","floated","sub","Modal","basic","open","trigger","inverted","Actions","SalesListItem","saleData","quantitySold","cardList","pre","curr","moment","createTime","format","SalesList","list","celled","unstackable","HeaderCell","card_list","_id","BrowseSales","salesList","cardName","wrapperStyle","margin","inventoryStyle","flexDirection","justifyContent","padding","borderRadius","imageStyle","height","background","PublicCardItem","myImage","gridStyle","flexWrap","alignContent","PublicCardList","PublicInventory","Subheader","formatDropdownOptions","priceFilterDropdownOptions","finishDropdownOptions","sortByDropdownOptions","sortByDirectionDropdownOptions","sortByColorDropdownOptions","setName","priceNum","priceFilter","sortBy","colorsArray","sortByDirection","setNames","DeckboxCloneForm","editionDropdownOptions","handleSearchBlur","handleChange","handleDropdownChange","setNameOptions","concatWithBlankOption","concat","widths","search","multiple","defaultValue","labelPosition","handleSubmit","conditionMap","NM","LP","MP","HP","Tooltip","image_uri","posX","posY","left","DeckboxCloneRow","mouseInside","mouseX","mouseY","mouseEnter","clientX","offsetLeft","clientY","offsetTop","mouseLeave","mouseMove","inventory","condition","onMouseEnter","onMouseLeave","onMouseMove","cursor","v","DeckboxClone","count","currentPage","numPages","pageArray","cachedFilters","showPages","searchTouched","fetchData","filters","page","Math","ceil","pages","range","handlePage","showLeftPageButtons","showRightPageButtons","Container","Dimmer","active","marginTop","Loader","secondary","striped","colSpan","Menu","Footer","AuthContext","createContext","AuthProvider","loggedIn","handleLogin","username","password","toLowerCase","token","setItem","authed","handleLogout","removeItem","Provider","children","btnLoading","Login","handleInputChange","Consumer","login","to","Logout","fluid","ReceivingCardItem","setQuantity","cashPrice","setCashPrice","creditPrice","setCreditPrice","setSelectedCondition","marketPrice","setMarketPrice","setSelectedFinish","validateQty","validateTradeTypes","submitDisabled","addToList","ReceivingCardList","TRADE_TYPE","ReceivingListItem","uuid_key","removeFromList","tradeType","activeTradeType","CASH","CREDIT","whiteSpace","CashReport","receivingList","countByPriceAndID","closeCashModal","chain","filter","temp_uuid","groupBy","mapValues","mergedWithQty","uniqBy","tradeQty","totalCashOut","sumBy","ReceivingListTotals","selectAll","commitToInventory","setShowModal","showCashModal","setShowCashModal","submitToInventory","cashTotal","creditTotal","Or","Statistic","Value","divToPrint","document","getElementById","popup","write","innerHTML","close","printCashReport","closeOnDimmerClick","onClose","DefaultPlaceholder","headerText","Receiving","setSearchResults","setReceivingList","mergedData","copiedState","remove","previousState","find","stateWithUnremovedProps","removedProps","omit","promises","Promise","all","initialTradeType","times","uuid","forEach","arr","otherType","Main","paddingTop","marginLeft","marginRight","exact","path","component","fixed","ballLogo","alt","Link","item","App","Boolean","location","hostname","match","ReactDOM","render","basename","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2HAAAA,EAAOC,QAAU,IAA0B,wC,iFCOrCC,EAAgC,gBANJC,8CAA1BC,sBAM8C,QAAU,GAE1DC,EAAY,CACdC,mBAAmB,8EAAD,OACgEJ,GAClFK,4BAA4B,oFAAD,OAC6DL,GACxFM,YAAY,yEAAD,OACkEN,GAC7EO,sBAAsB,iFAAD,OACgEP,GACrFQ,oBAAoB,mFAAD,OACoER,GACvFS,mBAAmB,uEAAD,OACyDT,GAC3EU,2BAA2B,0FAAD,OACoEV,GAC9FW,oBAAoB,+EAAD,OACgEX,GACnFY,cAAc,+EAAD,OACsEZ,EADtE,cAEba,MAAM,qEAAD,OACoEb,GAEzEc,sBAAuB,8CACvBC,gBAAiB,wCACjBC,mBAAoB,mCAGxBlB,EAAOC,QAAUI,G,8NCjCF,SAASc,IAEpB,MADe,CAAEC,cAAc,UAAD,OAAYC,aAAaC,QAAQ,mB,6BCgFpDC,E,2MA3EXC,MAAQ,CACJC,WAAW,EACXC,KAAM,GACNC,aAAc,GACdC,QAAS,GACTC,mBAAoB,qB,EAGxBC,mBAAqB,SAACC,EAAD,GAAmB,IAAbC,EAAY,EAAZA,MAGvB,GAFA,EAAKC,SAAS,CAAEP,KAAMM,IAElB,EAAKR,MAAME,KAAKQ,OAAS,EACzB,OAAO,EAAKD,SAAS,CACjBR,WAAW,EACXC,KAAM,GACNE,QAAS,GACTD,aAAc,GACdE,mBAAoB,sBAKxB,EAAKL,MAAME,KAAKQ,OAAS,IAI7B,EAAKD,SAAS,CAAER,WAAW,IAE3BU,WAAU,sBAAC,gCAAAC,EAAA,sEACgBC,IAAMC,IAAN,UAChBtB,wBADgB,cACW,EAAKQ,MAAME,MACzC,CAAEa,QAASpB,MAHR,gBACCqB,EADD,EACCA,KAKFC,EAAmBD,EAAKA,KAAKE,KAAI,SAAAC,GACnC,MAAO,CAAEC,MAAOD,MACjBE,MAAM,EAAG,GAEZ,EAAKZ,SAAS,CACVL,QAASa,EACThB,WAAW,IAZR,2CAcR,O,EAGPqB,mBAAqB,SAACf,EAAD,GAAoB,IAAdgB,EAAa,EAAbA,OAIvBZ,YAAW,kBAAMa,IAAE,cAAcC,WAAU,IAC3C,EAAKC,MAAMC,mBAAmBJ,EAAOH,Q,wEAG/B,IAAD,EAC8CQ,KAAK5B,MAAhDI,EADH,EACGA,QAASH,EADZ,EACYA,UAAWI,EADvB,EACuBA,mBAE5B,OACI,kBAACwB,EAAA,EAAD,CACIC,eAAgBC,IAAEC,SAASJ,KAAKtB,mBAAoB,IAAK,CACrD2B,SAAS,EACTC,UAAU,IAEdC,eAAgBP,KAAKN,mBACrBc,QAASnC,EACTG,QAASA,EACTiC,YAAahC,EACbiC,mBAAmB,EACnBC,GAAG,YACHC,QAAS,SAAAjC,GAAC,OAAIA,EAAEkC,OAAOhB,UACvBiB,OAAQd,KAAKF,MAAMgB,a,GAtEXC,IAAMC,W,sECUf,SAASC,EAAT,GAAsC,IAAjBC,EAAgB,EAAhBA,aAC5BC,EAAU,EACVC,EAAa,EAEbF,IACAC,GACKD,EAAaG,SAAW,IACxBH,EAAaI,SAAW,IACxBJ,EAAaK,SAAW,IACxBL,EAAaM,SAAW,GAE7BJ,GACKF,EAAaO,YAAc,IAC3BP,EAAaQ,YAAc,IAC3BR,EAAaS,YAAc,IAC3BT,EAAaU,YAAc,IAGpC,IAAMC,EAAY,GACdV,EAAU,IAAKU,EAAUC,MAAQ,QAErC,IAAMC,EAAe,GAGrB,OAFIX,EAAa,IAAKW,EAAaD,MAAQ,QAGvC,kBAAC,IAAME,SAAP,KACI,kBAACC,EAAA,EAAD,iBAAWJ,EAAX,CAAsBK,OAAK,IAA3B,OAEJ,kBAACD,EAAA,EAAME,OAAP,KAAehB,IAEX,kBAACc,EAAA,EAAD,iBAAWF,EAAX,CAAyBG,OAAK,IAA9B,UAEJ,kBAACD,EAAA,EAAME,OAAP,KAAef,K,sBC/BRgB,EAfK,SAAC,GAAiD,IAA/CN,EAA8C,EAA9CA,MAAOO,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,QAA+B,IAAtBC,gBAAsB,MAAX,IAAW,EACjE,OAAOC,IAAQC,QACX,kBACI,kBAACC,EAAA,EAAD,CAASZ,MAAOA,EAAOa,SAAO,GAC1B,kBAACD,EAAA,EAAQE,OAAT,KAAiBP,GAChBC,KAGT,CACIO,SAAU,eACVN,SAAUA,K,SCXhBO,EAAQ,CACVC,UAAW,gCACXC,OAAQ,KACRC,WAAY,uBAiCDC,E,2MA7BX9E,MAAQ,CAAE+E,SAAS,G,EAEnBC,UAAY,WAAQ,EAAKvE,SAAS,CAAEsE,SAAS,K,EAE7CE,SAAW,WAAQ,EAAKxE,SAAS,CAAEsE,SAAS,K,wEAElC,IAAD,EAC4CnD,KAAKF,MAA9CwD,EADH,EACGA,WAAYC,EADf,EACeA,WADf,IAC2BC,aAD3B,SAEL,IAEI,OAAO,kBAACC,EAAA,EAAD,CACHC,IAAKJ,EAAWK,OAChBC,KAAK,OACLd,MAAK,eAAOA,EAAP,CAAce,UAAU,GAAD,OAAK7D,KAAK5B,MAAM+E,QAAU,cAAgB,cACtEW,YAAaN,EAAQxD,KAAKoD,UAAY,KACtCW,WAAYP,EAAQxD,KAAKqD,SAAW,OAE1C,MAAO1E,GACL,OAAO,kBAAC8E,EAAA,EAAD,CAAOC,IACVH,EAAW,GAAGD,WAAWK,OACzBC,KAAK,OACLd,MAAK,eAAOA,EAAP,CAAce,UAAU,GAAD,OAAK7D,KAAK5B,MAAM+E,QAAU,cAAgB,cACtEW,YAAaN,EAAQxD,KAAKoD,UAAY,KACtCW,WAAYP,EAAQxD,KAAKqD,SAAW,Y,GAxB5BtC,IAAMC,W,QCDfgD,EAND,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACPC,EAAQC,OAAOF,GAAKG,QAAQ,GAClC,OAAIC,MAAMH,GAAe,uCAClB,kCAAQA,I,QCEbI,EAAY,CACdC,gBAAiB,UACjBC,gBAAiB,mDAGN,SAASC,EAAT,GAAsC,IAAf9D,EAAc,EAAdA,GAAI+D,EAAU,EAAVA,OAAU,EACtBC,mBAAS,MADa,mBACzCT,EADyC,KAClCU,EADkC,OAElBD,oBAAS,GAFS,mBAEzCnE,EAFyC,KAEhCqE,EAFgC,KAiBhD,OAbAC,qBAAU,YACN,uCAAC,gCAAA9F,EAAA,6DACG6F,GAAW,GADd,SAE0B5F,IAAMC,IAAN,UAAapB,sBAAb,OAAkC6C,GAAM,CAAExB,QAASpB,MAF7E,gBAEWqB,EAFX,EAEWA,KACJ2F,EAAe,MAEJ,SAAXL,IAAmBK,GAAgB,SAEvCH,EAAST,OAAO/E,EAAK4F,OAAOD,KAC5BF,GAAW,GARd,2CAAD,yDAUD,CAAClE,EAAI+D,IAGJ,kBAACzC,EAAA,EAAD,CAAOgD,KAAG,EAACnC,MAAkB,SAAX4B,EAAoBJ,EAAY,MAC7C9D,EAAU,kBAAC0E,EAAA,EAAD,CAAM1E,SAAO,EAAC2E,KAAK,YAAe,sCAAYjB,EAAQ,kBAAC,EAAD,CAAOD,IAAKC,IAAY,cCZrG,IAAMkB,EAAW,CACb,CAAEC,IAAK,UAAWC,KAAM,UAAW1G,MAAO,WAC1C,CAAEyG,IAAK,OAAQC,KAAM,OAAQ1G,MAAO,SAGlC2G,EAAiB,CACnB,CAAEF,IAAK,KAAMC,KAAM,YAAa1G,MAAO,MACvC,CAAEyG,IAAK,KAAMC,KAAM,aAAc1G,MAAO,MACxC,CAAEyG,IAAK,KAAMC,KAAM,gBAAiB1G,MAAO,MAC3C,CAAEyG,IAAK,KAAMC,KAAM,aAAc1G,MAAO,OAS5C,SAAS4G,EAAgBC,EAAaC,GAClC,OAAKD,GAAeC,EACT,CAAEC,eAAgB,OAAQC,gBAAgB,GAC1CH,IAAgBC,EAChB,CAAEC,eAAgB,UAAWC,gBAAgB,GAC7CH,GAAeC,EACf,CAAEC,eAAgB,UAAWC,gBAAgB,QADjD,E,IAKUC,E,2MACjBzH,MAAQ,CACJ0H,SAAU,EACVH,eAAgBH,EAAgB,EAAK1F,MAAMiG,QAAS,EAAKjG,MAAMkG,MAC1DL,eACLM,kBAAmB,KACnBL,eAAgBJ,EAAgB,EAAK1F,MAAMiG,QAAS,EAAKjG,MAAMkG,MAC1DJ,eACLM,eAAe,EACfhF,aAAc,EAAKpB,MAAMoB,aACzBiF,eAAe,G,EAGnBC,mBAAqB,SAACzH,EAAD,GAAmB,IAAbC,EAAY,EAAZA,MACvB,EAAKC,SAAS,CAAE8G,eAAgB/G,IAAS,WACrCyH,QAAQC,IAAI,EAAKlI,W,EAIzBmI,sBAAwB,SAAC5H,EAAD,GAAmB,IAAbC,EAAY,EAAZA,MAC1B,EAAKC,SAAS,CAAEoH,kBAAmBrH,IAAS,WACxCyH,QAAQC,IAAI,EAAKlI,W,EAIzBoI,qBAAuB,SAAC7H,EAAD,GAAmB,IAAbC,EAAY,EAAZA,MACnB6H,EAAMC,SAAS9H,GACfkH,EAAWzB,MAAMoC,GAAO,GAAKA,EACnC,EAAK5H,SAAS,CAAEiH,SAAUA,K,EAI9Ba,YAAc,WACkB,IAAxB,EAAKvI,MAAM0H,UACX,EAAKjH,SAAS,CAAEiH,SAAU,M,EAKlCc,WAAa,WACmB,KAAxB,EAAKxI,MAAM0H,UACX,EAAKjH,SAAS,CAAEiH,SAAU,K,EAIlCe,mB,uCAAqB,WAAOlI,EAAP,sCAAAK,EAAA,+DAAYJ,MAAZ,EACuC,EAAKR,MAArD0H,EADS,EACTA,SAAUH,EADD,EACCA,eAAgBM,EADjB,EACiBA,kBADjB,EAEe,EAAKnG,MAA7BqF,EAFS,EAETA,KAAMY,EAFG,EAEHA,QAASC,EAFN,EAEMA,KAEjBc,EAJW,UAIDnB,EAJC,YAIiBM,GAJjB,SAOb,EAAKpH,SAAS,CAAEqH,eAAe,EAAMC,eAAe,IAPvC,SASUlH,IAAM8H,KAAK1J,wBAAuB,CACrDyI,SAAUA,EACVgB,KAAMA,EACNE,SAAS,eAAM,EAAKlH,QACrB,CAAEX,QAASpB,MAbD,gBASLqB,EATK,EASLA,KAMRgD,EAAY,CACRN,MAAO,QACPO,OAAO,GAAD,OAAKyD,EAAL,aAAkBX,EAAlB,YAA0BW,EAAW,EAAI,QAAU,UAAnD,KACNvD,SAAU,MAGd,EAAK1D,SAAS,CACViH,SAAU,EACVH,eAAgBH,EAAgBO,EAASC,GAAML,eAC/CM,kBAAmB,KACnBL,eAAgBJ,EAAgBO,EAASC,GAAMJ,eAC/CM,eAAe,EACfhF,aAAc9B,EAAK6H,IACnBd,eAAe,IAInBvG,IAAE,cAAcsH,QAAQrH,SAhCX,kDAkCbwG,QAAQC,IAAR,MAlCa,0D,gIAsCX,IAAD,EASDtG,KAAK5B,MAPLuH,EAFC,EAEDA,eACAM,EAHC,EAGDA,kBACAL,EAJC,EAIDA,eACAE,EALC,EAKDA,SACAI,EANC,EAMDA,cACAhF,EAPC,EAODA,aACAiF,EARC,EAQDA,cARC,EAkBDnG,KAAKF,MAPLwD,EAXC,EAWDA,WACA6B,EAZC,EAYDA,KACAgC,EAbC,EAaDA,SACAC,EAdC,EAcDA,IACAC,EAfC,EAeDA,OACA9D,EAhBC,EAgBDA,WACA5C,EAjBC,EAiBDA,GAGJ,OACI,kBAAC2G,EAAA,EAAD,KACI,kBAACC,EAAA,EAAKC,MAAN,CAAYC,SAAO,GACf,kBAACF,EAAA,EAAD,KACI,kBAACA,EAAA,EAAK9D,MAAN,CAAYG,KAAK,QACb,kBAAC,EAAD,CACIN,WAAYA,EACZC,WAAYA,KAGpB,kBAACgE,EAAA,EAAKG,QAAN,KACI,kBAACH,EAAA,EAAK3E,OAAN,CAAa+E,GAAG,MACXxC,EACA,IACD,uBACIyC,UAAS,sBAAiBR,EAAjB,eAA2BC,GACpCvE,MAAO,CAAE+E,SAAU,UAEvB,kBAAC5F,EAAA,EAAD,CAAOH,MAAM,QACRqF,EADL,KACiBW,OAAOV,GAAKW,cAD7B,KAGA,kBAAC9G,EAAD,CAAWC,aAAcA,IACxB,IACD,kBAACuD,EAAD,CAAa9D,GAAIA,EAAI+D,OAAQiB,KAEjC,kBAAC4B,EAAA,EAAKS,YAAN,KACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKT,MAAN,KACI,kBAACS,EAAA,EAAKC,MAAN,CACIC,QAASC,IACTtB,KAAK,SACLuB,MAAM,WACNzJ,MAAOkH,EACPwC,SAAUtI,KAAKwG,qBACf5F,QAASZ,KAAK2G,YACd7F,OAAQd,KAAK4G,aAEjB,kBAACqB,EAAA,EAAKC,MAAN,CACIG,MAAM,SACNF,QAASI,IACT3J,MAAO+G,EACP6C,QAASpD,EACTqD,SAAU7C,EACV0C,SAAUtI,KAAKoG,qBAEnB,kBAAC6B,EAAA,EAAKC,MAAN,CACIG,MAAM,YACNF,QAASI,IACT3J,MAAOqH,EACPuC,QAASjD,EACT+C,SAAUtI,KAAKuG,wBAEnB,kBAAC0B,EAAA,EAAKS,OAAN,CACIL,MAAM,oBACNF,QAASO,IACTC,SAAO,EACPF,SACiB,IAAb3C,GACa,KAAbA,GACAI,EAEJ0C,QAAS5I,KAAK6G,mBACdrG,QAAS2F,GAVb,qB,GA3JUnF,aC5BnC6H,MAhBf,SAA0B/I,GAatB,OAXiBA,EAAMgJ,MAAMxJ,KAAI,SAAAyJ,GAC7B,OACI,kBAAC,EAAD,eACIC,UAAWlJ,EAAMmJ,WACjB5D,IAAK0D,EAAKpI,IACNoI,EAHR,CAII7H,aAAcpB,EAAMoJ,WAAWH,EAAKpI,W,SCyDrCwI,E,2MA3DX/K,MAAQ,CAAEgL,cAAe,GAAIC,oBAAqB,GAAIJ,YAAY,G,EAElElJ,mB,uCAAqB,WAAMzB,GAAN,qBAAAU,EAAA,+EAEUC,IAAMC,IACzB1B,6BACA,CACI8L,OAAQ,CAAE9J,MAAOlB,GACjBa,QAASpB,MANJ,uBAELqB,EAFK,EAELA,KAQFmK,EAAMnK,EAAKE,KAAI,SAAAC,GAAE,OAAIA,EAAGoB,MAVjB,SAac1B,IAAM8H,KAC7B5J,8BACA,CAAEqM,YAAaD,GACf,CAAEpK,QAASpB,MAhBF,OAaP0L,EAbO,OAmBb,EAAK5K,SAAS,CACVuK,cAAehK,EACfiK,oBAAqBI,EAAarK,OArBzB,kDAwBbiH,QAAQC,IAAR,MAxBa,0D,wDA4BrBoD,kBAAoB,WAChB,EAAK7K,SAAS,CAAEoK,YAAa,EAAK7K,MAAM6K,c,wEAGlC,IACEG,EAAkBpJ,KAAK5B,MAAvBgL,cAER,OACI,kBAAC,IAAMpH,SAAP,KACI,kBAAC,EAAD,CAAWjC,mBAAoBC,KAAKD,sBAElCqJ,EAActK,QACZ,kBAACwI,EAAA,EAAD,CAAS7G,aAAW,GAChB,kBAAC,IAAD,CAAQkJ,MAAI,GACR,kBAACzE,EAAA,EAAD,CAAMC,KAAK,WACX,sGAIZ,kBAAC,EAAD,CACI8D,WAAYjJ,KAAK5B,MAAM6K,WACvBH,MAAO9I,KAAK5B,MAAMgL,cAClBF,WAAYlJ,KAAK5B,MAAMiL,2B,GArDxBtI,IAAMC,W,wDCczB,SAAS4I,GAAuB3C,EAAKtG,GACjC,IAAMkJ,EAAwB1J,IAAE2J,OAAO7C,GAAK,SAAA8C,GAAC,OAAIA,EAAI,KAErD,OAAOC,OAAOC,QAAQJ,GAAuBvK,KAAI,SAAA4K,GAAM,IAAD,cACnBA,EADmB,GAC3CC,EAD2C,KAC1BC,EAD0B,KAGlD,MAAO,CACH9E,KAAK,GAAD,OAAK6E,EAAgBE,MAAM,KAAKC,KAAK,OAArC,mBAAsDF,GAC1DxL,MAAOuL,EACP9E,IAAI,GAAD,OAAK1E,GAAL,OAAUwJ,OAUzB,SAASI,GAA4BtD,GACjC,IAAM4C,EAAwB1J,IAAE2J,OAAO7C,GAAK,SAAA8C,GAAC,OAAIA,EAAI,KAE/CS,EAAarK,IAAEsK,KAAKZ,GAAuBvK,KAAI,SAAAoL,GAAC,OAAIA,EAAEL,MAAM,KAAK,MAEvE,OADqBlK,IAAEwK,KAAKH,GACRI,QAAQ,YAAc,EAAI,UAAY,O,IAGzCC,G,2MACjBzM,MAAQ,CACJ0M,wBAAyB,GACzBC,2BAA4B,EAC5BC,eAAgB,EAChB9G,MAAO,EAEPyB,eAAgB4E,GAA4B,EAAKzK,MAAMmH,KACvDgE,iBAAkBrB,GAAuB,EAAK9J,MAAMmH,IAAK,EAAKnH,MAAMa,K,EAGxE6F,qBAAuB,SAAC7H,EAAD,GAAmB,IAAbC,EAAY,EAAZA,MACjBmM,EAA+B,EAAK3M,MAApC2M,2BACJG,EAASxE,SAAS9H,GAElBsM,EAASH,IACTG,EAASH,IAGT1G,MAAO6G,IAAYA,EAAS,KAAKA,EAAS,GAE9C,EAAKrM,SAAS,CAAEmM,eAAgBE,K,EAGpCC,8BAAgC,SAACxM,EAAD,GAAmB,IAAbC,EAAY,EAAZA,MAClC,EAAKC,SAAS,CACViM,wBAAyBlM,EACzBmM,2BAA4B,EAAKjL,MAAMmH,IAAIrI,GAC3C+G,eAAgB/G,EAAMyL,MAAM,KAAK,M,EAIzCe,kBAAoB,SAACzM,EAAD,GAAmB,IAAbC,EAAY,EAAZA,MAClBsM,EAAS/G,OAAOvF,IAChByF,MAAO6G,IAAYA,EAAS,KAAKA,EAAS,GAC9C,EAAKrM,SAAS,CAAEqF,MAAOgH,K,EAI3BvE,YAAc,SAAC0E,GACkB,IAAzB,EAAKjN,MAAMiN,IACX,EAAKxM,SAAL,gBAAiBwM,EAAW,M,EAKpCzE,WAAa,SAACyE,GACmB,KAAzB,EAAKjN,MAAMiN,IACX,EAAKxM,SAAL,gBAAiBwM,EAAW,K,EAIpCC,gBAAkB,WAAO,IAAD,EACuC,EAAKlN,MAAxD0M,EADY,EACZA,wBAAyBE,EADb,EACaA,eAAgB9G,EAD7B,EAC6BA,MAD7B,EAEA,EAAKpE,MAAjBmH,EAFY,EAEZA,IAAKtG,EAFO,EAEPA,GAEb,EAAKb,MAAMyL,cAAX,eACS,EAAKzL,OACVgL,EACAE,EACA9G,GAIJ,EAAKrF,SAAS,CACViM,wBAAyB,GACzBC,2BAA4B,EAC5BC,eAAgB,EAChB9G,MAAO,EACP+G,iBAAkBrB,GAAuB3C,EAAKtG,GAC9CgF,eAAgB4E,GAA4BtD,KAIhDrH,IAAE,cAAcsH,QAAQrH,U,wEAGlB,IAAD,SAUDG,KAAKF,MARLqF,EAFC,EAEDA,KACA7B,EAHC,EAGDA,WACA8D,EAJC,EAIDA,IACAD,EALC,EAKDA,SACAE,EANC,EAMDA,OACAJ,EAPC,EAODA,IACAtG,EARC,EAQDA,GACA4C,EATC,EASDA,WATC,EAmBDvD,KAAK5B,MANL0M,EAbC,EAaDA,wBACAC,EAdC,EAcDA,2BACApF,EAfC,EAeDA,eACAsF,EAhBC,EAgBDA,iBACAD,EAjBC,EAiBDA,eACA9G,EAlBC,EAkBDA,MAGJ,OACI,kBAACoD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAKC,MAAN,CAAYC,SAAO,GACf,kBAACF,EAAA,EAAD,KACI,kBAACA,EAAA,EAAK9D,MAAN,CAAYG,KAAK,QACb,kBAAC,EAAD,CACIN,WAAYA,EACZC,WAAYA,KAGpB,kBAACgE,EAAA,EAAKG,QAAN,KACI,kBAACH,EAAA,EAAK3E,OAAN,CAAa+E,GAAG,MACXxC,EAAM,IACP,uBACIyC,UAAS,sBAAiBR,EAAjB,eAA2BC,GACpCvE,MAAO,CAAE+E,SAAU,UAEvB,kBAAC5F,EAAA,EAAD,CAAOH,MAAM,QACRqF,EADL,KACiBW,OAAOV,GAAKW,cAD7B,KAGA,kBAAC9G,EAAD,CAAWC,aAAc+F,IACxB,IACD,kBAACxC,EAAD,CAAa9D,GAAIA,EAAI+D,OAAQiB,KAEjC,kBAAC4B,EAAA,EAAKS,YAAN,KACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKT,MAAN,KACI,kBAACS,EAAA,EAAKC,MAAN,CACIC,QAASqD,KACTC,WAAS,EACThL,YAAY,mBACZ+H,QAASyC,EACTrM,MAAOkM,EACPzC,MAAM,0BACNC,SAAUtI,KAAKmL,gCAEnB,kBAAClD,EAAA,EAAKC,MAAN,CACIC,QAASC,IACTtB,KAAK,SACLuB,MAAM,mBACNzJ,MAAOoM,EACP1C,SAAUtI,KAAKwG,qBACfiC,UAAWsC,EACXnK,QAAS,kBAAM,EAAK+F,YAAY,mBAChC7F,OAAQ,kBAAM,EAAK8F,WAAW,qBAElC,kBAACqB,EAAA,EAAKC,MAAN,CACIC,QAASC,IACTtB,KAAK,SACLuB,MAAM,QACNzJ,MAAOsF,EACPoE,SAAUtI,KAAKoL,kBACf3C,UAAWsC,EACXnK,QAAS,kBAAM,EAAK+F,YAAY,UAChC7F,OAAQ,kBAAM,EAAK8F,WAAW,UAC9B8E,KAAM,KAEV,kBAACzD,EAAA,EAAKS,OAAN,CACIL,MAAM,eACNF,QAASO,IACTC,SAAO,EACPC,QAAS5I,KAAKsL,gBACd7C,UAAWuC,GALf,mB,GA3JIjK,IAAMC,WC7CnC,SAAS2K,GAAe7L,GAAQ,IACnCgJ,EAAyBhJ,EAAzBgJ,MAAOyC,EAAkBzL,EAAlByL,cAOf,OAJqB,IAAjBzC,EAAMhK,QACNc,IAAE,cAAcsH,QAAQrH,SAGrBiJ,EAAMxJ,KAAI,SAAAyJ,GACb,OACI,kBAAC,GAAD,eACI1D,IAAK0D,EAAKpI,IACNoI,EAFR,CAGIwC,cAAeA,QCd/B,IAWeK,GAXQ,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChBC,EAAQD,EAAS/M,OACjB+M,EAASE,QACL,SAACC,EAAKvF,GAAN,OAAcuF,EAAMtF,SAASD,EAAIwF,WAAa9H,OAAOsC,EAAIvC,SACzD,GAEJ,EAEN,OAAO,kBAAC,EAAD,CAAOD,IAAK6H,K,UCPR,SAASI,GAAapM,GAAQ,IAErCqF,EAQArF,EARAqF,KACAiC,EAOAtH,EAPAsH,IACA+E,EAMArM,EANAqM,gBACAF,EAKAnM,EALAmM,UACA/H,EAIApE,EAJAoE,MACAmD,EAGAvH,EAHAuH,OACA+E,EAEAtM,EAFAsM,eACAzL,EACAb,EADAa,GAToC,EAYVgE,oBAAS,GAZC,mBAYjCxB,EAZiC,KAYxBkJ,EAZwB,KAcxC,OACI,kBAACC,GAAA,EAAMC,IAAP,KACI,kBAACD,GAAA,EAAME,KAAP,KAAY,4BAAKrH,IACjB,kBAACmH,GAAA,EAAME,KAAP,CAAYC,YAAU,GAClB,uBACI7E,UAAS,sBAAiBR,EAAjB,eAA2BC,GACpCvE,MAAO,CAAE+E,SAAU,UAEvB,kBAAC5F,EAAA,EAAD,CAAOH,MAAM,QAAQsF,EAAIW,gBAE7B,kBAACuE,GAAA,EAAME,KAAP,KACKP,EADL,OACmB,kBAAC,EAAD,CAAOhI,IAAKC,IAD/B,MAC4CiI,GAE5C,kBAACG,GAAA,EAAME,KAAP,KACI,kBAAC9D,EAAA,EAAD,CACIiB,KAAK,SACL+C,UAAQ,EACR9D,QAAS,kBAAMwD,EAAezL,EAAIwL,IAClCrI,YAAa,kBAAMuI,GAAW,IAC9BtI,WAAY,kBAAMsI,GAAW,IAC7BvK,MAAOqB,EAAU,MAAQ,SClC7C,IAeewJ,GAfU,SAAC,GAAsC,IAApCd,EAAmC,EAAnCA,SAAUe,EAAyB,EAAzBA,mBAClC,OAAO,kBAACN,GAAA,EAAD,KACH,kBAACA,GAAA,EAAMO,KAAP,KACKhB,EAASvM,KAAI,SAAAyJ,GACV,OAAO,kBAACmD,GAAD,iBACCnD,EADD,CAEH1D,IAAG,UAAK0D,EAAKpI,IAAV,OAAeoI,EAAKoD,iBAApB,OAAsCpD,EAAKkD,WAC9CG,eAAgBQ,WCCfE,I,kNACjB1O,MAAQ,CAAE2O,cAAc,G,EAExBC,MAAQ,WACJ,EAAKnO,SAAS,CAAEkO,cAAc,IAAQ,WAClCE,OAAOD,QACP,EAAKnO,SAAS,CAAEkO,cAAc,Q,wEAI5B,IACEG,EAAkBlN,KAAKF,MAAvBoN,cACAH,EAAiB/M,KAAK5B,MAAtB2O,aAER,OAAIG,EAAcpO,OAAS,EAEnB,kBAAC,IAAMkD,SAAP,KACI,kBAAC0G,EAAA,EAAD,CAAQ5F,MAAO,CAAEqK,QAAS,eAAgBC,MAAO,SAAWxE,QAAS5I,KAAKgN,MAAOrD,MAAI,GACjF,kBAACzE,EAAA,EAAD,CAAMC,KAAK,WAGf,yBAAKxE,GAAG,UAAUmC,MAAO,CAAEqK,QAASJ,EAAe,eAAiB,SAChE,4BAAKG,EAAc5N,KAAI,SAAA+N,GAAC,OA5BpC,SAAC,GAA+D,IAA7D1M,EAA4D,EAA5DA,GAAIwE,EAAwD,EAAxDA,KAAM8G,EAAkD,EAAlDA,UAAWE,EAAuC,EAAvCA,gBAAiBhF,EAAsB,EAAtBA,SAAUjD,EAAY,EAAZA,MAC3D,OAAO,wBAAImB,IAAK1E,GACZ,2BAAIwE,EAAJ,OAAc8G,EAAd,MAA4BE,EAA5B,MAAgDhF,EAAhD,MAA4D,kBAAC,EAAD,CAAOlD,IAAKC,MA0B5BqI,CAAIc,OAChC,8BAAM,wCAAa,kBAAC,GAAD,CAAgBxB,SAAUqB,QAKlD,S,GA5BoBnM,IAAMC,YCa7C,SAASsM,GAAaxE,GAClB,IAAMyE,EAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,QAAS,YAAa,QAM9D,SAASC,EAASzE,GACd,IAAI0E,EAAa,KAEbC,EAAe,KACfC,EAAW,KAEf,IAEID,EAAe3E,EAAK6E,OAAO9O,OAC3B6O,EAAW5E,EACb,MAAOpK,GACL,IAEI+O,EAAe3E,EAAKxF,WAAW,GAAGqK,OAAO9O,OACzC6O,EAAW5E,EAAKxF,WAAW,GAC7B,MAAO5E,GACL+O,EAAe3E,EAAK6E,OAAO9O,OAC3B6O,EAAW5E,GAuBnB,OAlBqB,IAAjB2E,EACAD,EAAa,YACW,IAAjBC,EACPD,EAAaE,EAASC,OAAO,GACtBF,EAAe,IACtBD,EAAa,SAIE,cAAfA,GACIE,EAASE,UAAUC,SAAS,UAC5BL,EAAa,QAKhBA,IAAcA,EAAa,QAEzBA,EAWX,OARkB3E,EAAMiF,MAAK,SAAC/O,EAAGgP,GAC7B,OAAOhP,EAAEmG,KAAK8I,cAAcD,EAAE7I,SAGT4I,MAAK,SAAC/O,EAAGgP,GAC9B,OAAOT,EAAM3C,QAAQ4C,EAASxO,IAAMuO,EAAM3C,QAAQ4C,EAASQ,OAMnE,IAAME,GAAe,CACjB9E,cAAe,GACf8D,cAAe,GACfiB,WAAW,EACXhI,eAAe,EACfiI,WAAY,IAGKC,G,2MACjBjQ,MAAQ8P,G,EAERxO,mB,uCAAqB,WAAMpB,GAAN,iBAAAU,EAAA,+EAEUC,IAAMC,IAAIhC,qBAAoB,CACjDoM,OAAQ,CAAE9J,MAAOlB,GACjBa,QAASpB,MAJA,gBAELqB,EAFK,EAELA,KAKR,EAAKP,SAAS,CAAEuK,cAAehK,EAAMgP,WAAY9P,IAPpC,gDASb+H,QAAQC,IAAR,MATa,yD,wDAgBrBiF,cAAgB,SAACxC,EAAMoD,EAAiBF,EAAW/H,GAC/C,IAAMoK,EAAO,eAAQvF,EAAR,CAAcoD,kBAAiBF,YAAW/H,UACjDqK,EAAQ,YAAO,EAAKnQ,MAAM8O,eAG1BsB,EAAMD,EAASE,WAAU,SAAAlP,GAC3B,OACIA,EAAGoB,KAAO2N,EAAQ3N,IAAMpB,EAAG4M,kBAAoBA,MAI1C,IAATqC,EACAD,EAASG,OAAOF,EAAK,EAAGF,GAExBC,EAASI,KAAKL,GAIlB,IAAMM,EAActB,GAAaiB,GAEjC,EAAK1P,SAAS,CAAEqO,cAAe0B,K,EAMnChC,mBAAqB,SAACjM,EAAIwL,GACtB,IAAM0C,EAAW1O,IAAE2O,OAAF,YAAa,EAAK1Q,MAAM8O,gBAAgB,SAAA3N,GACrD,OAAOA,EAAGoB,KAAOA,GAAMpB,EAAG4M,kBAAoBA,KAGlD,EAAKtN,SAAS,CAAEqO,cAAe2B,K,EAMnCE,a,sBAAe,gCAAA/P,EAAA,sEAEP,EAAKH,SAAS,CAAEsH,eAAe,IAFxB,SAIgBlH,IAAM8H,KAAK3J,cAAa,CAC3C0L,MAAO,EAAK1K,MAAM8O,eACnB,CAAE/N,QAASpB,MANP,gBAICqB,EAJD,EAICA,KAIF4P,EAAS5P,EAAK6P,UAAUZ,KAAKW,OAEnC5M,EAAY,CACRN,MAAO,QACPO,OAAQ,8BACRC,QAAQ,qBAAD,OAAuB0M,KAGlC,EAAKnQ,SAASqP,IAhBP,kDAkBP9L,EAAY,CACRN,MAAO,MACPO,OAAQ,SACRC,QAAQ,yBAGZ,EAAKzD,SAASqP,IACd7H,QAAQC,IAAR,MAzBO,0D,EA6Bf4I,WAAa,WACT,EAAKrQ,SAAS,CAAEsP,WAAW,K,wEAGrB,IAAD,SAODnO,KAAK5B,MALLgL,EAFC,EAEDA,cACA8D,EAHC,EAGDA,cACAiB,EAJC,EAIDA,UACAhI,EALC,EAKDA,cACAiI,EANC,EAMDA,WAWJ,OACI,kBAAC,IAAMpM,SAAP,KACI,kBAACmN,GAAA,EAAK5C,IAAN,CAAUzJ,MAAO,CAAEqK,QAAS,OAAQiC,WAAY,WAC5C,kBAAC,EAAD,CAAWrP,mBAAoBC,KAAKN,sBAExC,6BACA,kBAACyP,GAAA,EAAD,CAAME,WAAW,GACb,kBAACF,GAAA,EAAK5C,IAAN,KACI,kBAAC4C,GAAA,EAAKG,OAAN,CAAaC,MAAM,MACf,kBAAC,IAAD,CAAQ5H,GAAG,KAAK7E,MAAO,CAAEqK,QAAS,iBAAlC,aACA,kBAACqC,GAAA,EAAD,OAEEpG,EAActK,QACZ,kBAACwI,EAAA,EAAD,CAAS7G,aAAW,GAChB,kBAAC,IAAD,CAAQkJ,MAAI,GACR,kBAACzE,EAAA,EAAD,CAAMC,KAAK,WACX,8BAtBxBiJ,IAAehF,EAActK,OACtB,+CAAoB,4BAAKsP,IAE7B,8DAuBS,kBAACzC,GAAD,CACI7C,MAAOM,EACPmC,cAAevL,KAAKuL,iBAG5B,kBAAC4D,GAAA,EAAKG,OAAN,CAAaC,MAAM,KACf,kBAAC,IAAD,CAAQ5H,GAAG,KAAK7E,MAAO,CAAEqK,QAAS,iBAAlC,cAEA,kBAAC,GAAD,CAAWD,cAAeA,IAC1B,kBAACsC,GAAA,EAAD,MAE0B,IAAzBtC,EAAcpO,QACX,kBAACwI,EAAA,EAAD,CAAS7G,aAAW,GAChB,kBAAC,IAAD,CAAQkJ,MAAI,GACR,kBAACzE,EAAA,EAAD,CAAMC,KAAK,SADf,4CAOP+H,EAAcpO,OAAS,GAAK,kBAAC,IAAMkD,SAAP,KACzB,kBAAC,GAAD,CACI4K,mBAAoB5M,KAAK4M,mBACzBf,SAAUqB,KAKjBA,EAAcpO,OAAS,GACpB,kBAACwI,EAAA,EAAD,CAASmI,UAAQ,GACb,kBAAC,IAAD,CAAQC,QAAQ,QACZ,kBAAC,IAAD,CAAQC,KAAG,GAAX,YACA,kBAAC,GAAD,CACI9D,SAAUqB,KAGlB,kBAAC0C,GAAA,EAAD,CACIC,OAAK,EACLC,KAAM3B,EACN4B,QACI,kBAACrH,EAAA,EAAD,CACIgH,QAAQ,QACR/G,SAAO,EACPC,QAAS,WACL,EAAK/J,SAAS,CACVsP,WAAW,MALvB,kBAaJ,kBAACyB,GAAA,EAAMlI,QAAP,KACI,kBAAC,IAAD,CAAQsI,UAAQ,EAACrI,GAAG,MAApB,uBAGA,2MAOJ,kBAACiI,GAAA,EAAMK,QAAP,KACI,kBAACvH,EAAA,EAAD,CACImH,OAAK,EACL/N,MAAM,MACNkO,UAAQ,EACRpH,QAAS5I,KAAKkP,YAEd,kBAAChK,EAAA,EAAD,CAAMC,KAAK,WANf,OAQA,kBAACuD,EAAA,EAAD,CACI5G,MAAM,QACNkO,UAAQ,EACRpH,QAAS5I,KAAK+O,aACdvO,QAAS2F,GAET,kBAACjB,EAAA,EAAD,CAAMC,KAAK,cANf,mB,GAvMVpE,IAAMC,W,qBCzEzBkP,GAjBO,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SACfC,EADwC,EAAfC,SACDtE,QAC1B,SAACuE,EAAKC,GAAN,OAAeD,EAAMC,EAAKtE,YAC1B,GAGJ,OACI,kBAACK,GAAA,EAAMC,IAAP,KACI,kBAACD,GAAA,EAAME,KAAP,KAAa2D,EAASnB,QACtB,kBAAC1C,GAAA,EAAME,KAAP,KACKgE,KAAOL,EAASM,YAAYC,OAAO,wBAExC,kBAACpE,GAAA,EAAME,KAAP,KAAa4D,KCYVO,GAxBG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjB,OACI,kBAACtE,GAAA,EAAD,CAAOuE,QAAM,EAACC,aAAW,EAACnO,SAAO,GAC7B,kBAAC2J,GAAA,EAAM1J,OAAP,KACI,kBAAC0J,GAAA,EAAMC,IAAP,KACI,kBAACD,GAAA,EAAMyE,WAAP,gBACA,kBAACzE,GAAA,EAAMyE,WAAP,qBACA,kBAACzE,GAAA,EAAMyE,WAAP,wBAIR,kBAACzE,GAAA,EAAMO,KAAP,KACK+D,EAAKtR,KAAI,gBAAG2P,EAAH,EAAGA,UAAW+B,EAAd,EAAcA,UAAWC,EAAzB,EAAyBA,IAAzB,OACN,kBAAC,GAAD,CACId,SAAUlB,EACVoB,SAAUW,EACV3L,IAAK4L,UCqBdC,G,2MAjCX9S,MAAQ,CAAE+S,UAAW,GAAIC,SAAU,I,EAEnCrR,mB,uCAAqB,WAAMqR,GAAN,iBAAApS,EAAA,sEACMC,IAAMC,IAAI3B,qBAAoB,CACjD+L,OAAQ,CAAE8H,SAAUA,GACpBjS,QAASpB,MAHI,gBACTqB,EADS,EACTA,KAKR,EAAKP,SAAS,CAAEsS,UAAW/R,EAAMgS,SAAUA,IAN1B,2C,8HASX,IAAD,EAC2BpR,KAAK5B,MAA7B+S,EADH,EACGA,UAAWC,EADd,EACcA,SAEnB,OACI,6BACI,kBAAC,EAAD,CAAWrR,mBAAoBC,KAAKD,qBACpC,6BACA,8BACI,4BACkB,KAAbqR,GACG,4BACKD,EAAUrS,OADf,gBACoCsS,KAKhD,kBAAC,GAAD,CAAWR,KAAMO,S,GA5BPnQ,aCFpBqQ,GAAe,CACjBlE,QAAS,eACTmE,OAAQ,uBAGNC,GAAiB,CACnBpE,QAAS,OACTqE,cAAe,MACfC,eAAgB,gBAChBC,QAAS,kBACTnN,gBAAiB,qBACjBoN,aAAc,sBACd5O,UAAW,qCAGT6O,GAAa,CACfrC,MAAO,QACPsC,OAAQ,UACR9O,UAAW,oCACX+O,WAAY,sFACZH,aAAc,QAGH,SAASI,GAAT,GAA8D,IACrEC,EADiC1O,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,WAAY0D,EAAW,EAAXA,IAAKtG,EAAM,EAANA,GAGlE,IAEIqR,EAAU,kBAACvO,EAAA,EAAD,CAAOC,IAAKJ,EAAWK,OAAQC,KAAK,SAASd,MAAO,CAAE6O,aAAc,UAChF,MAAOhT,GACLqT,EAAU,kBAACvO,EAAA,EAAD,CAAOC,IAAKH,EAAW,GAAGD,WAAWK,OAAQC,KAAK,SAASd,MAAO,CAAE6O,aAAc,UAGhG,OAAO,kBAAC,IAAM3P,SAAP,KACH,yBAAKc,MAAOuO,IACR,yBAAKvO,MAAO8O,IAAaI,GACzB,yBAAKlP,MAAOyO,IACR,6BAAK,kBAACtQ,EAAD,CAAWC,aAAc+F,KAC9B,kBAACxC,EAAD,CAAa9D,GAAIA,OCvCjC,IAAMsR,GAAY,CACd9E,QAAS,OACT+E,SAAU,OACVC,aAAc,eACdN,OAAQ,QAGG,SAASO,GAAetS,GAAQ,IACnCgJ,EAAyBhJ,EAAzBgJ,MAAOyC,EAAkBzL,EAAlByL,cAEf,OACI,kBAAC4D,GAAA,EAAD,CAAMrM,MAAOmP,IACRnJ,EAAMxJ,KAAI,SAAAyJ,GACP,OACI,kBAACgJ,GAAD,eACI1M,IAAK0D,EAAKpI,IACNoI,EAFR,CAGIwC,cAAeA,SCRvC,IAAM2C,GAAe,CACjB9E,cAAe,GACf8D,cAAe,GACfkB,WAAY,IAGKiE,G,2MACjBjU,MAAQ8P,G,EAERxO,mB,uCAAqB,WAAMpB,GAAN,iBAAAU,EAAA,+EAEUC,IAAMC,IAAIhC,qBAAoB,CACjDoM,OAAQ,CAAE9J,MAAOlB,KAHR,gBAELc,EAFK,EAELA,KAIR,EAAKP,SAAS,CAAEuK,cAAehK,EAAMgP,WAAY9P,IANpC,gDAQb+H,QAAQC,IAAR,MARa,yD,8HAYX,IAAD,EAIDtG,KAAK5B,MAFLgL,EAFC,EAEDA,cACAgF,EAHC,EAGDA,WAWJ,OACI,kBAAC,IAAMpM,SAAP,KACI,kBAACmN,GAAA,EAAK5C,IAAN,CAAUzJ,MAAO,CAAEqK,QAAS,OAAQiC,WAAY,WAC5C,kBAAC,EAAD,CAAWrP,mBAAoBC,KAAKN,sBAExC,6BACA,kBAACyP,GAAA,EAAD,CAAME,WAAW,GACb,kBAACF,GAAA,EAAKG,OAAN,KACI,kBAAC,IAAD,CAAQ3H,GAAG,MAAX,mBAEI,kBAAC,IAAO2K,UAAR,KACI,sGAIR,kBAAC9C,GAAA,EAAD,OAEEpG,EAActK,QACZ,kBAACwI,EAAA,EAAD,CAAS7G,aAAW,GAChB,kBAAC,IAAD,CAAQkJ,MAAI,GACR,kBAACzE,EAAA,EAAD,CAAMC,KAAK,WACX,8BA3BpBiJ,IAAehF,EAActK,OACtB,2BAAG,4BAAKsP,GAAR,oBAEJ,mDA4BK,kBAACgE,GAAD,CACItJ,MAAOM,EACPmC,cAAevL,KAAKuL,uB,GAxDHxK,IAAMC,WCb7CuR,GAAwB,CAC1B,CAAElN,IAAK,KAAMzG,MAAO,GAAI0G,KAAM,QAC9B,CAAED,IAAK,KAAMzG,MAAO,WAAY0G,KAAM,YACtC,CAAED,IAAK,KAAMzG,MAAO,SAAU0G,KAAM,UACpC,CAAED,IAAK,KAAMzG,MAAO,WAAY0G,KAAM,YACtC,CAAED,IAAK,KAAMzG,MAAO,UAAW0G,KAAM,WACrC,CAAED,IAAK,KAAMzG,MAAO,SAAU0G,KAAM,UACpC,CAAED,IAAK,KAAMzG,MAAO,SAAU0G,KAAM,UACpC,CAAED,IAAK,KAAMzG,MAAO,SAAU0G,KAAM,UACpC,CAAED,IAAK,KAAMzG,MAAO,UAAW0G,KAAM,WACrC,CAAED,IAAK,KAAMzG,MAAO,QAAS0G,KAAM,SACnC,CAAED,IAAK,KAAMzG,MAAO,YAAa0G,KAAM,aACvC,CAAED,IAAK,KAAMzG,MAAO,QAAS0G,KAAM,SACnC,CAAED,IAAK,KAAMzG,MAAO,OAAQ0G,KAAM,QAClC,CAAED,IAAK,KAAMzG,MAAO,YAAa0G,KAAM,cAGrCkN,GAA6B,CAC/B,CAAEnN,IAAK,MAAOzG,MAAO,MAAO0G,KAAM,MAClC,CAAED,IAAK,MAAOzG,MAAO,MAAO0G,KAAM,MAClC,CAAED,IAAK,MAAOzG,MAAO,KAAM0G,KAAM,KACjC,CAAED,IAAK,MAAOzG,MAAO,KAAM0G,KAAM,MAG/BmN,GAAwB,CAC1B,CAAEpN,IAAK,eAAgBzG,MAAO,GAAI0G,KAAM,QACxC,CAAED,IAAK,UAAWzG,MAAO,UAAW0G,KAAM,WAC1C,CAAED,IAAK,OAAQzG,MAAO,OAAQ0G,KAAM,SAGlCoN,GAAwB,CAC1B,CAAErN,IAAK,YAAazG,MAAO,QAAS0G,KAAM,SAC1C,CAAED,IAAK,YAAazG,MAAO,OAAQ0G,KAAM,cAGvCqN,GAAiC,CACnC,CAAEtN,IAAK,cAAezG,MAAO,EAAG0G,KAAM,aACtC,CAAED,IAAK,aAAczG,OAAQ,EAAG0G,KAAM,eAGpCsN,GAA6B,CAC/B,CAAEvN,IAAK,IAAKzG,MAAO,IAAK0G,KAAM,SAC9B,CAAED,IAAK,IAAKzG,MAAO,IAAK0G,KAAM,QAC9B,CAAED,IAAK,IAAKzG,MAAO,IAAK0G,KAAM,SAC9B,CAAED,IAAK,IAAKzG,MAAO,IAAK0G,KAAM,OAC9B,CAAED,IAAK,IAAKzG,MAAO,IAAK0G,KAAM,UAG5B4I,GAAe,CACjB1O,MAAO,GACPqT,QAAS,GACTnC,OAAQ,GACRoC,SAAU,GACVC,YAAa,MACbrO,OAAQ,GACRsO,OAAQ,QACRC,YAAa,GACbC,iBAAkB,EAClBC,SAAU,IAGOC,G,2MACjBhV,M,aAAUiV,uBAAwB,IAAOnF,I,EAEzCnO,mBAAqB,SAAAoF,GAAI,OAAI,EAAKtG,SAAS,CAAEW,MAAO2F,K,EAGpDmO,iBAAmB,SAAC3U,EAAGuL,GAAJ,OAAU,EAAKrL,SAAS,CAAEW,MAAOb,EAAEkC,OAAOjC,S,EAE7D2U,aAAe,SAAC5U,EAAD,OAAMC,EAAN,EAAMA,MAAN,OAAkB,EAAKC,SAAL,gBAAiBF,EAAEkC,OAAOsE,KAAOvG,K,EAElE4U,qBAAuB,SAAC7U,EAAGS,GAAJ,OAAa,EAAKP,SAAL,gBAAiBO,EAAK+F,KAAO/F,EAAKR,S,yNAG3CK,IAAMC,IAAIxB,iB,gBAAzB0B,E,EAAAA,KACFqU,EAAiBrU,EAAKE,KAAI,SAAC4K,EAAGsE,GAChC,MAAO,CAAEnJ,IAAI,MAAD,OAAQmJ,GAAO5P,MAAOsL,EAAG5E,KAAM4E,MAEzCwJ,EAAwB,CAAC,CAAErO,IAAK,QAASzG,MAAO,GAAI0G,KAAM,SAAUqO,OAAOF,GACjFzT,KAAKnB,SAAS,CAAEwU,uBAAwBK,I,qIAGlC,IAAD,SAWD1T,KAAK5B,MATLoB,EAFC,EAEDA,MACAqT,EAHC,EAGDA,QACAnC,EAJC,EAIDA,OACAoC,EALC,EAKDA,SACAC,EANC,EAMDA,YACArO,EAPC,EAODA,OACAsO,EARC,EAQDA,OACAE,EATC,EASDA,gBAKEtF,EAdD,EAUDqF,YAIuBlF,OAAOzD,KAAK,IAEvC,OACI,kBAAChD,EAAA,EAAD,KACI,uCACA,kBAACW,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKT,MAAN,CAAYoM,OAAO,KACf,kBAAC3L,EAAA,EAAKC,MAAN,KACI,4CACA,kBAAC,EAAD,CACInI,mBAAoBC,KAAKD,mBACzBnB,MAAOoB,KAAK5B,MAAMoB,MAClB2F,KAAK,QACLrE,OAAQd,KAAKsT,oBAGrB,kBAACrL,EAAA,EAAKC,MAAN,CACIC,QAASI,IACTF,MAAM,SACN5H,YAAY,SACZ+H,QAAS+J,GACTpN,KAAK,SACLmD,SAAUtI,KAAKwT,uBAEnB,kBAACvL,EAAA,EAAKC,MAAN,CACIC,QAASI,IACTF,MAAM,UACN5H,YAAY,UACZoT,QAAM,EACNrL,QAASxI,KAAK5B,MAAMiV,uBACpBlO,KAAK,UACLmD,SAAUtI,KAAKwT,uBAEnB,kBAACvL,EAAA,EAAKC,MAAN,CACIC,QAASI,IACTF,MAAM,SACN5H,YAAY,SACZ+H,QAASiK,GACTtN,KAAK,SACLmD,SAAUtI,KAAKwT,wBAGvB,kBAACvL,EAAA,EAAKT,MAAN,CAAYoM,OAAO,KAEf,kBAAC3L,EAAA,EAAKC,MAAN,CACIC,QAASI,IACTuL,UAAQ,EACRzL,MAAM,SACN5H,YAAY,SACZ+H,QAASoK,GACTzN,KAAK,cACLmD,SAAUtI,KAAKwT,uBAGnB,kBAACvL,EAAA,EAAKC,MAAN,KACI,+CACA,kBAACE,EAAA,EAAD,CACIC,MAAO,kBAACmD,GAAA,EAAD,CACHhD,QAASgK,GACTrN,KAAK,cACL4O,aAAa,MACbzL,SAAUtI,KAAKwT,uBAEnB/S,YAAY,gBACZuT,cAAc,OACd7O,KAAK,WACL2B,KAAK,SACLwB,SAAUtI,KAAKwT,wBAGvB,kBAACvL,EAAA,EAAKC,MAAN,CACIC,QAASI,IACTF,MAAM,UACN5H,YAAY,GACZ+H,QAASkK,GACTqB,aAAa,QACb5O,KAAK,SACLmD,SAAUtI,KAAKwT,uBAEnB,kBAACvL,EAAA,EAAKC,MAAN,CACIC,QAASI,IACTF,MAAM,QACNG,QAASmK,GACToB,cAAe,EACf5O,KAAK,kBACLmD,SAAUtI,KAAKwT,wBAGvB,kBAACvL,EAAA,EAAKT,MAAN,KACI,kBAACS,EAAA,EAAKS,OAAN,CAAaC,SAAO,EAACC,QAAS,kBAAM,EAAK9I,MAAMmU,aAAa,CACxDzU,QACAqT,UACAnC,SACAoC,WACAC,cACArO,SACAsO,SACAE,kBACAtF,aATJ,iB,GA5HsB7M,IAAMC,WC/D9CkT,GAAe,CACjBC,GAAI,YACJC,GAAI,aACJC,GAAI,gBACJC,GAAI,cAGFC,GAAU,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,KAAiB,EAAXC,KAChC,OACI,yBAAK5R,MAAO,CACRD,SAAU,WACV8R,KAAK,GAAD,OAAKF,EAAL,MACJlF,MAAO,QACPsC,OAAQ,QACRF,aAAc,kBACd5O,UAAW,oCACX+O,WAAY,wFAEZ,kBAACrO,EAAA,EAAD,CACIX,MAAO,CAAE6O,aAAc,mBACvB/N,KAAK,QACLF,IAAK8Q,MAMAI,G,2MACjBxW,MAAQ,CAAEyW,aAAa,EAAOC,OAAQ,EAAGC,OAAQ,G,EAEjDC,WAAa,SAACrW,GACV,IAAMmW,EAASnW,EAAEsW,QAAUtW,EAAEkC,OAAOqU,WAC9BH,EAASpW,EAAEwW,QAAUxW,EAAEkC,OAAOuU,UACpC,EAAKvW,SAAS,CAAEgW,aAAa,EAAMC,SAAQC,Y,EAG/CM,WAAa,SAAC1W,GAAD,OAAO,EAAKE,SAAS,CAAEgW,aAAa,K,EAEjDS,UAAY,SAAC3W,GACT,IAAMmW,EAASnW,EAAEsW,QAAUtW,EAAEkC,OAAOqU,WAC9BH,EAASpW,EAAEwW,QAAUxW,EAAEkC,OAAOuU,UACpC,EAAKvW,SAAS,CAAEiW,SAAQC,Y,wEAGlB,IAAD,EACgE/U,KAAKF,MAAlEyV,EADH,EACGA,UAAWpQ,EADd,EACcA,KAAMgC,EADpB,EACoBA,SAAUjD,EAD9B,EAC8BA,MAAOkD,EADrC,EACqCA,IAAKC,EAD1C,EAC0CA,OAAQmN,EADlD,EACkDA,UADlD,EAEmCxU,KAAK5B,MAArCyW,EAFH,EAEGA,YAAaC,EAFhB,EAEgBA,OAAQC,EAFxB,EAEwBA,OACvBrQ,EAAS6Q,EAAU7K,EAAEL,MAAM,KAAK,GAChCmL,EAAYD,EAAU7K,EAAEL,MAAM,KAAK,GAEzC,OAAO,kBAACiC,GAAA,EAAMC,IAAP,KACH,kBAACD,GAAA,EAAME,KAAP,KACI,0BACIiJ,aAAczV,KAAKgV,WACnBU,aAAc1V,KAAKqV,WACnBM,YAAa3V,KAAKsV,UAClBxS,MAAO,CAAE8S,OAAQ,SAEhBzQ,EAAM,KAEC,SAAXT,GAAqB,kBAACQ,EAAA,EAAD,CAAMC,KAAK,OAAOrD,MAAM,SAC7C+S,GAAe,kBAAC,GAAD,CAASL,UAAWA,EAAWC,KAAMK,EAAQJ,KAAMK,KAEvE,kBAACzI,GAAA,EAAME,KAAP,KAAY,uBAAG5E,UAAS,sBAAiBR,EAAjB,eAA2BC,GAAUvE,MAAO,CAAE+E,SAAU,UAAa,IAAKV,GAClG,kBAACmF,GAAA,EAAME,KAAP,KAAa0H,GAAasB,IAC1B,kBAAClJ,GAAA,EAAME,KAAP,KAAa+I,EAAUM,GACvB,kBAACvJ,GAAA,EAAME,KAAP,KAAY,kBAAC,EAAD,CAAOvI,IAAKC,U,GAvCSnD,IAAMC,W,wCCtB9B8U,G,2MACjB1X,MAAQ,CACJgB,KAAM,GACN2W,MAAO,EACPC,YAAa,EACbC,SAAU,EACVC,UAAW,GACX7X,WAAW,EACX8X,cAAe,GACfC,UAAW,GACXC,eAAe,G,EAGnBC,U,uCAAY,WAAOC,EAASC,GAAhB,uBAAAxX,EAAA,sEAEJ,EAAKH,SAAS,CAAER,WAAW,IAFvB,SAImBY,IAAMC,IAAIzB,sBAAqB,CAClD6L,OAAO,eAAMiN,EAAP,CAAgBC,WALtB,gBAIIpX,EAJJ,EAIIA,KAIF6W,EAAWQ,KAAKC,KAAKtX,EAAK0M,MAvB9B,KAwBI6K,EAAQxW,IAAEyW,MAAM,EAAGX,EAAW,GAMhCG,EADAI,GAAQ,EACIG,EAAMlX,MAAM,EAAG,GACpB+W,GAAQP,EAAW,EACdU,EAAMlX,MAAMwW,EAAW,EAAGA,GAE1BU,EAAMlX,MAAM+W,EAAO,EAAGA,EAAO,GAG7C,EAAK3X,SAAS,CACVO,KAAMA,EAAK0J,MACXiN,MAAO3W,EAAK0M,MACZzN,WAAW,EACX4X,SAAUA,EACVD,YAAaQ,EACbJ,UAAWA,EACXC,eAAe,IA7Bf,kDAgCJhQ,QAAQC,IAAR,MAhCI,0D,0DAoCZ2N,a,uCAAe,WAAOsC,GAAP,SAAAvX,EAAA,6DACX,EAAKH,SAAS,CAAEsX,cAAeI,IADpB,SAEL,EAAKD,UAAUC,EAAS,GAFnB,2C,wDAKfM,W,uCAAa,WAAOL,GAAP,SAAAxX,EAAA,sEACH,EAAKsX,UAAU,EAAKlY,MAAM+X,cAAeK,GADtC,OAET,EAAK3X,SAAS,CAAEmX,YAAaQ,IAFpB,2C,8HAKH,IAAD,SACqDxW,KAAK5B,MAAvDgB,EADH,EACGA,KAAMf,EADT,EACSA,UAAW2X,EADpB,EACoBA,YAAaC,EADjC,EACiCA,SAAUF,EAD3C,EAC2CA,MAC1Ce,IAAwC,IAAhBd,GACxBe,IAAyBf,IAAgBC,GAE/C,OAAO,kBAACe,GAAA,EAAD,KACH,kBAACC,GAAA,EAAD,CAAQC,OAAQ7Y,EAAW2R,UAAQ,EAACwG,MAAI,EAAC1T,MAAO,CAAEqU,UAAW,YACzD,kBAACC,GAAA,EAAD,CAAQxT,KAAK,SAAb,YAEJ,kBAAC0D,EAAA,EAAD,CAAS+P,WAAS,GACd,kBAACnS,EAAA,EAAD,CAAMC,KAAK,uBAAuBrD,MAAM,SAD5C,6IAIA,kBAAC,GAAD,CAAkBmS,aAAcjU,KAAKiU,iBAElC7U,EAAKN,QAAU,kBAACwN,GAAA,EAAD,CAAOuE,QAAM,EAACyG,SAAO,EAAC3U,SAAO,GAC3C,kBAAC2J,GAAA,EAAM1J,OAAP,KACI,kBAAC0J,GAAA,EAAMC,IAAP,KACI,kBAACD,GAAA,EAAMyE,WAAP,CAAkBwG,QAAQ,KACtB,kBAACC,GAAA,EAAD,CAAM9H,QAAQ,QACV,kBAAC8H,GAAA,EAAKjQ,KAAN,qBAAyByO,EAAzB,OAA0CC,IAE9C,kBAACuB,GAAA,EAAD,CAAM9H,QAAQ,SACToH,GAAuB,kBAACU,GAAA,EAAKjQ,KAAN,CAAWI,GAAG,IAAIgC,MAAI,EAACf,QAAS,kBAAM,EAAKiO,WAAWb,EAAc,KACxF,kBAAC9Q,EAAA,EAAD,CAAMC,KAAK,kBAGf,kBAAC,IAAMnD,SAAP,KACKhC,KAAK5B,MAAMgY,UAAU9W,KAAI,SAAAyK,GACtB,OACI,kBAACyN,GAAA,EAAKjQ,KAAN,CACIlC,IAAG,eAAU0E,GACbnB,QAAS,kBAAM,EAAKiO,WAAW9M,IAC/BmN,OAAQlB,IAAgBjM,EACxBtB,SAAUuN,IAAgBjM,EAC1BpC,GAAG,KACFoC,OAMhBgN,GAAwB,kBAACS,GAAA,EAAKjQ,KAAN,CAAWI,GAAG,IAAIgC,MAAI,EAACf,QAAS,kBAAM,EAAKiO,WAAWb,EAAc,KACzF,kBAAC9Q,EAAA,EAAD,CAAMC,KAAK,uBAO/B,kBAACmH,GAAA,EAAM1J,OAAP,KACI,kBAAC0J,GAAA,EAAMC,IAAP,KACI,kBAACD,GAAA,EAAMyE,WAAP,aACA,kBAACzE,GAAA,EAAMyE,WAAP,gBACA,kBAACzE,GAAA,EAAMyE,WAAP,kBACA,kBAACzE,GAAA,EAAMyE,WAAP,YACA,kBAACzE,GAAA,EAAMyE,WAAP,gBAIR,kBAACzE,GAAA,EAAMO,KAAP,KACKzN,EAAKE,KAAI,SAAA4K,GAAC,OAAI,kBAAC,GAAD,iBAAqBA,EAArB,CAAwB7E,IAAG,UAAK6E,EAAE+G,KAAP,OAAa/G,EAAEqL,UAAU7K,UAGvE,kBAAC4B,GAAA,EAAMmL,OAAP,KACI,kBAACnL,GAAA,EAAMC,IAAP,KACI,kBAACD,GAAA,EAAMyE,WAAP,CAAkBwG,QAAQ,KACtB,kBAACC,GAAA,EAAD,CAAM9H,QAAQ,QACV,kBAAC8H,GAAA,EAAKjQ,KAAN,uBAA2BwO,IAE/B,kBAACyB,GAAA,EAAD,CAAM9H,QAAQ,SACToH,GAAuB,kBAACU,GAAA,EAAKjQ,KAAN,CACpBI,GAAG,IACHgC,MAAI,EACJf,QAAS,kBAAM,EAAKiO,WAAWb,EAAc,KAE7C,kBAAC9Q,EAAA,EAAD,CAAMC,KAAK,kBAGf,kBAAC,IAAMnD,SAAP,KACKhC,KAAK5B,MAAMgY,UAAU9W,KAAI,SAAAyK,GACtB,OACI,kBAACyN,GAAA,EAAKjQ,KAAN,CACIlC,IAAG,eAAU0E,GACbnB,QAAS,kBAAM,EAAKiO,WAAW9M,IAC/BmN,OAAQlB,IAAgBjM,EACxBtB,SAAUuN,IAAgBjM,EAC1BpC,GAAG,KACFoC,OAMhBgN,GAAwB,kBAACS,GAAA,EAAKjQ,KAAN,CACrBI,GAAG,IACHgC,MAAI,EACJf,QAAS,kBAAM,EAAKiO,WAAWb,EAAc,KAE7C,kBAAC9Q,EAAA,EAAD,CAAMC,KAAK,yBAQjC/F,EAAKN,QACH,kBAACwI,EAAA,EAAD,CAAS7G,aAAW,GAChB,kBAAC,IAAD,CAAQkJ,MAAI,GACR,kBAACzE,EAAA,EAAD,CAAMC,KAAK,WACVnF,KAAK5B,MAAMiY,cACR,mBACA,6C,GA5KctV,IAAMC,WCJnC0W,GAAc3W,IAAM4W,gBAiDlBC,G,2MA9CXxZ,MAAQ,CACJyZ,WAAY5Z,aAAaC,QAAQ,iBACjC4Z,YAAY,WAAD,4BAAE,WAAOC,EAAUC,GAAjB,iBAAAhZ,EAAA,+EAEkBC,IAAM8H,KAAKpJ,QAAO,CACrCoa,SAAUA,EAASE,cACnBD,SAAUA,GACX,CAAE7Y,QAASpB,MALT,qBAEGqB,EAFH,EAEGA,MAKC8Y,MAPJ,wBAQDja,aAAaka,QAAQ,gBAAiB/Y,EAAK8Y,OAE3C,EAAKrZ,SAAS,CACVgZ,WAAY5Z,aAAaC,QAAQ,mBAXpC,kBAcM,CAAEka,QAAQ,IAdhB,iCAgBM,CAAEA,QAAQ,IAhBhB,0DAmBL/R,QAAQC,IAAR,MAnBK,0DAAF,qDAAC,GAsBZ+R,aAAa,WAAD,4BAAE,sBAAArZ,EAAA,sEAENf,aAAaqa,WAAW,iBAExB,EAAKzZ,SAAS,CACVgZ,WAAY5Z,aAAaC,QAAQ,mBAL/B,kBAQC,CAAEka,QAAQ,IARX,gCAUN/R,QAAQC,IAAR,MAVM,wDAAF,kDAAC,I,wEAgBb,OAAO,kBAACoR,GAAYa,SAAb,CAAsB3Z,MAAOoB,KAAK5B,OACpC4B,KAAKF,MAAM0Y,c,GA1CGzX,IAAMC,WCD3BkN,GAAe,CAAE6J,SAAU,GAAIC,SAAU,GAAIS,YAAY,GAgFhDC,G,2MA7EXta,MAAQ8P,G,EAERyK,kBAAoB,SAACha,EAAD,GAAmB,IAAbC,EAAY,EAAZA,MACtB,EAAKC,SAAL,gBAAiBF,EAAEkC,OAAOsE,KAAOvG,K,wEAG3B,IAAD,SACsCoB,KAAK5B,MAAxC2Z,EADH,EACGA,SAAUC,EADb,EACaA,SAAUS,EADvB,EACuBA,WAE5B,OACI,kBAACf,GAAYkB,SAAb,MACK,YAAgC,IAA7Bf,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACJe,EAAK,uCAAG,kCAAA7Z,EAAA,+DACqB,EAAKZ,MAA5B2Z,EADE,EACFA,SAAUC,EADR,EACQA,SAElB,EAAKnZ,SAAS,CAAE4Z,YAAY,IAHlB,SAKeX,EAAYC,EAAUC,GALrC,kBAKFI,OAIJhW,EAAY,CACRN,MAAO,QACPO,OAAQ,UACRC,QAAQ,2BAGZ,EAAKzD,SAASqP,IACd9L,EAAY,CACRN,MAAO,MACPO,OAAQ,QACRC,QAAQ,wCAnBN,2CAAH,qDAwBX,OAAIuV,EACO,kBAAC,IAAD,CAAUiB,GAAG,sBAIpB,kBAAC7Q,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKG,MAAN,CACIjD,KAAK,WACL1E,YAAY,WACZ4H,MAAM,WACNzJ,MAAOmZ,EACPzP,SAAU,EAAKqQ,qBAGvB,kBAAC1Q,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKG,MAAN,CACIjD,KAAK,WACL1E,YAAY,WACZqG,KAAK,WACLuB,MAAM,WACNzJ,MAAOoZ,EACP1P,SAAU,EAAKqQ,qBAGvB,kBAACjQ,EAAA,EAAD,CACI5B,KAAK,SACL8B,QAAS,kBAAMiQ,KACfpQ,UAAWsP,IAAaC,EACxBxX,QAASiY,GAJb,kB,GA9DR1X,IAAMC,WCoBX+X,G,iLArBP,OACI,kBAACrB,GAAYkB,SAAb,MACK,YAAiC,IAA9Bf,EAA6B,EAA7BA,SAAUQ,EAAmB,EAAnBA,aACV,OAAKR,EAKD,kBAAC,IAAM7V,SAAP,KACI,kBAACgV,GAAA,EAAD,CAAWgC,OAAK,GACZ,kBAAC,IAAD,CAAQrR,GAAG,KAAK7F,MAAM,QAAO,8DAC7B,kBAAC4G,EAAA,EAAD,CAAQE,QAAO,sBAAE,sBAAA5J,EAAA,sEAAkBqZ,IAAlB,oFAAjB,YAPD,kBAAC,IAAD,CAAUS,GAAG,kB,GANvB/X,IAAMC,WCWrBoE,GAAW,CACb,CAAEC,IAAK,UAAWC,KAAM,UAAW1G,MAAO,WAC1C,CAAEyG,IAAK,OAAQC,KAAM,OAAQ1G,MAAO,SAGlC2G,GAAiB,CACnB,CAAEF,IAAK,KAAMC,KAAM,YAAa1G,MAAO,MACvC,CAAEyG,IAAK,KAAMC,KAAM,aAAc1G,MAAO,MACxC,CAAEyG,IAAK,KAAMC,KAAM,gBAAiB1G,MAAO,MAC3C,CAAEyG,IAAK,KAAMC,KAAM,aAAc1G,MAAO,OAS5C,SAAS4G,GAAgBO,EAASC,GAC9B,OAAKD,GAAWC,EACL,CAAEL,eAAgB,OAAQC,gBAAgB,GAC1CG,IAAYC,EACZ,CAAEL,eAAgB,UAAWC,gBAAgB,GAC7CG,GAAWC,EACX,CAAEL,eAAgB,UAAWC,gBAAgB,QADjD,EAKI,SAASqT,GAAkBnZ,GAAQ,IAAD,EACb6E,mBAAS,GADI,mBACtCmB,EADsC,KAC5BoT,EAD4B,OAEXvU,mBAAS,GAFE,mBAEtCwU,EAFsC,KAE3BC,EAF2B,OAGPzU,mBAAS,GAHF,mBAGtC0U,EAHsC,KAGzBC,EAHyB,OAIK3U,mBAAS,MAJd,mBAItCsB,EAJsC,KAInBsT,EAJmB,OAKP5U,mBAAS,GALF,mBAKtC6U,EALsC,KAKzBC,EALyB,OAMD9U,mBACxCa,GAAgB1F,EAAMiG,QAASjG,EAAMkG,MAAML,gBAPF,mBAMtCA,EANsC,KAMtB+T,EANsB,KAWvC9T,EAAiBJ,GAAgB1F,EAAMiG,QAASjG,EAAMkG,MAAMJ,eAO5DwF,EAAoB,SAACzM,EAAD,GAAmB,IAAbC,EAAY,EAAZA,MACxB6H,EAAMtC,OAAOvF,IAAU,EAG3B,OAFI6H,EAAM,IAAGA,EAAM,GAEX9H,EAAEkC,OAAOsE,MACb,IAAK,YACDiU,EAAa3S,GACb,MACJ,IAAK,mBACDgT,EAAehT,GACf,MACJ,IAAK,cACD6S,EAAe7S,KAerBE,EAAc,SAAAhI,GAAC,OAAIA,EAAEkC,OAAOhB,UA4C9ByD,EAOAxD,EAPAwD,WACA6B,EAMArF,EANAqF,KACAgC,EAKArH,EALAqH,SACAC,EAIAtH,EAJAsH,IACAC,EAGAvH,EAHAuH,OACA9D,EAEAzD,EAFAyD,WACA5C,EACAb,EADAa,GAGJ,OACI,kBAAC2G,EAAA,EAAD,KACI,kBAACC,EAAA,EAAKC,MAAN,CAAYC,SAAO,GACf,kBAACF,EAAA,EAAD,KACI,kBAACA,EAAA,EAAK9D,MAAN,CAAYG,KAAK,SACb,kBAAC,EAAD,CACIN,WAAYA,EACZC,WAAYA,EACZC,OAAO,KAGf,kBAAC+D,EAAA,EAAKG,QAAN,KACI,kBAACH,EAAA,EAAK3E,OAAN,CAAa+E,GAAG,MACXxC,EACA,IACD,uBACIyC,UAAS,sBAAiBR,EAAjB,eAA2BC,GACpCvE,MAAO,CAAE+E,SAAU,UAEvB,kBAAC5F,EAAA,EAAD,CAAOH,MAAM,QACRqF,EADL,KACiBW,OAAOV,GAAKW,cAD7B,KAGA,kBAAC9G,EAAD,CAAWC,aAAcpB,EAAMoB,eAC9B,IACD,kBAACuD,EAAD,CAAa9D,GAAIA,EAAI+D,OAAQiB,KAEjC,kBAAC4B,EAAA,EAAKS,YAAN,KACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKT,MAAN,CAAYoM,OAAO,MACf,kBAAC3L,EAAA,EAAKC,MAAN,CACIC,QAASC,IACTtB,KAAK,SACLuB,MAAM,WACNzJ,MAAOkH,EACPwC,SA/FP,SAAC3J,EAAD,GAAmB,IAAbC,EAAY,EAAZA,MAC3B6H,EAAMC,SAAS9H,EAAO,KAAO,EAC7B6H,EAAM,IAAGA,EAAM,GACfA,EAAM,KAAIA,EAAM,IACpByS,EAAYzS,IA4FoB7F,QAAS+F,IAEb,kBAACsB,EAAA,EAAKC,MAAN,CACIG,MAAM,eACNlD,KAAK,cACLgD,QAASC,IACTtB,KAAK,SACLlI,MAAOya,EACP/Q,SAAU8C,EACVxK,QAAS+F,EACT+E,KAAK,SAET,kBAACzD,EAAA,EAAKC,MAAN,CACIG,MAAM,aACNlD,KAAK,YACLgD,QAASC,IACTtB,KAAK,SACLlI,MAAOua,EACP7Q,SAAU8C,EACVxK,QAAS+F,EACT+E,KAAK,SAET,kBAACzD,EAAA,EAAKC,MAAN,CACIG,MAAM,eACNlD,KAAK,mBACLgD,QAASC,IACTtB,KAAK,SACLlI,MAAO4a,EACPlR,SAAU8C,EACVxK,QAAS+F,EACT+E,KAAK,OACLjD,SAAwB,IAAd0Q,KAGlB,kBAAClR,EAAA,EAAKT,MAAN,CAAYoM,OAAO,MACf,kBAAC3L,EAAA,EAAKC,MAAN,CACIG,MAAM,SACNF,QAASI,IACT3J,MAAO+G,EACP6C,QAASpD,GACTqD,SAAU7C,EACV0C,SAjKT,SAAC3J,EAAD,OAAMC,EAAN,EAAMA,MAAN,OAAkB8a,EAAkB9a,MAmK/B,kBAACqJ,EAAA,EAAKC,MAAN,CACIG,MAAM,YACNF,QAASI,IACT3J,MAAOqH,EACPuC,QAASjD,GACT+C,SAtKN,SAAC3J,EAAD,OAAMC,EAAN,EAAMA,MAAN,OAAkB2a,EAAqB3a,MAwKrC,kBAACqJ,EAAA,EAAKS,OAAN,CACIL,MAAM,eACNF,QAASO,IACTC,SAAO,EACPF,SA9Gb,WACnB,IAAMkR,EAA2B,IAAb7T,GAA+B,KAAbA,EAChC8T,GAAsBT,IAAcE,EAE1C,OAAIF,EAAY,EACLQ,GAAeC,GAAsC,IAAhBJ,EAGzCG,GAAeC,EAsGoBC,GACVjR,QA7IT,WACvB9I,EAAMga,UAAU,CACZhU,WACAqT,YACAK,cACAH,cACAlN,gBAAgB,GAAD,OAAKxG,EAAL,YAAuBM,GACtCe,SAAS,eAAMlH,KAGnBoZ,EAAY,GACZE,EAAa,GACbK,EAAe,GACfH,EAAe,GACfC,EAAqB,MACrBG,EAAkBlU,GAAgB1F,EAAMiG,QAASjG,EAAMkG,MAAML,gBAE7DvD,EAAY,CACRN,MAAO,QACPO,OAAO,GAAD,OAAKyD,EAAL,aAAkBhG,EAAMqF,KAAxB,sBACN5C,SAAU,MAId3C,IAAE,cAAcsH,QAAQrH,WAgHI,cChOrB,SAASka,GAAT,GAAkD,IAArBjR,EAAoB,EAApBA,MAAOgR,EAAa,EAAbA,UAC/C,OAAOhR,EAAMxJ,KAAI,SAAA+N,GACb,OAAO,kBAAC4L,GAAD,eACH5T,IAAKgI,EAAE1M,IACH0M,EAFD,CAGHyM,UAAWA,QCHvB,IAAME,GAAqB,OAArBA,GAAqC,SAE5B,SAASC,GAAT,GAAkJ,IAArH9U,EAAoH,EAApHA,KAAMiC,EAA8G,EAA9GA,IAAKC,EAAyG,EAAzGA,OAAQ8R,EAAiG,EAAjGA,UAAWE,EAAsF,EAAtFA,YAAalN,EAAyE,EAAzEA,gBAAiB+N,EAAwD,EAAxDA,SAAUC,EAA8C,EAA9CA,eAAgBC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,gBACjIC,EAAiBN,GAAXO,EAAWP,GADmI,EAE9HrV,oBAAS,GAFqH,mBAErJxB,EAFqJ,KAE5IkJ,EAF4I,KAI5J,OACI,kBAACC,GAAA,EAAMC,IAAP,KACI,kBAACD,GAAA,EAAME,KAAP,KAAY,2BAAIrH,IAChB,kBAACmH,GAAA,EAAME,KAAP,CAAYC,YAAU,GAClB,uBACI7E,UAAS,sBAAiBR,EAAjB,eAA2BC,GACpCvE,MAAO,CAAE+E,SAAU,UAEvB,kBAAC5F,EAAA,EAAD,CAAOH,MAAM,QAAQsF,EAAIW,gBAE7B,kBAACuE,GAAA,EAAME,KAAP,KACI,yBAAK1J,MAAO,CAAE0X,WAAY,WAA1B,QACS,2BAAG,kBAAC,EAAD,CAAOvW,IAAKkV,MAExB,yBAAKrW,MAAO,CAAE0X,WAAY,WAA1B,UACW,2BAAG,kBAAC,EAAD,CAAOvW,IAAKoV,MAE1B,2BAAIlN,EAAgB9B,MAAM,KAAK,GAA/B,MAAsC8B,EAAgB9B,MAAM,KAAK,KAErE,kBAACiC,GAAA,EAAME,KAAP,KACI,kBAAC9D,EAAA,EAAD,CACIwO,OAAQkD,IAAcE,EACtBxY,MAAOsY,IAAcE,EAAO,UAAY,KACxC1R,QAAS,kBAAMyR,EAAgBH,EAAUI,IACzC7R,SAAwB,IAAd0Q,EACVxP,MAAI,GAEJ,kBAACzE,EAAA,EAAD,CAAMC,KAAK,kBAGnB,kBAACmH,GAAA,EAAME,KAAP,KACI,kBAAC9D,EAAA,EAAD,CACIwO,OAAQkD,IAAcG,EACtBzY,MAAOsY,IAAcG,EAAS,UAAY,KAC1C3R,QAAS,kBAAMyR,EAAgBH,EAAUK,IACzC9R,SAA0B,IAAhB4Q,EACV1P,MAAI,GAEJ,kBAACzE,EAAA,EAAD,CAAMC,KAAK,0BAGnB,kBAACmH,GAAA,EAAME,KAAP,KACI,kBAAC9D,EAAA,EAAD,CACIiB,KAAK,SACL+C,UAAQ,EACR9D,QAAS,kBAAMuR,EAAeD,IAC9BpW,YAAa,kBAAMuI,GAAW,IAC9BtI,WAAY,kBAAMsI,GAAW,IAC7BvK,MAAOqB,EAAU,MAAQ,S,cCpD9B,SAASsX,GAAT,GAAwD,IAAlCC,EAAiC,EAAjCA,cAE3BC,GAF4D,EAAlBC,eAEtBza,IAAE0a,MAAMH,GAC7BI,QAAO,SAAAzN,GAAC,MAAoB,SAAhBA,EAAE+M,aACd9a,KAAI,SAAA+N,GAGD,OAAO,eAAKA,EAAZ,CAAe0N,UAAU,GAAD,OAAK1N,EAAE1M,GAAP,YAAa0M,EAAE8L,UAAf,YAA4B9L,EAAEmM,YAA9B,YAA6CnM,EAAElB,sBAE1E6O,QAAQ,aACRC,WAAU,SAAAxU,GAAG,OAAIA,EAAI3H,UACrBF,SAUCsc,EARgB/a,IAAE0a,MAAMH,GACzBI,QAAO,SAAAzN,GAAC,MAAoB,SAAhBA,EAAE+M,aACd9a,KAAI,SAAA+N,GACD,OAAO,eAAKA,EAAZ,CAAe0N,UAAU,GAAD,OAAK1N,EAAE1M,GAAP,YAAa0M,EAAE8L,UAAf,YAA4B9L,EAAEmM,YAA9B,YAA6CnM,EAAElB,sBAE1EgP,OAAO,aACPvc,QAE+BU,KAAI,SAAA+N,GACpC,OAAO,eAAKA,EAAZ,CAAe+N,SAAUT,EAAkBtN,EAAE0N,gBAG3CM,EAAelb,IAAE0a,MAAMH,GACxBI,QAAO,SAAAzN,GAAC,MAAoB,SAAhBA,EAAE+M,aACdkB,OAAM,SAAAjO,GAAC,OAAIA,EAAE8L,aACbva,QAEL,OAAO,kBAAC,IAAMoD,SAAP,KACH,yBAAKrB,GAAG,eACJ,kBAAC2L,GAAA,EAAD,CAAOuE,QAAM,GACT,kBAACvE,GAAA,EAAM1J,OAAP,KACI,kBAAC0J,GAAA,EAAMC,IAAP,KACI,kBAACD,GAAA,EAAMyE,WAAP,CAAkBwG,QAAS,GAA3B,mBAEJ,kBAACjL,GAAA,EAAMC,IAAP,KACI,kBAACD,GAAA,EAAMyE,WAAP,kBACA,kBAACzE,GAAA,EAAMyE,WAAP,qBACA,kBAACzE,GAAA,EAAMyE,WAAP,kBACA,kBAACzE,GAAA,EAAMyE,WAAP,iBACA,kBAACzE,GAAA,EAAMyE,WAAP,mBACA,kBAACzE,GAAA,EAAMyE,WAAP,mBAGR,kBAACzE,GAAA,EAAMO,KAAP,KACKqO,EAAc5b,KAAI,SAAA+N,GACf,OAAO,kBAACf,GAAA,EAAMC,IAAP,CAAWlH,IAAKgI,EAAE0N,WACrB,kBAACzO,GAAA,EAAME,KAAP,KAAaa,EAAElI,MACf,kBAACmH,GAAA,EAAME,KAAP,KAAY,kBAAC,EAAD,CAAOvI,IAAKoJ,EAAEmM,eAC1B,kBAAClN,GAAA,EAAME,KAAP,KAAaa,EAAElB,iBACf,kBAACG,GAAA,EAAME,KAAP,KAAaa,EAAE+N,UACf,kBAAC9O,GAAA,EAAME,KAAP,KAAY,kBAAC,EAAD,CAAOvI,IAAKoJ,EAAE8L,aAC1B,kBAAC7M,GAAA,EAAME,KAAP,KAAY,kBAAC,EAAD,CAAOvI,IAAKoJ,EAAE+N,SAAW/N,EAAE8L,kBAInD,kBAAC7M,GAAA,EAAMmL,OAAP,KACI,kBAACnL,GAAA,EAAMyE,WAAP,CAAkBwG,QAAS,GAA3B,UAAqC,kBAAC,EAAD,CAAOtT,IAAKoX,SC5DrE,IAAMrB,GAAqB,OAArBA,GAAqC,SAE5B,SAASuB,GAAT,GAA+E,IAAhDb,EAA+C,EAA/CA,cAAec,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,kBAC5DnB,EAAiBN,GAAXO,EAAWP,GADgE,EAE3DrV,oBAAS,GAFkD,mBAElFnE,EAFkF,KAEzEqE,EAFyE,OAGvDF,oBAAS,GAH8C,mBAGlFwJ,EAHkF,KAGvEuN,EAHuE,OAI/C/W,oBAAS,GAJsC,mBAIlFgX,EAJkF,KAInEC,EAJmE,KAQnFhB,EAAiB,kBAAMgB,GAAiB,IAExCC,EAAiB,uCAAG,sBAAA7c,EAAA,6DACtB6F,GAAW,GADW,SAEhB4W,IAFgB,OAGtB5W,GAAW,GAHW,2CAAH,qDAWjBiX,EAAYpB,EAAc3O,QAAO,SAACC,EAAKuE,GAEzC,OAAOvE,GADOuE,EAAK6J,YAAcE,EAAO/J,EAAK4I,UAAY,KAE1D,GAEG4C,EAAcrB,EAAc3O,QAAO,SAACC,EAAKuE,GAE3C,OAAOvE,GADSuE,EAAK6J,YAAcG,EAAShK,EAAK8I,YAAc,KAEhE,GAEH,OAAO,kBAAC/R,EAAA,EAAD,KACH,yBAAKxE,MAAO,CAAEqK,QAAS,OAAQsE,eAAgB,gBAAiBrC,WAAY,WACxE,kBAAC1G,EAAA,EAAOlB,MAAR,KACI,kBAACkB,EAAA,EAAD,CAAQE,QAAS,kBAAM4S,EAAUxB,MAAjC,mBACA,kBAACtR,EAAA,EAAOsT,GAAR,MACA,kBAACtT,EAAA,EAAD,CAAQE,QAAS,kBAAM4S,EAAUxB,MAAjC,sBAEJ,6BACI,kBAACiC,GAAA,EAAD,CAAWrY,KAAK,QACZ,kBAACqY,GAAA,EAAUha,MAAX,kBACA,kBAACga,GAAA,EAAUC,MAAX,KAAiB,kBAAC,EAAD,CAAOjY,IAAK6X,MAEjC,kBAACG,GAAA,EAAD,CAAWrY,KAAK,QACZ,kBAACqY,GAAA,EAAUha,MAAX,oBACA,kBAACga,GAAA,EAAUC,MAAX,KAAiB,kBAAC,EAAD,CAAOjY,IAAK8X,QAKzC,yBAAKjZ,MAAO,CAAEqK,QAAS,OAAQsE,eAAgB,gBAAiBrC,WAAY,WACxE,kBAACQ,GAAA,EAAD,CACIE,KAAM6L,EACN5L,QACI,kBAACrH,EAAA,EAAD,CACI5G,MAAOga,EAAY,EAAI,QAAU,KACjCrT,SAAwB,IAAdqT,EACVlT,QAnDE,kBAAMgT,GAAiB,KAgD7B,yBAOJ,kBAAChM,GAAA,EAAMlI,QAAP,KACI,kBAAC+S,GAAD,CACIC,cAAeA,EACfE,eAAgBA,KAExB,kBAAChL,GAAA,EAAMK,QAAP,KACI,kBAACvH,EAAA,EAAD,CAAQE,QAnDM,WAC1BgT,GAAiB,GCoBV,WACX,IAAMO,EAAaC,SAASC,eAAe,eACrCC,EAAQrP,OAAO6C,KAAK,GAAI,UAC9BwM,EAAMF,SAAStM,OACfwM,EAAMF,SAASG,MAAf,UACAD,EAAMF,SAASG,MAAf,UACAD,EAAMF,SAASG,MAAf,8BACAD,EAAMF,SAASG,MAAf,iBApDY,ioBAoDZ,aACAD,EAAMF,SAASG,MAAf,WACAD,EAAMF,SAASG,MAAf,kCACAD,EAAMF,SAASG,MAAf,UAAwBJ,EAAWK,YACnCF,EAAMF,SAASG,MAAf,WACAD,EAAMF,SAASG,MAAf,WACAD,EAAMF,SAASK,QDhCXC,IAiDoD5a,MAAM,WAA9C,gBACA,kBAAC4G,EAAA,EAAD,CAAQE,QAASgS,GAAjB,YAIR,kBAAChL,GAAA,EAAD,CACI+M,oBAAoB,EACpB5M,QACI,kBAACrH,EAAA,EAAD,CACI5G,MAAM,UACN2G,SAAmC,IAAzBiS,EAAc5b,OACxB8J,QAAS,kBAAM8S,GAAa,KAHhC,uBAOJ5L,KAAM3B,EACNyO,QAAS,kBAAMlB,GAAa,IAC5B7L,OAAK,EAAC/M,MAAO,CAAEqU,UAAW,SAC1B,kBAAC,IAAD,0CACA,kBAACvH,GAAA,EAAMlI,QAAP,KACI,2BAAG,+FACH,4BACKgT,EAAcpb,KAAI,SAAA+N,GACf,OAAO,wBAAIhI,IAAKgI,EAAE6M,UAAW7M,EAAElI,KAAxB,MAAiCkI,EAAElG,SAAnC,IAA8CkG,EAAEjG,IAAIW,cAApD,SAGf,6BACI,2BAAG,sDACH,4BACK+T,EAAY,EAAI,4BAAI,kBAAC,EAAD,CAAO7X,IAAK6X,IAAhB,uBAAwD,KACxEC,EAAc,EAAI,4BAAI,kBAAC,EAAD,CAAO9X,IAAK8X,IAAhB,oBAAuD,QAItF,kBAACnM,GAAA,EAAMK,QAAP,KACI,kBAACvH,EAAA,EAAD,CAAQmH,OAAK,EAAC/N,MAAM,MAAMkO,UAAQ,EAACpH,QAAS,kBAAM8S,GAAa,KAA/D,UACA,kBAAChT,EAAA,EAAD,CAAQ5G,MAAM,QAAQkO,UAAQ,EAACxP,QAASA,EAASiI,SAAUjI,EAASoI,QAASiT,GAA7E,c,yBEjGd7B,GAAa,CAAEM,KAAM,OAAQC,OAAQ,UAE3C,SAASsC,GAAT,GAAqD,IAAvB3F,EAAsB,EAAtBA,OAAQ4F,EAAc,EAAdA,WAClC,OACI,kBAAC,IAAM9a,SAAP,KACKkV,GACG,kBAAC5P,EAAA,EAAD,CAAS7G,aAAW,GAChB,kBAAC,IAAD,CAAQkJ,MAAI,GACR,kBAACzE,EAAA,EAAD,CAAMC,KAAK,WACX,4BAAK2X,MAOd,SAASC,KAAa,IAAD,EACUpY,mBAAS,IADnB,mBACzByE,EADyB,KACV4T,EADU,OAEUrY,mBAAS,IAFnB,mBAEzB+V,EAFyB,KAEVuC,EAFU,KAU1Bld,EAAkB,uCAAG,WAAMzB,GAAN,uBAAAU,EAAA,+EAEIC,IAAMC,IACzB1B,6BACA,CACI8L,OAAQ,CAAE9J,MAAOlB,GACjBa,QAASpB,MANE,uBAEXqB,EAFW,EAEXA,KAQFmK,EAAMnK,EAAKE,KAAI,SAAAC,GAAE,OAAIA,EAAGoB,MAVX,SAaQ1B,IAAM8H,KAC7B5J,8BACA,CAAEqM,YAAaD,GACf,CAAEpK,QAASpB,MAhBI,OAab0L,EAba,OAmBbyT,EAAa9d,EAAKE,KAAI,SAAA4K,GACxB,OAAO,eAAKA,EAAZ,CAAehJ,aAAcuI,EAAarK,KAAK8K,EAAEvJ,SAGrDqc,EAAiBE,GAvBE,kDAyBnB7W,QAAQC,IAAR,MAzBmB,0DAAH,sDAmDlB6T,EAAiB,SAACD,GACpB,IAAMiD,EAAW,YAAOzC,GACxBva,IAAEid,OAAOD,GAAa,SAAAxe,GAAC,OAAIA,EAAEub,WAAaA,KAC1C+C,EAAiBE,IAOf9C,EAAkB,SAACH,EAAUE,GAC/B,IAAMiD,EAAa,YAAO3C,GACb2C,EAAcC,MAAK,SAAA3e,GAAC,OAAIA,EAAEub,WAAaA,KAC/CE,UAAYJ,GAAWI,GAC5B6C,EAAiBI,IA2Bf5B,EAAiB,uCAAG,gCAAAzc,EAAA,6DAChBue,EADgB,YACc7C,GAI9B8C,EAAeD,EAAwBje,KAAI,SAAA+N,GAC7C,OAAOlN,IAAEsd,KAAKpQ,EAAG,CACb,YACA,cACA,cACA,eACA,YACA,WACA,YACA,uBAdc,SAmBZqQ,EAAWF,EAAale,IAAb,uCAAiB,WAAM+N,GAAN,SAAArO,EAAA,sEACjBC,IAAM8H,KAAK1J,wBAAuB,CAC3CyI,SAAU,EACVgB,KAAMuG,EAAElB,gBACRnF,SAAU7G,IAAEsd,KAAKpQ,EAAG,oBACrB,CAAElO,QAASpB,MALgB,mFAAjB,uDAnBC,SA2BZ4f,QAAQC,IAAIF,GA3BA,OA6BlBV,EAAiB,IACjBC,EAAiB,IAEjB7a,EAAY,CACRN,MAAO,QACPO,OAAO,GAAD,OAAKqY,EAAc5b,OAAnB,mCACNyD,SAAU,MAnCI,kDAsClB8D,QAAQC,IAAR,MACAlE,EAAY,CACRN,MAAO,MACPO,OAAO,0BACPE,SAAU,MA1CI,0DAAH,qDA+CvB,OACI,kBAAC,IAAMP,SAAP,KACI,kBAAC,EAAD,CAAWjC,mBAAoBA,IAC/B,6BACA,kBAACoP,GAAA,EAAD,CAAME,WAAW,GACb,kBAACF,GAAA,EAAK5C,IAAN,KACI,kBAAC4C,GAAA,EAAKG,OAAN,CAAaC,MAAM,MACf,kBAAC,IAAD,CAAQ5H,GAAG,KAAK7E,MAAO,CAAEqK,QAAS,iBAAlC,eACA,kBAACqC,GAAA,EAAD,MACA,kBAACqN,GAAD,CACI3F,QAAS9N,EAActK,OACvBge,WAAY,mCAEhB,kBAAC,GAAD,CACIhU,MAAOM,EACP0Q,UA1HN,SAAC,GAAkF,IAAhFhU,EAA+E,EAA/EA,SAAUqT,EAAqE,EAArEA,UAAWK,EAA0D,EAA1DA,YAAaH,EAA6C,EAA7CA,YAAalN,EAAgC,EAAhCA,gBAAiBnF,EAAe,EAAfA,SAE3EqW,EAAa,YAAO3C,GACtBmD,EAAmB7D,GAAWO,OAG7BlB,IAAawE,EAAmB7D,GAAWM,MAGhD,IAAMzL,EAAWwO,EAAc1J,OAAOxT,IAAE2d,MAAMhY,GAAU,SAAA0I,GACpD,OAAO,aAAE2K,YAAWK,cAAaH,cAAalN,mBAAoBnF,EAAlE,CAA4EkT,SAAU6D,OAAQ3D,UAAWyD,QAG7GZ,EAAiB9c,IAAE6S,OAAOnE,EAAU,aAgHxB,kBAACM,GAAA,EAAKG,OAAN,CAAaC,MAAM,KACf,kBAAC,IAAD,CAAQ5H,GAAG,KAAK7E,MAAO,CAAEqK,QAAS,iBAAlC,WACCuN,EAAc5b,OAAS,GACpB,kBAAC,IAAD,CAAQ4Q,QAAQ,QAAQ5M,MAAO,CAAEqK,QAAS,iBAA1C,gBAA0EuN,EAAc5b,QAE5F,kBAAC0Q,GAAA,EAAD,MACA,kBAACqN,GAAD,CACI3F,QAASwD,EAAc5b,OACvBge,WAAY,uCAEfpC,EAAc5b,OAAS,GAAK,kBAACwN,GAAA,EAAD,CAAO3J,SAAO,EAACiB,KAAK,SAC7C,kBAAC0I,GAAA,EAAMO,KAAP,KACK6N,EAAcpb,KAAI,YAA0F,IAAvF6F,EAAsF,EAAtFA,KAAMiC,EAAgF,EAAhFA,IAAKC,EAA2E,EAA3EA,OAAQ8R,EAAmE,EAAnEA,UAAWE,EAAwD,EAAxDA,YAAalN,EAA2C,EAA3CA,gBAAiB+N,EAA0B,EAA1BA,SAAUE,EAAgB,EAAhBA,UACxF,OAAO,kBAACH,GAAD,CACH9U,KAAMA,EACNiC,IAAKA,EACLC,OAAQA,EACR8R,UAAWA,EACXE,YAAaA,EACblN,gBAAiBA,EACjB+N,SAAUA,EACVC,eAAgBA,EAChBC,UAAWA,EACXC,gBAAiBA,EACjBhV,IAAK6U,SAKpBQ,EAAc5b,OAAS,GAAK,kBAACyc,GAAD,CACzBb,cAAeA,EACfc,UAnHN,SAACpB,GACf,IAAM7L,EAAQ,YAAOmM,GACbJ,EAAiBN,GAAjBM,KAAMC,EAAWP,GAAXO,OAEdhM,EAASyP,SAAQ,SAACjV,EAAMyF,EAAKyP,GACzB,GAAIlV,EAAKqR,YAAcA,EAAW,CAC9B,IAAM8D,EAAYnV,EAAKqR,YAAcE,EAAOC,EAASD,GAC9B4D,IAAc5D,EAAOvR,EAAKoQ,UAAYpQ,EAAKsQ,aAE7C,IAAG4E,EAAIzP,GAAK4L,UAAY8D,OAIrDjB,EAAiB1O,IAuGGkN,kBAAmBA,QC1NhC,SAAS0C,KACpB,OACI,yBAAKrb,MAAO,CAAEsb,WAAY,UAAWC,WAAY,OAAQC,YAAa,SAClE,6BAEA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,oBAAoBC,UAAWtV,IACjD,kBAAC,IAAD,CAAOoV,OAAK,EAACC,KAAK,YAAYC,UAAWpQ,KACzC,kBAAC,IAAD,CAAOkQ,OAAK,EAACC,KAAK,gBAAgBC,UAAWvN,KAC7C,kBAAC,IAAD,CAAOqN,OAAK,EAACC,KAAK,oBAAoBC,UAAW3I,KACjD,kBAAC,IAAD,CAAOyI,OAAK,EAACC,KAAK,oBAAoBC,UAAWpM,KACjD,kBAAC,IAAD,CAAOkM,OAAK,EAACC,KAAK,aAAaC,UAAW1B,KAC1C,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,SAASC,UAAW/F,KACtC,kBAAC,IAAD,CAAO6F,OAAK,EAACC,KAAK,UAAUC,UAAW1F,O,kCClBjDjW,GAAQ,CACVgP,WAAY,oCACZ/O,UAAW,+BAwCAH,G,iLAnCP,OACI,kBAAC8U,GAAYkB,SAAb,MACK,YAAmB,IAAhBf,EAAe,EAAfA,SACA,OACI,kBAACL,GAAA,EAAD,CAAMxH,UAAQ,EAAC0O,MAAM,MAAM5b,MAAOA,IAC9B,kBAAC0U,GAAA,EAAKjQ,KAAN,KACI,yBAAK7D,IAAKib,KAAU7b,MAAO,CAAEwb,YAAa,OAASM,IAAI,SACvD,8BAAM,sDAEV,kBAACpH,GAAA,EAAKA,KAAN,CAAW3U,SAAS,SAChB,kBAAC2U,GAAA,EAAKjQ,KAAN,CAAW1E,SAAS,QAAQ8E,GAAIkX,KAAM/F,GAAG,qBAAzC,UACCjB,GAAY,kBAACrM,GAAA,EAAD,CAAUsT,MAAI,EAACnV,KAAK,QAC7B,kBAAC6B,GAAA,EAASgM,KAAV,KACI,kBAAC,IAAMxV,SAAP,KACI,kBAACwJ,GAAA,EAASjE,KAAV,CAAeI,GAAIkX,KAAM/F,GAAG,qBAAoB,kBAAC5T,EAAA,EAAD,CAAMC,KAAK,OAAOrD,MAAM,SAAxE,oBACA,kBAAC0J,GAAA,EAASjE,KAAV,CAAeI,GAAIkX,KAAM/F,GAAG,aAAa,kBAAC5T,EAAA,EAAD,CAAMC,KAAK,cAAcrD,MAAM,SAAxE,YACA,kBAAC0J,GAAA,EAASjE,KAAV,CAAeI,GAAIkX,KAAM/F,GAAG,cAAc,kBAAC5T,EAAA,EAAD,CAAMC,KAAK,yBAAyBrD,MAAM,SAApF,aACA,kBAAC0J,GAAA,EAASgE,QAAV,MACA,kBAAChE,GAAA,EAASjE,KAAV,CAAeI,GAAIkX,KAAM/F,GAAG,qBAAqB,kBAAC5T,EAAA,EAAD,CAAMC,KAAK,MAAMrD,MAAM,SAAxE,oBACA,kBAAC0J,GAAA,EAASjE,KAAV,CAAeI,GAAIkX,KAAM/F,GAAG,iBAAiB,kBAAC5T,EAAA,EAAD,CAAMC,KAAK,MAAMrD,MAAM,SAApE,gBACA,kBAAC0J,GAAA,EAASgE,QAAV,MACA,kBAAChE,GAAA,EAASjE,KAAV,CAAeI,GAAIkX,KAAM/F,GAAG,WAAW,kBAAC5T,EAAA,EAAD,CAAMC,KAAK,UAAUrD,MAAM,SAAlE,cAIV+V,GAAY,kBAACL,GAAA,EAAKjQ,KAAN,CAAW1E,SAAS,QAAQ8E,GAAIkX,KAAM/F,GAAG,UAAzC,mB,GA3BzB/X,IAAMC,WCKZ+d,G,iLATP,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,MACA,kBAACZ,GAAD,W,GALEpd,IAAMC,WCOJge,QACW,cAA7B/R,OAAOgS,SAASC,UAEe,UAA7BjS,OAAOgS,SAASC,UAEhBjS,OAAOgS,SAASC,SAASC,MACvB,2D,OCVNC,IAASC,OACL,kBAAC,KAAD,CAAYC,SAAS,KACjB,kBAAC,GAAD,OAEJlD,SAASC,eAAe,SDqHtB,kBAAmBkD,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.54eb912b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/magic-ball.c3fcddd6.png\";","// Maps all GCF and Scryfall API endpoints for code re-use\nconst { REACT_APP_ENVIRONMENT } = process.env;\n\n/**\n * Check the environment for dev - if dev, we reach out\n * to all endpoints appended by `_test` instead of production\n */\nconst env = REACT_APP_ENVIRONMENT === 'development' ? '_test' : '';\n\nconst endpoints = {\n    GET_CARDS_BY_TITLE:\n        `https://us-central1-clubhouse-collection.cloudfunctions.net/getCardsByTitle${env}`,\n    GET_CARD_QTY_FROM_INVENTORY:\n        `https://us-central1-clubhouse-collection.cloudfunctions.net/getCardsFromInventory${env}`,\n    FINISH_SALE:\n        `https://us-central1-clubhouse-collection.cloudfunctions.net/finishSale${env}`,\n    ADD_CARD_TO_INVENTORY:\n        `https://us-central1-clubhouse-collection.cloudfunctions.net/addCardToInventory${env}`,\n    GET_INVENTORY_QUERY:\n        `https://us-central1-clubhouse-collection.cloudfunctions.net/inventorySearchQuery${env}`,\n    GET_SALES_BY_TITLE:\n        `https://us-central1-clubhouse-collection.cloudfunctions.net/getSales${env}`,\n    GET_SCRYFALL_BULK_BY_TITLE:\n        `https://us-central1-clubhouse-collection.cloudfunctions.net/getScryfallBulkCardsByTitle${env}`,\n    GET_CARDS_BY_FILTER:\n        `https://us-central1-clubhouse-collection.cloudfunctions.net/getCardsByFilter${env}`,\n    GET_SET_NAMES:\n        `https://us-central1-clubhouse-collection.cloudfunctions.net/getCardsByFilter${env}/set_names`,\n    LOGIN:\n        `https://us-central1-clubhouse-collection.cloudfunctions.net/getJwt${env}`,\n\n    SCRYFALL_AUTOCOMPLETE: 'https://api.scryfall.com/cards/autocomplete',\n    SCRYFALL_SEARCH: 'https://api.scryfall.com/cards/search',\n    SCRYFALL_ID_SEARCH: 'https://api.scryfall.com/cards/'\n};\n\nmodule.exports = endpoints;\n","/**\n * This function is a helper for Axios, it yields an object for Axios params\n */\nexport default function makeAuthHeader() {\n    const header = { Authorization: `Bearer ${localStorage.getItem('clubhouse_JWT')}` };\n    return header;\n}","import React from 'react';\nimport { Search } from 'semantic-ui-react';\nimport _ from 'lodash';\nimport axios from 'axios';\nimport makeAuthHeader from './makeAuthHeader';\nimport { SCRYFALL_AUTOCOMPLETE } from './api_resources';\nimport $ from 'jquery';\n\nclass SearchBar extends React.Component {\n    state = {\n        isLoading: false,\n        term: '',\n        autocomplete: [],\n        results: [],\n        defaultSearchValue: 'Search for a card'\n    };\n\n    handleSearchChange = (e, { value }) => {\n        this.setState({ term: value });\n\n        if (this.state.term.length < 1) {\n            return this.setState({\n                isLoading: false,\n                term: '',\n                results: [],\n                autocomplete: [],\n                defaultSearchValue: 'Search for a card'\n            });\n        }\n\n        // Don't search if only 2 letters in box\n        if (this.state.term.length < 3) {\n            return;\n        }\n\n        this.setState({ isLoading: true });\n\n        setTimeout(async () => {\n            const { data } = await axios.get(\n                `${SCRYFALL_AUTOCOMPLETE}?q=${this.state.term}`,\n                { headers: makeAuthHeader() }\n            );\n\n            const formattedResults = data.data.map(el => {\n                return { title: el };\n            }).slice(0, 7);\n\n            this.setState({\n                results: formattedResults,\n                isLoading: false\n            });\n        }, 100);\n    };\n\n    handleResultSelect = (e, { result }) => {\n        // This line is a hacky way to get around the fact that if we just select(), then\n        // when the user manually clicks the first (or any) result in the resultlist, it does not select,\n        // presumably because there is some collision between selecting the resultList element and focusing the input\n        setTimeout(() => $('#searchBar').select(), 10);\n        this.props.handleSearchSelect(result.title);\n    };\n\n    render() {\n        const { results, isLoading, defaultSearchValue } = this.state;\n\n        return (\n            <Search\n                onSearchChange={_.debounce(this.handleSearchChange, 500, {\n                    leading: false,\n                    trailing: true\n                })}\n                onResultSelect={this.handleResultSelect}\n                loading={isLoading}\n                results={results}\n                placeholder={defaultSearchValue}\n                selectFirstResult={true}\n                id=\"searchBar\"\n                onFocus={e => e.target.select()}\n                onBlur={this.props.onBlur} // Used to clear state in the Browse Inventory feature\n            />\n        );\n    }\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport { Label } from 'semantic-ui-react';\n\n// This component parses the `qoh` object from mongo into something\n// more presentable\n\n// available entries:\n// {\n//     FOIL_NM: 0,\n//     FOIL_LP: 0,\n//     FOIL_MP: 0,\n//     FOIL_HP: 0,\n//     NONFOIL_NM: 0,\n//     NONFOIL_LP: 0,\n//     NONFOIL_MP: 0,\n//     NONFOIL_HP: 0\n// };\n\nexport default function QohParser({ inventoryQty }) {\n    let foilQty = 0;\n    let nonfoilQty = 0;\n\n    if (inventoryQty) { // Check to see if props exist\n        foilQty =\n            (inventoryQty.FOIL_NM || 0) +\n            (inventoryQty.FOIL_LP || 0) +\n            (inventoryQty.FOIL_MP || 0) +\n            (inventoryQty.FOIL_HP || 0);\n\n        nonfoilQty =\n            (inventoryQty.NONFOIL_NM || 0) +\n            (inventoryQty.NONFOIL_LP || 0) +\n            (inventoryQty.NONFOIL_MP || 0) +\n            (inventoryQty.NONFOIL_HP || 0);\n    }\n\n    const foilColor = {};\n    if (foilQty > 0) { foilColor.color = 'blue'; }\n\n    const nonfoilColor = {};\n    if (nonfoilQty > 0) { nonfoilColor.color = 'blue'; }\n\n    return (\n        <React.Fragment>\n            <Label {...foilColor} image>\n                Foil\n        <Label.Detail>{foilQty}</Label.Detail>\n            </Label>\n            <Label {...nonfoilColor} image>\n                Nonfoil\n        <Label.Detail>{nonfoilQty}</Label.Detail>\n            </Label>\n        </React.Fragment>\n    );\n}\n","import React from 'react';\nimport { Message } from 'semantic-ui-react';\nimport toaster from 'toasted-notes';\n\nconst createToast = ({ color, header, message, duration = 2000 }) => {\n    return toaster.notify(\n        () => (\n            <Message color={color} compact>\n                <Message.Header>{header}</Message.Header>\n                {message}\n            </Message>\n        ),\n        {\n            position: 'bottom-right',\n            duration: duration\n        }\n    );\n}\n\nexport default createToast;","import React from 'react';\nimport { Image } from 'semantic-ui-react';\n\nconst style = {\n    boxShadow: '2px 2px 5px 0 rgba(0,0,0,.25)',\n    zIndex: '10',\n    transition: 'all .2s ease-in-out'\n}\n\nclass CardImage extends React.Component {\n    state = { hovered: false };\n\n    mouseOver = () => { this.setState({ hovered: true }) };\n\n    mouseOut = () => { this.setState({ hovered: false }) };\n\n    render() {\n        const { image_uris, card_faces, hover = true } = this.props // default prop `hover` must be true\n        try {\n            // If normal prop `image_uris.normal` doesn't exist, move to catch block for flip card faces\n            return <Image\n                src={image_uris.normal}\n                size=\"tiny\"\n                style={{ ...style, transform: `${this.state.hovered ? 'scale(1.75)' : 'scale(1)'}` }}\n                onMouseOver={hover ? this.mouseOver : null}\n                onMouseOut={hover ? this.mouseOut : null}\n            />;\n        } catch (e) {\n            return <Image src={\n                card_faces[0].image_uris.normal}\n                size=\"tiny\"\n                style={{ ...style, transform: `${this.state.hovered ? 'scale(1.75)' : 'scale(1)'}` }}\n                onMouseOver={hover ? this.mouseOver : null}\n                onMouseOut={hover ? this.mouseOut : null}\n            />;\n        }\n    }\n};\n\nexport default CardImage;\n","import React from 'react';\n\nconst Price = ({ num }) => {\n    const price = Number(num).toFixed(2);\n    if (isNaN(price)) return <span>$0.00</span>;\n    return <span>${price}</span>;\n};\n\nexport default Price;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Price from './Price';\nimport makeAuthHeader from './makeAuthHeader';\nimport { SCRYFALL_ID_SEARCH } from './api_resources';\nimport { Label, Icon } from 'semantic-ui-react';\n\nconst foilStyle = {\n    backgroundColor: '#ffcfdf',\n    backgroundImage: 'linear-gradient(90deg, #ffcfdf 0%, #b0f3f1 74%)'\n}\n\nexport default function MarketPrice({ id, finish }) {\n    const [price, setPrice] = useState(null);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        (async function fetchData() {\n            setLoading(true);\n            const { data } = await axios.get(`${SCRYFALL_ID_SEARCH}${id}`, { headers: makeAuthHeader() });\n            let finishStatus = 'usd';\n\n            if (finish === 'FOIL') finishStatus += '_foil';\n\n            setPrice(Number(data.prices[finishStatus]));\n            setLoading(false);\n        })();\n    }, [id, finish]);\n\n    return (\n        <Label tag style={finish === 'FOIL' ? foilStyle : null}>\n            {loading ? <Icon loading name='spinner' /> : <span>Est. {price ? <Price num={price} /> : 'not found'}</span>}\n        </Label>\n    );\n}\n","import React, { Component } from 'react';\nimport {\n    Segment,\n    Input,\n    Button,\n    Form,\n    Select,\n    Label,\n    Item\n} from 'semantic-ui-react';\nimport axios from 'axios';\nimport QohParser from './QohParser';\nimport createToast from './createToast';\nimport CardImage from './CardImage';\nimport makeAuthHeader from './makeAuthHeader';\nimport MarketPrice from './MarketPrice'\nimport { ADD_CARD_TO_INVENTORY } from './api_resources';\nimport $ from 'jquery';\n\nconst finishes = [\n    { key: 'NONFOIL', text: 'Nonfoil', value: 'NONFOIL' },\n    { key: 'FOIL', text: 'Foil', value: 'FOIL' }\n];\n\nconst cardConditions = [\n    { key: 'NM', text: 'Near Mint', value: 'NM' },\n    { key: 'LP', text: 'Light Play', value: 'LP' },\n    { key: 'MP', text: 'Moderate Play', value: 'MP' },\n    { key: 'HP', text: 'Heavy Play', value: 'HP' }\n];\n\n/**\n * Seeds state from props. Used to determine if cards have only foil, nonfoil, or both printings\n * from their `foil` and `nonfoil`\n * @param {Boolean} nonfoilProp\n * @param {Boolean} foilProp\n */\nfunction checkCardFinish(nonfoilProp, foilProp) {\n    if (!nonfoilProp && foilProp) {\n        return { selectedFinish: 'FOIL', finishDisabled: true };\n    } else if (nonfoilProp && !foilProp) {\n        return { selectedFinish: 'NONFOIL', finishDisabled: true };\n    } else if (nonfoilProp && foilProp) {\n        return { selectedFinish: 'NONFOIL', finishDisabled: false };\n    }\n}\n\nexport default class ScryfallCardListItem extends Component {\n    state = {\n        quantity: 0,\n        selectedFinish: checkCardFinish(this.props.nonfoil, this.props.foil)\n            .selectedFinish,\n        selectedCondition: 'NM',\n        finishDisabled: checkCardFinish(this.props.nonfoil, this.props.foil)\n            .finishDisabled,\n        submitDisable: false,\n        inventoryQty: this.props.inventoryQty,\n        submitLoading: false\n    };\n\n    handleFinishChange = (e, { value }) => {\n        this.setState({ selectedFinish: value }, () => {\n            console.log(this.state);\n        });\n    };\n\n    handleConditionChange = (e, { value }) => {\n        this.setState({ selectedCondition: value }, () => {\n            console.log(this.state);\n        });\n    };\n\n    handleQuantityChange = (e, { value }) => {\n        const val = parseInt(value);\n        const quantity = isNaN(val) ? '' : val; // Check for NaN\n        this.setState({ quantity: quantity });\n    };\n\n    // Remove input placeholder when user tries to enter a number (to reduce user error)\n    handleFocus = () => {\n        if (this.state.quantity === 0) {\n            this.setState({ quantity: '' })\n        }\n    }\n\n    // Restore input placeholder when user blurs field\n    handleBlur = () => {\n        if (this.state.quantity === '') {\n            this.setState({ quantity: 0 })\n        }\n    }\n\n    handleInventoryAdd = async (e, { value }) => {\n        const { quantity, selectedFinish, selectedCondition } = this.state;\n        const { name, nonfoil, foil } = this.props;\n        // This is the identifier for quantities of different finishes/conditions in the db\n        const type = `${selectedFinish}_${selectedCondition}`;\n\n        try {\n            this.setState({ submitDisable: true, submitLoading: true });\n\n            const { data } = await axios.post(ADD_CARD_TO_INVENTORY, {\n                quantity: quantity,\n                type: type,\n                cardInfo: { ...this.props },\n            }, { headers: makeAuthHeader() });\n\n            createToast({\n                color: 'green',\n                header: `${quantity}x ${name} ${quantity > 0 ? 'added' : 'removed'}!`,\n                duration: 2000\n            });\n\n            this.setState({\n                quantity: 0,\n                selectedFinish: checkCardFinish(nonfoil, foil).selectedFinish,\n                selectedCondition: 'NM',\n                finishDisabled: checkCardFinish(nonfoil, foil).finishDisabled,\n                submitDisable: false,\n                inventoryQty: data.qoh,\n                submitLoading: false\n            });\n\n            // Highlight the input after successful card add\n            $('#searchBar').focus().select();\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    render() {\n        const {\n            selectedFinish,\n            selectedCondition,\n            finishDisabled,\n            quantity,\n            submitDisable,\n            inventoryQty,\n            submitLoading\n        } = this.state;\n        const {\n            image_uris,\n            name,\n            set_name,\n            set,\n            rarity,\n            card_faces,\n            id\n        } = this.props;\n\n        return (\n            <Segment>\n                <Item.Group divided>\n                    <Item>\n                        <Item.Image size=\"tiny\">\n                            <CardImage\n                                image_uris={image_uris}\n                                card_faces={card_faces}\n                            />\n                        </Item.Image>\n                        <Item.Content>\n                            <Item.Header as='h3'>\n                                {name}\n                                {' '}\n                                <i\n                                    className={`ss ss-fw ss-${set} ss-${rarity}`}\n                                    style={{ fontSize: '30px' }}\n                                />\n                                <Label color=\"grey\">\n                                    {set_name} ({String(set).toUpperCase()})\n                                </Label>\n                                <QohParser inventoryQty={inventoryQty} />\n                                {' '}\n                                <MarketPrice id={id} finish={selectedFinish} />\n                            </Item.Header>\n                            <Item.Description>\n                                <Form>\n                                    <Form.Group>\n                                        <Form.Field\n                                            control={Input}\n                                            type=\"number\"\n                                            label=\"Quantity\"\n                                            value={quantity}\n                                            onChange={this.handleQuantityChange}\n                                            onFocus={this.handleFocus}\n                                            onBlur={this.handleBlur}\n                                        />\n                                        <Form.Field\n                                            label=\"Finish\"\n                                            control={Select}\n                                            value={selectedFinish}\n                                            options={finishes}\n                                            disabled={finishDisabled}\n                                            onChange={this.handleFinishChange}\n                                        />\n                                        <Form.Field\n                                            label=\"Condition\"\n                                            control={Select}\n                                            value={selectedCondition}\n                                            options={cardConditions}\n                                            onChange={this.handleConditionChange}\n                                        />\n                                        <Form.Button\n                                            label=\"Add to Inventory?\"\n                                            control={Button}\n                                            primary\n                                            disabled={\n                                                quantity === 0 ||\n                                                quantity === '' ||\n                                                submitDisable\n                                            }\n                                            onClick={this.handleInventoryAdd}\n                                            loading={submitLoading}\n                                        >\n                                            Submit\n                                    </Form.Button>\n                                    </Form.Group>\n                                </Form>\n                            </Item.Description>\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n        );\n    }\n}\n","import React from 'react';\nimport ScryfallCardListItem from './ScryfallCardListItem';\n\nfunction ScryfallCardList(props) {\n    // Tie the QOH to the fetched card, if it exists!\n    const cardList = props.cards.map(card => {\n        return (\n            <ScryfallCardListItem\n                showImage={props.showImages}\n                key={card.id}\n                {...card}\n                inventoryQty={props.quantities[card.id]}\n            />\n        );\n    });\n\n    return cardList\n}\n\nexport default ScryfallCardList;\n","import React from 'react';\nimport SearchBar from './SearchBar';\nimport axios from 'axios';\nimport makeAuthHeader from './makeAuthHeader';\nimport ScryfallCardList from './ScryfallCardList';\nimport { Segment, Header, Icon } from 'semantic-ui-react'\nimport { GET_CARD_QTY_FROM_INVENTORY, GET_SCRYFALL_BULK_BY_TITLE } from './api_resources';\n\nclass Home extends React.Component {\n    state = { searchResults: [], inventoryQuantities: [], showImages: true };\n\n    handleSearchSelect = async term => {\n        try {\n            const { data } = await axios.get(\n                GET_SCRYFALL_BULK_BY_TITLE,\n                {\n                    params: { title: term },\n                    headers: makeAuthHeader()\n                }\n            );\n\n            const ids = data.map(el => el.id);\n\n            // Fetches only the in-stock qty of a card tied to an `id`\n            const inventoryRes = await axios.post(\n                GET_CARD_QTY_FROM_INVENTORY,\n                { scryfallIds: ids },\n                { headers: makeAuthHeader() }\n            );\n\n            this.setState({\n                searchResults: data,\n                inventoryQuantities: inventoryRes.data\n            });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    handleImageToggle = () => {\n        this.setState({ showImages: !this.state.showImages });\n    };\n\n    render() {\n        const { searchResults } = this.state;\n\n        return (\n            <React.Fragment>\n                <SearchBar handleSearchSelect={this.handleSearchSelect} />\n\n                {!searchResults.length &&\n                    <Segment placeholder>\n                        <Header icon>\n                            <Icon name=\"search\" />\n                            <em>\"Searching the future for answers often leads to further questions.\"</em>\n                        </Header>\n                    </Segment>}\n\n                <ScryfallCardList\n                    showImages={this.state.showImages}\n                    cards={this.state.searchResults}\n                    quantities={this.state.inventoryQuantities}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Home;\n","import React from 'react';\nimport {\n    Segment,\n    Label,\n    Form,\n    Input,\n    Dropdown,\n    Button,\n    Item\n} from 'semantic-ui-react';\nimport CardImage from './CardImage';\nimport MarketPrice from './MarketPrice';\nimport QohParser from './QohParser';\nimport $ from 'jquery';\nimport _ from 'lodash';\n\n/**\n * Creates a list of conditions for the dropdown menu from the `qoh`\n * Note: Is this not needed if we default select initially?\n * @param {Object} qoh\n * @param {String} id\n */\nfunction createConditionOptions(qoh, id) {\n    const removeZeroedQuantites = _.pickBy(qoh, p => p > 0); // Quantites of zero not included\n\n    return Object.entries(removeZeroedQuantites).map(d => {\n        const [conditionFinish, qty] = d;\n\n        return {\n            text: `${conditionFinish.split('_').join(' | ')} | Qty: ${qty}`,\n            value: conditionFinish,\n            key: `${id}${conditionFinish}`\n        };\n    });\n}\n\n/**\n * Creates initial selectedFinish value, used for the MarketPrice component\n * Returns FOIL or NONFOIL depending on what's in current inventory (qoh)\n * @param {Object} qoh\n */\nfunction createInitialSelectedFinish(qoh) {\n    const removeZeroedQuantites = _.pickBy(qoh, p => p > 0);\n    // Isolate only the FOIL or NONFOIL values with mapping\n    const keysMapped = _.keys(removeZeroedQuantites).map(k => k.split('_')[0]);\n    const uniqueValues = _.uniq(keysMapped);\n    return uniqueValues.indexOf('NONFOIL') > -1 ? 'NONFOIL' : 'FOIL';\n}\n\nexport default class BrowseCardItem extends React.Component {\n    state = {\n        selectedFinishCondition: '',\n        selectedFinishConditionQty: 0,\n        quantityToSell: 0,\n        price: 0,\n        // Excludes condition ex. `FOIL` rather than `FOIL_NM`. Initialize at nonfoil unless only foil printing\n        selectedFinish: createInitialSelectedFinish(this.props.qoh),\n        conditionOptions: createConditionOptions(this.props.qoh, this.props.id)\n    };\n\n    handleQuantityChange = (e, { value }) => {\n        const { selectedFinishConditionQty } = this.state;\n        let numVal = parseInt(value);\n\n        if (numVal > selectedFinishConditionQty) {\n            numVal = selectedFinishConditionQty;\n        }\n\n        if (isNaN((numVal)) || numVal < 0) { numVal = 0; }\n\n        this.setState({ quantityToSell: numVal });\n    };\n\n    handleSelectedFinishCondition = (e, { value }) => {\n        this.setState({\n            selectedFinishCondition: value,\n            selectedFinishConditionQty: this.props.qoh[value],\n            selectedFinish: value.split('_')[0] // Change selectedFinish after user selection\n        });\n    };\n\n    handlePriceChange = (e, { value }) => {\n        let numVal = Number(value);\n        if (isNaN((numVal)) || numVal < 0) { numVal = 0; }\n        this.setState({ price: numVal });\n    };\n\n    // Remove input placeholder when user tries to enter a number (to reduce user error)\n    handleFocus = (property) => {\n        if (this.state[property] === 0) {\n            this.setState({ [property]: '' })\n        }\n    }\n\n    // Restore input placeholder when user blurs field\n    handleBlur = (property) => {\n        if (this.state[property] === '') {\n            this.setState({ [property]: 0 })\n        }\n    }\n\n    handleAddToSale = () => {\n        const { selectedFinishCondition, quantityToSell, price } = this.state;\n        const { qoh, id } = this.props;\n\n        this.props.addToSaleList(\n            { ...this.props },\n            selectedFinishCondition,\n            quantityToSell,\n            price\n        );\n\n        // Reset state\n        this.setState({\n            selectedFinishCondition: '',\n            selectedFinishConditionQty: 0,\n            quantityToSell: 0,\n            price: 0,\n            conditionOptions: createConditionOptions(qoh, id),\n            selectedFinish: createInitialSelectedFinish(qoh)\n        });\n\n        // Highlight the input after successful card add\n        $('#searchBar').focus().select();\n    };\n\n    render() {\n        const {\n            name,\n            image_uris,\n            set,\n            set_name,\n            rarity,\n            qoh,\n            id,\n            card_faces\n        } = this.props;\n\n        const {\n            selectedFinishCondition,\n            selectedFinishConditionQty,\n            selectedFinish,\n            conditionOptions,\n            quantityToSell,\n            price\n        } = this.state;\n\n        return (\n            <Segment>\n                <Item.Group divided>\n                    <Item>\n                        <Item.Image size=\"tiny\">\n                            <CardImage\n                                image_uris={image_uris}\n                                card_faces={card_faces}\n                            />\n                        </Item.Image>\n                        <Item.Content>\n                            <Item.Header as=\"h3\">\n                                {name}{' '}\n                                <i\n                                    className={`ss ss-fw ss-${set} ss-${rarity}`}\n                                    style={{ fontSize: '30px' }}\n                                />\n                                <Label color=\"grey\">\n                                    {set_name} ({String(set).toUpperCase()})\n                                </Label>\n                                <QohParser inventoryQty={qoh} />\n                                {' '}\n                                <MarketPrice id={id} finish={selectedFinish} />\n                            </Item.Header>\n                            <Item.Description>\n                                <Form>\n                                    <Form.Group>\n                                        <Form.Field\n                                            control={Dropdown}\n                                            selection\n                                            placeholder=\"Select inventory\"\n                                            options={conditionOptions}\n                                            value={selectedFinishCondition}\n                                            label=\"Select finish/condition\"\n                                            onChange={this.handleSelectedFinishCondition}\n                                        />\n                                        <Form.Field\n                                            control={Input}\n                                            type=\"number\"\n                                            label=\"Quantity to sell\"\n                                            value={quantityToSell}\n                                            onChange={this.handleQuantityChange}\n                                            disabled={!selectedFinishConditionQty}\n                                            onFocus={() => this.handleFocus('quantityToSell')}\n                                            onBlur={() => this.handleBlur('quantityToSell')}\n                                        />\n                                        <Form.Field\n                                            control={Input}\n                                            type=\"number\"\n                                            label=\"Price\"\n                                            value={price}\n                                            onChange={this.handlePriceChange}\n                                            disabled={!selectedFinishConditionQty}\n                                            onFocus={() => this.handleFocus('price')}\n                                            onBlur={() => this.handleBlur('price')}\n                                            step={0.5}\n                                        />\n                                        <Form.Button\n                                            label=\"Add to sale?\"\n                                            control={Button}\n                                            primary\n                                            onClick={this.handleAddToSale}\n                                            disabled={!quantityToSell}\n                                        >\n                                            Sell\n                                    </Form.Button>\n                                    </Form.Group>\n                                </Form>\n                            </Item.Description>\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n        );\n    }\n}\n","import React from 'react';\nimport BrowseCardItem from './BrowseCardItem';\nimport $ from 'jquery'\n\nexport default function BrowseCardList(props) {\n    const { cards, addToSaleList } = props;\n\n    // Highlight the input if cards were not found\n    if (cards.length === 0) {\n        $('#searchBar').focus().select();\n    }\n\n    return cards.map(card => {\n        return (\n            <BrowseCardItem\n                key={card.id}\n                {...card}\n                addToSaleList={addToSaleList}\n            />\n        );\n    });\n}\n","import React from 'react';\nimport Price from './Price';\n\nconst SalePriceTotal = ({ saleList }) => {\n    const total = saleList.length\n        ? saleList.reduce(\n              (acc, val) => acc + parseInt(val.qtyToSell) * Number(val.price),\n              0\n          )\n        : 0;\n\n    return <Price num={total} />;\n};\n\nexport default SalePriceTotal;\n","import React, { useState } from 'react';\nimport { Button, Label, Table } from 'semantic-ui-react';\nimport Price from './Price';\n\nexport default function SaleLineItem(props) {\n    const {\n        name,\n        set,\n        finishCondition,\n        qtyToSell,\n        price,\n        rarity,\n        deleteLineItem,\n        id\n    } = props;\n\n    const [hovered, setHovered] = useState(false);\n\n    return (\n        <Table.Row>\n            <Table.Cell><h4>{name}</h4></Table.Cell>\n            <Table.Cell singleLine>\n                <i\n                    className={`ss ss-fw ss-${set} ss-${rarity}`}\n                    style={{ fontSize: '20px' }}\n                />\n                <Label color=\"grey\">{set.toUpperCase()}</Label>\n            </Table.Cell>\n            <Table.Cell>\n                {qtyToSell}x @ <Price num={price} /> | {finishCondition}\n            </Table.Cell>\n            <Table.Cell>\n                <Button\n                    icon=\"cancel\"\n                    circular\n                    onClick={() => deleteLineItem(id, finishCondition)}\n                    onMouseOver={() => setHovered(true)}\n                    onMouseOut={() => setHovered(false)}\n                    color={hovered ? 'red' : null}\n                >\n                </Button>\n            </Table.Cell>\n        </Table.Row>\n    );\n}\n","import React from 'react';\nimport SaleLineItem from './SaleLineItem';\nimport { Table } from 'semantic-ui-react';\n\nconst CustomerSaleList = ({ saleList, removeFromSaleList }) => {\n    return <Table>\n        <Table.Body>\n            {saleList.map(card => {\n                return <SaleLineItem\n                    {...card}\n                    key={`${card.id}${card.finishCondition}${card.qtyToSell}`}\n                    deleteLineItem={removeFromSaleList}\n                />\n            })}\n        </Table.Body>\n    </Table>\n\n};\n\nexport default CustomerSaleList;","import React from 'react';\nimport { Button, Icon } from 'semantic-ui-react';\nimport Price from './Price';\nimport './PrintList.css';\nimport SalePriceTotal from './SalePriceTotal';\n\nconst Row = ({ id, name, qtyToSell, finishCondition, set_name, price }) => {\n    return <li key={id}>\n        <b>{name} | x{qtyToSell} | {finishCondition} | {set_name} | <Price num={price} /></b>\n    </li>\n}\n\nexport default class PrintList extends React.Component {\n    state = { printClicked: false }\n\n    print = () => {\n        this.setState({ printClicked: true }, () => {\n            window.print();\n            this.setState({ printClicked: false })\n        });\n    }\n\n    render() {\n        const { saleListCards } = this.props;\n        const { printClicked } = this.state;\n\n        if (saleListCards.length > 0) { // Ensure print is hidden if no cards in list\n            return (\n                <React.Fragment>\n                    <Button style={{ display: 'inline-block', float: 'right' }} onClick={this.print} icon>\n                        <Icon name=\"print\" />\n                    </Button>\n\n                    <div id=\"printme\" style={{ display: printClicked ? 'inline-block' : 'none' }}>\n                        <ul>{saleListCards.map(c => Row(c))}</ul>\n                        <span><b>Subtotal: <SalePriceTotal saleList={saleListCards} /></b></span>\n                    </div>\n                </React.Fragment >\n            )\n        } else {\n            return null;\n        }\n    }\n}","import React from 'react';\nimport axios from 'axios';\nimport {\n    Grid,\n    Segment,\n    Header,\n    Button,\n    Modal,\n    Icon,\n    Divider\n} from 'semantic-ui-react';\nimport SearchBar from './SearchBar';\nimport BrowseCardList from './BrowseCardList';\nimport SalePriceTotal from './SalePriceTotal';\nimport CustomerSaleList from './CustomerSaleList';\nimport PrintList from './PrintList';\nimport _ from 'lodash';\nimport makeAuthHeader from './makeAuthHeader';\nimport { GET_CARDS_BY_TITLE, FINISH_SALE } from './api_resources';\nimport createToast from './createToast';\n\n/**\n * Takes in an unordered group of cards and sorts them according to The Clubhouse's specs:\n * WUBRG, then multicolor, then colorless, then land, alphabetically within each color/category\n */\nfunction sortSaleList(cards) {\n    const ORDER = ['W', 'U', 'B', 'R', 'G', 'MULTI', 'COLORLESS', 'LAND'];\n\n    /**\n     * Main helper function that manages sort order\n     * @param {Object} card\n     */\n    function helpSort(card) {\n        let arrayConst = null;\n\n        let colorsLength = null;\n        let cardFace = null;\n\n        try {\n            // If colors don't exist, it's a flip card or storybook frame\n            colorsLength = card.colors.length;\n            cardFace = card;\n        } catch (e) {\n            try {\n                // Storybook frames from Eldraine may throw error\n                colorsLength = card.card_faces[0].colors.length;\n                cardFace = card.card_faces[0];\n            } catch (e) {\n                colorsLength = card.colors.length;\n                cardFace = card;\n            }\n        }\n\n        // Apply logic to return correct constant enum\n        if (colorsLength === 0) {\n            arrayConst = 'COLORLESS';\n        } else if (colorsLength === 1) {\n            arrayConst = cardFace.colors[0];\n        } else if (colorsLength > 1) {\n            arrayConst = 'MULTI';\n        }\n\n        // Drill into colorless cards, if they are lands or not\n        if (arrayConst === 'COLORLESS') {\n            if (cardFace.type_line.includes('Land')) {\n                arrayConst = 'LAND';\n            }\n        }\n\n        // Final check to guard against a null arrayConst\n        if (!arrayConst) { arrayConst = 'LAND' }\n\n        return arrayConst;\n    }\n\n    const alphaSort = cards.sort((a, b) => {\n        return a.name.localeCompare(b.name);\n    });\n\n    const sorted = alphaSort.sort((a, b) => {\n        return ORDER.indexOf(helpSort(a)) - ORDER.indexOf(helpSort(b));\n    });\n\n    return sorted;\n}\n\nconst initialState = {\n    searchResults: [],\n    saleListCards: [],\n    showModal: false,\n    submitLoading: false,\n    searchTerm: ''\n};\n\nexport default class Sale extends React.Component {\n    state = initialState;\n\n    handleResultSelect = async term => {\n        try {\n            const { data } = await axios.get(GET_CARDS_BY_TITLE, {\n                params: { title: term },\n                headers: makeAuthHeader()\n            });\n\n            this.setState({ searchResults: data, searchTerm: term });\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    /**\n     * Adds product to the sale list\n     */\n    addToSaleList = (card, finishCondition, qtyToSell, price) => {\n        const newCard = { ...card, finishCondition, qtyToSell, price };\n        const oldState = [...this.state.saleListCards];\n\n        // Need to make sure same ID's with differing conditions are separate line-items\n        const idx = oldState.findIndex(el => {\n            return (\n                el.id === newCard.id && el.finishCondition === finishCondition\n            );\n        });\n\n        if (idx !== -1) {\n            oldState.splice(idx, 1, newCard);\n        } else {\n            oldState.push(newCard);\n        }\n\n        // Sorting the saleList cards here, on add\n        const sortedCards = sortSaleList(oldState);\n\n        this.setState({ saleListCards: sortedCards });\n    };\n\n    /**\n     * Removes product from the sale list (this function is passed to the sale line items through props)\n     */\n    removeFromSaleList = (id, finishCondition) => {\n        const newState = _.reject([...this.state.saleListCards], el => {\n            return el.id === id && el.finishCondition === finishCondition;\n        });\n\n        this.setState({ saleListCards: newState });\n    };\n\n    /**\n     * Extracts the saleList state and uses it to complete sale\n     */\n    finalizeSale = async () => {\n        try {\n            this.setState({ submitLoading: true });\n\n            const { data } = await axios.post(FINISH_SALE, {\n                cards: this.state.saleListCards\n            }, { headers: makeAuthHeader() });\n\n            const saleID = data.sale_data.Sale.saleID;\n\n            createToast({\n                color: 'green',\n                header: 'Sale created in Lightspeed!',\n                message: `The id number is #${saleID}`,\n            });\n\n            this.setState(initialState);\n        } catch (e) {\n            createToast({\n                color: 'red',\n                header: 'Error!',\n                message: `Sale was not created`,\n            });\n\n            this.setState(initialState);\n            console.log(e);\n        }\n    };\n\n    closeModal = () => {\n        this.setState({ showModal: false });\n    };\n\n    render() {\n        const {\n            searchResults,\n            saleListCards,\n            showModal,\n            submitLoading,\n            searchTerm\n        } = this.state;\n\n        // Creates text to notify the user of zero-result searches\n        const searchNotification = () => {\n            if (searchTerm && !searchResults.length) { // Check to make sure the user has searched and no results\n                return <p>Zero results for <em>{searchTerm}</em></p>\n            }\n            return <p>Search for inventory to sell</p>; // Default text before search\n        }\n\n        return (\n            <React.Fragment>\n                <Grid.Row style={{ display: 'flex', alignItems: 'center' }}>\n                    <SearchBar handleSearchSelect={this.handleResultSelect} />\n                </Grid.Row>\n                <br />\n                <Grid stackable={true}>\n                    <Grid.Row>\n                        <Grid.Column width=\"11\">\n                            <Header as=\"h2\" style={{ display: \"inline-block\" }}>Inventory</Header>\n                            <Divider />\n\n                            {!searchResults.length &&\n                                <Segment placeholder>\n                                    <Header icon>\n                                        <Icon name=\"search\" />\n                                        <span>{searchNotification()}</span>\n                                    </Header>\n                                </Segment>}\n\n                            <BrowseCardList\n                                cards={searchResults}\n                                addToSaleList={this.addToSaleList}\n                            />\n                        </Grid.Column>\n                        <Grid.Column width=\"5\">\n                            <Header as=\"h2\" style={{ display: 'inline-block' }}>Sale Items</Header>\n\n                            <PrintList saleListCards={saleListCards} />\n                            <Divider />\n\n                            {saleListCards.length === 0 &&\n                                <Segment placeholder>\n                                    <Header icon>\n                                        <Icon name=\"plus\" />\n                                        View and manage customer sale list here\n                                </Header>\n                                </Segment>\n                            }\n\n                            {saleListCards.length > 0 && <React.Fragment>\n                                <CustomerSaleList\n                                    removeFromSaleList={this.removeFromSaleList}\n                                    saleList={saleListCards}\n                                />\n                            </React.Fragment>\n                            }\n\n                            {saleListCards.length > 0 && (\n                                <Segment clearing>\n                                    <Header floated=\"left\">\n                                        <Header sub>Subtotal</Header>\n                                        <SalePriceTotal\n                                            saleList={saleListCards}\n                                        />\n                                    </Header>\n                                    <Modal\n                                        basic\n                                        open={showModal}\n                                        trigger={\n                                            <Button\n                                                floated=\"right\"\n                                                primary\n                                                onClick={() => {\n                                                    this.setState({\n                                                        showModal: true\n                                                    });\n                                                }}\n                                            >\n                                                Finalize sale\n                                            </Button>\n                                        }\n                                    >\n                                        <Modal.Content>\n                                            <Header inverted as=\"h2\">\n                                                Finalize this sale?\n                                            </Header>\n                                            <p>\n                                                Click 'Yes' to create a sale\n                                                in Lightspeed. Ensure that\n                                                you have all cards pulled and double-checked\n                                                the customer list. Undoing this action will require manual data entry!\n                                            </p>\n                                        </Modal.Content>\n                                        <Modal.Actions>\n                                            <Button\n                                                basic\n                                                color=\"red\"\n                                                inverted\n                                                onClick={this.closeModal}\n                                            >\n                                                <Icon name=\"remove\" /> No\n                                            </Button>\n                                            <Button\n                                                color=\"green\"\n                                                inverted\n                                                onClick={this.finalizeSale}\n                                                loading={submitLoading}\n                                            >\n                                                <Icon name=\"checkmark\" /> Yes\n                                            </Button>\n                                        </Modal.Actions>\n                                    </Modal>\n                                </Segment>\n                            )}\n                        </Grid.Column>\n                    </Grid.Row >\n                </Grid >\n            </React.Fragment >\n        );\n    }\n}\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport moment from 'moment';\n\nconst SalesListItem = ({ saleData, cardList }) => {\n    const quantitySold = cardList.reduce(\n        (pre, curr) => pre + curr.qtyToSell,\n        0\n    );\n\n    return (\n        <Table.Row>\n            <Table.Cell>{saleData.saleID}</Table.Cell>\n            <Table.Cell>\n                {moment(saleData.createTime).format('MM/DD/YYYY - h:mm A')}\n            </Table.Cell>\n            <Table.Cell>{quantitySold}</Table.Cell>\n        </Table.Row>\n    );\n};\n\nexport default SalesListItem;\n","import React from 'react';\nimport SalesListItem from './SalesListItem';\nimport { Table } from 'semantic-ui-react';\n\nconst SalesList = ({ list }) => {\n    return (\n        <Table celled unstackable compact>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Sale ID</Table.HeaderCell>\n                    <Table.HeaderCell>Date of Sale</Table.HeaderCell>\n                    <Table.HeaderCell>Quantity Sold</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n                {list.map(({ sale_data, card_list, _id }) => (\n                    <SalesListItem\n                        saleData={sale_data}\n                        cardList={card_list}\n                        key={_id}\n                    />\n                ))}\n            </Table.Body>\n        </Table>\n    );\n};\n\nexport default SalesList;\n","import React, { Component } from 'react';\nimport SearchBar from './SearchBar';\nimport SalesList from './SalesList';\nimport axios from 'axios';\nimport makeAuthHeader from './makeAuthHeader';\nimport { GET_SALES_BY_TITLE } from './api_resources';\n\nclass BrowseSales extends Component {\n    state = { salesList: [], cardName: '' };\n\n    handleSearchSelect = async cardName => {\n        const { data } = await axios.get(GET_SALES_BY_TITLE, {\n            params: { cardName: cardName },\n            headers: makeAuthHeader()\n        });\n\n        this.setState({ salesList: data, cardName: cardName });\n    };\n\n    render() {\n        const { salesList, cardName } = this.state;\n\n        return (\n            <div>\n                <SearchBar handleSearchSelect={this.handleSearchSelect} />\n                <br />\n                <span>\n                    <em>\n                        {cardName !== '' && (\n                            <h4>\n                                {salesList.length} results for {cardName}\n                            </h4>\n                        )}\n                    </em>\n                </span>\n                <SalesList list={salesList} />\n            </div>\n        );\n    }\n}\n\nexport default BrowseSales;\n","import React from 'react';\nimport QohParser from './QohParser';\nimport { Image } from 'semantic-ui-react';\nimport MarketPrice from './MarketPrice';\n\nconst wrapperStyle = {\n    display: 'inline-block',\n    margin: '10px 10px 10px 10px'\n};\n\nconst inventoryStyle = {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    padding: '9px 9px 9px 9px',\n    backgroundColor: 'rgba(0, 0, 0, 0.9)',\n    borderRadius: '10px 10px 10px 10px',\n    boxShadow: '2px 2px 5px 0 rgba(0, 0, 0, 0.25)'\n};\n\nconst imageStyle = {\n    width: '300px', // Width of the image when size=\"medium\"\n    height: '418.3px', // Height of the image when size=\"medium\"\n    boxShadow: '2px 2px 5px 0 rgba(0, 0, 0, 0.25)',\n    background: 'repeating-linear-gradient(45deg, #bfbfbf, #bfbfbf 10px, #b0b0b0 10px, #b0b0b0 20px)',\n    borderRadius: '15px'\n}\n\nexport default function PublicCardItem({ image_uris, card_faces, qoh, id }) {\n    let myImage;\n\n    try {\n        // If normal prop doesn't exist, move to catch block for flip card faces\n        myImage = <Image src={image_uris.normal} size=\"medium\" style={{ borderRadius: '15px' }} />\n    } catch (e) {\n        myImage = <Image src={card_faces[0].image_uris.normal} size=\"medium\" style={{ borderRadius: '15px' }} />\n    }\n\n    return <React.Fragment>\n        <div style={wrapperStyle}>\n            <div style={imageStyle}>{myImage}</div>\n            <div style={inventoryStyle}>\n                <div><QohParser inventoryQty={qoh} /></div>\n                <MarketPrice id={id} />\n            </div>\n        </div>\n    </React.Fragment>\n}","import React from 'react';\nimport PublicCardItem from './PublicCardItem';\nimport { Grid } from 'semantic-ui-react';\n\nconst gridStyle = {\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignContent: 'space-evenly',\n    height: '100%'\n};\n\nexport default function PublicCardList(props) {\n    const { cards, addToSaleList } = props;\n\n    return (\n        <Grid style={gridStyle} >\n            {cards.map(card => {\n                return (\n                    <PublicCardItem\n                        key={card.id}\n                        {...card}\n                        addToSaleList={addToSaleList}\n                    />\n                );\n            })}\n        </ Grid>\n    );\n}\n","import React from 'react';\nimport axios from 'axios';\nimport {\n    Grid,\n    Segment,\n    Header,\n    Icon,\n    Divider,\n} from 'semantic-ui-react';\nimport SearchBar from './SearchBar';\nimport PublicCardList from './PublicCardList';\nimport { GET_CARDS_BY_TITLE } from './api_resources';\n\nconst initialState = {\n    searchResults: [],\n    saleListCards: [],\n    searchTerm: ''\n};\n\nexport default class PublicInventory extends React.Component {\n    state = initialState;\n\n    handleResultSelect = async term => {\n        try {\n            const { data } = await axios.get(GET_CARDS_BY_TITLE, {\n                params: { title: term }\n            });\n\n            this.setState({ searchResults: data, searchTerm: term });\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    render() {\n        const {\n            searchResults,\n            searchTerm\n        } = this.state;\n\n        // Creates text to notify the user of zero-result searches\n        const searchNotification = () => {\n            if (searchTerm && !searchResults.length) { // Check to make sure the user has searched and no results\n                return <p><em>{searchTerm}</em> is out of stock</p>\n            }\n            return <p>Search for a card</p>; // Default text before search\n        }\n\n        return (\n            <React.Fragment>\n                <Grid.Row style={{ display: 'flex', alignItems: 'center' }}>\n                    <SearchBar handleSearchSelect={this.handleResultSelect} />\n                </Grid.Row>\n                <br />\n                <Grid stackable={true}>\n                    <Grid.Column>\n                        <Header as=\"h2\">\n                            Inventory Search\n                            <Header.Subheader>\n                                <em>Card prices based on non-premium printings and are subject to change</em>\n                            </Header.Subheader>\n                        </Header>\n\n                        <Divider />\n\n                        {!searchResults.length &&\n                            <Segment placeholder>\n                                <Header icon>\n                                    <Icon name=\"search\" />\n                                    <span>{searchNotification()}</span>\n                                </Header>\n                            </Segment>}\n\n                        <PublicCardList\n                            cards={searchResults}\n                            addToSaleList={this.addToSaleList}\n                        />\n                    </Grid.Column>\n                </Grid >\n            </React.Fragment >\n        );\n    }\n}\n","import React from 'react';\nimport SearchBar from './SearchBar';\nimport { GET_SET_NAMES } from './api_resources';\nimport axios from 'axios';\nimport { Form, Input, Select, Dropdown, Segment } from 'semantic-ui-react';\n\nconst formatDropdownOptions = [\n    { key: 'qw', value: \"\", text: \"None\" },\n    { key: 'we', value: \"standard\", text: \"Standard\" },\n    { key: 'er', value: \"future\", text: \"Future\" },\n    { key: 'rt', value: \"historic\", text: \"Historic\" },\n    { key: 'ty', value: \"pioneer\", text: \"Pioneer\" },\n    { key: 'yu', value: \"modern\", text: \"Modern\" },\n    { key: 'ui', value: \"legacy\", text: \"Legacy\" },\n    { key: 'io', value: \"pauper\", text: \"Pauper\" },\n    { key: 'op', value: \"vintage\", text: \"Vintage\" },\n    { key: 'as', value: \"penny\", text: \"Penny\" },\n    { key: 'sd', value: \"commander\", text: \"Commander\" },\n    { key: 'df', value: \"brawl\", text: \"Brawl\" },\n    { key: 'fg', value: \"duel\", text: \"Duel\" },\n    { key: 'gh', value: \"oldschool\", text: \"Oldschool\" }\n];\n\nconst priceFilterDropdownOptions = [\n    { key: 'gte', value: 'gte', text: '>=' },\n    { key: 'lte', value: 'lte', text: '<=' },\n    { key: 'gtx', value: 'gt', text: '>' },\n    { key: 'ltx', value: 'lt', text: '<' }\n];\n\nconst finishDropdownOptions = [\n    { key: 'nonfoil_foil', value: '', text: 'None' },\n    { key: 'nonfoil', value: 'NONFOIL', text: 'Nonfoil' },\n    { key: 'foil', value: 'FOIL', text: 'Foil' }\n];\n\nconst sortByDropdownOptions = [\n    { key: 'pricesort', value: 'price', text: 'Price' },\n    { key: 'alphasort', value: 'name', text: 'Card Name' }\n];\n\nconst sortByDirectionDropdownOptions = [\n    { key: 'descdirsort', value: 1, text: 'Ascending' },\n    { key: 'ascdirsort', value: -1, text: 'Descending' }\n];\n\nconst sortByColorDropdownOptions = [\n    { key: 'w', value: 'W', text: 'White' },\n    { key: 'u', value: 'U', text: 'Blue' },\n    { key: 'b', value: 'B', text: 'Black' },\n    { key: 'r', value: 'R', text: 'Red' },\n    { key: 'g', value: 'G', text: 'Green' }\n];\n\nconst initialState = {\n    title: '',\n    setName: '',\n    format: '',\n    priceNum: '',\n    priceFilter: 'gte',\n    finish: '',\n    sortBy: 'price',\n    colorsArray: [],\n    sortByDirection: -1,\n    setNames: []\n}\n\nexport default class DeckboxCloneForm extends React.Component {\n    state = { editionDropdownOptions: [], ...initialState };\n\n    handleSearchSelect = name => this.setState({ title: name });\n\n    // When the user blurs the search field, we need to re-set state. Otherwise it won't clear from handleSearchSelect()\n    handleSearchBlur = (e, d) => this.setState({ title: e.target.value });\n\n    handleChange = (e, { value }) => this.setState({ [e.target.name]: value });\n\n    handleDropdownChange = (e, data) => this.setState({ [data.name]: data.value });\n\n    async componentDidMount() {\n        const { data } = await axios.get(GET_SET_NAMES);\n        const setNameOptions = data.map((d, idx) => {\n            return { key: `set${idx}`, value: d, text: d };\n        })\n        const concatWithBlankOption = [{ key: 'snull', value: \"\", text: \"None\" }].concat(setNameOptions);\n        this.setState({ editionDropdownOptions: concatWithBlankOption });\n    }\n\n    render() {\n        const {\n            title,\n            setName,\n            format,\n            priceNum,\n            priceFilter,\n            finish,\n            sortBy,\n            sortByDirection,\n            colorsArray\n        } = this.state;\n\n        // Sort the colors here and concat prior to sending to the backend\n        const colors = colorsArray.sort().join('');\n\n        return (\n            <Segment>\n                <h3>Filters</h3>\n                <Form>\n                    <Form.Group widths=\"4\">\n                        <Form.Field>\n                            <label>Card Name</label>\n                            <SearchBar\n                                handleSearchSelect={this.handleSearchSelect}\n                                value={this.state.title}\n                                name=\"title\"\n                                onBlur={this.handleSearchBlur}\n                            />\n                        </Form.Field>\n                        <Form.Field\n                            control={Select}\n                            label=\"Format\"\n                            placeholder=\"Format\"\n                            options={formatDropdownOptions}\n                            name=\"format\"\n                            onChange={this.handleDropdownChange}\n                        />\n                        <Form.Field\n                            control={Select}\n                            label=\"Edition\"\n                            placeholder=\"Edition\"\n                            search\n                            options={this.state.editionDropdownOptions}\n                            name=\"setName\"\n                            onChange={this.handleDropdownChange}\n                        />\n                        <Form.Field\n                            control={Select}\n                            label=\"Finish\"\n                            placeholder=\"Finish\"\n                            options={finishDropdownOptions}\n                            name=\"finish\"\n                            onChange={this.handleDropdownChange}\n                        />\n                    </Form.Group>\n                    <Form.Group widths=\"4\">\n\n                        <Form.Field\n                            control={Select}\n                            multiple\n                            label=\"Colors\"\n                            placeholder=\"Colors\"\n                            options={sortByColorDropdownOptions}\n                            name=\"colorsArray\"\n                            onChange={this.handleDropdownChange}\n                        />\n\n                        <Form.Field>\n                            <label>Price Filter</label>\n                            <Input\n                                label={<Dropdown\n                                    options={priceFilterDropdownOptions}\n                                    name=\"priceFilter\"\n                                    defaultValue=\"gte\"\n                                    onChange={this.handleDropdownChange}\n                                />}\n                                placeholder=\"Enter a price\"\n                                labelPosition=\"left\"\n                                name=\"priceNum\"\n                                type=\"number\"\n                                onChange={this.handleDropdownChange}\n                            />\n                        </Form.Field>\n                        <Form.Field\n                            control={Select}\n                            label=\"Sort By\"\n                            placeholder=\"\"\n                            options={sortByDropdownOptions}\n                            defaultValue='price'\n                            name=\"sortBy\"\n                            onChange={this.handleDropdownChange}\n                        />\n                        <Form.Field\n                            control={Select}\n                            label=\"Order\"\n                            options={sortByDirectionDropdownOptions}\n                            defaultValue={-1}\n                            name=\"sortByDirection\"\n                            onChange={this.handleDropdownChange}\n                        />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Button primary onClick={() => this.props.handleSubmit({\n                            title,\n                            setName,\n                            format,\n                            priceNum,\n                            priceFilter,\n                            finish,\n                            sortBy,\n                            sortByDirection,\n                            colors\n                        })}>Submit</Form.Button>\n                    </Form.Group>\n                </Form>\n            </Segment>\n        )\n    }\n}","import React from 'react';\nimport { Table, Icon, Image } from 'semantic-ui-react';\nimport Price from './Price';\n\nconst conditionMap = {\n    NM: 'Near Mint',\n    LP: 'Light Play',\n    MP: 'Moderate Play',\n    HP: 'Heavy Play',\n};\n\nconst Tooltip = ({ image_uri, posX, posY }) => {\n    return (\n        <div style={{\n            position: 'absolute',\n            left: `${posX}px`,\n            width: '150px', // Width of the image when size=\"small\"\n            height: '209px', // Height of the image when size=\"small\"\n            borderRadius: '7px 7px 7px 7px',\n            boxShadow: '2px 2px 5px 0 rgba(0, 0, 0, 0.25)',\n            background: 'repeating-linear-gradient(45deg, #bfbfbf, #bfbfbf 10px, #b0b0b0 10px, #b0b0b0 20px)'\n        }}>\n            <Image\n                style={{ borderRadius: '7px 7px 7px 7px' }}\n                size=\"small\"\n                src={image_uri}\n            />\n        </div>\n    )\n}\n\nexport default class DeckboxCloneRow extends React.Component {\n    state = { mouseInside: false, mouseX: 0, mouseY: 0 };\n\n    mouseEnter = (e) => {\n        const mouseX = e.clientX - e.target.offsetLeft\n        const mouseY = e.clientY - e.target.offsetTop;\n        this.setState({ mouseInside: true, mouseX, mouseY });\n    }\n\n    mouseLeave = (e) => this.setState({ mouseInside: false });\n\n    mouseMove = (e) => {\n        const mouseX = e.clientX - e.target.offsetLeft\n        const mouseY = e.clientY - e.target.offsetTop;\n        this.setState({ mouseX, mouseY });\n    };\n\n    render() {\n        const { inventory, name, set_name, price, set, rarity, image_uri } = this.props;\n        const { mouseInside, mouseX, mouseY } = this.state;\n        const finish = inventory.k.split('_')[0];\n        const condition = inventory.k.split('_')[1];\n\n        return <Table.Row>\n            <Table.Cell>\n                <span\n                    onMouseEnter={this.mouseEnter}\n                    onMouseLeave={this.mouseLeave}\n                    onMouseMove={this.mouseMove}\n                    style={{ cursor: 'help' }}\n                >\n                    {name}{' '}\n                </span>\n                {finish === 'FOIL' && <Icon name=\"star\" color=\"blue\" />}\n                {mouseInside && <Tooltip image_uri={image_uri} posX={mouseX} posY={mouseY} />}\n            </Table.Cell>\n            <Table.Cell><i className={`ss ss-fw ss-${set} ss-${rarity}`} style={{ fontSize: '20px' }} />{\" \"}{set_name}</Table.Cell>\n            <Table.Cell>{conditionMap[condition]}</Table.Cell>\n            <Table.Cell>{inventory.v}</Table.Cell>\n            <Table.Cell><Price num={price} /></Table.Cell>\n        </Table.Row>\n    }\n}","import React from 'react'\nimport { GET_CARDS_BY_FILTER } from './api_resources';\nimport DeckboxCloneForm from './DeckboxCloneForm';\nimport DeckboxCloneRow from './DeckboxCloneRow';\nimport axios from 'axios';\nimport { Table, Menu, Icon, Dimmer, Loader, Segment, Header, Container } from 'semantic-ui-react';\nimport _ from 'lodash';\nconst LIMIT = 100 // Matching the backend for now\n\nexport default class DeckboxClone extends React.Component {\n    state = {\n        data: [],\n        count: 0,\n        currentPage: 0,\n        numPages: 0,\n        pageArray: [],\n        isLoading: false,\n        cachedFilters: {},\n        showPages: [],\n        searchTouched: false // Tracks whether the user has initially searched for the 'no results' message\n    }\n\n    fetchData = async (filters, page) => {\n        try {\n            this.setState({ isLoading: true });\n\n            const { data } = await axios.get(GET_CARDS_BY_FILTER, {\n                params: { ...filters, page }\n            });\n\n            const numPages = Math.ceil(data.total / LIMIT);\n            const pages = _.range(1, numPages + 1);\n            let showPages;\n\n            // Logic that controls the visibility of page number links \n            // Default max number pages to display is 5\n            if (page <= 3) {\n                showPages = pages.slice(0, 5);\n            } else if (page >= numPages - 2) {\n                showPages = pages.slice(numPages - 5, numPages);\n            } else {\n                showPages = pages.slice(page - 2, page + 3);\n            }\n\n            this.setState({\n                data: data.cards,\n                count: data.total,\n                isLoading: false,\n                numPages: numPages,\n                currentPage: page,\n                showPages: showPages,\n                searchTouched: true\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    handleSubmit = async (filters) => {\n        this.setState({ cachedFilters: filters }); // Set the filters for pagination requests later\n        await this.fetchData(filters, 1); // On submit, starting page mut always be 1\n    }\n\n    handlePage = async (page) => {\n        await this.fetchData(this.state.cachedFilters, page)\n        this.setState({ currentPage: page });\n    };\n\n    render() {\n        const { data, isLoading, currentPage, numPages, count } = this.state;\n        const showLeftPageButtons = !(currentPage === 1);\n        const showRightPageButtons = !(currentPage === numPages);\n\n        return <Container>\n            <Dimmer active={isLoading} inverted page style={{ marginTop: '52.63px' }}>\n                <Loader size=\"large\">Loading</Loader>\n            </Dimmer>\n            <Segment secondary>\n                <Icon name=\"exclamation triangle\" color=\"blue\" />\n                Prices from this table are updated weekly and are subject to fluctuations. Consult 'New Sale' or 'Manage Inventory' for up-to-date values\n            </Segment>\n            <DeckboxCloneForm handleSubmit={this.handleSubmit} />\n\n            {!!data.length && <Table celled striped compact>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell colSpan='5'>\n                            <Menu floated=\"left\">\n                                <Menu.Item>Viewing page {currentPage} of {numPages}</Menu.Item>\n                            </Menu>\n                            <Menu floated=\"right\">\n                                {showLeftPageButtons && <Menu.Item as=\"a\" icon onClick={() => this.handlePage(currentPage - 1)} >\n                                    <Icon name='chevron left' />\n                                </Menu.Item>}\n\n                                <React.Fragment>\n                                    {this.state.showPages.map(p => {\n                                        return (\n                                            <Menu.Item\n                                                key={`page-${p}`}\n                                                onClick={() => this.handlePage(p)}\n                                                active={currentPage === p}\n                                                disabled={currentPage === p}\n                                                as=\"a\">\n                                                {p}\n                                            </Menu.Item>\n                                        )\n                                    })}\n                                </React.Fragment>\n\n                                {showRightPageButtons && <Menu.Item as=\"a\" icon onClick={() => this.handlePage(currentPage + 1)}>\n                                    <Icon name='chevron right' />\n                                </Menu.Item>}\n                            </Menu>\n                        </Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>Edition</Table.HeaderCell>\n                        <Table.HeaderCell>Condition</Table.HeaderCell>\n                        <Table.HeaderCell>Qty</Table.HeaderCell>\n                        <Table.HeaderCell>Price</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                    {data.map(d => <DeckboxCloneRow {...d} key={`${d._id}${d.inventory.k}`} />)}\n                </Table.Body>\n\n                <Table.Footer>\n                    <Table.Row>\n                        <Table.HeaderCell colSpan='5'>\n                            <Menu floated=\"left\">\n                                <Menu.Item>Total results: {count}</Menu.Item>\n                            </Menu>\n                            <Menu floated=\"right\">\n                                {showLeftPageButtons && <Menu.Item\n                                    as=\"a\"\n                                    icon\n                                    onClick={() => this.handlePage(currentPage - 1)}\n                                >\n                                    <Icon name='chevron left' />\n                                </Menu.Item>}\n\n                                <React.Fragment>\n                                    {this.state.showPages.map(p => {\n                                        return (\n                                            <Menu.Item\n                                                key={`page-${p}`}\n                                                onClick={() => this.handlePage(p)}\n                                                active={currentPage === p}\n                                                disabled={currentPage === p}\n                                                as=\"a\">\n                                                {p}\n                                            </Menu.Item>\n                                        )\n                                    })}\n                                </React.Fragment>\n\n                                {showRightPageButtons && <Menu.Item\n                                    as=\"a\"\n                                    icon\n                                    onClick={() => this.handlePage(currentPage + 1)}\n                                >\n                                    <Icon name='chevron right' />\n                                </Menu.Item>}\n                            </Menu>\n                        </Table.HeaderCell>\n                    </Table.Row>\n                </Table.Footer>\n            </Table>}\n\n            {!data.length &&\n                <Segment placeholder>\n                    <Header icon>\n                        <Icon name=\"search\" />\n                        {this.state.searchTouched ?\n                            'No results found' :\n                            'Use the filters to browse inventory'\n                        }\n                    </Header>\n                </Segment>}\n        </Container>\n    }\n}","import React from 'react';\nimport makeAuthHeader from './makeAuthHeader';\nimport { LOGIN } from './api_resources';\nimport axios from 'axios';\n\nexport const AuthContext = React.createContext();\n\nclass AuthProvider extends React.Component {\n    state = {\n        loggedIn: !!localStorage.getItem('clubhouse_JWT'),\n        handleLogin: async (username, password) => {\n            try {\n                const { data } = await axios.post(LOGIN, {\n                    username: username.toLowerCase(),\n                    password: password\n                }, { headers: makeAuthHeader() });\n\n                if (data.token) {\n                    localStorage.setItem('clubhouse_JWT', data.token);\n\n                    this.setState({\n                        loggedIn: !!localStorage.getItem('clubhouse_JWT')\n                    });\n\n                    return { authed: true };\n                } else {\n                    return { authed: false };\n                }\n            } catch (err) {\n                console.log(err);\n            }\n        },\n        handleLogout: async () => {\n            try {\n                localStorage.removeItem('clubhouse_JWT');\n\n                this.setState({\n                    loggedIn: !!localStorage.getItem('clubhouse_JWT')\n                });\n\n                return { authed: false };\n            } catch (err) {\n                console.log(err);\n            }\n        }\n    }\n\n    render() {\n        return <AuthContext.Provider value={this.state}>\n            {this.props.children}\n        </AuthContext.Provider>\n    }\n}\n\nexport default AuthProvider","import React from 'react';\nimport createToast from './createToast';\nimport { Form, Button } from 'semantic-ui-react';\nimport { Redirect } from 'react-router-dom';\nimport { AuthContext } from './AuthProvider';\n\nconst initialState = { username: '', password: '', btnLoading: false };\n\nclass Login extends React.Component {\n    state = initialState;\n\n    handleInputChange = (e, { value }) => {\n        this.setState({ [e.target.name]: value });\n    };\n\n    render() {\n        const { username, password, btnLoading } = this.state;\n\n        return (\n            <AuthContext.Consumer>\n                {({ loggedIn, handleLogin }) => {\n                    const login = async () => {\n                        const { username, password } = this.state;\n\n                        this.setState({ btnLoading: true });\n\n                        const { authed } = await handleLogin(username, password);\n\n                        if (authed) {\n                            // Do not set state here to mitigate React setState warning after component unmounted due to redirect\n                            createToast({\n                                color: 'green',\n                                header: 'Success',\n                                message: `Enjoy your time here!`,\n                            });\n                        } else {\n                            this.setState(initialState);\n                            createToast({\n                                color: 'red',\n                                header: 'Error',\n                                message: `Username or password was incorrect`,\n                            });\n                        }\n                    };\n\n                    if (loggedIn) {\n                        return <Redirect to=\"/manage-inventory\" />;\n                    }\n\n                    return (\n                        <Form>\n                            <Form.Field>\n                                <Form.Input\n                                    name=\"username\"\n                                    placeholder=\"Username\"\n                                    label=\"Username\"\n                                    value={username}\n                                    onChange={this.handleInputChange}\n                                />\n                            </Form.Field>\n                            <Form.Field>\n                                <Form.Input\n                                    name=\"password\"\n                                    placeholder=\"Password\"\n                                    type=\"password\"\n                                    label=\"Password\"\n                                    value={password}\n                                    onChange={this.handleInputChange}\n                                />\n                            </Form.Field>\n                            <Button\n                                type=\"submit\"\n                                onClick={() => login()}\n                                disabled={!username || !password}\n                                loading={btnLoading}\n                            >\n                                Submit\n                            </Button>\n                        </Form>\n                    );\n                }}\n            </AuthContext.Consumer>\n        )\n    }\n}\n\nexport default Login;\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Button, Header, Container } from 'semantic-ui-react';\nimport { AuthContext } from './AuthProvider';\n\nclass Logout extends React.Component {\n    render() {\n        return (\n            <AuthContext.Consumer>\n                {({ loggedIn, handleLogout }) => {\n                    if (!loggedIn) {\n                        return <Redirect to=\"/login\" />;\n                    }\n\n                    return (\n                        <React.Fragment>\n                            <Container fluid>\n                                <Header as=\"h3\" color=\"grey\"><i>Until we meet again, friend...</i></Header>\n                                <Button onClick={async () => await handleLogout()}>Logout</Button>\n                            </Container>\n                        </React.Fragment>\n                    )\n                }}\n            </AuthContext.Consumer>\n        )\n    }\n};\n\nexport default Logout;\n","import React, { useState } from 'react';\nimport {\n    Segment,\n    Input,\n    Button,\n    Form,\n    Select,\n    Label,\n    Item\n} from 'semantic-ui-react';\nimport QohParser from '../QohParser';\nimport CardImage from '../CardImage';\nimport MarketPrice from '../MarketPrice'\nimport $ from 'jquery';\nimport createToast from '../createToast';\n\nconst finishes = [\n    { key: 'NONFOIL', text: 'Nonfoil', value: 'NONFOIL' },\n    { key: 'FOIL', text: 'Foil', value: 'FOIL' }\n];\n\nconst cardConditions = [\n    { key: 'NM', text: 'Near Mint', value: 'NM' },\n    { key: 'LP', text: 'Light Play', value: 'LP' },\n    { key: 'MP', text: 'Moderate Play', value: 'MP' },\n    { key: 'HP', text: 'Heavy Play', value: 'HP' }\n];\n\n/**\n * Seeds state from props. Used to determine if cards have only foil, nonfoil, or both printings\n * from their `foil` and `nonfoil`\n * @param {Boolean} nonfoilProp\n * @param {Boolean} foilProp\n */\nfunction checkCardFinish(nonfoil, foil) {\n    if (!nonfoil && foil) {\n        return { selectedFinish: 'FOIL', finishDisabled: true };\n    } else if (nonfoil && !foil) {\n        return { selectedFinish: 'NONFOIL', finishDisabled: true };\n    } else if (nonfoil && foil) {\n        return { selectedFinish: 'NONFOIL', finishDisabled: false };\n    }\n}\n\nexport default function ReceivingCardItem(props) {\n    const [quantity, setQuantity] = useState(1);\n    const [cashPrice, setCashPrice] = useState(0);\n    const [creditPrice, setCreditPrice] = useState(0);\n    const [selectedCondition, setSelectedCondition] = useState('NM');\n    const [marketPrice, setMarketPrice] = useState(0);\n    const [selectedFinish, setSelectedFinish] = useState(\n        checkCardFinish(props.nonfoil, props.foil).selectedFinish // seed state from props\n    );\n\n    // Determines whether the select finish dropdown is permanently disabled, seeded from props\n    const finishDisabled = checkCardFinish(props.nonfoil, props.foil).finishDisabled;\n\n    const handleFinishChange = (e, { value }) => setSelectedFinish(value);\n\n    const handleConditionChange = (e, { value }) => setSelectedCondition(value);\n\n    // Validates/sanitizes user inputs by tracking the `name` attribute of the input element\n    const handlePriceChange = (e, { value }) => {\n        let val = Number(value) || 0;\n        if (val < 0) val = 0;\n\n        switch (e.target.name) {\n            case \"cashInput\":\n                setCashPrice(val);\n                break;\n            case \"marketPriceInput\":\n                setMarketPrice(val);\n                break;\n            case \"creditInput\":\n                setCreditPrice(val);\n                break;\n            default:\n                break;\n        }\n    }\n\n    const handleQuantityChange = (e, { value }) => {\n        let val = parseInt(value, 10) || 0;\n        if (val < 0) val = 0; // cannot receive less than 0\n        if (val > 50) val = 50 // set max to 50 cards per single transaction\n        setQuantity(val);\n    };\n\n    // Select the text when the input is focused, to replace the value (limits user error)\n    const handleFocus = e => e.target.select()\n\n    const handleInventoryAdd = () => {\n        props.addToList({\n            quantity,\n            cashPrice,\n            marketPrice,\n            creditPrice,\n            finishCondition: `${selectedFinish}_${selectedCondition}`, // ex. NONFOIL_NM\n            cardInfo: { ...props }\n        })\n\n        setQuantity(1);\n        setCashPrice(0);\n        setMarketPrice(0);\n        setCreditPrice(0);\n        setSelectedCondition('NM');\n        setSelectedFinish(checkCardFinish(props.nonfoil, props.foil).selectedFinish);\n\n        createToast({\n            color: 'green',\n            header: `${quantity}x ${props.name} added to buylist!`,\n            duration: 2000\n        });\n\n        // Highlight the input after successful card add\n        $('#searchBar').focus().select();\n    };\n\n    /**\n     * Determines whether the `Add` button should be disabled\n     */\n    const submitDisabled = () => {\n        const validateQty = quantity === 0 || quantity === '';\n        const validateTradeTypes = !cashPrice && !creditPrice;\n\n        if (cashPrice > 0) {\n            return validateQty || validateTradeTypes || marketPrice === 0;\n        }\n\n        return validateQty || validateTradeTypes;\n    }\n\n    const {\n        image_uris,\n        name,\n        set_name,\n        set,\n        rarity,\n        card_faces,\n        id\n    } = props;\n\n    return (\n        <Segment>\n            <Item.Group divided>\n                <Item>\n                    <Item.Image size=\"small\">\n                        <CardImage\n                            image_uris={image_uris}\n                            card_faces={card_faces}\n                            hover={false}\n                        />\n                    </Item.Image>\n                    <Item.Content>\n                        <Item.Header as='h3'>\n                            {name}\n                            {' '}\n                            <i\n                                className={`ss ss-fw ss-${set} ss-${rarity}`}\n                                style={{ fontSize: '30px' }}\n                            />\n                            <Label color=\"grey\">\n                                {set_name} ({String(set).toUpperCase()})\n                                </Label>\n                            <QohParser inventoryQty={props.inventoryQty} />\n                            {' '}\n                            <MarketPrice id={id} finish={selectedFinish} />\n                        </Item.Header>\n                        <Item.Description>\n                            <Form>\n                                <Form.Group widths=\"12\">\n                                    <Form.Field\n                                        control={Input}\n                                        type=\"number\"\n                                        label=\"Quantity\"\n                                        value={quantity}\n                                        onChange={handleQuantityChange}\n                                        onFocus={handleFocus}\n                                    />\n                                    <Form.Field\n                                        label=\"Credit Price\"\n                                        name=\"creditInput\"\n                                        control={Input}\n                                        type=\"number\"\n                                        value={creditPrice}\n                                        onChange={handlePriceChange}\n                                        onFocus={handleFocus}\n                                        step=\"0.25\"\n                                    />\n                                    <Form.Field\n                                        label=\"Cash Price\"\n                                        name=\"cashInput\"\n                                        control={Input}\n                                        type=\"number\"\n                                        value={cashPrice}\n                                        onChange={handlePriceChange}\n                                        onFocus={handleFocus}\n                                        step=\"0.25\"\n                                    />\n                                    <Form.Field\n                                        label=\"Market Price\"\n                                        name=\"marketPriceInput\"\n                                        control={Input}\n                                        type=\"number\"\n                                        value={marketPrice}\n                                        onChange={handlePriceChange}\n                                        onFocus={handleFocus}\n                                        step=\"0.25\"\n                                        disabled={cashPrice === 0}\n                                    />\n                                </Form.Group>\n                                <Form.Group widths=\"12\">\n                                    <Form.Field\n                                        label=\"Finish\"\n                                        control={Select}\n                                        value={selectedFinish}\n                                        options={finishes}\n                                        disabled={finishDisabled}\n                                        onChange={handleFinishChange}\n                                    />\n                                    <Form.Field\n                                        label=\"Condition\"\n                                        control={Select}\n                                        value={selectedCondition}\n                                        options={cardConditions}\n                                        onChange={handleConditionChange}\n                                    />\n                                    <Form.Button\n                                        label=\"Add to List?\"\n                                        control={Button}\n                                        primary\n                                        disabled={submitDisabled()}\n                                        onClick={handleInventoryAdd}\n                                    >\n                                        Add\n                                    </Form.Button>\n                                </Form.Group>\n                            </Form>\n                        </Item.Description>\n                    </Item.Content>\n                </Item>\n            </Item.Group>\n        </Segment>\n    );\n}","import React from 'react';\nimport ReceivingCardItem from './ReceivingSearchItem';\n\nexport default function ReceivingCardList({ cards, addToList }) {\n    return cards.map(c => {\n        return <ReceivingCardItem\n            key={c.id}\n            {...c}\n            addToList={addToList}\n        />\n    });\n}\n","import React, { useState } from 'react';\nimport { Table, Button, Label, Icon } from 'semantic-ui-react';\nimport Price from '../Price';\n\n// Defines whether it uses cash or credit for trade types\nconst TRADE_TYPE = { CASH: 'CASH', CREDIT: 'CREDIT' };\n\nexport default function ReceivingListItem({ name, set, rarity, cashPrice, creditPrice, finishCondition, uuid_key, removeFromList, tradeType, activeTradeType }) {\n    const { CASH, CREDIT } = TRADE_TYPE;\n    const [hovered, setHovered] = useState(false);\n\n    return (\n        <Table.Row>\n            <Table.Cell><b>{name}</b></Table.Cell>\n            <Table.Cell singleLine>\n                <i\n                    className={`ss ss-fw ss-${set} ss-${rarity}`}\n                    style={{ fontSize: '20px' }}\n                />\n                <Label color=\"grey\">{set.toUpperCase()}</Label>\n            </Table.Cell>\n            <Table.Cell>\n                <div style={{ whiteSpace: 'noWrap' }}>\n                    Cash <b><Price num={cashPrice} /></b>\n                </div>\n                <div style={{ whiteSpace: 'noWrap' }}>\n                    Credit <b><Price num={creditPrice} /></b>\n                </div>\n                <p>{finishCondition.split('_')[0]} | {finishCondition.split('_')[1]}</p>\n            </Table.Cell>\n            <Table.Cell>\n                <Button\n                    active={tradeType === CASH}\n                    color={tradeType === CASH ? 'primary' : null}\n                    onClick={() => activeTradeType(uuid_key, CASH)}\n                    disabled={cashPrice === 0}\n                    icon\n                >\n                    <Icon name=\"dollar sign\"></Icon>\n                </Button>\n            </Table.Cell>\n            <Table.Cell>\n                <Button\n                    active={tradeType === CREDIT}\n                    color={tradeType === CREDIT ? 'primary' : null}\n                    onClick={() => activeTradeType(uuid_key, CREDIT)}\n                    disabled={creditPrice === 0}\n                    icon\n                >\n                    <Icon name=\"credit card outline\"></Icon>\n                </Button>\n            </Table.Cell>\n            <Table.Cell>\n                <Button\n                    icon=\"cancel\"\n                    circular\n                    onClick={() => removeFromList(uuid_key)}\n                    onMouseOver={() => setHovered(true)}\n                    onMouseOut={() => setHovered(false)}\n                    color={hovered ? 'red' : null}\n                >\n                </Button>\n            </Table.Cell>\n        </Table.Row>\n    );\n}","import React from 'react';\nimport _ from 'lodash';\nimport Price from '../Price';\nimport { Table } from 'semantic-ui-react';\n\n// Am I crazy or is this logic really convoluted?\n// Perhaps look at this down the line for improvement...\nexport default function CashReport({ receivingList, closeCashModal }) {\n    // If id, cashPrice and marketPrice are the same, goes in one bucket\n    const countByPriceAndID = _.chain(receivingList)\n        .filter(c => c.tradeType === 'CASH')\n        .map(c => {\n            // Note: We're creating a unique uuid-esque comparator string based on:\n            // `id`, `cashPrice`, `marketPrice`, and `finishCondition`\n            return { ...c, temp_uuid: `${c.id}-${c.cashPrice}-${c.marketPrice}-${c.finishCondition}` }\n        })\n        .groupBy(\"temp_uuid\")\n        .mapValues(val => val.length)\n        .value();\n\n    const uniqLineItems = _.chain(receivingList)\n        .filter(c => c.tradeType === 'CASH')\n        .map(c => {\n            return { ...c, temp_uuid: `${c.id}-${c.cashPrice}-${c.marketPrice}-${c.finishCondition}` }\n        })\n        .uniqBy('temp_uuid')\n        .value();\n\n    const mergedWithQty = uniqLineItems.map(c => {\n        return { ...c, tradeQty: countByPriceAndID[c.temp_uuid] } // Add a trade quantity referencing the previous count\n    });\n\n    const totalCashOut = _.chain(receivingList)\n        .filter(c => c.tradeType === 'CASH')\n        .sumBy(c => c.cashPrice)\n        .value();\n\n    return <React.Fragment>\n        <div id=\"cash-report\">\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell colSpan={6}>Employee Name:</Table.HeaderCell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.HeaderCell>Card Name</Table.HeaderCell>\n                        <Table.HeaderCell>Market Value</Table.HeaderCell>\n                        <Table.HeaderCell>Condition</Table.HeaderCell>\n                        <Table.HeaderCell>Quantity</Table.HeaderCell>\n                        <Table.HeaderCell>Cash Offer</Table.HeaderCell>\n                        <Table.HeaderCell>Cash Out</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {mergedWithQty.map(c => {\n                        return <Table.Row key={c.temp_uuid}>\n                            <Table.Cell>{c.name}</Table.Cell>\n                            <Table.Cell><Price num={c.marketPrice} /></Table.Cell>\n                            <Table.Cell>{c.finishCondition}</Table.Cell>\n                            <Table.Cell>{c.tradeQty}</Table.Cell>\n                            <Table.Cell><Price num={c.cashPrice} /></Table.Cell>\n                            <Table.Cell><Price num={c.tradeQty * c.cashPrice} /></Table.Cell>\n                        </Table.Row>\n                    })}\n                </Table.Body>\n                <Table.Footer>\n                    <Table.HeaderCell colSpan={6}>Total: <Price num={totalCashOut} /></Table.HeaderCell>\n                </Table.Footer>\n            </Table>\n        </div>\n    </React.Fragment>\n}","import React, { useState } from 'react';\nimport { Segment, Statistic, Button, Modal, Header } from 'semantic-ui-react';\nimport Price from '../Price';\nimport CashReport from './CashReport';\nimport printCashReport from './printCashReport';\n\nconst TRADE_TYPE = { CASH: 'CASH', CREDIT: 'CREDIT' };\n\nexport default function ReceivingListTotals({ receivingList, selectAll, commitToInventory }) {\n    const { CASH, CREDIT } = TRADE_TYPE;\n    const [loading, setLoading] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n    const [showCashModal, setShowCashModal] = useState(false);\n\n    const openCashModal = () => setShowCashModal(true);\n\n    const closeCashModal = () => setShowCashModal(false);\n\n    const submitToInventory = async () => {\n        setLoading(true);\n        await commitToInventory();\n        setLoading(false);\n    }\n\n    const handlePrintCashReport = () => {\n        setShowCashModal(false); // Close the modal so users don't have to after printing in new tab\n        printCashReport();\n    }\n\n    const cashTotal = receivingList.reduce((acc, curr) => {\n        let cashVal = curr.tradeType === CASH ? curr.cashPrice : 0;\n        return acc + cashVal;\n    }, 0);\n\n    const creditTotal = receivingList.reduce((acc, curr) => {\n        let creditVal = curr.tradeType === CREDIT ? curr.creditPrice : 0;\n        return acc + creditVal;\n    }, 0);\n\n    return <Segment>\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <Button.Group>\n                <Button onClick={() => selectAll(TRADE_TYPE.CASH)}>Select all cash</Button>\n                <Button.Or />\n                <Button onClick={() => selectAll(TRADE_TYPE.CREDIT)}>Select all credit</Button>\n            </Button.Group>\n            <div>\n                <Statistic size=\"mini\">\n                    <Statistic.Label>Cash Due:</Statistic.Label>\n                    <Statistic.Value><Price num={cashTotal} /></Statistic.Value>\n                </Statistic>\n                <Statistic size=\"mini\">\n                    <Statistic.Label>Credit Due:</Statistic.Label>\n                    <Statistic.Value><Price num={creditTotal} /></Statistic.Value>\n                </Statistic>\n            </div>\n        </div>\n\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <Modal\n                open={showCashModal}\n                trigger={\n                    <Button\n                        color={cashTotal > 0 ? 'green' : null}\n                        disabled={cashTotal === 0}\n                        onClick={openCashModal}>\n                        Generate cash report\n                    </Button>\n                }>\n                <Modal.Content>\n                    <CashReport\n                        receivingList={receivingList}\n                        closeCashModal={closeCashModal} />\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={handlePrintCashReport} color=\"primary\">Print Report</Button>\n                    <Button onClick={closeCashModal}>Cancel</Button>\n                </Modal.Actions>\n            </Modal>\n\n            <Modal\n                closeOnDimmerClick={false}\n                trigger={\n                    <Button\n                        color=\"primary\"\n                        disabled={receivingList.length === 0}\n                        onClick={() => setShowModal(true)}>\n                        Commit to inventory\n                    </Button>\n                }\n                open={showModal}\n                onClose={() => setShowModal(false)}\n                basic style={{ marginTop: '50px' }} >\n                <Header>Confirm receipt of new inventory?</Header>\n                <Modal.Content>\n                    <p><b>Pressing 'Submit' will commit the following items to inventory:</b></p>\n                    <ul>\n                        {receivingList.map(c => {\n                            return <li key={c.uuid_key}>{c.name} | {c.set_name}({c.set.toUpperCase()})</li>\n                        })}\n                    </ul>\n                    <div>\n                        <p><b>The customer is owed: </b></p>\n                        <ul>\n                            {cashTotal > 0 ? <li><Price num={cashTotal} /> in cold, hard cash</li> : null}\n                            {creditTotal > 0 ? <li><Price num={creditTotal} /> in store credit</li> : null}\n                        </ul>\n                    </div>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button basic color=\"red\" inverted onClick={() => setShowModal(false)}>Cancel</Button>\n                    <Button color=\"green\" inverted loading={loading} disabled={loading} onClick={submitToInventory}>Submit</Button>\n                </Modal.Actions>\n            </Modal>\n        </div>\n    </Segment>\n}","const printStyle = `\n    body {\n        font-family: 'helvetica neue', helvetica, arial, sans-serif;\n    }\n\n    table {\n        table-layout: fixed;\n        width: 100%;\n        border-collapse: collapse;\n        border: 1px solid gray;\n        text-align: left;\n    }\n\n    thead th:nth-child(1) {\n        width: 30%;\n    }\n\n    thead th:nth-child(2) {\n        width: 20%;\n    }\n\n    thead th:nth-child(3) {\n        width: 15%;\n    }\n\n    thead th:nth-child(4) {\n        width: 35%;\n    }\n\n    th, td {\n        border: 1px solid #ddd;\n        padding: 10px;\n    }\n\n    tfoot {\n        text-align: right !important;\n    }\n`;\n\n/**\n     * We're creating a new tab here for the modal table and writing CSS to it - not the most elegant solution from a UX and\n     * code standpoint, but time was of the essence for this release. Refactor down the road.\n     * \n     * The id cash-report is found on the cash report table\n     */\nexport default function printCashReport() {\n    const divToPrint = document.getElementById('cash-report');\n    const popup = window.open('', '_blank');\n    popup.document.open();\n    popup.document.write(`<html>`);\n    popup.document.write(`<head>`);\n    popup.document.write(`<title>Cash Report</title>`)\n    popup.document.write(`<style>${printStyle}</style>`);\n    popup.document.write(`</head>`);\n    popup.document.write(`<body onload=\"window.print()\">`);\n    popup.document.write(`${divToPrint.innerHTML}`);\n    popup.document.write(`</body>`);\n    popup.document.write(`</html>`);\n    popup.document.close();\n}","import React, { useState } from 'react';\nimport SearchBar from '../SearchBar';\nimport axios from 'axios';\nimport makeAuthHeader from '../makeAuthHeader';\nimport ReceivingSearchList from './ReceivingSearchList';\nimport { Segment, Header, Icon, Grid, Divider, Table } from 'semantic-ui-react'\nimport { ADD_CARD_TO_INVENTORY, GET_CARD_QTY_FROM_INVENTORY, GET_SCRYFALL_BULK_BY_TITLE } from '../api_resources';\nimport ReceivingListItem from './ReceivingListItem';\nimport ReceivingListTotals from './ReceivingListTotals';\nimport createToast from '../createToast';\nimport _ from 'lodash';\nimport uuid from 'uuid'; // Used to crete unique keys for the list\n\n// Defines whether the receivingListItem uses cash or credit for trade types\nconst TRADE_TYPE = { CASH: 'CASH', CREDIT: 'CREDIT' };\n\nfunction DefaultPlaceholder({ active, headerText }) {\n    return (\n        <React.Fragment>\n            {active &&\n                <Segment placeholder>\n                    <Header icon>\n                        <Icon name=\"search\" />\n                        <em>{headerText}</em>\n                    </Header>\n                </Segment>}\n        </React.Fragment>\n    )\n}\n\nexport default function Receiving() {\n    const [searchResults, setSearchResults] = useState([]);\n    const [receivingList, setReceivingList] = useState([]);\n\n    /**\n     * Fetches cards from the DB by title when a user selects a title after querying.\n     * This function merges the data (inventory quantity and card objects) from two endpoints into one array.\n     * \n     * @param {String} term - the search term\n     */\n    const handleSearchSelect = async term => {\n        try {\n            const { data } = await axios.get(\n                GET_SCRYFALL_BULK_BY_TITLE,\n                {\n                    params: { title: term },\n                    headers: makeAuthHeader()\n                }\n            );\n\n            const ids = data.map(el => el.id);\n\n            // Fetches only the in-stock qty of a card tied to an `id`\n            const inventoryRes = await axios.post(\n                GET_CARD_QTY_FROM_INVENTORY,\n                { scryfallIds: ids },\n                { headers: makeAuthHeader() }\n            );\n\n            const mergedData = data.map(d => {\n                return { ...d, inventoryQty: inventoryRes.data[d.id] } // inventoryQty will be `undefined` if no qty (prop not found)\n            });\n\n            setSearchResults(mergedData);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    /**\n     * Adds a card to the receiving list, with a unique uuid for identification\n     */\n    const addToList = ({ quantity, cashPrice, marketPrice, creditPrice, finishCondition, cardInfo }) => {\n\n        const previousState = [...receivingList];\n        let initialTradeType = TRADE_TYPE.CREDIT;\n\n        // If the creditPrice is 0 default to cash\n        if (!creditPrice) initialTradeType = TRADE_TYPE.CASH;\n\n        // Each line-item represents one card. Use _.times() to repeat\n        const newState = previousState.concat(_.times(quantity, idx => {\n            return { cashPrice, marketPrice, creditPrice, finishCondition, ...cardInfo, uuid_key: uuid(), tradeType: initialTradeType }\n        }))\n\n        setReceivingList(_.sortBy(newState, 'name'));\n    }\n\n    /**\n     * Removes a card from the receiving list using the uuid\n     */\n    const removeFromList = (uuid_key) => {\n        const copiedState = [...receivingList];\n        _.remove(copiedState, e => e.uuid_key === uuid_key); // Mutates array\n        setReceivingList(copiedState);\n    }\n\n    /**\n     * Determines whether line-items use cash or credit. Changes the tradeType by reference in the receivingList array\n     * which changes the button color/active prop in ReceivingListItem\n     */\n    const activeTradeType = (uuid_key, tradeType) => {\n        const previousState = [...receivingList];\n        const card = previousState.find(e => e.uuid_key === uuid_key);\n        card.tradeType = TRADE_TYPE[tradeType];\n        setReceivingList(previousState);\n    }\n\n    /**\n     * Selects all items by their tradeType, if possible\n     * \n     * @param {String} tradeType - `CASH` or `CREDIT`\n     */\n    const selectAll = (tradeType) => {\n        const oldState = [...receivingList];\n        const { CASH, CREDIT } = TRADE_TYPE;\n\n        oldState.forEach((card, idx, arr) => {\n            if (card.tradeType !== tradeType) { // if the line-items tradeType is not the one passed\n                const otherType = card.tradeType === CASH ? CREDIT : CASH; // determine the tradeType and set it to other one (toggle)\n                const otherTypeValue = otherType === CASH ? card.cashPrice : card.creditPrice; // see what the value of the other is\n                // if the other is greater than 0, we mutate array in-place\n                if (otherTypeValue > 0) arr[idx].tradeType = otherType;\n            }\n        })\n\n        setReceivingList(oldState);\n    }\n\n    /**\n     * Persists all passed cards to inventory via Promise.all() using the addCardToInventory backend method\n     */\n    const commitToInventory = async () => {\n        const stateWithUnremovedProps = [...receivingList];\n\n        // Need to remove all the props we've been adding to the card objects\n        // when passing them to other components for state management.\n        const removedProps = stateWithUnremovedProps.map(c => {\n            return _.omit(c, [\n                \"cashPrice\",\n                \"creditPrice\",\n                \"marketPrice\",\n                \"inventoryQty\",\n                \"addToList\",\n                \"uuid_key\",\n                \"tradeType\",\n                \"activeTradeType\"\n            ])\n        })\n\n        try {\n            const promises = removedProps.map(async c => {\n                return await axios.post(ADD_CARD_TO_INVENTORY, {\n                    quantity: 1,\n                    type: c.finishCondition,\n                    cardInfo: _.omit(c, 'finishCondition') // remove `finishCondition` finally\n                }, { headers: makeAuthHeader() });\n            })\n\n            await Promise.all(promises);\n\n            setSearchResults([]);\n            setReceivingList([]);\n\n            createToast({\n                color: 'green',\n                header: `${receivingList.length} cards were added to inventory!`,\n                duration: 2000\n            });\n        } catch (e) {\n            console.log(e);\n            createToast({\n                color: 'red',\n                header: `Something went wrong...`,\n                duration: 2000\n            });\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <SearchBar handleSearchSelect={handleSearchSelect} />\n            <br />\n            <Grid stackable={true}>\n                <Grid.Row>\n                    <Grid.Column width=\"10\">\n                        <Header as=\"h2\" style={{ display: \"inline-block\" }}>Card Search</Header>\n                        <Divider />\n                        <DefaultPlaceholder\n                            active={!searchResults.length}\n                            headerText={\"So many cards, so little time.\"}\n                        />\n                        <ReceivingSearchList\n                            cards={searchResults}\n                            addToList={addToList}\n                        />\n                    </Grid.Column>\n                    <Grid.Column width=\"6\">\n                        <Header as=\"h2\" style={{ display: \"inline-block\" }}>Buylist</Header>\n                        {receivingList.length > 0 &&\n                            <Header floated=\"right\" style={{ display: \"inline-block\" }}>Total Cards: {receivingList.length}</Header>\n                        }\n                        <Divider />\n                        <DefaultPlaceholder\n                            active={!receivingList.length}\n                            headerText={\"If you receive it, they will come.\"}\n                        />\n                        {receivingList.length > 0 && <Table compact size=\"small\">\n                            <Table.Body>\n                                {receivingList.map(({ name, set, rarity, cashPrice, creditPrice, finishCondition, uuid_key, tradeType }) => {\n                                    return <ReceivingListItem\n                                        name={name}\n                                        set={set}\n                                        rarity={rarity}\n                                        cashPrice={cashPrice}\n                                        creditPrice={creditPrice}\n                                        finishCondition={finishCondition}\n                                        uuid_key={uuid_key}\n                                        removeFromList={removeFromList}\n                                        tradeType={tradeType}\n                                        activeTradeType={activeTradeType}\n                                        key={uuid_key}\n                                    />\n                                })}\n                            </Table.Body>\n                        </Table>}\n                        {receivingList.length > 0 && <ReceivingListTotals\n                            receivingList={receivingList}\n                            selectAll={selectAll}\n                            commitToInventory={commitToInventory}\n                        />}\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './Home';\nimport Sale from './Sale';\nimport BrowseSales from './BrowseSales';\nimport PublicInventory from './PublicInventory';\nimport DeckboxClone from './DeckboxClone';\nimport Login from './Login';\nimport Logout from './Logout';\nimport Receiving from './Receiving/Receiving'\n\nexport default function Main() {\n    return (\n        <div style={{ paddingTop: '52.63px', marginLeft: '20px', marginRight: '20px' }}>\n            <br />\n\n            <Switch>\n                <Route exact path=\"/manage-inventory\" component={Home} />\n                <Route exact path=\"/new-sale\" component={Sale} />\n                <Route exact path=\"/browse-sales\" component={BrowseSales} />\n                <Route exact path=\"/browse-inventory\" component={DeckboxClone} />\n                <Route exact path=\"/public-inventory\" component={PublicInventory} />\n                <Route exact path=\"/receiving\" component={Receiving} />\n                <Route exact path=\"/login\" component={Login} />\n                <Route exact path=\"/logout\" component={Logout} />\n            </Switch>\n        </div>\n    )\n}","import React from 'react';\nimport ballLogo from './logos/magic-ball.png'\nimport { Menu, Icon, Dropdown } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { AuthContext } from './AuthProvider';\n\nconst style = {\n    background: \"linear-gradient(#2185d0, #206ac6)\",\n    boxShadow: '0 3px 5px 0 rgba(0,0,0,.25)'\n}\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <AuthContext.Consumer>\n                {({ loggedIn }) => {\n                    return (\n                        <Menu inverted fixed=\"top\" style={style}>\n                            <Menu.Item>\n                                <img src={ballLogo} style={{ marginRight: '7px' }} alt=\"logo\" />\n                                <span><h3>Clubhouse Collection</h3></span>\n                            </Menu.Item>\n                            <Menu.Menu position=\"right\">\n                                <Menu.Item position=\"right\" as={Link} to=\"/public-inventory\">Search</Menu.Item>\n                                {loggedIn && <Dropdown item icon=\"bars\">\n                                    <Dropdown.Menu>\n                                        <React.Fragment>\n                                            <Dropdown.Item as={Link} to=\"/manage-inventory\"><Icon name=\"plus\" color=\"blue\" />Manage Inventory</Dropdown.Item>\n                                            <Dropdown.Item as={Link} to=\"/new-sale\" ><Icon name=\"dollar sign\" color=\"blue\" />New Sale</Dropdown.Item>\n                                            <Dropdown.Item as={Link} to=\"/receiving\" ><Icon name=\"list alternate outline\" color=\"blue\" />Receiving</Dropdown.Item>\n                                            <Dropdown.Divider />\n                                            <Dropdown.Item as={Link} to=\"/browse-inventory\" ><Icon name=\"box\" color=\"blue\" />Browse Inventory</Dropdown.Item>\n                                            <Dropdown.Item as={Link} to=\"/browse-sales\" ><Icon name=\"eye\" color=\"blue\" />Browse Sales</Dropdown.Item>\n                                            <Dropdown.Divider />\n                                            <Dropdown.Item as={Link} to=\"/logout\" ><Icon name=\"log out\" color=\"blue\" />Logout</Dropdown.Item>\n                                        </React.Fragment>\n                                    </Dropdown.Menu>\n                                </Dropdown>}\n                                {!loggedIn && <Menu.Item position=\"right\" as={Link} to=\"/login\">Log in</Menu.Item>}\n                            </Menu.Menu>\n                        </Menu >\n                    );\n                }}\n            </AuthContext.Consumer>\n        );\n    }\n}\n\nexport default Header;\n","import React from 'react';\nimport Main from './Main';\nimport Header from './Header';\nimport AuthProvider from './AuthProvider';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <AuthProvider>\n                <Header />\n                <Main />\n            </AuthProvider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n    <HashRouter basename='/'>\n        <App />\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}