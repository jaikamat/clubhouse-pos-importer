{"version":3,"sources":["Header/logos/magic-ball.png","utils/api_resources.ts","utils/makeAuthHeader.ts","context/loginQuery.ts","context/AuthProvider.tsx","Header/AppVersion.tsx","Header/Header.tsx","common/autocompleteQuery.ts","common/SearchBar.tsx","ManageInventory/allLocationInventoryQuery.ts","ManageInventory/AllLocationInventory.tsx","utils/createDisplayName.ts","utils/ScryfallCard.ts","common/cardSearchQuery.ts","context/InventoryContext.tsx","common/createToast.tsx","common/CardImage.tsx","utils/dropdownOptions.ts","utils/checkCardFinish.ts","utils/finishCondition.ts","utils/parseQoh.ts","common/QohLabels.tsx","common/Language.tsx","common/marketPriceQuery.ts","common/MarketPrice.tsx","ui/CardHeader.tsx","ManageInventory/ManageInventoryListItem.tsx","ManageInventory/ManageInventory.tsx","context/SaleContext.tsx","utils/sortSaleList.ts","NewSale/BrowseCardItem.tsx","NewSale/BrowseCardList.tsx","utils/price.ts","common/Price.tsx","common/TooltipImage.tsx","NewSale/SaleLineItem.tsx","utils/sum.ts","NewSale/SalePriceTotal.tsx","NewSale/FinishSale.tsx","NewSale/CustomerSaleList.tsx","NewSale/PrintList.tsx","NewSale/SuspendedSale.tsx","utils/pluralize.ts","common/TotalCardsLabel.tsx","NewSale/Sale.tsx","utils/formatDate.ts","context/ReceivingContext.tsx","BrowseSales/SalesListItem.tsx","BrowseSales/SalesList.tsx","BrowseSales/browseSalesQuery.ts","BrowseSales/BrowseSales.tsx","PublicInventory/PublicCardItem.tsx","PublicInventory/PublicInventory.tsx","DeckboxClone/DeckboxCloneForm.js","DeckboxClone/DeckboxCloneRow.js","DeckboxClone/DeckboxClone.js","Login/Login.tsx","Logout/Logout.tsx","context/receivingQuery.tsx","Receiving/ReceivingSearchItem.tsx","Receiving/DefaultPlaceholder.tsx","Receiving/ReceivingListItem.tsx","Receiving/CashReport.tsx","Receiving/ReceivingListModal.tsx","Receiving/ReceivingListTotals.tsx","Receiving/printCashReport.ts","Receiving/ReceivingList.tsx","Receiving/Receiving.tsx","AuthenticatedRoute.tsx","LandingPage/clubhouse_products.png","LandingPage/tables.jpg","LandingPage/learn_to_play.jpg","LandingPage/ch2.jpg","LandingPage/Home.tsx","BrowseReceiving/browseReceivingQuery.ts","BrowseReceiving/BrowseReceiving.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["REACT_APP_ENVIRONMENT","process","env","getPrefix","FINISH_SALE","GET_CARD_FROM_ALL_LOCATIONS","ADD_CARD_TO_INVENTORY","RECEIVE_CARDS","GET_CARDS_BY_FILTER","GET_SET_NAMES","SUSPEND_SALE","LOGIN","GET_SALES_BY_TITLE","GET_RECEIVING_LIST","GET_CARDS_WITH_INFO_PUBLIC","GET_CARDS_WITH_INFO","AUTOCOMPLETE","GET_LIVE_PRICE","makeAuthHeader","Authorization","localStorage","getItem","loginQuery","username","password","currentLocation","a","axios","post","toLowerCase","headers","data","AuthContext","React","createContext","loggedIn","currentUser","handleLogout","handleLogin","Promise","useAuthContext","useContext","AuthProvider","children","useState","setLoggedIn","setCurrentLocation","setCurrentUser","token","setItem","console","log","Provider","value","removeItem","VersionNumber","styled","display","alignItems","padding","color","AppVersion","version","StyledMenu","Menu","boxShadow","Header","location","pathname","useLocation","inverted","fixed","Item","as","Link","replace","to","src","ballLogo","style","marginRight","alt","position","active","Dropdown","item","icon","Icon","name","Divider","autocompleteQuery","cardName","get","params","title","SearchBar","handleSearchSelect","onBlur","loading","setLoading","results","setResults","handleResultSelect","_","result","setTimeout","$","select","Search","onSearchChange","debounce","length","formattedResults","map","el","leading","trailing","onResultSelect","placeholder","selectFirstResult","id","onFocus","e","target","allLocationInventoryQuery","StyledContainer","FlexContainer","marginLeft","QohLabel","label","Label","undefined","image","Detail","AllLocationInventory","searchResults","ch1","foilQty","nonfoilQty","ch2","quantities","setQuantities","useEffect","Loader","inline","size","sub","createDisplayName","card","frame_effects","border_color","lang","set","foil","nonfoil","promo_types","displayName","includes","toUpperCase","InventoryCard","qoh","quantity","qtyToSell","finishCondition","price","printed_name","set_name","rarity","image_uris","card_faces","colors","type_line","display_name","cardImage","color_identity","tcgplayer_id","this","_getCardImage","_createDisplayName","myImage","normal","cardSearchQuery","inStockOnly","matchInStock","d","InventoryContext","changeCardQuantity","InventoryProvider","setSearchResults","term","cards","copiedState","targetIndex","findIndex","ToastContainer","Message","createToast","header","message","duration","toaster","notify","compact","StyledImage","Image","zIndex","transition","CardImage","hover","hovered","setHovered","onMouseOver","onMouseOut","transform","finishes","key","text","cardConditions","checkCardFinish","selectedFinish","finishDisabled","displayFinishCondition","FOIL_NM","FOIL_LP","FOIL_MP","FOIL_HP","NONFOIL_NM","NONFOIL_LP","NONFOIL_MP","NONFOIL_HP","parseQoh","createInventoryLineItems","inventoryQty","matchStrings","matches","filter","m","LabelWithPopup","popupLineItems","Popup","content","msg","trigger","QohLabels","foilQuantity","nonfoilQuantity","foilLineItems","nonfoilLineItems","LANG_CODES","en","es","fr","de","it","pt","ja","ko","ru","zhs","zht","he","la","grc","ar","sa","px","Language","languageCode","marketPriceQuery","scryfallId","Axios","marketPrices","medianPrices","LabelStyle","props","displayPrice","toFixed","MarketPrice","finish","round","showMid","market","setMarket","median","setMedian","isFoil","_isMounted","Number","n","loader","Math","ceil","SetIcon","fontSize","TcgPriceButton","tcgId","tcgUrl","Button","disabled","labelPosition","href","CardHeader","className","ManageInventoryListItem","setSelectedFinish","initialFormValues","selectedCondition","onSubmit","resetForm","parseInt","cardInfo","focus","Segment","Group","divided","Content","Description","initialValues","validate","errors","isInteger","initialErrors","values","handleSubmit","setFieldValue","isSubmitting","isValid","Form","Field","control","Input","type","onChange","Select","options","primary","onClick","HeaderContainer","justifyContent","ManageInventory","defaultSuspendedSale","_id","notes","list","SaleContext","saleListCards","suspendedSale","addToSaleList","removeFromSaleList","restoreSale","suspendSale","deleteSuspendedSale","finalizeSale","resetSaleState","SaleProvider","setSaleListCards","setSuspendedSale","modeledData","c","response","customerName","delete","saleList","ops","saleID","sale_data","Sale","oldState","newCard","clone","Object","assign","idx","splice","push","ORDER","helpSort","arrayConst","colorsLength","cardFace","sort","b","localeCompare","indexOf","sortSaleList","newState","createConditionOptions","removeZeroedQuantites","pickBy","p","entries","conditionFinish","qty","split","join","createInitialSelectedFinish","keysMapped","keys","k","uniq","BrowseCardItem","selectedFinishCondition","setSelectedFinishCondition","selectedFinishConditionQty","setSelectedFinishConditionQty","quantityToSell","setQuantityToSell","setPrice","conditionOptions","setConditionOptions","selection","numVal","isNaN","step","BrowseCardList","val","DisplayPrice","num","TooltipImage","image_uri","posX","left","width","height","borderRadius","background","BoldHelp","SaleLineItem","mouseInside","setMouseInside","mousePos","setMousePos","Grid","verticalAlign","Column","tablet","computer","onMouseEnter","rect","getBoundingClientRect","X","clientX","x","onMouseMove","onMouseLeave","Price","textAlign","circular","sum","nums","reduce","acc","curr","SalePriceTotal","total","FinishSale","submit","setSubmit","showModal","setShowModal","handleFinalizeSale","modalTrigger","floated","Modal","basic","open","Actions","CustomerSaleList","clearing","PrintWrapper","div","PrintList","componentRef","useRef","handlePrint","useReactToPrint","current","ref","slc","ClearMargin","CharLimit","SuspendedSale","saleListLength","sales","setSales","setSaleID","modalOpen","setModalOpen","setCustomerName","setNotes","setDisabled","suspendBtn","restoreBtn","deleteBtn","loadingBtn","setLoadingBtn","getSales","clearFields","submitSuspendSale","submitRestoreSale","submitDeleteSale","Fragment","columns","stackable","relaxed","substring","TextArea","fluid","s","info","pluralize","word","TotalCardsLabel","listLength","ButtonContainer","searchTerm","setSearchTerm","Row","formatDate","Trade","date","moment","format","SalesListItem","sale","card_list","quantitySold","Table","Cell","createTime","SalesList","celled","unstackable","HeaderCell","Body","browseSalesQuery","BrowseSales","salesList","setSalesList","setCardName","Wrapper","InventoryWrapper","InventoryRow","ImageWrapper","cardImageRatio","SurImage","PublicCardItem","GridContainer","gridGap","gridTemplateColumns","justifyItems","StyledFormGroup","initialState","selectedLocation","initialFormState","locationOptions","PublicInventory","state","setState","formSubmitted","setFormSubmitted","fetchCards","widths","Subheader","formatDropdownOptions","priceFilterDropdownOptions","finishDropdownOptions","sortByDropdownOptions","sortByDirectionDropdownOptions","sortByColorDropdownOptions","colorSpecificityDropdownOptions","typeLineOptions","frameOptions","setName","priceNum","priceFilter","sortBy","colorsArray","sortByDirection","colorSpecificity","typeLine","setNames","frame","DeckboxCloneForm","editionDropdownOptions","handleSearchBlur","handleChange","handleDropdownChange","setNameOptions","concatWithBlankOption","concat","search","multiple","defaultValue","Component","conditionMap","NM","LP","MP","HP","DeckboxCloneRow","mouseX","mouseY","mouseEnter","offsetLeft","clientY","offsetTop","mouseLeave","mouseMove","inventory","condition","cursor","v","DeckboxClone","count","currentPage","numPages","pageArray","isLoading","cachedFilters","showPages","searchTouched","fetchData","filters","page","pages","range","slice","handlePage","showLeftPageButtons","showRightPageButtons","Container","Dimmer","marginTop","secondary","striped","colSpan","Footer","LoginContainer","FormContainer","Login","raised","Logout","receivingQuery","TRADE_TYPES","CASH","Cash","CREDIT","Credit","defaultContext","receivingList","addToList","removeFromList","activeTradeType","selectAll","commitToInventory","resetSearchResults","ReceivingContext","ReceivingProvider","setReceivingList","isDefined","cardsToCommit","marketPrice","cashPrice","creditPrice","tradeType","previousState","cardsToAdd","Array","uuid_key","uuid","remove","selectType","ReceivingSearchItem","setQuantity","setCashPrice","setCreditPrice","setSelectedCondition","setMarketPrice","handlePriceChange","handleFocus","validateQty","validateTradeTypes","submitDisabled","DefaultPlaceholder","TRADE_TYPE","ReceivingListItem","whiteSpace","CashReport","countByPriceAndID","chain","temp_uuid","groupBy","mapValues","mergedWithQty","uniqBy","tradeQty","totalCashOut","sumBy","ReceivingListModal","cashTotal","creditTotal","submitToInventory","closeOnDimmerClick","onClose","FlexRow","FlexCol","StatisticColor","Statistic","ReceivingListTotals","showCashModal","setShowCashModal","Or","divToPrint","document","getElementById","popup","window","write","innerHTML","close","printCashReport","Value","ReceivingList","Receiving","AdminOnly","AdminRoute","light","main","dark","primaryRgb","desktopMediaQuery","tabletMediaQuery","HeroImageContainer","rounded","LocationImageContainer","ImageGradient","backgroundImage","ImageGradient2","backgroundColor","HeroText","HeaderText","h1","SectionText","SubheaderText","flexDirection","ServicesContainer","gridTemplateRows","LocationsContainer","LocationContainer","TextWidth","IconContainer","SectionDivider","bottom","paddingLeft","paddingBottom","paddingRight","paddingTop","justify","Home","learn_to_play","clubhouse_products","rel","link","browseReceivingQuery","startDate","endDate","ReceivingItem","arr","received","index","activeIndex","Accordion","Title","titleProps","List","received_card_list","created_at","trade","BrowseReceiving","receivedList","setReceivedList","setCount","setActiveIndex","rl","ContentContainer","BackgroundColor","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","basename","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ade5fdd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/magic-ball.85c86bd8.png\";","// Maps all GCF and Scryfall API endpoints for code re-use\nconst { REACT_APP_ENVIRONMENT } = process.env;\n\n/**\n * Check the environment for dev - if dev, we reach out\n * to all endpoints appended by `_test` instead of production\n */\nconst env = REACT_APP_ENVIRONMENT === 'development' ? '_test' : '';\n\n/**\n * Asserts the development env and returns the proper path prefix for resources\n */\nconst getPrefix = () => {\n    return REACT_APP_ENVIRONMENT === 'development'\n        ? 'http://localhost:7331'\n        : 'https://clubhouse-collection.appspot.com';\n};\n\nexport const FINISH_SALE = `${getPrefix()}/auth/finishSale`;\nexport const GET_CARD_FROM_ALL_LOCATIONS = `${getPrefix()}/getCardFromAllLocations`;\nexport const ADD_CARD_TO_INVENTORY = `${getPrefix()}/auth/addCardToInventory`;\nexport const RECEIVE_CARDS = `${getPrefix()}/auth/receiveCards`;\nexport const GET_CARDS_BY_FILTER = `${getPrefix()}/auth/getCardsByFilter`;\nexport const GET_SET_NAMES = `${getPrefix()}/auth/getDistinctSetNames`;\nexport const SUSPEND_SALE = `${getPrefix()}/auth/suspendSale`;\nexport const LOGIN = `${getPrefix()}/jwt`;\nexport const GET_SALES_BY_TITLE = `${getPrefix()}/auth/getSaleByTitle`;\nexport const GET_RECEIVING_LIST = `${getPrefix()}/auth/getReceivedCards`;\nexport const GET_ALL_SALES = `${getPrefix()}/auth/allSales`;\nexport const GET_CARDS_WITH_INFO_PUBLIC = `${getPrefix()}/getCardsWithInfo`;\nexport const GET_CARDS_WITH_INFO = `${getPrefix()}/auth/getCardsWithInfo`;\nexport const AUTOCOMPLETE = `${getPrefix()}/autocomplete`;\nexport const SCRYFALL_SEARCH = 'https://api.scryfall.com/cards/search';\nexport const GET_LIVE_PRICE = `https://us-central1-clubhouse-collection.cloudfunctions.net/getPriceFromTcg${env}`;\n","/**\n * This function is a helper for Axios, it yields an object for Axios params\n */\nexport default function makeAuthHeader() {\n    const header = {\n        Authorization: `Bearer ${localStorage.getItem('clubhouse_JWT')}`,\n    };\n    return header;\n}\n","import axios from 'axios';\nimport { LOGIN } from '../utils/api_resources';\nimport makeAuthHeader from '../utils/makeAuthHeader';\n\ntype ClubhouseLocation = 'ch1' | 'ch2';\n\ninterface Response {\n    data: { token: string };\n}\n\nconst loginQuery = async (\n    username: string,\n    password: string,\n    currentLocation: ClubhouseLocation\n) => {\n    try {\n        const { data }: Response = await axios.post(\n            LOGIN,\n            {\n                username: username.toLowerCase(),\n                password,\n                currentLocation,\n            },\n            { headers: makeAuthHeader() }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default loginQuery;\n","import React, { FC, useContext, useState } from 'react';\nimport loginQuery from './loginQuery';\n\ninterface Props {}\n\nexport type ClubhouseLocation = 'ch1' | 'ch2';\n\ninterface Context {\n    loggedIn: boolean;\n    handleLogin: (\n        username: string,\n        password: string,\n        currentLocation: ClubhouseLocation\n    ) => Promise<any>;\n    handleLogout: () => void;\n    currentLocation: ClubhouseLocation | null;\n    currentUser: string | null;\n}\n\nexport const AuthContext = React.createContext<Context>({\n    loggedIn: false,\n    currentLocation: null,\n    currentUser: null,\n    handleLogout: () => null,\n    handleLogin: () => new Promise(() => null),\n});\n\nexport const useAuthContext = () => useContext(AuthContext);\n\nconst AuthProvider: FC<Props> = ({ children }) => {\n    const [loggedIn, setLoggedIn] = useState(\n        !!localStorage.getItem('clubhouse_JWT')\n    );\n\n    const [\n        currentLocation,\n        setCurrentLocation,\n    ] = useState<ClubhouseLocation | null>(\n        localStorage.getItem('currentLocation') as ClubhouseLocation\n    );\n\n    const [currentUser, setCurrentUser] = useState<string | null>(\n        localStorage.getItem('currentUser')\n    );\n\n    const handleLogin = async (\n        username: string,\n        password: string,\n        currentLocation: ClubhouseLocation\n    ) => {\n        try {\n            const data = await loginQuery(username, password, currentLocation);\n\n            if (data.token) {\n                localStorage.setItem('clubhouse_JWT', data.token);\n                setLoggedIn(!!localStorage.getItem('clubhouse_JWT'));\n\n                localStorage.setItem('currentLocation', currentLocation);\n                setCurrentLocation(currentLocation);\n\n                localStorage.setItem('currentUser', username);\n                setCurrentUser(username);\n            }\n\n            return data;\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const handleLogout = () => {\n        localStorage.removeItem('clubhouse_JWT');\n        setLoggedIn(!!localStorage.getItem('clubhouse_JWT'));\n\n        localStorage.removeItem('currentLocation');\n        setCurrentLocation(null);\n\n        localStorage.removeItem('currentUser');\n        setCurrentUser(null);\n    };\n\n    return (\n        <AuthContext.Provider\n            value={{\n                loggedIn,\n                currentLocation,\n                currentUser,\n                handleLogin,\n                handleLogout,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport default AuthProvider;\n","import { FC } from 'react';\nimport styled from 'styled-components';\nimport { version } from '../../package.json';\n\nconst VersionNumber = styled('div')({\n    display: 'flex',\n    alignItems: 'center',\n    padding: '10px',\n    color: 'rgba(255,255,255,0.4)',\n});\n\nconst AppVersion: FC = () => {\n    return <VersionNumber>v{version}</VersionNumber>;\n};\n\nexport default AppVersion;\n","import React, { FC } from 'react';\nimport ballLogo from './logos/magic-ball.png';\nimport { Menu, Icon, Dropdown } from 'semantic-ui-react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { ClubhouseLocation, useAuthContext } from '../context/AuthProvider';\nimport styled from 'styled-components';\nimport AppVersion from './AppVersion';\n\nconst StyledMenu = styled(Menu)({\n    boxShadow: '0 3px 5px 0 rgba(0,0,0,.25) !important',\n});\n\nconst getClubhouseLocationName = (location: ClubhouseLocation | null) => {\n    if (location === 'ch1') return 'Beaverton';\n    if (location === 'ch2') return 'Hillsboro';\n    return '';\n};\n\ninterface Props {}\n\nconst Header: FC<Props> = () => {\n    const { loggedIn, currentLocation, currentUser } = useAuthContext();\n    const { pathname } = useLocation();\n\n    return (\n        <StyledMenu inverted fixed=\"top\" color=\"blue\">\n            <Menu.Item as={Link} replace to=\"/\">\n                <img src={ballLogo} style={{ marginRight: '7px' }} alt=\"logo\" />\n                <span>\n                    <h3>\n                        Clubhouse Collection{' '}\n                        {getClubhouseLocationName(currentLocation)}\n                    </h3>\n                </span>\n            </Menu.Item>\n            {currentUser && (\n                <>\n                    <Menu.Item>\n                        <span>\n                            Currently logged in as <b>{currentUser}</b>\n                        </span>\n                    </Menu.Item>\n                    <AppVersion />\n                </>\n            )}\n            <Menu.Menu position=\"right\">\n                <Menu.Item\n                    active={pathname === '/public-inventory'}\n                    position=\"right\"\n                    as={Link}\n                    replace\n                    to=\"/public-inventory\"\n                >\n                    Search\n                </Menu.Item>\n                {loggedIn && (\n                    <Dropdown item icon=\"bars\">\n                        <Dropdown.Menu>\n                            <Dropdown.Item\n                                active={pathname === '/manage-inventory'}\n                                as={Link}\n                                replace\n                                to=\"/manage-inventory\"\n                            >\n                                <Icon name=\"plus\" color=\"blue\" />\n                                Manage Inventory\n                            </Dropdown.Item>\n                            <Dropdown.Item\n                                active={pathname === '/new-sale'}\n                                as={Link}\n                                replace\n                                to=\"/new-sale\"\n                            >\n                                <Icon name=\"dollar sign\" color=\"blue\" />\n                                New Sale\n                            </Dropdown.Item>\n                            <Dropdown.Item\n                                active={pathname === '/receiving'}\n                                as={Link}\n                                replace\n                                to=\"/receiving\"\n                            >\n                                <Icon\n                                    name=\"list alternate outline\"\n                                    color=\"blue\"\n                                />\n                                Receiving\n                            </Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item\n                                active={pathname === '/browse-inventory'}\n                                as={Link}\n                                replace\n                                to=\"/browse-inventory\"\n                            >\n                                <Icon name=\"box\" color=\"blue\" />\n                                Browse Inventory\n                            </Dropdown.Item>\n                            <Dropdown.Item\n                                active={pathname === '/browse-sales'}\n                                as={Link}\n                                replace\n                                to=\"/browse-sales\"\n                            >\n                                <Icon name=\"eye\" color=\"blue\" />\n                                Browse Sales\n                            </Dropdown.Item>\n                            <Dropdown.Item\n                                active={pathname === '/browse-receiving'}\n                                as={Link}\n                                replace\n                                to=\"/browse-receiving\"\n                            >\n                                <Icon name=\"list layout\" color=\"blue\" />\n                                Browse Receiving\n                            </Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item\n                                active={pathname === '/logout'}\n                                as={Link}\n                                replace\n                                to=\"/logout\"\n                            >\n                                <Icon name=\"log out\" color=\"blue\" />\n                                Log out\n                            </Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                )}\n            </Menu.Menu>\n        </StyledMenu>\n    );\n};\n\nexport default Header;\n","import axios from 'axios';\nimport { AUTOCOMPLETE } from '../utils/api_resources';\n\ninterface Response {\n    data: string[];\n}\n\nconst autocompleteQuery = async (cardName: string) => {\n    try {\n        const { data }: Response = await axios.get(AUTOCOMPLETE, {\n            params: {\n                title: cardName,\n            },\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default autocompleteQuery;\n","import React, { FC, SyntheticEvent, useState } from 'react';\nimport { Search, SearchProps, SearchResultData } from 'semantic-ui-react';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport autocompleteQuery from './autocompleteQuery';\n\ninterface Props {\n    handleSearchSelect: (result: string) => void;\n    onBlur?: (event: SyntheticEvent, data: SearchProps) => void;\n}\n\nconst SearchBar: FC<Props> = ({ handleSearchSelect, onBlur }) => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [results, setResults] = useState<{ title: string }[]>([]);\n\n    // `value` is the search input string\n    const handleSearchChange = (_: SyntheticEvent, { value }: SearchProps) => {\n        if (!value) return;\n\n        if (value.length < 1) {\n            setLoading(false);\n            setResults([]);\n            return;\n        }\n\n        if (value.length < 3) return; // Don't search if only 2 letters in input\n\n        setLoading(true);\n\n        setTimeout(async () => {\n            const data = await autocompleteQuery(value);\n            const formattedResults = data.map((el) => ({ title: el }));\n            setResults(formattedResults);\n            setLoading(false);\n        }, 100);\n    };\n\n    const handleResultSelect = async (\n        _: SyntheticEvent,\n        { result }: SearchResultData\n    ) => {\n        // This line is a hacky way to get around the fact that if we just select(), then\n        // when the user manually clicks the first (or any) result in the resultlist, it does not select,\n        // presumably because there is some collision between selecting the resultList element and focusing the input\n        setTimeout(() => $('#searchBar').select(), 10);\n        try {\n            setLoading(true);\n            await handleSearchSelect(result.title);\n            setLoading(false);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    return (\n        <Search\n            onSearchChange={_.debounce(handleSearchChange, 500, {\n                leading: false,\n                trailing: true,\n            })}\n            onResultSelect={handleResultSelect}\n            loading={loading}\n            results={results}\n            placeholder=\"Enter a card title\"\n            selectFirstResult={true}\n            id=\"searchBar\"\n            onFocus={(e) => (e.target as HTMLInputElement).select()}\n            onBlur={onBlur} // Used to clear state in the Browse Inventory feature\n        />\n    );\n};\n\nexport default SearchBar;\n","import axios from 'axios';\nimport { GET_CARD_FROM_ALL_LOCATIONS } from '../utils/api_resources';\n\ninterface Quantities {\n    foilQty: number;\n    nonfoilQty: number;\n}\n\nexport interface Response {\n    data: {\n        ch1: Quantities;\n        ch2: Quantities;\n    };\n}\n\ninterface Payload {\n    title: string;\n}\n\n/**\n * Fetches total inventory for the given card name across all store locations\n */\nconst allLocationInventoryQuery = async ({ title }: Payload) => {\n    try {\n        const { data }: Response = await axios.get(\n            GET_CARD_FROM_ALL_LOCATIONS,\n            {\n                params: { title },\n            }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default allLocationInventoryQuery;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Header, Label, Loader } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { InventoryCard } from '../utils/ScryfallCard';\nimport allLocationInventoryQuery, {\n    Response,\n} from './allLocationInventoryQuery';\n\nconst StyledContainer = styled('div')({\n    display: 'inline',\n});\n\nconst FlexContainer = styled('div')({\n    display: 'flex',\n    alignItems: 'center',\n    '& > *': {\n        marginLeft: '10px',\n    },\n});\n\ninterface QohLabelProps {\n    label: string;\n    value: number;\n}\n\nconst QohLabel: FC<QohLabelProps> = ({ label, value }) => (\n    <Label color={value > 0 ? 'blue' : undefined} image>\n        {label}\n        <Label.Detail>{value}</Label.Detail>\n    </Label>\n);\n\ninterface AllLocationInventoryProps {\n    title: string;\n    searchResults: InventoryCard[];\n}\n\n// TODO: refetch on result set change\nconst AllLocationInventory: FC<AllLocationInventoryProps> = ({\n    title,\n    searchResults,\n}) => {\n    const [quantities, setQuantities] = useState<Response['data']>({\n        ch1: { foilQty: 0, nonfoilQty: 0 },\n        ch2: { foilQty: 0, nonfoilQty: 0 },\n    });\n\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                setLoading(true);\n                const data = await allLocationInventoryQuery({ title });\n                setQuantities(data);\n                setLoading(false);\n            } catch (err) {\n                console.log(err);\n            }\n        })();\n    }, [title, searchResults]);\n\n    if (loading) {\n        return (\n            <FlexContainer>\n                <span>Loading totals for all locations</span>\n                <div>\n                    <Loader active inline size=\"small\" />\n                </div>\n            </FlexContainer>\n        );\n    }\n\n    return (\n        <FlexContainer>\n            <div>\n                <Header sub>Beaverton totals:</Header>\n                <StyledContainer>\n                    <QohLabel label=\"Foil\" value={quantities.ch1.foilQty} />\n                    <QohLabel\n                        label=\"Nonfoil\"\n                        value={quantities.ch1.nonfoilQty}\n                    />\n                </StyledContainer>\n            </div>\n            <div>\n                <Header sub>Hillsboro totals:</Header>\n                <StyledContainer>\n                    <QohLabel label=\"Foil\" value={quantities.ch2.foilQty} />\n                    <QohLabel\n                        label=\"Nonfoil\"\n                        value={quantities.ch2.nonfoilQty}\n                    />\n                </StyledContainer>\n            </div>\n        </FlexContainer>\n    );\n};\n\nexport default AllLocationInventory;\n","import { ScryfallCard } from './ScryfallCard';\n\ntype Card = Pick<\n    ScryfallCard,\n    | 'name'\n    | 'frame_effects'\n    | 'border_color'\n    | 'lang'\n    | 'set'\n    | 'foil'\n    | 'nonfoil'\n    | 'promo_types'\n>;\n\n/** Computes the proper displayName for a card, depending on its properties */\nconst createDisplayName = (card: Card) => {\n    const {\n        name,\n        frame_effects,\n        border_color,\n        lang,\n        set,\n        foil,\n        nonfoil,\n        promo_types,\n    } = card;\n\n    let displayName: string = name;\n\n    // Covers strixhaven etched foil mystical archive cards\n    if (set === 'sta' && foil === true && nonfoil === false) {\n        displayName += ` (Etched foil)`;\n    } else if (promo_types.includes('godzillaseries')) {\n        // Covers cards like Godzilla series\n        displayName += ` (IP series)`;\n    } else if (frame_effects.includes('showcase')) {\n        // Covers showcase cards like comic-art Illuna, Apex of Wishes\n        displayName += ` (Showcase)`;\n    } else if (frame_effects.length === 0 && border_color === 'borderless') {\n        // Covers cards like comic-art Vivien, Monsters' Advocate\n        displayName += ` (Borderless)`;\n    } else if (frame_effects.includes('extendedart')) {\n        // Covers cards with extended left and roght border art\n        displayName += ` (Extended art)`;\n    }\n\n    if (lang !== 'en') displayName += ` (${lang.toUpperCase()})`;\n\n    return displayName;\n};\n\nexport default createDisplayName;\n","import createDisplayName from './createDisplayName';\n\n// Language codes from Scryfall. See https://scryfall.com/docs/api/languages for reference.\nexport type LanguageCode =\n    | 'en'\n    | 'es'\n    | 'fr'\n    | 'de'\n    | 'it'\n    | 'pt'\n    | 'ja'\n    | 'ko'\n    | 'ru'\n    | 'zhs'\n    | 'zht'\n    | 'he'\n    | 'la'\n    | 'grc'\n    | 'ar'\n    | 'sa'\n    | 'px';\n\nexport type FinishCondition =\n    | 'FOIL_NM'\n    | 'FOIL_LP'\n    | 'FOIL_MP'\n    | 'FOIL_HP'\n    | 'NONFOIL_NM'\n    | 'NONFOIL_LP'\n    | 'NONFOIL_MP'\n    | 'NONFOIL_HP';\n\nexport interface QOH {\n    FOIL_NM: number;\n    FOIL_LP: number;\n    FOIL_MP: number;\n    FOIL_HP: number;\n    NONFOIL_NM: number;\n    NONFOIL_LP: number;\n    NONFOIL_MP: number;\n    NONFOIL_HP: number;\n}\n\nexport interface ImageURIs {\n    normal: string;\n}\n\nexport interface CardFace {\n    colors: string[];\n    type_line: string;\n    color_identity: string[];\n    image_uris: ImageURIs;\n}\n\nexport interface ScryfallApiCard {\n    id: string;\n    name: string;\n    printed_name: string;\n    set: string;\n    set_name: string;\n    rarity: string;\n    image_uris: ImageURIs;\n    card_faces: CardFace[];\n    nonfoil: boolean;\n    foil: boolean;\n    colors: string[];\n    type_line: string;\n    frame_effects: string[];\n    lang: LanguageCode;\n    border_color: string;\n    display_name: string;\n    cardImage: string;\n    color_identity: string[];\n    qoh?: Partial<QOH>;\n    quantity?: number;\n    qtyToSell?: number;\n    finishCondition?: string;\n    price?: number;\n    promo_types?: string[];\n    tcgplayer_id?: number;\n}\n\n/**\n * This class wraps the Scryfall API request data and models it to something we can control.\n * Also acts as a safeguard for any future updates to Scryfall's API data model and makes\n * the code easier to maintain and debug.\n */\nexport class ScryfallCard {\n    public id: string;\n    public name: string;\n    public printed_name: string | null;\n    public set: string;\n    public set_name: string;\n    public rarity: string;\n    public image_uris: { normal: string };\n    public card_faces: CardFace[];\n    public nonfoil: boolean;\n    public foil: boolean;\n    public colors: string[];\n    public type_line: string;\n    public frame_effects: string[];\n    public lang: LanguageCode;\n    public border_color: string;\n    public display_name: string;\n    public cardImage: string;\n    public color_identity: string[];\n    public promo_types: string[];\n    public tcgplayer_id: number | null;\n\n    public constructor(card: ScryfallApiCard) {\n        this.id = card.id;\n        this.name = card.name;\n        this.printed_name = card.printed_name || null;\n        this.set = card.set;\n        this.set_name = card.set_name;\n        this.rarity = card.rarity;\n        this.image_uris = card.image_uris || null;\n        this.card_faces = card.card_faces || null;\n        this.nonfoil = card.nonfoil;\n        this.foil = card.foil;\n        this.colors = card.colors;\n        this.type_line = card.type_line;\n        this.frame_effects = card.frame_effects || [];\n        this.lang = card.lang;\n        this.border_color = card.border_color;\n        this.color_identity = card.color_identity || null;\n        this.promo_types = card.promo_types || [];\n        this.cardImage = this._getCardImage();\n        this.display_name = this._createDisplayName();\n        this.tcgplayer_id = card.tcgplayer_id || null;\n    }\n\n    // Computes the proper displayName for a card, depending on its properties\n    _createDisplayName() {\n        return createDisplayName(this);\n    }\n\n    _getCardImage() {\n        let myImage: string;\n\n        try {\n            // If normal prop doesn't exist, move to catch block for flip card faces\n            myImage = this.image_uris.normal;\n        } catch (e) {\n            myImage = this.card_faces[0].image_uris.normal;\n        }\n\n        return myImage;\n    }\n}\n\n/**\n * Extends the Scryfall card object and adds properties we know exist in our database.\n * Models the data and makes writing cards to Mongo a more confident process.\n */\nexport class InventoryCard extends ScryfallCard {\n    public qoh: Partial<QOH>;\n    public quantity: number | null;\n    public qtyToSell: number | null;\n    public finishCondition: string | null;\n    public price: number | null;\n\n    public constructor(card: ScryfallApiCard) {\n        super(card);\n        this.qoh = card.qoh ? card.qoh : {};\n        // `quantity` and `qtyToSell` are redundant transaction props, unify them down the line\n        // TODO: remove quantity as it seems to be unused\n        // TODO: Never mind, it's used in Receiving briefly\n        this.quantity = card.quantity || null;\n        this.qtyToSell = card.qtyToSell || null;\n        this.finishCondition = card.finishCondition || null;\n        this.price = card.price && card.price >= 0 ? card.price : null;\n    }\n}\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { InventoryCard, ScryfallApiCard } from '../utils/ScryfallCard';\nimport { GET_CARDS_WITH_INFO } from '../utils/api_resources';\n\ninterface Response {\n    data: ScryfallApiCard[];\n}\n\ninterface Payload {\n    cardName: string;\n    inStockOnly: boolean;\n}\n\n/**\n * Fetches cards from the DB by title when a user selects a title after querying.\n * This function merges the data (inventory quantity and card objects) from two endpoints into one array.\n */\nconst cardSearchQuery = async ({ cardName, inStockOnly }: Payload) => {\n    try {\n        const { data }: Response = await axios.get(GET_CARDS_WITH_INFO, {\n            params: {\n                title: cardName,\n                matchInStock: inStockOnly,\n            },\n            headers: makeAuthHeader(),\n        });\n\n        // Turn the raw API cards into inventory cards\n        // TODO: Re-evaluate whether this is needed\n        return data.map((d) => new InventoryCard(d));\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default cardSearchQuery;\n","import React, { createContext, FC, useState } from 'react';\nimport { InventoryCard, QOH } from '../utils/ScryfallCard';\nimport cardSearchQuery from '../common/cardSearchQuery';\n\ninterface Props {}\n\ninterface Context {\n    searchResults: InventoryCard[];\n    changeCardQuantity: (id: string, qoh: QOH) => void;\n    handleSearchSelect: (term: string) => void;\n}\n\nexport const InventoryContext = createContext<Context>({\n    searchResults: [],\n    changeCardQuantity: () => null,\n    handleSearchSelect: () => null,\n});\n\nconst InventoryProvider: FC<Props> = ({ children }) => {\n    const [searchResults, setSearchResults] = useState<InventoryCard[]>([]);\n\n    const handleSearchSelect = async (term: string) => {\n        const cards = await cardSearchQuery({\n            cardName: term,\n            inStockOnly: false,\n        });\n\n        setSearchResults(cards);\n    };\n\n    const changeCardQuantity = (id: string, qoh: QOH) => {\n        const copiedState = [...searchResults];\n        const targetIndex = copiedState.findIndex((e) => e.id === id);\n        copiedState[targetIndex].qoh = qoh;\n        setSearchResults(copiedState);\n    };\n\n    return (\n        <InventoryContext.Provider\n            value={{ searchResults, changeCardQuantity, handleSearchSelect }}\n        >\n            {children}\n        </InventoryContext.Provider>\n    );\n};\n\nexport default InventoryProvider;\n","import React from 'react';\nimport { Message } from 'semantic-ui-react';\nimport toaster from 'toasted-notes';\nimport styled from 'styled-components';\n\nconst ToastContainer = styled(Message)`\n    position: relative;\n    right: 10px;\n    bottom: 10px;\n`;\n\ninterface CreateToastArgs {\n    color: string;\n    header: string;\n    message?: string;\n    duration?: number;\n}\n\nconst createToast = ({\n    color,\n    header,\n    message,\n    duration = 2000,\n}: CreateToastArgs) => {\n    return toaster.notify(\n        () => (\n            <ToastContainer color={color} compact>\n                <Message.Header>{header}</Message.Header>\n                {message}\n            </ToastContainer>\n        ),\n        {\n            position: 'bottom-right',\n            duration: duration,\n        }\n    );\n};\n\nexport default createToast;\n","import React, { FC, useState } from 'react';\nimport { Image } from 'semantic-ui-react';\nimport styled from 'styled-components';\n\ninterface Props {\n    image: string;\n    hover?: boolean;\n}\n\nconst StyledImage = styled(Image)({\n    boxShadow: '2px 2px 5px 0 rgba(0,0,0,.25)',\n    zIndex: 10,\n    transition: 'all .2s ease-in-out',\n});\n\nconst CardImage: FC<Props> = ({ image, hover }) => {\n    const [hovered, setHovered] = useState<boolean>(false);\n\n    return (\n        <StyledImage\n            src={image}\n            onMouseOver={() => (hover ? setHovered(true) : null)}\n            onMouseOut={() => (hover ? setHovered(false) : null)}\n            style={{\n                transform: `${hovered ? 'scale(1.75)' : 'scale(1)'}`,\n            }}\n        />\n    );\n};\n\nexport default CardImage;\n","export const finishes = [\n    { key: 'NONFOIL', text: 'Nonfoil', value: 'NONFOIL' },\n    { key: 'FOIL', text: 'Foil', value: 'FOIL' },\n];\n\nexport const cardConditions = [\n    { key: 'NM', text: 'Near Mint', value: 'NM' },\n    { key: 'LP', text: 'Light Play', value: 'LP' },\n    { key: 'MP', text: 'Moderate Play', value: 'MP' },\n    { key: 'HP', text: 'Heavy Play', value: 'HP' },\n];\n","export type Finish = 'FOIL' | 'NONFOIL';\n\ninterface CardFinishState {\n    selectedFinish: Finish;\n    finishDisabled: boolean;\n}\n\n/**\n * Seeds state from props. Used to determine if cards have only foil, nonfoil, or both printings\n * from their `foil` and `nonfoil` properties\n *\n * @param {Boolean} nonfoilProp\n * @param {Boolean} foilProp\n */\nexport default function checkCardFinish(\n    nonfoil: boolean,\n    foil: boolean\n): CardFinishState {\n    if (!nonfoil && foil) {\n        return { selectedFinish: 'FOIL', finishDisabled: true };\n    } else if (nonfoil && !foil) {\n        return { selectedFinish: 'NONFOIL', finishDisabled: true };\n    } else {\n        return { selectedFinish: 'NONFOIL', finishDisabled: false };\n    }\n}\n","import { QOH } from '../utils/ScryfallCard';\n\ntype FinishConditionLabels = Record<keyof QOH, string>;\n\nconst displayFinishCondition = (finishCondition: keyof QOH) => {\n    const finishConditionLabels: FinishConditionLabels = {\n        FOIL_NM: 'Foil (NM)',\n        FOIL_LP: 'Foil (LP)',\n        FOIL_MP: 'Foil (MP)',\n        FOIL_HP: 'Foil (HP)',\n        NONFOIL_NM: 'Nonfoil (NM)',\n        NONFOIL_LP: 'Nonfoil (LP)',\n        NONFOIL_MP: 'Nonfoil (MP)',\n        NONFOIL_HP: 'Nonfoil (HP)',\n    };\n\n    return finishConditionLabels[finishCondition];\n};\n\nexport default displayFinishCondition;\n","import { QOH } from './ScryfallCard';\n\nexport default function parseQoh(qoh: Partial<QOH>) {\n    const foilQty =\n        (qoh.FOIL_NM || 0) +\n        (qoh.FOIL_LP || 0) +\n        (qoh.FOIL_MP || 0) +\n        (qoh.FOIL_HP || 0);\n\n    const nonfoilQty =\n        (qoh.NONFOIL_NM || 0) +\n        (qoh.NONFOIL_LP || 0) +\n        (qoh.NONFOIL_MP || 0) +\n        (qoh.NONFOIL_HP || 0);\n\n    return [foilQty, nonfoilQty] as const;\n}\n","import React, { FC } from 'react';\nimport { Label, Popup } from 'semantic-ui-react';\nimport displayFinishCondition from '../utils/finishCondition';\nimport parseQoh from '../utils/parseQoh';\nimport { QOH } from '../utils/ScryfallCard';\n\nexport const createInventoryLineItems = (\n    inventoryQty: Partial<QOH>,\n    matchStrings: (keyof QOH)[]\n): string[] => {\n    const matches = matchStrings\n        .map((finishCondition) => {\n            const quantity = inventoryQty[finishCondition];\n            if (quantity && quantity > 0)\n                return `${displayFinishCondition(\n                    finishCondition\n                )}: ${quantity}`;\n        })\n        .filter((m): m is string => !!m);\n\n    if (matches.length === 0) return ['None in stock'];\n    return matches;\n};\n\ninterface Props {\n    inventoryQty: Partial<QOH>;\n}\n\ninterface LabelWithPopupProps {\n    quantity: number;\n    label: string;\n    popupLineItems: string[];\n}\n\nconst LabelWithPopup: FC<LabelWithPopupProps> = ({\n    quantity,\n    label,\n    popupLineItems,\n}) => (\n    <Popup\n        content={popupLineItems.map((msg) => (\n            <div>{msg}</div>\n        ))}\n        trigger={\n            <Label color={quantity > 0 ? 'blue' : undefined} image>\n                {label}\n                <Label.Detail>{quantity}</Label.Detail>\n            </Label>\n        }\n    />\n);\n\n// This component parses the `qoh` object from mongo into something more presentable\nconst QohLabels: FC<Props> = ({ inventoryQty }) => {\n    const [foilQuantity, nonfoilQuantity] = parseQoh(inventoryQty);\n\n    const foilLineItems = createInventoryLineItems(inventoryQty, [\n        'FOIL_NM',\n        'FOIL_LP',\n        'FOIL_MP',\n        'FOIL_HP',\n    ]);\n\n    const nonfoilLineItems = createInventoryLineItems(inventoryQty, [\n        'NONFOIL_NM',\n        'NONFOIL_LP',\n        'NONFOIL_MP',\n        'NONFOIL_HP',\n    ]);\n\n    return (\n        <>\n            <LabelWithPopup\n                label=\"Foil\"\n                quantity={foilQuantity}\n                popupLineItems={foilLineItems}\n            />\n            <LabelWithPopup\n                label=\"Nonfoil\"\n                quantity={nonfoilQuantity}\n                popupLineItems={nonfoilLineItems}\n            />\n        </>\n    );\n};\n\nexport default QohLabels;\n","import React, { FC } from 'react';\nimport { Label } from 'semantic-ui-react';\nimport { LanguageCode } from '../utils/ScryfallCard';\n\nconst LANG_CODES: Record<LanguageCode, string> = {\n    en: 'English',\n    es: 'Spanish',\n    fr: 'French',\n    de: 'German',\n    it: 'Italian',\n    pt: 'Portuguese',\n    ja: 'Japanese',\n    ko: 'Korean',\n    ru: 'Russian',\n    zhs: 'Simplified Chinese',\n    zht: 'Traditional Chinese',\n    he: 'Hebrew',\n    la: 'Latin',\n    grc: 'Ancient Greek',\n    ar: 'Arabic',\n    sa: 'Sanskrit',\n    px: 'Phyrexian',\n};\ninterface Props {\n    languageCode: LanguageCode;\n}\n\nconst Language: FC<Props> = ({ languageCode }) => (\n    <Label image color=\"grey\">\n        {LANG_CODES[languageCode]}\n    </Label>\n);\n\nexport default Language;\n","import Axios from 'axios';\nimport { GET_LIVE_PRICE } from '../utils/api_resources';\n\ninterface Response {\n    data: {\n        marketPrices: { foil: number; normal: number };\n        medianPrices: { foil: number; normal: number };\n    };\n}\n\ninterface Payload {\n    scryfallId: string;\n}\n\nconst marketPriceQuery = async ({ scryfallId }: Payload) => {\n    try {\n        const { data }: Response = await Axios.get(GET_LIVE_PRICE, {\n            params: { scryfallId },\n        });\n\n        const { marketPrices, medianPrices } = data;\n\n        return {\n            marketPrices,\n            medianPrices,\n        };\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default marketPriceQuery;\n","import React, { useState, useEffect, FC } from 'react';\nimport { Label, Icon } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport marketPriceQuery from './marketPriceQuery';\n\nconst LabelStyle = styled(Label)`\n    background-color: ${(props) =>\n        !!props.foil ? '#ffcfdf' : null} !important;\n    background-image: ${(props) =>\n        !!props.foil\n            ? 'linear-gradient(90deg, #ffcfdf 0%, #b0f3f1 74%)'\n            : null} !important;\n`;\n\ninterface Response {\n    data: {\n        marketPrices: { foil: number; normal: number };\n        medianPrices: { foil: number; normal: number };\n    };\n}\n\ntype Finish = 'FOIL' | 'NONFOIL';\n\ninterface Props {\n    id: string;\n    finish: Finish;\n    round: boolean;\n    showMid: boolean;\n}\n\n// Rounds the passed number to the nearest fifty cents\nconst roundNearestStep = (n: number) => Math.ceil(n * 2) / 2;\n\nconst displayPrice = (price: number | null) =>\n    !!price ? `$${price.toFixed(2)}` : 'N/A';\n\nconst MarketPrice: FC<Props> = ({ id, finish, round, showMid = true }) => {\n    const [market, setMarket] = useState<number | null>(null);\n    const [median, setMedian] = useState<number | null>(null);\n    const [loading, setLoading] = useState<boolean>(false);\n    const isFoil = finish === 'FOIL';\n\n    useEffect(() => {\n        (async function fetchData() {\n            let _isMounted = true;\n            setLoading(true);\n\n            const { marketPrices, medianPrices } = await marketPriceQuery({\n                scryfallId: id,\n            });\n\n            if (_isMounted) {\n                if (isFoil) {\n                    setMarket(Number(marketPrices.foil));\n                    setMedian(Number(medianPrices.foil));\n                } else {\n                    setMarket(Number(marketPrices.normal));\n                    setMedian(Number(medianPrices.normal));\n                }\n\n                setLoading(false);\n            }\n\n            return () => (_isMounted = false);\n        })();\n    }, [id, finish]);\n\n    const loader = (\n        <span>\n            Loading <Icon loading name=\"spinner\" />\n        </span>\n    );\n\n    return (\n        <>\n            <LabelStyle foil={isFoil}>\n                {loading ? (\n                    loader\n                ) : (\n                    <span>\n                        Mkt.{' '}\n                        {round\n                            ? displayPrice(\n                                  market ? roundNearestStep(market) : null\n                              )\n                            : displayPrice(market)}\n                    </span>\n                )}\n            </LabelStyle>\n            {showMid && (\n                <LabelStyle foil={isFoil}>\n                    {loading ? (\n                        loader\n                    ) : (\n                        <span>Mid. {displayPrice(median)}</span>\n                    )}\n                </LabelStyle>\n            )}\n        </>\n    );\n};\n\nexport default MarketPrice;\n","import React, { FC } from 'react';\nimport { InventoryCard } from '../utils/ScryfallCard';\nimport { Label, Item, Button, Icon } from 'semantic-ui-react';\nimport QohLabels from '../common/QohLabels';\nimport Language from '../common/Language';\nimport MarketPrice from '../common/MarketPrice';\nimport { Finish } from '../utils/checkCardFinish';\nimport styled from 'styled-components';\n\ninterface Props {\n    card: InventoryCard;\n    selectedFinish: Finish;\n    showMid?: boolean;\n    round?: boolean;\n}\n\nconst SetIcon = styled('i')({\n    fontSize: '30px',\n});\n\n// TODO: remove this shim after TCG api approval and integration\nconst TcgPriceButton: FC<{ tcgId: number | null }> = ({ tcgId }) => {\n    const tcgUrl = `https://www.tcgplayer.com/product/${tcgId}`;\n\n    return (\n        <Button\n            icon\n            disabled={!tcgId}\n            color=\"twitter\"\n            labelPosition=\"right\"\n            size=\"mini\"\n            as=\"a\"\n            href={tcgUrl}\n            target=\"_blank\"\n        >\n            {!tcgId ? 'Link unavailable' : 'View on TCG'}\n            <Icon name=\"external share\" />\n        </Button>\n    );\n};\n\nconst CardHeader: FC<Props> = ({\n    card,\n    selectedFinish,\n    showMid = false,\n    round = false,\n}) => {\n    const {\n        id,\n        display_name,\n        set,\n        rarity,\n        set_name,\n        qoh,\n        lang,\n        tcgplayer_id,\n    } = card;\n\n    return (\n        <Item.Header as=\"h3\">\n            {display_name}\n            <SetIcon className={`ss ss-fw ss-${set} ss-${rarity}`} />\n            <Label color=\"grey\">\n                {set_name} ({set.toUpperCase()})\n            </Label>\n            <QohLabels inventoryQty={qoh} />\n            <MarketPrice\n                id={id}\n                finish={selectedFinish}\n                showMid={showMid}\n                round={round}\n            />\n            <Language languageCode={lang} />\n            <TcgPriceButton tcgId={tcgplayer_id} />\n        </Item.Header>\n    );\n};\n\nexport default CardHeader;\n","import React, { FC, useContext, useState } from 'react';\nimport { Segment, Input, Button, Form, Select, Item } from 'semantic-ui-react';\nimport axios from 'axios';\nimport $ from 'jquery';\nimport { Formik, FormikErrors, FormikHelpers } from 'formik';\nimport createToast from '../common/createToast';\nimport CardImage from '../common/CardImage';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { ADD_CARD_TO_INVENTORY } from '../utils/api_resources';\nimport { finishes, cardConditions } from '../utils/dropdownOptions';\nimport checkCardFinish from '../utils/checkCardFinish';\nimport { InventoryContext } from '../context/InventoryContext';\nimport { InventoryCard } from '../utils/ScryfallCard';\nimport CardHeader from '../ui/CardHeader';\n\ninterface Props {\n    card: InventoryCard;\n}\n\ninterface FormValues {\n    selectedFinish: Finish;\n    selectedCondition: string;\n    quantity: string;\n}\n\ntype Finish = 'FOIL' | 'NONFOIL';\n\nconst ManageInventoryListItem: FC<Props> = ({ card }) => {\n    const {\n        foil,\n        nonfoil,\n        name,\n        set_name,\n        set,\n        id,\n        cardImage,\n        card_faces,\n        image_uris,\n    } = card;\n\n    const [selectedFinish, setSelectedFinish] = useState<Finish>(\n        checkCardFinish(nonfoil, foil).selectedFinish\n    );\n\n    const { changeCardQuantity } = useContext(InventoryContext);\n\n    const initialFormValues: FormValues = {\n        selectedFinish: checkCardFinish(nonfoil, foil).selectedFinish,\n        selectedCondition: 'NM',\n        quantity: '0',\n    };\n\n    const validate = ({ quantity }: FormValues) => {\n        let errors: FormikErrors<FormValues> = {};\n\n        if (\n            !Number(quantity) ||\n            !Number.isInteger(+quantity) ||\n            +quantity > 100\n        )\n            errors.quantity = 'error';\n\n        return errors;\n    };\n\n    const onSubmit = async (\n        { quantity, selectedFinish, selectedCondition }: FormValues,\n        { resetForm }: FormikHelpers<FormValues>\n    ) => {\n        try {\n            const { data } = await axios.post(\n                ADD_CARD_TO_INVENTORY,\n                {\n                    quantity: parseInt(quantity, 10),\n                    finishCondition: `${selectedFinish}_${selectedCondition}`,\n                    cardInfo: { id, name, set_name, set },\n                },\n                { headers: makeAuthHeader() }\n            );\n\n            // Imperatively reset the form using Formik actions\n            resetForm();\n\n            changeCardQuantity(id, data.qoh);\n\n            createToast({\n                color: 'green',\n                header: `${quantity}x ${name} ${\n                    parseInt(quantity, 10) > 0 ? 'added' : 'removed'\n                }!`,\n                duration: 2000,\n            });\n\n            // Highlight the input after successful card add\n            $('#searchBar').focus().select();\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    return (\n        <Segment>\n            <Item.Group divided>\n                <Item>\n                    <Item.Image size=\"tiny\">\n                        <CardImage image={cardImage} hover />\n                    </Item.Image>\n                    <Item.Content>\n                        <CardHeader\n                            card={card}\n                            selectedFinish={selectedFinish}\n                            round\n                        />\n                        <Item.Description>\n                            <Formik\n                                initialValues={initialFormValues}\n                                validate={validate}\n                                onSubmit={onSubmit}\n                                initialErrors={{ quantity: 'error' }}\n                            >\n                                {({\n                                    values,\n                                    handleSubmit,\n                                    setFieldValue,\n                                    isSubmitting,\n                                    isValid,\n                                }) => (\n                                    <Form>\n                                        <Form.Group>\n                                            <Form.Field\n                                                control={Input}\n                                                type=\"number\"\n                                                label=\"Quantity\"\n                                                value={values.quantity}\n                                                onChange={(\n                                                    _: any,\n                                                    { value }: { value: number }\n                                                ) =>\n                                                    setFieldValue(\n                                                        'quantity',\n                                                        value\n                                                    )\n                                                }\n                                                onFocus={() => {\n                                                    if (\n                                                        +values.quantity === 0\n                                                    ) {\n                                                        setFieldValue(\n                                                            'quantity',\n                                                            ''\n                                                        );\n                                                    }\n                                                }}\n                                            />\n                                            <Form.Field\n                                                label=\"Finish\"\n                                                control={Select}\n                                                value={values.selectedFinish}\n                                                options={finishes}\n                                                disabled={\n                                                    checkCardFinish(\n                                                        nonfoil,\n                                                        foil\n                                                    ).finishDisabled\n                                                }\n                                                onChange={(\n                                                    _: any,\n                                                    { value }: { value: Finish }\n                                                ) => {\n                                                    setSelectedFinish(value);\n                                                    setFieldValue(\n                                                        'selectedFinish',\n                                                        value\n                                                    );\n                                                }}\n                                            />\n                                            <Form.Field\n                                                label=\"Condition\"\n                                                control={Select}\n                                                value={values.selectedCondition}\n                                                options={cardConditions}\n                                                onChange={(\n                                                    _: any,\n                                                    { value }: { value: string }\n                                                ) =>\n                                                    setFieldValue(\n                                                        'selectedCondition',\n                                                        value\n                                                    )\n                                                }\n                                            />\n                                            <Form.Button\n                                                label=\"Add to Inventory?\"\n                                                control={Button}\n                                                primary\n                                                disabled={\n                                                    !isValid || isSubmitting\n                                                }\n                                                onClick={() => handleSubmit()}\n                                                loading={isSubmitting}\n                                            >\n                                                Submit\n                                            </Form.Button>\n                                        </Form.Group>\n                                    </Form>\n                                )}\n                            </Formik>\n                        </Item.Description>\n                    </Item.Content>\n                </Item>\n            </Item.Group>\n        </Segment>\n    );\n};\n\nexport default ManageInventoryListItem;\n","import React, { useContext } from 'react';\nimport SearchBar from '../common/SearchBar';\nimport { Segment, Header, Icon, Divider } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport AllLocationInventory from './AllLocationInventory';\nimport { InventoryContext } from '../context/InventoryContext';\nimport ManageInventoryListItem from './ManageInventoryListItem';\n\nconst HeaderContainer = styled('div')({\n    display: 'flex',\n    justifyContent: 'space-between',\n});\n\nexport default function ManageInventory() {\n    const { searchResults, handleSearchSelect } = useContext(InventoryContext);\n\n    return (\n        <>\n            <SearchBar handleSearchSelect={handleSearchSelect} />\n            <br />\n            <HeaderContainer>\n                <Header as=\"h2\">Manage Inventory</Header>\n                {searchResults.length > 0 && (\n                    <div>\n                        <AllLocationInventory\n                            searchResults={searchResults}\n                            title={searchResults[0].name}\n                        />\n                    </div>\n                )}\n            </HeaderContainer>\n            <Divider />\n            {!searchResults.length && (\n                <Segment placeholder>\n                    <Header icon>\n                        <Icon name=\"search\" />\n                        <em>\n                            \"For the first time in his life, Grakk felt a little\n                            warm and fuzzy inside.\"\n                        </em>\n                    </Header>\n                </Segment>\n            )}\n            {searchResults.map((card) => (\n                <ManageInventoryListItem key={card.id} card={card} />\n            ))}\n        </>\n    );\n}\n","import React, { useState, createContext, FC } from 'react';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport { SUSPEND_SALE, FINISH_SALE } from '../utils/api_resources';\nimport { InventoryCard } from '../utils/ScryfallCard';\nimport sortSaleList from '../utils/sortSaleList';\nimport createToast from '../common/createToast';\nimport makeAuthHeader from '../utils/makeAuthHeader';\n\ninterface Props {}\n\ninterface SuspendSaleArgs {\n    customerName: string;\n    notes: string;\n}\n\nexport type SaleListCard = InventoryCard & {\n    finishCondition: string;\n    qtyToSell: number;\n    price: number;\n};\n\nexport interface SuspendedSale {\n    _id: string;\n    name: string;\n    notes: string;\n    list: SaleListCard[];\n}\n\nexport interface SaleContext {\n    saleListCards: SaleListCard[];\n    suspendedSale: SuspendedSale;\n    addToSaleList: (\n        card: InventoryCard,\n        finishCondition: string,\n        qtyToSell: number,\n        price: number\n    ) => void;\n    removeFromSaleList: (id: string, finishCondition: string) => void;\n    restoreSale: (saleId: string) => void;\n    suspendSale: (args: SuspendSaleArgs) => void;\n    deleteSuspendedSale: () => void;\n    finalizeSale: () => void;\n    resetSaleState: () => void;\n}\n\nconst defaultSuspendedSale: SuspendedSale = {\n    _id: '',\n    name: '',\n    notes: '',\n    list: [],\n};\n\nexport const SaleContext = createContext<SaleContext>({\n    saleListCards: [],\n    suspendedSale: defaultSuspendedSale,\n    addToSaleList: () => null,\n    removeFromSaleList: () => null,\n    restoreSale: () => null,\n    suspendSale: () => null,\n    deleteSuspendedSale: () => null,\n    finalizeSale: () => null,\n    resetSaleState: () => null,\n});\n\nexport const SaleProvider: FC<Props> = ({ children }) => {\n    const [saleListCards, setSaleListCards] = useState<SaleListCard[]>([]);\n    const [suspendedSale, setSuspendedSale] = useState<SuspendedSale>(\n        defaultSuspendedSale\n    );\n\n    /**\n     * Adds product to the sale list\n     */\n    const addToSaleList = (\n        card: InventoryCard,\n        finishCondition: string,\n        qtyToSell: number,\n        price: number\n    ) => {\n        const oldState = [...saleListCards];\n\n        // TODO: is this stable? We have to use Object.assign() to preserve getter and setter methods\n        const newCard = _.clone(\n            Object.assign(card, {\n                finishCondition,\n                qtyToSell,\n                price,\n            })\n        );\n\n        // Need to make sure same ID's with differing conditions are separate line-items\n        const idx = oldState.findIndex((el) => {\n            return (\n                el.id === newCard.id && el.finishCondition === finishCondition\n            );\n        });\n\n        if (idx !== -1) {\n            oldState.splice(idx, 1, newCard);\n        } else {\n            oldState.push(newCard);\n        }\n\n        setSaleListCards(sortSaleList(oldState));\n    };\n\n    /**\n     * Removes product from the sale list\n     */\n    const removeFromSaleList = (id: string, finishCondition: string) => {\n        const newState = [...saleListCards].filter((c) => {\n            return !(c.id === id && c.finishCondition === finishCondition);\n        });\n\n        setSaleListCards(newState);\n    };\n\n    /**\n     * Restores a sale (assigns a saleList to state) from a suspended sale from the db\n     */\n    const restoreSale = async (id: string) => {\n        try {\n            const { data }: { data: SuspendedSale } = await axios.get(\n                `${SUSPEND_SALE}/${id}`,\n                {\n                    headers: makeAuthHeader(),\n                }\n            );\n            // TODO: Is this going to map correctly?\n            // const modeledData = data.list.map((c) => new InventoryCard(c));\n            const modeledData = data.list.map((c) => c);\n\n            setSaleListCards(modeledData);\n            setSuspendedSale(data);\n\n            createToast({\n                color: 'green',\n                header: `You are viewing ${data.name}'s sale`,\n            });\n        } catch (e) {\n            console.log(e.response);\n            createToast({ color: 'red', header: `Error` });\n        }\n    };\n\n    /**\n     * Suspends a sale (persists it to mongo) via the SuspendedSale component and API\n     */\n    const suspendSale = async ({\n        customerName,\n        notes,\n    }: {\n        customerName: string;\n        notes: string;\n    }) => {\n        const { _id } = suspendedSale;\n\n        try {\n            if (!!_id)\n                await axios.delete(`${SUSPEND_SALE}/${_id}`, {\n                    headers: makeAuthHeader(),\n                }); // If we're suspended, delete the previous to replace\n\n            const { data } = await axios.post(\n                SUSPEND_SALE,\n                {\n                    customerName: customerName,\n                    notes: notes,\n                    saleList: saleListCards,\n                },\n                { headers: makeAuthHeader() }\n            );\n\n            resetSaleState();\n\n            createToast({\n                color: 'green',\n                header: `${data.ops[0].name}'s sale was suspended`,\n            });\n        } catch (e) {\n            console.log(e.response);\n            createToast({\n                color: 'red',\n                header: `Error`,\n                message: e.response.data || 'Error suspending sale',\n            });\n        }\n    };\n\n    const deleteSuspendedSale = async () => {\n        try {\n            const { _id, name } = suspendedSale;\n            await axios.delete(`${SUSPEND_SALE}/${_id}`, {\n                headers: makeAuthHeader(),\n            });\n\n            resetSaleState();\n\n            createToast({\n                color: 'green',\n                header: `${name}'s sale was deleted`,\n            });\n        } catch (e) {\n            console.log(e.response);\n            createToast({\n                color: 'red',\n                header: `Error`,\n                message: e.response.data || 'Error deleting suspended sale',\n            });\n        }\n    };\n\n    /**\n     * Extracts the saleList state and uses it to complete sale\n     */\n    const finalizeSale = async () => {\n        const { _id } = suspendedSale;\n\n        try {\n            // Must delete currently suspended sale to faithfully restore inventory prior to sale\n            if (!!_id)\n                await axios.delete(`${SUSPEND_SALE}/${_id}`, {\n                    headers: makeAuthHeader(),\n                });\n\n            const { data } = await axios.post(\n                FINISH_SALE,\n                { cards: saleListCards },\n                { headers: makeAuthHeader() }\n            );\n\n            const saleID = data.sale_data.Sale.saleID;\n\n            createToast({\n                color: 'green',\n                header: 'Sale created in Lightspeed!',\n                message: `The id number is #${saleID}`,\n            });\n\n            resetSaleState();\n        } catch (e) {\n            createToast({\n                color: 'red',\n                header: 'Error',\n                message: e.response.data || 'Sale was not created',\n            });\n\n            resetSaleState();\n        }\n    };\n\n    const resetSaleState = () => {\n        setSaleListCards([]);\n        setSuspendedSale(defaultSuspendedSale);\n    };\n\n    return (\n        <SaleContext.Provider\n            value={{\n                saleListCards,\n                suspendedSale,\n                addToSaleList,\n                removeFromSaleList,\n                restoreSale,\n                suspendSale,\n                deleteSuspendedSale,\n                finalizeSale,\n                resetSaleState,\n            }}\n        >\n            {children}\n        </SaleContext.Provider>\n    );\n};\n","import { SaleListCard } from '../context/SaleContext';\nimport { InventoryCard } from './ScryfallCard';\n\n/**\n * Takes in an unordered group of cards and sorts them according to The Clubhouse's specs:\n * WUBRG, then multicolor, then colorless, then land, alphabetically within each color/category\n */\nexport default function sortSaleList(cards: SaleListCard[]) {\n    const ORDER = ['W', 'U', 'B', 'R', 'G', 'MULTI', 'COLORLESS', 'LAND'];\n\n    /**\n     * Main helper function that manages sort order\n     * @param {Object} card\n     */\n    function helpSort(card: InventoryCard) {\n        let arrayConst = null;\n\n        let colorsLength = null;\n        let cardFace = null;\n\n        try {\n            // If colors don't exist, it's a flip card or storybook frame\n            colorsLength = card.colors.length;\n            cardFace = card;\n        } catch (e) {\n            try {\n                // Storybook frames from Eldraine may throw error\n                colorsLength = card.card_faces[0].colors.length;\n                cardFace = card.card_faces[0];\n            } catch (e) {\n                colorsLength = card.colors.length;\n                cardFace = card;\n            }\n        }\n\n        // Apply logic to return correct constant enum\n        if (colorsLength === 0) {\n            arrayConst = 'COLORLESS';\n        } else if (colorsLength === 1) {\n            arrayConst = cardFace.colors[0];\n        } else if (colorsLength > 1) {\n            arrayConst = 'MULTI';\n        }\n\n        // Drill into colorless cards, if they are lands or not\n        if (arrayConst === 'COLORLESS') {\n            if (cardFace.color_identity) {\n                if (cardFace.color_identity.length === 1) {\n                    arrayConst = cardFace.color_identity[0];\n                }\n                if (cardFace.color_identity.length > 1) {\n                    arrayConst = 'MULTI';\n                }\n            }\n            if (cardFace.type_line.includes('Land')) {\n                arrayConst = 'LAND';\n            }\n        }\n\n        // Final check to guard against a null arrayConst\n        if (!arrayConst) {\n            arrayConst = 'LAND';\n        }\n\n        return arrayConst;\n    }\n\n    const alphaSort = cards.sort((a, b) => {\n        return a.name.localeCompare(b.name);\n    });\n\n    const sorted = alphaSort.sort((a, b) => {\n        return ORDER.indexOf(helpSort(a)) - ORDER.indexOf(helpSort(b));\n    });\n\n    return sorted;\n}\n","import React, {\n    useState,\n    useContext,\n    FC,\n    SyntheticEvent,\n    ChangeEvent,\n} from 'react';\nimport {\n    Segment,\n    Form,\n    Input,\n    Dropdown,\n    Button,\n    Item,\n} from 'semantic-ui-react';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport CardImage from '../common/CardImage';\nimport { SaleContext } from '../context/SaleContext';\nimport { InventoryCard, QOH } from '../utils/ScryfallCard';\nimport CardHeader from '../ui/CardHeader';\n\ninterface ConditionOptions {\n    text: string;\n    value: string;\n    key: string;\n}\n\n/**\n * Creates a list of conditions for the dropdown menu from the `qoh`\n * Note: Is this not needed if we default select initially?\n * @param {Object} qoh\n * @param {String} id\n */\nfunction createConditionOptions(\n    qoh: Partial<QOH>,\n    id: string\n): ConditionOptions[] {\n    const removeZeroedQuantites = _.pickBy(qoh, (p) => p && p > 0); // Quantites of zero not included\n\n    return Object.entries(removeZeroedQuantites).map((d) => {\n        const [conditionFinish, qty] = d;\n\n        return {\n            text: `${conditionFinish.split('_').join(' | ')} | Qty: ${qty}`,\n            value: conditionFinish,\n            key: `${id}${conditionFinish}`,\n        };\n    });\n}\n\ntype Finish = 'FOIL' | 'NONFOIL';\n\n/**\n * Creates initial selectedFinish value, used for the MarketPrice component\n * Returns FOIL or NONFOIL depending on what's in current inventory (qoh)\n * @param {Object} qoh\n */\nfunction createInitialSelectedFinish(qoh: Partial<QOH>): Finish {\n    const removeZeroedQuantites = _.pickBy(qoh, (p) => p && p > 0);\n    // Isolate only the FOIL or NONFOIL values with mapping\n    const keysMapped = _.keys(removeZeroedQuantites).map(\n        (k) => k.split('_')[0]\n    );\n    const uniqueValues = _.uniq(keysMapped);\n    return uniqueValues.indexOf('NONFOIL') > -1 ? 'NONFOIL' : 'FOIL';\n}\n\ninterface Props {\n    card: InventoryCard;\n}\n\nconst BrowseCardItem: FC<Props> = ({ card }) => {\n    const [selectedFinishCondition, setSelectedFinishCondition] = useState<\n        string\n    >('');\n    const [\n        selectedFinishConditionQty,\n        setSelectedFinishConditionQty,\n    ] = useState<number>(0);\n    const [quantityToSell, setQuantityToSell] = useState<number | null>(0);\n    const [price, setPrice] = useState<number | null>(0);\n    const [selectedFinish, setSelectedFinish] = useState<Finish>(\n        createInitialSelectedFinish(card.qoh)\n    );\n    const [conditionOptions, setConditionOptions] = useState<\n        ConditionOptions[]\n    >(createConditionOptions(card.qoh, card.id));\n    const { addToSaleList } = useContext(SaleContext);\n\n    const handleQuantityChange = (\n        e: SyntheticEvent,\n        { value }: { value: string }\n    ) => {\n        if (value === '') {\n            setQuantityToSell(null);\n            return;\n        }\n\n        let numVal = parseInt(value);\n\n        if (numVal > selectedFinishConditionQty)\n            numVal = selectedFinishConditionQty;\n\n        if (isNaN(numVal) || numVal < 0) numVal = 0;\n\n        setQuantityToSell(numVal);\n    };\n\n    const handleSelectedFinishCondition = (\n        e: SyntheticEvent,\n        { value }: { value: keyof QOH }\n    ) => {\n        // TODO: we need to not coerce here\n        setSelectedFinish(value.split('_')[0] as Finish);\n        setSelectedFinishCondition(value);\n        setSelectedFinishConditionQty(card.qoh[value] || 0);\n        setQuantityToSell(0);\n    };\n\n    const handlePriceChange = (\n        e: SyntheticEvent,\n        { value }: { value: string }\n    ) => {\n        if (value === '') {\n            setPrice(null);\n            return;\n        }\n\n        let numVal = Number(value);\n\n        if (isNaN(numVal) || numVal < 0) {\n            numVal = 0;\n        }\n\n        setPrice(numVal);\n    };\n\n    const handleAddToSale = () => {\n        const { id } = card;\n\n        addToSaleList(\n            card,\n            selectedFinishCondition,\n            quantityToSell || 0,\n            price || 0\n        );\n\n        // Reset state\n        setSelectedFinishCondition('');\n        setSelectedFinishConditionQty(0);\n        setQuantityToSell(0);\n        setPrice(0);\n        setConditionOptions(createConditionOptions(card.qoh, id));\n        setSelectedFinish(createInitialSelectedFinish(card.qoh));\n\n        // Highlight the input after successful card add\n        $('#searchBar').focus().select();\n    };\n\n    return (\n        <Segment>\n            <Item.Group divided>\n                <Item>\n                    <Item.Image size=\"tiny\">\n                        <CardImage image={card.cardImage} />\n                    </Item.Image>\n                    <Item.Content>\n                        <CardHeader\n                            card={card}\n                            selectedFinish={selectedFinish}\n                            showMid\n                            round\n                        />\n                        <Item.Description>\n                            <Form>\n                                <Form.Group>\n                                    <Form.Field\n                                        className=\"finish-condition\"\n                                        control={Dropdown}\n                                        selection\n                                        placeholder=\"Select inventory\"\n                                        options={conditionOptions}\n                                        value={selectedFinishCondition}\n                                        label=\"Select finish/condition\"\n                                        onChange={handleSelectedFinishCondition}\n                                    />\n                                    <Form.Field\n                                        className=\"sale-qty\"\n                                        control={Input}\n                                        type=\"number\"\n                                        label=\"Quantity to sell\"\n                                        value={quantityToSell}\n                                        onChange={handleQuantityChange}\n                                        disabled={!selectedFinishConditionQty}\n                                        onFocus={(\n                                            e: ChangeEvent<HTMLInputElement>\n                                        ) => e.target.select()}\n                                    />\n                                    <Form.Field\n                                        className=\"sale-price\"\n                                        control={Input}\n                                        type=\"number\"\n                                        label=\"Price\"\n                                        value={price}\n                                        onChange={handlePriceChange}\n                                        disabled={!selectedFinishConditionQty}\n                                        onFocus={(\n                                            e: ChangeEvent<HTMLInputElement>\n                                        ) => e.target.select()}\n                                        step={0.5}\n                                    />\n                                    <Form.Button\n                                        className=\"add-to-sale\"\n                                        label=\"Add to sale?\"\n                                        control={Button}\n                                        primary\n                                        onClick={handleAddToSale}\n                                        disabled={\n                                            !quantityToSell ||\n                                            quantityToSell <= 0\n                                        }\n                                    >\n                                        Sell\n                                    </Form.Button>\n                                </Form.Group>\n                            </Form>\n                        </Item.Description>\n                    </Item.Content>\n                </Item>\n            </Item.Group>\n        </Segment>\n    );\n};\n\nexport default BrowseCardItem;\n","import React, { FC } from 'react';\nimport BrowseCardItem from './BrowseCardItem';\nimport { Segment, Header, Icon } from 'semantic-ui-react';\nimport { InventoryCard } from '../utils/ScryfallCard';\n\ninterface Props {\n    term: string;\n    cards: InventoryCard[];\n}\n\nconst BrowseCardList: FC<Props> = ({ term, cards }) => {\n    // Creates text to notify the user of zero-result searches\n    const searchNotification = () => {\n        if (term && !cards.length) {\n            // Check to make sure the user has searched and no results\n            return (\n                <p>\n                    Zero results for <em>{term}</em>\n                </p>\n            );\n        }\n        return (\n            <p>\n                <em>\"Don't give the people what they want\"</em>\n            </p>\n        );\n    };\n\n    if (cards.length === 0) {\n        return (\n            <Segment placeholder>\n                <Header icon>\n                    <Icon name=\"search\" />\n                    <span>{searchNotification()}</span>\n                </Header>\n            </Segment>\n        );\n    }\n\n    return (\n        <>\n            {cards.map((card) => {\n                return <BrowseCardItem key={card.id} card={card} />;\n            })}\n        </>\n    );\n};\n\nexport default BrowseCardList;\n","export type Price = number | string | null;\n\nexport function price(val: Price) {\n    if (val === null) return '$0.00';\n    let price: number = typeof val === 'string' ? Number(val) : val;\n    if (isNaN(price)) return '$0.00';\n    return `$${price.toFixed(2)}`;\n}\n","import React, { FC } from 'react';\nimport { Price, price } from '../utils/price';\n\ninterface Props {\n    num: Price;\n}\n\nexport function getPrice(val: Price) {\n    if (val === null) return '$0.00';\n    let price: number = typeof val === 'string' ? Number(val) : val;\n    if (isNaN(price)) return '$0.00';\n    return `$${price.toFixed(2)}`;\n}\n\nconst DisplayPrice: FC<Props> = ({ num }) => <span>{price(num)}</span>;\n\nexport default DisplayPrice;\n","import React, { FC } from 'react';\nimport { Image } from 'semantic-ui-react';\n\ninterface Props {\n    image_uri: string;\n    posX?: number;\n}\n\nconst TooltipImage: FC<Props> = ({ image_uri, posX = 0 }) => {\n    return (\n        <div\n            style={{\n                // We use the style prop over styled-components because it renders much faster!\n                position: 'absolute',\n                left: `${posX}px`,\n                width: '150px', // Width of the image when size=\"small\"\n                height: '209px', // Height of the image when size=\"small\"\n                borderRadius: '7px 7px 7px 7px',\n                boxShadow: '2px 2px 5px 0 rgba(0, 0, 0, 0.25)',\n                background:\n                    'repeating-linear-gradient(45deg, #bfbfbf, #bfbfbf 10px, #b0b0b0 10px, #b0b0b0 20px)',\n                zIndex: 5000,\n            }}\n        >\n            <Image\n                style={{ borderRadius: '7px 7px 7px 7px' }}\n                size=\"small\"\n                src={image_uri}\n            />\n        </div>\n    );\n};\n\nexport default TooltipImage;\n","import React, { useState, useContext, FC, MouseEvent } from 'react';\nimport { Button, Grid, Header, Label, Segment } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { SaleContext, SaleListCard } from '../context/SaleContext';\nimport Price from '../common/Price';\nimport TooltipImage from '../common/TooltipImage';\n\ninterface Props {\n    card: SaleListCard;\n}\n\nconst BoldHelp = styled.b`\n    cursor: help;\n`;\n\nconst SaleLineItem: FC<Props> = ({\n    card: {\n        display_name,\n        set,\n        finishCondition,\n        qtyToSell,\n        price,\n        rarity,\n        id,\n        cardImage,\n    },\n}) => {\n    const [hovered, setHovered] = useState(false);\n    const [mouseInside, setMouseInside] = useState<boolean>(false);\n    const [mousePos, setMousePos] = useState<{ X?: number }>({});\n    const { removeFromSaleList } = useContext(SaleContext);\n\n    const mouseEnter = (e: MouseEvent<HTMLElement>) => {\n        const node = e.target as HTMLElement;\n        const rect = node.getBoundingClientRect();\n        const X = Math.round(e.clientX - rect.x) + 30;\n        setMouseInside(true);\n        setMousePos({ X });\n    };\n\n    const mouseMove = (e: MouseEvent<HTMLElement>) => {\n        const node = e.target as HTMLElement;\n        const rect = node.getBoundingClientRect();\n        const X = Math.round(e.clientX - rect.x) + 30;\n        setMousePos({ X });\n    };\n\n    const mouseLeave = (e: MouseEvent) => setMouseInside(false);\n\n    return (\n        <Segment>\n            <Grid verticalAlign=\"middle\">\n                <Grid.Column tablet={16} computer={11}>\n                    <div>\n                        <BoldHelp\n                            onMouseEnter={mouseEnter}\n                            onMouseMove={mouseMove}\n                            onMouseLeave={mouseLeave}\n                        >\n                            <Header as=\"h4\">{display_name}</Header>\n                        </BoldHelp>\n                        <span>\n                            {mouseInside && (\n                                <TooltipImage\n                                    image_uri={cardImage}\n                                    posX={mousePos.X}\n                                />\n                            )}\n                        </span>\n                    </div>\n                    <i\n                        className={`ss ss-fw ss-${set} ss-${rarity}`}\n                        style={{ fontSize: '20px' }}\n                    />\n                    <Label color=\"grey\">{set.toUpperCase()}</Label>\n                    <div className=\"line-item-price\">\n                        {qtyToSell}x @ <Price num={price} />\n                        {' • '}\n                        {finishCondition && (\n                            <span>\n                                {finishCondition.split('_')[1]} {' | '}\n                                {finishCondition.split('_')[0]}\n                            </span>\n                        )}\n                    </div>\n                </Grid.Column>\n                <Grid.Column tablet={16} computer={5} textAlign=\"right\">\n                    <Button\n                        compact\n                        icon=\"cancel\"\n                        circular\n                        onClick={() => removeFromSaleList(id, finishCondition)}\n                        onMouseOver={() => setHovered(true)}\n                        onMouseOut={() => setHovered(false)}\n                        color={hovered ? 'red' : undefined}\n                    />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    );\n};\n\nexport default SaleLineItem;\n","/**\n * Sums numbers up\n */\nexport default function sum(nums: number[]): number {\n    return nums.reduce((acc, curr) => acc + curr, 0);\n}\n","import React, { FC } from 'react';\nimport Price from '../common/Price';\nimport { SaleListCard } from '../context/SaleContext';\nimport sum from '../utils/sum';\n\ninterface Props {\n    saleList: SaleListCard[];\n}\n\nconst SalePriceTotal: FC<Props> = ({ saleList }) => {\n    const total = sum(saleList.map((c) => c.qtyToSell * Number(c.price)));\n\n    return (\n        <div id=\"sale-price-total\">\n            <Price num={total} />\n        </div>\n    );\n};\n\nexport default SalePriceTotal;\n","import React, { useState, useContext, FC } from 'react';\nimport { Modal, Button, Header, Icon } from 'semantic-ui-react';\nimport { SaleContext } from '../context/SaleContext';\n\ninterface Props {}\n\nconst FinishSale: FC<Props> = () => {\n    const [submit, setSubmit] = useState({ loading: false, disabled: false });\n    const [showModal, setShowModal] = useState(false);\n    const { finalizeSale } = useContext(SaleContext);\n\n    const handleFinalizeSale = async () => {\n        setSubmit({ loading: true, disabled: true });\n        await finalizeSale();\n    };\n\n    const modalTrigger = (\n        <Button floated=\"right\" primary onClick={() => setShowModal(true)}>\n            Finalize sale\n        </Button>\n    );\n\n    return (\n        <Modal basic open={showModal} trigger={modalTrigger}>\n            <Modal.Content>\n                <Header inverted as=\"h2\">\n                    Finalize this sale?\n                </Header>\n                <p>\n                    Click 'Yes' to create a sale in Lightspeed. Ensure that you\n                    have all cards pulled and double-checked the customer list.\n                    Undoing this action will require manual data entry!\n                </p>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button\n                    basic\n                    color=\"red\"\n                    inverted\n                    onClick={() => setShowModal(false)}\n                >\n                    <Icon name=\"remove\" /> No\n                </Button>\n                <Button\n                    color=\"green\"\n                    inverted\n                    onClick={handleFinalizeSale}\n                    loading={submit.loading}\n                    disabled={submit.disabled}\n                >\n                    <Icon name=\"checkmark\" /> Yes\n                </Button>\n            </Modal.Actions>\n        </Modal>\n    );\n};\n\nexport default FinishSale;\n","import React, { FC } from 'react';\nimport SaleLineItem from './SaleLineItem';\nimport { Segment, Header, Icon } from 'semantic-ui-react';\nimport SalePriceTotal from './SalePriceTotal';\nimport FinishSale from './FinishSale';\nimport { SaleListCard } from '../context/SaleContext';\n\ninterface Props {\n    saleList: SaleListCard[];\n}\n\nconst CustomerSaleList: FC<Props> = ({ saleList }) => {\n    if (saleList.length === 0) {\n        return (\n            <Segment placeholder>\n                <Header icon>\n                    <Icon name=\"plus\" />\n                    <em>\"Give them what they need\"</em>\n                </Header>\n            </Segment>\n        );\n    }\n\n    return (\n        <>\n            <Segment.Group>\n                {saleList.map((card) => (\n                    <SaleLineItem\n                        key={`${card.id}${card.finishCondition}${card.qtyToSell}`}\n                        card={card}\n                    />\n                ))}\n            </Segment.Group>\n            <Segment clearing>\n                <Header floated=\"left\">\n                    <Header sub>Subtotal</Header>\n                    <SalePriceTotal saleList={saleList} />\n                </Header>\n                <FinishSale />\n            </Segment>\n        </>\n    );\n};\n\nexport default CustomerSaleList;\n","import React, { FC, useRef } from 'react';\nimport { useReactToPrint } from 'react-to-print';\nimport { Button, Icon } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport Price from '../common/Price';\nimport { SaleListCard } from '../context/SaleContext';\nimport SalePriceTotal from './SalePriceTotal';\n\ninterface Props {\n    saleListCards: SaleListCard[];\n}\n\nconst PrintWrapper = styled.div`\n    @media print {\n        background-color: white;\n        margin: 0;\n        padding: 0;\n        font-size: 30px;\n        line-height: 40px;\n        z-index: 5000;\n        overflow: hidden;\n    }\n    @media screen {\n        display: none !important;\n    }\n`;\n\nconst PrintList: FC<Props> = ({ saleListCards }) => {\n    const componentRef = useRef<HTMLDivElement>(null);\n\n    const handlePrint = useReactToPrint({\n        content: () => componentRef.current,\n    });\n\n    return (\n        <>\n            <div>\n                <Button size=\"tiny\" onClick={handlePrint} icon>\n                    <Icon name=\"print\" />\n                </Button>\n            </div>\n            <PrintWrapper ref={componentRef}>\n                <ul>\n                    {saleListCards.map((slc) => {\n                        return (\n                            <li key={slc.id}>\n                                <b>\n                                    {slc.display_name} | x{slc.qtyToSell} |{' '}\n                                    {slc.finishCondition} | {slc.set_name} |{' '}\n                                    <Price num={slc.price} />\n                                </b>\n                            </li>\n                        );\n                    })}\n                </ul>\n                <span>\n                    <b>\n                        Subtotal: <SalePriceTotal saleList={saleListCards} />\n                    </b>\n                </span>\n            </PrintWrapper>\n        </>\n    );\n};\n\nexport default PrintList;\n","import React, { useState, useEffect, FC } from 'react';\nimport axios from 'axios';\nimport { SUSPEND_SALE } from '../utils/api_resources';\nimport {\n    Modal,\n    Button,\n    Grid,\n    Form,\n    Message,\n    TextAreaProps,\n    DropdownProps,\n} from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport {\n    SaleContext,\n    SuspendedSale as SuspendedSaleT,\n} from '../context/SaleContext';\n\ninterface Props {\n    id: string;\n    saleListLength: number;\n    restoreSale: SaleContext['restoreSale'];\n    deleteSuspendedSale: SaleContext['deleteSuspendedSale'];\n    suspendSale: SaleContext['suspendSale'];\n}\n\ninterface SuspendButtonState {\n    suspendBtn: boolean;\n    restoreBtn: boolean;\n    deleteBtn: boolean;\n}\n\nconst Divider = styled.div`\n    border-left: 1px solid rgba(0, 0, 0, 0.2);\n    height: 100%;\n`;\n\nconst ClearMargin = styled.div`\n    margin-top: 0px;\n    margin-bottom: 0px;\n`;\n\nconst CharLimit = styled.p`\n    font-size: 12px;\n    color: rgba(0, 0, 0, 0.2);\n    float: right;\n`;\n\nconst SuspendedSale: FC<Props> = ({\n    restoreSale,\n    deleteSuspendedSale,\n    saleListLength,\n    suspendSale,\n    id,\n}) => {\n    const [sales, setSales] = useState<SuspendedSaleT[]>([]);\n    const [saleID, setSaleID] = useState<string>('');\n    const [modalOpen, setModalOpen] = useState<boolean>(false);\n    const [customerName, setCustomerName] = useState<string>('');\n    const [notes, setNotes] = useState<string>('');\n    const [disabled, setDisabled] = useState<boolean>(false);\n    const [loadingBtn, setLoadingBtn] = useState<SuspendButtonState>({\n        suspendBtn: false,\n        restoreBtn: false,\n        deleteBtn: false,\n    });\n\n    const getSales = async () => {\n        const { data }: { data: SuspendedSaleT[] } = await axios.get(\n            SUSPEND_SALE,\n            {\n                headers: makeAuthHeader(),\n            }\n        );\n        setSales(data);\n    };\n\n    const clearFields = () => {\n        setCustomerName('');\n        setNotes('');\n        setSaleID('');\n    };\n\n    // Get the previously suspended sales on mount and parent state (_id) change\n    useEffect(() => {\n        getSales();\n    }, [id]); // If the parent-level suspended-sale _id changes, we fetch again\n\n    const modalTrigger = (\n        <div>\n            <Button\n                size=\"tiny\"\n                id=\"suspend-sale-btn\"\n                onClick={() => setModalOpen(true)}\n                icon=\"ellipsis horizontal\"\n            />\n        </div>\n    );\n\n    const submitSuspendSale = async () => {\n        setDisabled(true);\n        setLoadingBtn({ ...loadingBtn, suspendBtn: true });\n        await suspendSale({ customerName, notes });\n        setModalOpen(false); // Close the modal to avoid \"flicker\" when state re-renders\n        await getSales(); // Parent _id does not change, re-fetch sales\n        clearFields();\n        setDisabled(false);\n        setLoadingBtn({ ...loadingBtn, suspendBtn: false });\n    };\n\n    const submitRestoreSale = async () => {\n        setDisabled(true);\n        setLoadingBtn({ ...loadingBtn, restoreBtn: true });\n        await restoreSale(saleID);\n        setModalOpen(false);\n        clearFields();\n        setDisabled(false);\n        setLoadingBtn({ ...loadingBtn, restoreBtn: false });\n    };\n\n    const submitDeleteSale = async () => {\n        setDisabled(true);\n        setLoadingBtn({ ...loadingBtn, deleteBtn: true });\n        await deleteSuspendedSale();\n        setModalOpen(false);\n        clearFields();\n        setDisabled(false);\n        setLoadingBtn({ ...loadingBtn, deleteBtn: false });\n    };\n\n    return (\n        <React.Fragment>\n            <Modal trigger={modalTrigger} open={modalOpen}>\n                <Modal.Header>Sales menu</Modal.Header>\n                <Modal.Content>\n                    <Grid columns={2} stackable relaxed=\"very\">\n                        {saleListLength > 0 && (\n                            <React.Fragment>\n                                <Grid.Column width=\"7\">\n                                    <h3>Suspend Sale</h3>\n                                    <Form>\n                                        <ClearMargin>\n                                            <Form.Input\n                                                id=\"suspend-sale-name\"\n                                                label=\"Customer Name\"\n                                                placeholder=\"Jace, the Mind Sculptor\"\n                                                value={customerName}\n                                                onChange={(e, { value }) =>\n                                                    setCustomerName(\n                                                        value.substring(0, 50)\n                                                    )\n                                                }\n                                            />\n                                        </ClearMargin>\n                                        <ClearMargin>\n                                            <CharLimit>\n                                                {customerName.length}/50\n                                            </CharLimit>\n                                        </ClearMargin>\n                                        <ClearMargin>\n                                            <Form.TextArea\n                                                label=\"Notes\"\n                                                placeholder=\"Sometimes, I forget things...\"\n                                                value={notes}\n                                                onChange={(\n                                                    e,\n                                                    { value }: TextAreaProps\n                                                ) => {\n                                                    if (\n                                                        typeof value ===\n                                                        'string'\n                                                    ) {\n                                                        setNotes(\n                                                            value.substring(\n                                                                0,\n                                                                150\n                                                            )\n                                                        );\n                                                    }\n                                                }}\n                                            />\n                                        </ClearMargin>\n                                        <ClearMargin>\n                                            <CharLimit>\n                                                {notes.length}/150\n                                            </CharLimit>\n                                        </ClearMargin>\n                                        <Form.Button\n                                            id=\"suspend-sale-submit\"\n                                            primary\n                                            disabled={disabled || !customerName}\n                                            loading={loadingBtn.suspendBtn}\n                                            onClick={submitSuspendSale}\n                                        >\n                                            Suspend Sale\n                                        </Form.Button>\n                                    </Form>\n                                </Grid.Column>\n                                <Grid.Column width=\"1\">\n                                    <Divider />\n                                </Grid.Column>\n                            </React.Fragment>\n                        )}\n                        <Grid.Column width=\"7\">\n                            <h3>Restore Sale</h3>\n                            {sales.length > 0 && (\n                                <React.Fragment>\n                                    <Form>\n                                        <Form.Select\n                                            fluid\n                                            label=\"Previously suspended sales\"\n                                            options={sales.map((s) => {\n                                                return {\n                                                    key: s._id,\n                                                    text: s.name,\n                                                    value: s._id,\n                                                };\n                                            })}\n                                            placeholder=\"Select a sale\"\n                                            onChange={(\n                                                e,\n                                                { value }: DropdownProps\n                                            ) => {\n                                                if (typeof value === 'string') {\n                                                    setSaleID(value);\n                                                }\n                                            }}\n                                        />\n                                        <Form.Button\n                                            primary\n                                            disabled={disabled || !saleID}\n                                            loading={loadingBtn.restoreBtn}\n                                            onClick={submitRestoreSale}\n                                        >\n                                            Restore Sale\n                                        </Form.Button>\n                                    </Form>\n                                </React.Fragment>\n                            )}\n                            {sales.length === 0 && (\n                                <Message info>\n                                    <Message.Header>No sales</Message.Header>\n                                    Suspend a sale first\n                                </Message>\n                            )}\n                        </Grid.Column>\n                    </Grid>\n                </Modal.Content>\n                <Modal.Actions>\n                    {!!id && (\n                        <Button\n                            color=\"red\"\n                            disabled={disabled}\n                            loading={loadingBtn.deleteBtn}\n                            onClick={submitDeleteSale}\n                        >\n                            Delete current Sale\n                        </Button>\n                    )}\n                    <Button\n                        primary\n                        disabled={disabled}\n                        onClick={() => setModalOpen(false)}\n                    >\n                        Cancel\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nexport default SuspendedSale;\n","export default function pluralize(quantity: number, word: string) {\n    return `${word}${quantity === 1 ? '' : 's'}`;\n}\n","import React, { FC } from 'react';\nimport { Label } from 'semantic-ui-react';\nimport pluralize from '../utils/pluralize';\n\ninterface Props {\n    listLength: number;\n}\n\nconst TotalCardsLabel: FC<Props> = ({ listLength }) => {\n    if (listLength === 0) return null;\n\n    return (\n        <Label color=\"grey\">\n            {listLength} {pluralize(listLength, 'card')}\n        </Label>\n    );\n};\n\nexport default TotalCardsLabel;\n","import React, { useState, useContext, FC } from 'react';\nimport $ from 'jquery';\nimport { Grid, Header, Divider } from 'semantic-ui-react';\nimport SearchBar from '../common/SearchBar';\nimport BrowseCardList from './BrowseCardList';\nimport CustomerSaleList from './CustomerSaleList';\nimport PrintList from './PrintList';\nimport SuspendedSale from './SuspendedSale';\nimport { InventoryCard } from '../utils/ScryfallCard';\nimport { SaleContext } from '../context/SaleContext';\nimport TotalCardsLabel from '../common/TotalCardsLabel';\nimport AllLocationInventory from '../ManageInventory/AllLocationInventory';\nimport styled from 'styled-components';\nimport sum from '../utils/sum';\nimport cardSearchQuery from '../common/cardSearchQuery';\n\ninterface Props {}\n\nconst HeaderContainer = styled('div')({\n    display: 'flex',\n    justifyContent: 'space-between',\n});\n\nconst ButtonContainer = styled('div')({\n    display: 'flex',\n    '& > *': {\n        marginLeft: '10px',\n    },\n});\n\nconst Sale: FC<Props> = () => {\n    const {\n        saleListCards,\n        suspendedSale,\n        restoreSale,\n        deleteSuspendedSale,\n        suspendSale,\n    } = useContext(SaleContext);\n\n    const [searchResults, setSearchResults] = useState<InventoryCard[]>([]);\n    const [searchTerm, setSearchTerm] = useState<string>('');\n\n    const handleResultSelect = async (term: string) => {\n        const cards = await cardSearchQuery({\n            cardName: term,\n            inStockOnly: true,\n        });\n\n        setSearchResults(cards);\n        setSearchTerm(term);\n\n        if (cards.length === 0) {\n            $('#searchBar').focus().select();\n        }\n    };\n\n    return (\n        <>\n            <SearchBar handleSearchSelect={handleResultSelect} />\n            <br />\n            <Grid stackable={true}>\n                <Grid.Row>\n                    <Grid.Column width=\"11\">\n                        <HeaderContainer>\n                            <Header as=\"h2\">Inventory</Header>\n                            {searchResults.length > 0 && (\n                                <AllLocationInventory\n                                    searchResults={searchResults}\n                                    title={searchResults[0].name}\n                                />\n                            )}\n                        </HeaderContainer>\n\n                        <Divider />\n\n                        <BrowseCardList\n                            term={searchTerm}\n                            cards={searchResults}\n                        />\n                    </Grid.Column>\n                    <Grid.Column width=\"5\">\n                        <HeaderContainer>\n                            <Header as=\"h2\" id=\"sale-header\">\n                                {suspendedSale.name === ''\n                                    ? 'Sale Items'\n                                    : `${suspendedSale.name}'s Items`}\n                                <TotalCardsLabel\n                                    listLength={sum(\n                                        saleListCards.map((c) => c.qtyToSell)\n                                    )}\n                                />\n                            </Header>\n                            <ButtonContainer>\n                                <SuspendedSale\n                                    restoreSale={restoreSale}\n                                    suspendSale={suspendSale}\n                                    saleListLength={saleListCards.length}\n                                    deleteSuspendedSale={deleteSuspendedSale}\n                                    id={suspendedSale._id}\n                                />\n                                {saleListCards.length > 0 && (\n                                    <PrintList saleListCards={saleListCards} />\n                                )}\n                            </ButtonContainer>\n                        </HeaderContainer>\n\n                        <Divider />\n\n                        <CustomerSaleList saleList={saleListCards} />\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </>\n    );\n};\n\nexport default Sale;\n","import moment from 'moment';\n\nfunction formatDate(date: string) {\n    return moment(date).format('MM/DD/YYYY - h:mm A');\n}\n\nexport default formatDate;\n","import React, { useState, createContext, FC } from 'react';\nimport _ from 'lodash';\nimport { v4 as uuid } from 'uuid';\nimport createToast from '../common/createToast';\nimport { InventoryCard } from '../utils/ScryfallCard';\nimport receivingQuery from './receivingQuery';\nimport cardSearchQuery from '../common/cardSearchQuery';\n\ninterface Props {}\n\nexport enum Trade {\n    Cash = 'CASH',\n    Credit = 'CREDIT',\n}\n\n// Customers can only receive cash or credit for their assets\nconst TRADE_TYPES = { CASH: Trade.Cash, CREDIT: Trade.Credit };\n\nexport type ReceivingCard = InventoryCard & {\n    uuid_key: string;\n    cashPrice: number | null;\n    marketPrice: number | null;\n    creditPrice: number | null;\n    tradeType: Trade;\n};\n\ninterface Context {\n    searchResults: InventoryCard[];\n    receivingList: ReceivingCard[];\n    handleSearchSelect: (term: string) => void;\n    addToList: (\n        quantity: number,\n        card: InventoryCard,\n        meta: AddToListMeta\n    ) => void;\n    removeFromList: (uuid: string) => void;\n    activeTradeType: (uuid: string, tradeType: Trade) => void;\n    selectAll: (trade: Trade) => void;\n    commitToInventory: () => void;\n    resetSearchResults: () => void;\n}\n\nconst defaultContext: Context = {\n    searchResults: [],\n    receivingList: [],\n    handleSearchSelect: () => null,\n    addToList: () => null,\n    removeFromList: () => null,\n    activeTradeType: () => null,\n    selectAll: () => null,\n    commitToInventory: () => null,\n    resetSearchResults: () => null,\n};\n\ninterface AddToListMeta {\n    cashPrice: number | null;\n    marketPrice: number | null;\n    creditPrice: number | null;\n    finishCondition: string;\n}\n\nexport const ReceivingContext = createContext<Context>(defaultContext);\n\nconst ReceivingProvider: FC<Props> = ({ children }) => {\n    const [searchResults, setSearchResults] = useState<InventoryCard[]>([]);\n    const [receivingList, setReceivingList] = useState<ReceivingCard[]>([]);\n\n    const handleSearchSelect = async (term: string) => {\n        const cards = await cardSearchQuery({\n            cardName: term,\n            inStockOnly: false,\n        });\n\n        setSearchResults(cards);\n    };\n\n    /**\n     * Adds a card to the receiving list, with a unique uuid\n     */\n    const addToList = (\n        quantity: number,\n        card: InventoryCard,\n        { cashPrice, marketPrice, creditPrice, finishCondition }: AddToListMeta\n    ) => {\n        const previousState = [...receivingList];\n\n        // Each line-item represents one card. Use _.times() to repeat\n        const cardsToAdd: ReceivingCard[] = [...new Array(quantity)].map(() => {\n            // TODO: This is funky as hell. We have to clone() to create a new object\n            // or object.assign retains a reference to the merging object\n            return _.clone(\n                Object.assign(card, {\n                    cashPrice,\n                    marketPrice,\n                    creditPrice,\n                    finishCondition,\n                    // Set to cash if customer doesn't want credit\n                    tradeType: creditPrice === 0 ? Trade.Cash : Trade.Credit,\n                    uuid_key: uuid(),\n                })\n            );\n        });\n\n        setReceivingList(_.sortBy([...previousState, ...cardsToAdd], 'name'));\n    };\n\n    /**\n     * Removes a card from the receiving list using the uuid\n     */\n    const removeFromList = (uuid_key: string) => {\n        const copiedState = [...receivingList];\n        _.remove(copiedState, (e) => e.uuid_key === uuid_key); // Mutates array\n        setReceivingList(copiedState);\n    };\n\n    /**\n     * Determines whether line-items use cash or credit.\n     * Assigns a new trade type.\n     */\n    const activeTradeType = (uuid_key: string, tradeType: Trade) => {\n        setReceivingList(\n            [...receivingList].map((card) => {\n                if (card.uuid_key === uuid_key) {\n                    card.tradeType = TRADE_TYPES[tradeType];\n                }\n                return card;\n            })\n        );\n    };\n\n    /**\n     * Sets all items to a tradeType, if possible\n     */\n    const selectAll = (selectType: Trade) => {\n        const { CASH, CREDIT } = TRADE_TYPES;\n\n        const newState = [...receivingList].map((card) => {\n            if (\n                selectType === CASH &&\n                card.cashPrice !== null &&\n                card.cashPrice > 0\n            )\n                card.tradeType = selectType;\n            else if (\n                selectType === CREDIT &&\n                card.creditPrice !== null &&\n                card.creditPrice > 0\n            )\n                card.tradeType = selectType;\n\n            return card;\n        });\n\n        setReceivingList(newState);\n    };\n\n    /** We want to filter out cards with possible `null` finishConditions, this is the target type */\n    type DefinedFinishCondition = Omit<ReceivingCard, 'finishCondition'> & {\n        finishCondition: string;\n    };\n\n    /** This allows us to filter out finishConditions that are `null` */\n    const isDefined = (card: ReceivingCard): card is DefinedFinishCondition => {\n        return card.finishCondition !== null;\n    };\n\n    /**\n     * Persists all passed cards to inventory\n     */\n    const commitToInventory = async () => {\n        try {\n            const cardsToCommit = receivingList\n                .filter(isDefined)\n                .map((card) => ({\n                    quantity: 1, // Only committing one per line-item\n                    marketPrice: card.marketPrice,\n                    cashPrice: card.cashPrice,\n                    creditPrice: card.creditPrice,\n                    tradeType: card.tradeType,\n                    finishCondition: card.finishCondition,\n                    id: card.id,\n                    name: card.name,\n                    set_name: card.set_name,\n                    set: card.set,\n                }));\n\n            await receivingQuery({ cards: cardsToCommit });\n\n            setSearchResults([]);\n            setReceivingList([]);\n\n            createToast({\n                color: 'green',\n                header: `${receivingList.length} cards were added to inventory!`,\n                duration: 2000,\n            });\n        } catch (e) {\n            console.log(e);\n            createToast({\n                color: 'red',\n                header: 'Error',\n                message: e.response.data || 'Error receiving cards',\n                duration: 2000,\n            });\n        }\n    };\n\n    const resetSearchResults = () => setSearchResults([]);\n\n    return (\n        <ReceivingContext.Provider\n            value={{\n                searchResults,\n                receivingList,\n                handleSearchSelect,\n                addToList,\n                removeFromList,\n                activeTradeType,\n                selectAll,\n                commitToInventory,\n                resetSearchResults,\n            }}\n        >\n            {children}\n        </ReceivingContext.Provider>\n    );\n};\n\nexport default ReceivingProvider;\n","import React, { FC } from 'react';\nimport { Table } from 'semantic-ui-react';\nimport sum from '../utils/sum';\nimport { Sale } from './browseSalesQuery';\nimport formatDate from '../utils/formatDate';\n\ninterface Props {\n    sale: Sale;\n}\n\nconst SalesListItem: FC<Props> = ({ sale }) => {\n    const { card_list, sale_data } = sale;\n\n    const quantitySold = sum(card_list.map((c) => Number(c.qtyToSell)));\n\n    return (\n        <Table.Row>\n            <Table.Cell>{sale_data.saleID}</Table.Cell>\n            <Table.Cell>{formatDate(sale_data.createTime)}</Table.Cell>\n            <Table.Cell>{quantitySold}</Table.Cell>\n        </Table.Row>\n    );\n};\n\nexport default SalesListItem;\n","import React, { FC } from 'react';\nimport SalesListItem from './SalesListItem';\nimport { Table } from 'semantic-ui-react';\nimport { Sale } from './browseSalesQuery';\n\ninterface Props {\n    list: Sale[];\n}\n\nconst SalesList: FC<Props> = ({ list }) => {\n    return (\n        <Table celled unstackable compact>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Sale ID</Table.HeaderCell>\n                    <Table.HeaderCell>Date of Sale</Table.HeaderCell>\n                    <Table.HeaderCell>Quantity Sold</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n                {list.map((sale) => (\n                    <SalesListItem sale={sale} />\n                ))}\n            </Table.Body>\n        </Table>\n    );\n};\n\nexport default SalesList;\n","import axios from 'axios';\nimport { FinishCondition } from '../utils/ScryfallCard';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { GET_SALES_BY_TITLE } from '../utils/api_resources';\n\ninterface SaleData {\n    total: string;\n    saleID: string;\n    timeStamp: string;\n    createTime: string;\n}\n\ninterface SaleCard {\n    foil: boolean;\n    nonfoil: boolean;\n    id: string;\n    name: string;\n    set: string;\n    set_name: string;\n    rarity: string;\n    reserved: true;\n    finishCondition: FinishCondition;\n    price: string | number;\n    qtyToSell: string | number;\n    card_faces: string | number;\n}\n\nexport interface Sale {\n    _id: string;\n    sale_data: SaleData;\n    card_list: SaleCard[];\n}\n\ninterface Response {\n    data: Sale[];\n}\n\ninterface Payload {\n    cardName: string;\n}\n\nconst browseSalesQuery = async ({ cardName }: Payload) => {\n    try {\n        const { data }: Response = await axios.get(GET_SALES_BY_TITLE, {\n            params: { cardName: cardName },\n            headers: makeAuthHeader(),\n        });\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default browseSalesQuery;\n","import React, { FC, useState } from 'react';\nimport SearchBar from '../common/SearchBar';\nimport SalesList from './SalesList';\nimport { Header, Divider } from 'semantic-ui-react';\nimport browseSalesQuery, { Sale } from './browseSalesQuery';\n\nconst BrowseSales: FC = () => {\n    const [salesList, setSalesList] = useState<Sale[]>([]);\n    const [cardName, setCardName] = useState<string>('');\n\n    const handleSearchSelect = async (cardName: string) => {\n        const sales = await browseSalesQuery({ cardName });\n\n        setSalesList(sales);\n        setCardName(cardName);\n    };\n\n    return (\n        <div>\n            <SearchBar handleSearchSelect={handleSearchSelect} />\n\n            <Header as=\"h2\">Browse Sales</Header>\n            <Divider />\n\n            <span>\n                <em>\n                    {cardName !== '' && (\n                        <h4>\n                            {salesList.length} results for {cardName}\n                        </h4>\n                    )}\n                </em>\n            </span>\n            <SalesList list={salesList} />\n        </div>\n    );\n};\n\nexport default BrowseSales;\n","import React, { FC } from 'react';\nimport { Image as SurImage, Label } from 'semantic-ui-react';\nimport MarketPrice from '../common/MarketPrice';\nimport styled from 'styled-components';\nimport { InventoryCard } from '../utils/ScryfallCard';\nimport parseQoh from '../utils/parseQoh';\n\ninterface Props {\n    card: InventoryCard;\n}\n\n// These numbers were the originally calculated px values\nconst cardImageRatio = 418.3 / 300;\nconst cardImageWidth = 275;\nconst cardImageHeight = cardImageRatio * cardImageWidth;\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: ${cardImageWidth}px;\n`;\n\nconst InventoryWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    justify-content: space-between;\n    padding: 5px;\n    background-color: rgba(0, 0, 0, 0.9);\n    border-radius: 10px 10px 10px 10px;\n    box-shadow: 2px 2px 5px 0 rgba(0, 0, 0, 0.25);\n`;\n\nconst InventoryRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    margin: 5px;\n`;\n\nconst ImageWrapper = styled.div`\n    width: ${cardImageWidth}px;\n    height: ${cardImageHeight}px;\n    box-shadow: 2px 2px 5px 0 rgba(0, 0, 0, 0.25);\n    background: repeating-linear-gradient(\n        45deg,\n        #bfbfbf,\n        #bfbfbf 10px,\n        #b0b0b0 10px,\n        #b0b0b0 20px\n    );\n    border-radius: 15px;\n`;\n\nconst Image = styled(SurImage)({\n    borderRadius: '15px',\n});\n\nconst PublicCardItem: FC<Props> = ({ card }) => {\n    const { id, cardImage } = card;\n    const [foilQty, nonfoilQty] = parseQoh(card.qoh);\n\n    return (\n        <Wrapper>\n            <ImageWrapper>\n                <Image src={cardImage} size=\"medium\" />\n            </ImageWrapper>\n            <InventoryWrapper>\n                {foilQty > 0 && (\n                    <InventoryRow>\n                        <Label color=\"blue\" image>\n                            Foil<Label.Detail>{foilQty}</Label.Detail>\n                        </Label>\n                        <MarketPrice\n                            id={id}\n                            finish=\"FOIL\"\n                            round\n                            showMid={false}\n                        />\n                    </InventoryRow>\n                )}\n                {nonfoilQty > 0 && (\n                    <InventoryRow>\n                        <Label color=\"blue\" image>\n                            Nonfoil<Label.Detail>{nonfoilQty}</Label.Detail>\n                        </Label>\n                        <MarketPrice\n                            id={id}\n                            finish=\"NONFOIL\"\n                            round\n                            showMid={false}\n                        />\n                    </InventoryRow>\n                )}\n            </InventoryWrapper>\n        </Wrapper>\n    );\n};\n\nexport default PublicCardItem;\n","import React, { FC, SyntheticEvent, useState } from 'react';\nimport axios from 'axios';\nimport { Grid, Segment, Header, Icon, Form, Select } from 'semantic-ui-react';\nimport SearchBar from '../common/SearchBar';\nimport { GET_CARDS_WITH_INFO_PUBLIC } from '../utils/api_resources';\nimport { InventoryCard, ScryfallApiCard } from '../utils/ScryfallCard';\nimport { Formik } from 'formik';\nimport { ClubhouseLocation } from '../context/AuthProvider';\nimport styled from 'styled-components';\nimport PublicCardItem from './PublicCardItem';\n\ninterface State {\n    searchResults: InventoryCard[];\n    searchTerm: string;\n    selectedLocation: ClubhouseLocation;\n}\n\ninterface FormValues {\n    searchTerm: string;\n    selectedLocation: ClubhouseLocation;\n}\n\nconst GridContainer = styled('div')({\n    display: 'grid',\n    gridGap: '20px',\n    gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))',\n    justifyItems: 'center',\n});\n\nconst StyledFormGroup = styled(Form.Group)({\n    alignItems: 'flex-end',\n});\n\nconst initialState: State = {\n    searchResults: [],\n    searchTerm: '',\n    selectedLocation: 'ch1',\n};\n\nconst initialFormState: FormValues = {\n    searchTerm: '',\n    selectedLocation: 'ch1',\n};\n\nconst locationOptions = [\n    { key: 'beaverton', text: 'CH Beaverton', value: 'ch1' },\n    { key: 'hillsboro', text: 'CH Hillsboro', value: 'ch2' },\n];\n\nconst PublicInventory: FC = () => {\n    const [state, setState] = useState<State>(initialState);\n    const [formSubmitted, setFormSubmitted] = useState<boolean>(false);\n\n    const fetchCards = async ({\n        title,\n        location,\n    }: {\n        title: string;\n        location: ClubhouseLocation;\n    }) => {\n        try {\n            const { data }: { data: ScryfallApiCard[] } = await axios.get(\n                GET_CARDS_WITH_INFO_PUBLIC,\n                {\n                    params: {\n                        title,\n                        location,\n                        matchInStock: true,\n                    },\n                }\n            );\n\n            setState({\n                ...state,\n                searchResults: data.map((c) => new InventoryCard(c)),\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    return (\n        <>\n            <Formik\n                onSubmit={async ({\n                    searchTerm,\n                    selectedLocation,\n                }: FormValues) => {\n                    await fetchCards({\n                        title: searchTerm,\n                        location: selectedLocation,\n                    });\n\n                    setFormSubmitted(true);\n                }}\n                initialValues={initialFormState}\n            >\n                {({ values, handleSubmit, setFieldValue, isSubmitting }) => (\n                    <Form>\n                        <StyledFormGroup widths=\"5\">\n                            <Form.Field>\n                                <label>Card search</label>\n                                <SearchBar\n                                    handleSearchSelect={(value) =>\n                                        setFieldValue('searchTerm', value)\n                                    }\n                                />\n                            </Form.Field>\n                            <Form.Field\n                                label=\"Store location\"\n                                control={Select}\n                                value={values.selectedLocation}\n                                options={locationOptions}\n                                onChange={(\n                                    _: SyntheticEvent,\n                                    { value }: { value: ClubhouseLocation }\n                                ) => setFieldValue('selectedLocation', value)}\n                            />\n                            <Form.Button\n                                type=\"submit\"\n                                primary\n                                disabled={!values.searchTerm}\n                                loading={isSubmitting}\n                                onClick={() => handleSubmit()}\n                            >\n                                Search\n                            </Form.Button>\n                        </StyledFormGroup>\n                    </Form>\n                )}\n            </Formik>\n            <br />\n            <Grid stackable={true}>\n                <Grid.Column>\n                    <Header as=\"h2\">\n                        Inventory Search\n                        <Header.Subheader>\n                            <em>\n                                Card prices subject to change. Consult a\n                                Clubhouse employee for final estimates\n                            </em>\n                        </Header.Subheader>\n                    </Header>\n                    {state.searchResults.length > 0 ? (\n                        <GridContainer>\n                            {state.searchResults.map((c) => (\n                                <PublicCardItem key={c.id} card={c} />\n                            ))}\n                        </GridContainer>\n                    ) : (\n                        <Segment placeholder>\n                            <Header icon>\n                                <Icon name=\"search\" />\n                                {formSubmitted ? (\n                                    <span>No cards found in stock</span>\n                                ) : (\n                                    <span>Search for a card</span>\n                                )}\n                            </Header>\n                        </Segment>\n                    )}\n                </Grid.Column>\n            </Grid>\n        </>\n    );\n};\n\nexport default PublicInventory;\n","import React from 'react';\nimport SearchBar from '../common/SearchBar';\nimport { GET_SET_NAMES } from '../utils/api_resources';\nimport axios from 'axios';\nimport { Form, Input, Select, Dropdown, Segment } from 'semantic-ui-react';\nimport makeAuthHeader from '../utils/makeAuthHeader';\n\nconst formatDropdownOptions = [\n    { key: 'qw', value: '', text: 'None' },\n    { key: 'we', value: 'standard', text: 'Standard' },\n    { key: 'er', value: 'future', text: 'Future' },\n    { key: 'rt', value: 'historic', text: 'Historic' },\n    { key: 'ty', value: 'pioneer', text: 'Pioneer' },\n    { key: 'yu', value: 'modern', text: 'Modern' },\n    { key: 'ui', value: 'legacy', text: 'Legacy' },\n    { key: 'io', value: 'pauper', text: 'Pauper' },\n    { key: 'op', value: 'vintage', text: 'Vintage' },\n    { key: 'as', value: 'penny', text: 'Penny' },\n    { key: 'sd', value: 'commander', text: 'Commander' },\n    { key: 'df', value: 'brawl', text: 'Brawl' },\n    { key: 'fg', value: 'duel', text: 'Duel' },\n    { key: 'gh', value: 'oldschool', text: 'Oldschool' },\n];\n\nconst priceFilterDropdownOptions = [\n    { key: 'gte', value: 'gte', text: '>=' },\n    { key: 'lte', value: 'lte', text: '<=' },\n    { key: 'gtx', value: 'gt', text: '>' },\n    { key: 'ltx', value: 'lt', text: '<' },\n];\n\nconst finishDropdownOptions = [\n    { key: 'nonfoil_foil', value: '', text: 'None' },\n    { key: 'nonfoil', value: 'NONFOIL', text: 'Nonfoil' },\n    { key: 'foil', value: 'FOIL', text: 'Foil' },\n];\n\nconst sortByDropdownOptions = [\n    { key: 'pricesort', value: 'price', text: 'Price' },\n    { key: 'alphasort', value: 'name', text: 'Card Name' },\n];\n\nconst sortByDirectionDropdownOptions = [\n    { key: 'descdirsort', value: 1, text: 'Ascending' },\n    { key: 'ascdirsort', value: -1, text: 'Descending' },\n];\n\nconst sortByColorDropdownOptions = [\n    { key: 'w', value: 'W', text: 'White' },\n    { key: 'u', value: 'U', text: 'Blue' },\n    { key: 'b', value: 'B', text: 'Black' },\n    { key: 'r', value: 'R', text: 'Red' },\n    { key: 'g', value: 'G', text: 'Green' },\n];\n\nconst colorSpecificityDropdownOptions = [\n    { key: 'all', value: '', text: 'None' },\n    { key: 'colorless', value: 'colorless', text: 'Colorless only' },\n    { key: 'mono', value: 'mono', text: 'Monocolor only' },\n    { key: 'multi', value: 'multi', text: 'Multicolor only' },\n];\n\nconst typeLineOptions = [\n    { key: 'na', value: '', text: 'None' },\n    { key: 'artifact', value: 'Artifact', text: 'Artifact' },\n    { key: 'creature', value: 'Creature', text: 'Creature' },\n    { key: 'enchantment', value: 'Enchantment', text: 'Enchantment' },\n    { key: 'instant', value: 'Instant', text: 'Instant' },\n    { key: 'land', value: 'Land', text: 'Land' },\n    { key: 'planeswalker', value: 'Planeswalker', text: 'Planeswalker' },\n    { key: 'sorcery', value: 'Sorcery', text: 'Sorcery' },\n    { key: 'tribal', value: 'Tribal', text: 'Tribal' },\n];\n\nconst frameOptions = [\n    { key: 'na', value: '', text: 'None' },\n    { key: 'borderless', value: 'borderless', text: 'Borderless' },\n    { key: 'extendedArt', value: 'extendedArt', text: 'Extended Art' },\n    { key: 'extendedArt', value: 'showcase', text: 'Showcase' },\n];\n\nconst initialState = {\n    title: '',\n    setName: '',\n    format: '',\n    priceNum: '',\n    priceFilter: 'gte',\n    finish: '',\n    sortBy: 'price',\n    colorsArray: [],\n    sortByDirection: -1,\n    colorSpecificity: '',\n    typeLine: '',\n    setNames: [],\n    frame: '',\n};\n\nexport default class DeckboxCloneForm extends React.Component {\n    state = { editionDropdownOptions: [], ...initialState };\n\n    handleSearchSelect = (name) => this.setState({ title: name });\n\n    // When the user blurs the search field, we need to re-set state. Otherwise it won't clear from handleSearchSelect()\n    handleSearchBlur = (e, d) => this.setState({ title: e.target.value });\n\n    handleChange = (e, { value }) => this.setState({ [e.target.name]: value });\n\n    handleDropdownChange = (e, data) =>\n        this.setState({ [data.name]: data.value });\n\n    async componentDidMount() {\n        const { data } = await axios.get(GET_SET_NAMES, {\n            headers: makeAuthHeader(),\n        });\n        const setNameOptions = data.map((d, idx) => {\n            return { key: `set${idx}`, value: d, text: d };\n        });\n        const concatWithBlankOption = [\n            { key: 'snull', value: '', text: 'None' },\n        ].concat(setNameOptions);\n        this.setState({ editionDropdownOptions: concatWithBlankOption });\n    }\n\n    render() {\n        const {\n            title,\n            setName,\n            format,\n            priceNum,\n            priceFilter,\n            finish,\n            sortBy,\n            sortByDirection,\n            colorsArray,\n            colorSpecificity,\n            typeLine,\n            frame,\n        } = this.state;\n\n        // Sort the colors here and concat prior to sending to the backend\n        const colors = colorsArray.sort().join('');\n\n        return (\n            <Segment>\n                <h3>Filters</h3>\n                <Form>\n                    <Form.Group widths=\"4\">\n                        <Form.Field>\n                            <label>Card Name</label>\n                            <SearchBar\n                                handleSearchSelect={this.handleSearchSelect}\n                                value={this.state.title}\n                                name=\"title\"\n                                onBlur={this.handleSearchBlur}\n                            />\n                        </Form.Field>\n                        <Form.Field\n                            control={Select}\n                            label=\"Format\"\n                            placeholder=\"Format\"\n                            options={formatDropdownOptions}\n                            name=\"format\"\n                            onChange={this.handleDropdownChange}\n                        />\n                        <Form.Field\n                            control={Select}\n                            label=\"Edition\"\n                            placeholder=\"Edition\"\n                            search\n                            options={this.state.editionDropdownOptions}\n                            name=\"setName\"\n                            onChange={this.handleDropdownChange}\n                        />\n                        <Form.Field\n                            control={Select}\n                            label=\"Finish\"\n                            placeholder=\"Finish\"\n                            options={finishDropdownOptions}\n                            name=\"finish\"\n                            onChange={this.handleDropdownChange}\n                        />\n                    </Form.Group>\n                    <Form.Group widths=\"4\">\n                        <Form.Field\n                            control={Select}\n                            multiple\n                            label=\"Colors\"\n                            placeholder=\"Colors\"\n                            options={sortByColorDropdownOptions}\n                            name=\"colorsArray\"\n                            onChange={this.handleDropdownChange}\n                        />\n\n                        <Form.Field\n                            control={Select}\n                            label=\"Color specificity\"\n                            placeholder=\"Color specificity\"\n                            options={colorSpecificityDropdownOptions}\n                            name=\"colorSpecificity\"\n                            onChange={this.handleDropdownChange}\n                        />\n\n                        <Form.Field\n                            control={Select}\n                            label=\"Type Line\"\n                            placeholder=\"Type Line\"\n                            options={typeLineOptions}\n                            name=\"typeLine\"\n                            onChange={this.handleDropdownChange}\n                        />\n\n                        <Form.Field\n                            control={Select}\n                            label=\"Frame Effects\"\n                            placeholder=\"Effect\"\n                            options={frameOptions}\n                            name=\"frame\"\n                            onChange={this.handleDropdownChange}\n                        />\n\n                        <Form.Field>\n                            <label>Price Filter</label>\n                            <Input\n                                label={\n                                    <Dropdown\n                                        options={priceFilterDropdownOptions}\n                                        name=\"priceFilter\"\n                                        defaultValue=\"gte\"\n                                        onChange={this.handleDropdownChange}\n                                    />\n                                }\n                                placeholder=\"Enter a price\"\n                                labelPosition=\"left\"\n                                name=\"priceNum\"\n                                type=\"number\"\n                                onChange={this.handleDropdownChange}\n                            />\n                        </Form.Field>\n                    </Form.Group>\n\n                    <h3>{'Sort & Order'}</h3>\n\n                    <Form.Group>\n                        <Form.Field\n                            control={Select}\n                            label=\"Sort By\"\n                            placeholder=\"\"\n                            options={sortByDropdownOptions}\n                            defaultValue=\"price\"\n                            name=\"sortBy\"\n                            onChange={this.handleDropdownChange}\n                        />\n                        <Form.Field\n                            control={Select}\n                            label=\"Order\"\n                            options={sortByDirectionDropdownOptions}\n                            defaultValue={-1}\n                            name=\"sortByDirection\"\n                            onChange={this.handleDropdownChange}\n                        />\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Button\n                            primary\n                            onClick={() =>\n                                this.props.handleSubmit({\n                                    title,\n                                    setName,\n                                    format,\n                                    priceNum,\n                                    priceFilter,\n                                    finish,\n                                    sortBy,\n                                    sortByDirection,\n                                    colors,\n                                    colorSpecificity,\n                                    type: typeLine,\n                                    frame,\n                                })\n                            }\n                        >\n                            Submit\n                        </Form.Button>\n                    </Form.Group>\n                </Form>\n            </Segment>\n        );\n    }\n}\n","import React from 'react';\nimport { Table, Icon } from 'semantic-ui-react';\nimport Price from '../common/Price';\nimport TooltipImage from '../common/TooltipImage';\n\nconst conditionMap = {\n    NM: 'Near Mint',\n    LP: 'Light Play',\n    MP: 'Moderate Play',\n    HP: 'Heavy Play',\n};\n\nexport default class DeckboxCloneRow extends React.Component {\n    state = { mouseInside: false, mouseX: 0, mouseY: 0 };\n\n    mouseEnter = (e) => {\n        const mouseX = e.clientX - e.target.offsetLeft\n        const mouseY = e.clientY - e.target.offsetTop;\n        this.setState({ mouseInside: true, mouseX, mouseY });\n    }\n\n    mouseLeave = (e) => this.setState({ mouseInside: false });\n\n    mouseMove = (e) => {\n        const mouseX = e.clientX - e.target.offsetLeft\n        const mouseY = e.clientY - e.target.offsetTop;\n        this.setState({ mouseX, mouseY });\n    };\n\n    render() {\n        const { inventory, name, set_name, price, set, rarity, image_uri } = this.props;\n        const { mouseInside, mouseX } = this.state;\n        const finish = inventory.k.split('_')[0];\n        const condition = inventory.k.split('_')[1];\n\n        return <Table.Row>\n            <Table.Cell>\n                <span\n                    onMouseEnter={this.mouseEnter}\n                    onMouseLeave={this.mouseLeave}\n                    onMouseMove={this.mouseMove}\n                    style={{ cursor: 'help' }}\n                >\n                    {name}{' '}\n                </span>\n                {finish === 'FOIL' && <Icon name=\"star\" color=\"blue\" />}\n                {mouseInside && <TooltipImage image_uri={image_uri} posX={mouseX} />}\n            </Table.Cell>\n            <Table.Cell><i className={`ss ss-fw ss-${set} ss-${rarity}`} style={{ fontSize: '20px' }} />{\" \"}{set_name}</Table.Cell>\n            <Table.Cell>{conditionMap[condition]}</Table.Cell>\n            <Table.Cell>{inventory.v}</Table.Cell>\n            <Table.Cell><Price num={price} /></Table.Cell>\n        </Table.Row>\n    }\n}","import React from 'react';\nimport { GET_CARDS_BY_FILTER } from '../utils/api_resources';\nimport DeckboxCloneForm from './DeckboxCloneForm';\nimport DeckboxCloneRow from './DeckboxCloneRow';\nimport axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport {\n    Table,\n    Menu,\n    Icon,\n    Dimmer,\n    Loader,\n    Segment,\n    Header,\n    Container,\n} from 'semantic-ui-react';\nimport _ from 'lodash';\nconst LIMIT = 100; // Matching the backend for now\n\nexport default class DeckboxClone extends React.Component {\n    state = {\n        data: [],\n        count: 0,\n        currentPage: 0,\n        numPages: 0,\n        pageArray: [],\n        isLoading: false,\n        cachedFilters: {},\n        showPages: [],\n        searchTouched: false, // Tracks whether the user has initially searched for the 'no results' message\n    };\n\n    fetchData = async (filters, page) => {\n        try {\n            this.setState({ isLoading: true });\n\n            const { data } = await axios.get(GET_CARDS_BY_FILTER, {\n                params: { ...filters, page },\n                headers: makeAuthHeader(),\n            });\n\n            const numPages = Math.ceil(data.total / LIMIT);\n            const pages = _.range(1, numPages + 1);\n            let showPages;\n\n            // Logic that controls the visibility of page number links\n            // Default max number pages to display is 5\n            if (page <= 3) {\n                showPages = pages.slice(0, 5);\n            } else if (page >= numPages - 2) {\n                showPages = pages.slice(numPages - 5, numPages);\n            } else {\n                showPages = pages.slice(page - 2, page + 3);\n            }\n\n            this.setState({\n                data: data.cards,\n                count: data.total,\n                isLoading: false,\n                numPages: numPages,\n                currentPage: page,\n                showPages: showPages,\n                searchTouched: true,\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    handleSubmit = async (filters) => {\n        this.setState({ cachedFilters: filters }); // Set the filters for pagination requests later\n        await this.fetchData(filters, 1); // On submit, starting page mut always be 1\n    };\n\n    handlePage = async (page) => {\n        await this.fetchData(this.state.cachedFilters, page);\n        this.setState({ currentPage: page });\n    };\n\n    render() {\n        const { data, isLoading, currentPage, numPages, count } = this.state;\n        const showLeftPageButtons = !(currentPage === 1);\n        const showRightPageButtons = !(currentPage === numPages);\n\n        return (\n            <Container>\n                <Dimmer\n                    active={isLoading}\n                    inverted\n                    page\n                    style={{ marginTop: '52.63px' }}\n                >\n                    <Loader size=\"large\">Loading</Loader>\n                </Dimmer>\n                <Segment secondary>\n                    <Icon name=\"exclamation triangle\" color=\"blue\" />\n                    Prices from this table are updated weekly and are subject to\n                    fluctuations. Consult 'New Sale' or 'Manage Inventory' for\n                    up-to-date values\n                </Segment>\n                <DeckboxCloneForm handleSubmit={this.handleSubmit} />\n\n                {!!data.length && (\n                    <Table celled striped compact>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell colSpan=\"5\">\n                                    <Menu floated=\"left\">\n                                        <Menu.Item>\n                                            Viewing page {currentPage} of{' '}\n                                            {numPages}\n                                        </Menu.Item>\n                                    </Menu>\n                                    <Menu floated=\"right\">\n                                        {showLeftPageButtons && (\n                                            <Menu.Item\n                                                as=\"a\"\n                                                icon\n                                                onClick={() =>\n                                                    this.handlePage(\n                                                        currentPage - 1\n                                                    )\n                                                }\n                                            >\n                                                <Icon name=\"chevron left\" />\n                                            </Menu.Item>\n                                        )}\n\n                                        <React.Fragment>\n                                            {this.state.showPages.map((p) => {\n                                                return (\n                                                    <Menu.Item\n                                                        key={`page-${p}`}\n                                                        onClick={() =>\n                                                            this.handlePage(p)\n                                                        }\n                                                        active={\n                                                            currentPage === p\n                                                        }\n                                                        disabled={\n                                                            currentPage === p\n                                                        }\n                                                        as=\"a\"\n                                                    >\n                                                        {p}\n                                                    </Menu.Item>\n                                                );\n                                            })}\n                                        </React.Fragment>\n\n                                        {showRightPageButtons && (\n                                            <Menu.Item\n                                                as=\"a\"\n                                                icon\n                                                onClick={() =>\n                                                    this.handlePage(\n                                                        currentPage + 1\n                                                    )\n                                                }\n                                            >\n                                                <Icon name=\"chevron right\" />\n                                            </Menu.Item>\n                                        )}\n                                    </Menu>\n                                </Table.HeaderCell>\n                            </Table.Row>\n                        </Table.Header>\n\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell>Name</Table.HeaderCell>\n                                <Table.HeaderCell>Edition</Table.HeaderCell>\n                                <Table.HeaderCell>Condition</Table.HeaderCell>\n                                <Table.HeaderCell>Qty</Table.HeaderCell>\n                                <Table.HeaderCell>Price</Table.HeaderCell>\n                            </Table.Row>\n                        </Table.Header>\n\n                        <Table.Body>\n                            {data.map((d) => (\n                                <DeckboxCloneRow\n                                    {...d}\n                                    key={`${d._id}${d.inventory.k}`}\n                                />\n                            ))}\n                        </Table.Body>\n\n                        <Table.Footer>\n                            <Table.Row>\n                                <Table.HeaderCell colSpan=\"5\">\n                                    <Menu floated=\"left\">\n                                        <Menu.Item>\n                                            Total results: {count}\n                                        </Menu.Item>\n                                    </Menu>\n                                    <Menu floated=\"right\">\n                                        {showLeftPageButtons && (\n                                            <Menu.Item\n                                                as=\"a\"\n                                                icon\n                                                onClick={() =>\n                                                    this.handlePage(\n                                                        currentPage - 1\n                                                    )\n                                                }\n                                            >\n                                                <Icon name=\"chevron left\" />\n                                            </Menu.Item>\n                                        )}\n\n                                        <React.Fragment>\n                                            {this.state.showPages.map((p) => {\n                                                return (\n                                                    <Menu.Item\n                                                        key={`page-${p}`}\n                                                        onClick={() =>\n                                                            this.handlePage(p)\n                                                        }\n                                                        active={\n                                                            currentPage === p\n                                                        }\n                                                        disabled={\n                                                            currentPage === p\n                                                        }\n                                                        as=\"a\"\n                                                    >\n                                                        {p}\n                                                    </Menu.Item>\n                                                );\n                                            })}\n                                        </React.Fragment>\n\n                                        {showRightPageButtons && (\n                                            <Menu.Item\n                                                as=\"a\"\n                                                icon\n                                                onClick={() =>\n                                                    this.handlePage(\n                                                        currentPage + 1\n                                                    )\n                                                }\n                                            >\n                                                <Icon name=\"chevron right\" />\n                                            </Menu.Item>\n                                        )}\n                                    </Menu>\n                                </Table.HeaderCell>\n                            </Table.Row>\n                        </Table.Footer>\n                    </Table>\n                )}\n\n                {!data.length && (\n                    <Segment placeholder>\n                        <Header icon>\n                            <Icon name=\"search\" />\n                            {this.state.searchTouched\n                                ? 'No results found'\n                                : 'Use the filters to browse inventory'}\n                        </Header>\n                    </Segment>\n                )}\n            </Container>\n        );\n    }\n}\n","import React, { SyntheticEvent } from 'react';\nimport createToast from '../common/createToast';\nimport { Form, Button, Segment, Select } from 'semantic-ui-react';\nimport { Redirect } from 'react-router-dom';\nimport { ClubhouseLocation, useAuthContext } from '../context/AuthProvider';\nimport styled from 'styled-components';\nimport { Formik } from 'formik';\n\ninterface FormValues {\n    username: string;\n    password: string;\n    location: ClubhouseLocation;\n}\n\nconst LoginContainer = styled.div`\n    margin-top: 15px;\n    display: flex;\n    justify-content: center;\n`;\n\nconst FormContainer = styled(Segment)`\n    width: 400px;\n    padding: 25px 25px 25px 25px !important;\n`;\n\nconst initialFormValues: FormValues = {\n    username: '',\n    password: '',\n    location: 'ch1',\n};\n\nconst Login = () => {\n    const { loggedIn, handleLogin } = useAuthContext();\n\n    const onSubmit = async ({ username, password, location }: FormValues) => {\n        const data = await handleLogin(username, password, location);\n\n        if (data.token) {\n            createToast({\n                color: 'green',\n                header: 'Success',\n                message: `Enjoy your time here!`,\n            });\n        } else {\n            createToast({\n                color: 'red',\n                header: 'Error',\n                message: data,\n            });\n        }\n    };\n\n    if (loggedIn) return <Redirect to=\"/manage-inventory\" />;\n\n    return (\n        <LoginContainer>\n            <Formik initialValues={initialFormValues} onSubmit={onSubmit}>\n                {({ values, handleSubmit, setFieldValue, isSubmitting }) => (\n                    <FormContainer raised loading={isSubmitting}>\n                        <Form>\n                            <Form.Field>\n                                <Form.Input\n                                    className=\"username-input\"\n                                    placeholder=\"Username\"\n                                    label=\"Username\"\n                                    value={values.username}\n                                    onChange={(_, { value }) =>\n                                        setFieldValue('username', value)\n                                    }\n                                />\n                            </Form.Field>\n                            <Form.Field>\n                                <Form.Input\n                                    className=\"password-input\"\n                                    placeholder=\"Password\"\n                                    type=\"password\"\n                                    label=\"Password\"\n                                    value={values.password}\n                                    onChange={(_, { value }) =>\n                                        setFieldValue('password', value)\n                                    }\n                                />\n                            </Form.Field>\n                            <Form.Field\n                                label=\"Location\"\n                                control={Select}\n                                value={values.location}\n                                placeholder=\"Select location\"\n                                options={[\n                                    {\n                                        key: 'beaverton',\n                                        text: 'Beaverton (The OG)',\n                                        value: 'ch1',\n                                    },\n                                    {\n                                        key: 'hillsboro',\n                                        text: 'Hillsboro',\n                                        value: 'ch2',\n                                    },\n                                ]}\n                                onChange={(\n                                    _: SyntheticEvent,\n                                    { value }: { value: ClubhouseLocation }\n                                ) => {\n                                    setFieldValue('location', value);\n                                }}\n                            />\n                            <Button\n                                primary\n                                fluid\n                                floated=\"right\"\n                                type=\"submit\"\n                                onClick={() => handleSubmit()}\n                                className=\"login-btn\"\n                                disabled={\n                                    !values.username ||\n                                    !values.password ||\n                                    !values.location\n                                }\n                            >\n                                Submit\n                            </Button>\n                        </Form>\n                    </FormContainer>\n                )}\n            </Formik>\n        </LoginContainer>\n    );\n};\n\nexport default Login;\n","import React, { FC } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useAuthContext } from '../context/AuthProvider';\n\nconst Logout: FC = () => {\n    const { handleLogout } = useAuthContext();\n    handleLogout();\n    return <Redirect to=\"/login\" />;\n};\n\nexport default Logout;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { RECEIVE_CARDS } from '../utils/api_resources';\nimport { Trade } from './ReceivingContext';\n\n// TODO: We should type this\ninterface Response {\n    data: any;\n}\n\ninterface ReceivingQueryCard {\n    quantity: number;\n    finishCondition: string;\n    id: string;\n    name: string;\n    set_name: string;\n    set: string;\n    marketPrice: number | null;\n    cashPrice: number | null;\n    creditPrice: number | null;\n    tradeType: Trade;\n}\n\ninterface Payload {\n    cards: ReceivingQueryCard[];\n}\n\nconst receivingQuery = async ({ cards }: Payload) => {\n    try {\n        const { data }: Response = await axios.post(\n            RECEIVE_CARDS,\n            { cards },\n            { headers: makeAuthHeader() }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default receivingQuery;\n","import React, { useState, useContext, FC, ChangeEvent } from 'react';\nimport $ from 'jquery';\nimport { Segment, Input, Button, Form, Select, Item } from 'semantic-ui-react';\nimport CardImage from '../common/CardImage';\nimport createToast from '../common/createToast';\nimport { ReceivingContext } from '../context/ReceivingContext';\nimport { finishes, cardConditions } from '../utils/dropdownOptions';\nimport checkCardFinish, { Finish } from '../utils/checkCardFinish';\nimport { InventoryCard } from '../utils/ScryfallCard';\nimport CardHeader from '../ui/CardHeader';\n\ninterface Props {\n    card: InventoryCard;\n}\n\nconst ReceivingSearchItem: FC<Props> = ({ card }) => {\n    const [quantity, setQuantity] = useState<number | null>(1);\n    const [cashPrice, setCashPrice] = useState<number | null>(0);\n    const [creditPrice, setCreditPrice] = useState<number | null>(0);\n    const [selectedCondition, setSelectedCondition] = useState<string>('NM');\n    const [marketPrice, setMarketPrice] = useState<number | null>(0);\n    const [selectedFinish, setSelectedFinish] = useState<Finish>(\n        checkCardFinish(card.nonfoil, card.foil).selectedFinish // seed state from props\n    );\n\n    // Determines whether the select finish dropdown is permanently disabled, seeded from props\n    const finishDisabled = checkCardFinish(card.nonfoil, card.foil)\n        .finishDisabled;\n\n    const { addToList } = useContext(ReceivingContext);\n\n    const handleFinishChange = (\n        e: ChangeEvent<HTMLInputElement>,\n        { value }: { value: Finish }\n    ) => setSelectedFinish(value);\n\n    const handleConditionChange = (\n        e: ChangeEvent<HTMLInputElement>,\n        { value }: { value: string }\n    ) => setSelectedCondition(value);\n\n    // Validates/sanitizes user inputs by tracking the `name` attribute of the input element\n    const handlePriceChange = (\n        e: ChangeEvent<HTMLInputElement>,\n        { value }: { value: string }\n    ) => {\n        let val: number | null = Number(value) || 0;\n        if (val < 0) val = 0;\n        if (value === '') val = null;\n\n        switch (e.target.name) {\n            case 'cashInput':\n                setCashPrice(val);\n                break;\n            case 'marketPriceInput':\n                setMarketPrice(val);\n                break;\n            case 'creditInput':\n                setCreditPrice(val);\n                break;\n            default:\n                break;\n        }\n    };\n\n    const handleQuantityChange = (\n        e: ChangeEvent<HTMLInputElement>,\n        { value }: { value: string }\n    ) => {\n        let val = parseInt(value, 10) || 0;\n        if (val < 0) val = 0; // cannot receive less than 0\n        if (val > 50) val = 50; // set max to 50 cards per single transaction\n        setQuantity(val);\n    };\n\n    const handleFocus = (e: ChangeEvent<HTMLInputElement>) => e.target.select();\n\n    const handleInventoryAdd = () => {\n        if (quantity) {\n            addToList(quantity, card, {\n                cashPrice,\n                marketPrice,\n                creditPrice,\n                finishCondition: `${selectedFinish}_${selectedCondition}`, // ex. NONFOIL_NM\n            });\n\n            setQuantity(1);\n            setCashPrice(0);\n            setMarketPrice(0);\n            setCreditPrice(0);\n            setSelectedCondition('NM');\n            setSelectedFinish(\n                checkCardFinish(card.nonfoil, card.foil).selectedFinish\n            );\n\n            createToast({\n                color: 'green',\n                header: `${quantity}x ${card.name} added to buylist!`,\n                duration: 2000,\n            });\n        }\n\n        // Highlight the input after successful card add\n        $('#searchBar').focus().select();\n    };\n\n    /**\n     * Determines whether the `Add` button should be disabled\n     */\n    const submitDisabled = () => {\n        const validateQty = !quantity;\n        const validateTradeTypes = !(cashPrice || creditPrice);\n        const validateMarketPrice = !marketPrice;\n\n        if (!!cashPrice) {\n            return validateQty || validateTradeTypes || validateMarketPrice;\n        }\n\n        return validateQty || validateTradeTypes;\n    };\n\n    const { image_uris, card_faces, cardImage } = card;\n\n    return (\n        <Segment>\n            <Item.Group divided>\n                <Item>\n                    <Item.Image size=\"small\">\n                        <CardImage image={cardImage} />\n                    </Item.Image>\n                    <Item.Content>\n                        <CardHeader\n                            card={card}\n                            selectedFinish={selectedFinish}\n                            showMid\n                        />\n                        <Item.Description>\n                            <Form>\n                                <Form.Group widths=\"12\">\n                                    <Form.Field\n                                        control={Input}\n                                        type=\"number\"\n                                        label=\"Quantity\"\n                                        value={quantity}\n                                        onChange={handleQuantityChange}\n                                        onFocus={(\n                                            e: ChangeEvent<HTMLInputElement>\n                                        ) => e.target.select()}\n                                        className=\"receiving-quantity\"\n                                    />\n                                    <Form.Field\n                                        label=\"Credit Price\"\n                                        name=\"creditInput\"\n                                        control={Input}\n                                        type=\"number\"\n                                        value={creditPrice}\n                                        onChange={handlePriceChange}\n                                        onFocus={handleFocus}\n                                        step=\"0.25\"\n                                        className=\"receiving-credit\"\n                                    />\n                                    <Form.Field\n                                        label=\"Cash Price\"\n                                        name=\"cashInput\"\n                                        control={Input}\n                                        type=\"number\"\n                                        value={cashPrice}\n                                        onChange={handlePriceChange}\n                                        onFocus={handleFocus}\n                                        step=\"0.25\"\n                                        className=\"receiving-cash\"\n                                    />\n                                    <Form.Field\n                                        label=\"Market Price\"\n                                        name=\"marketPriceInput\"\n                                        control={Input}\n                                        type=\"number\"\n                                        value={marketPrice}\n                                        onChange={handlePriceChange}\n                                        onFocus={handleFocus}\n                                        step=\"0.25\"\n                                        disabled={cashPrice === 0}\n                                        className=\"receiving-market\"\n                                    />\n                                </Form.Group>\n                                <Form.Group widths=\"12\">\n                                    <Form.Field\n                                        label=\"Finish\"\n                                        control={Select}\n                                        value={selectedFinish}\n                                        options={finishes}\n                                        disabled={finishDisabled}\n                                        onChange={handleFinishChange}\n                                    />\n                                    <Form.Field\n                                        label=\"Condition\"\n                                        control={Select}\n                                        value={selectedCondition}\n                                        options={cardConditions}\n                                        onChange={handleConditionChange}\n                                    />\n                                    <Form.Button\n                                        label=\"Add to List?\"\n                                        control={Button}\n                                        primary\n                                        disabled={submitDisabled()}\n                                        onClick={handleInventoryAdd}\n                                    >\n                                        Add\n                                    </Form.Button>\n                                </Form.Group>\n                            </Form>\n                        </Item.Description>\n                    </Item.Content>\n                </Item>\n            </Item.Group>\n        </Segment>\n    );\n};\n\nexport default ReceivingSearchItem;\n","import React, { FC } from 'react';\nimport { Segment, Header, Icon } from 'semantic-ui-react';\n\ninterface Props {\n    active: boolean;\n}\n\nconst DefaultPlaceholder: FC<Props> = ({ active, children }) => {\n    return (\n        <>\n            {active && (\n                <Segment placeholder>\n                    <Header icon>\n                        <Icon name=\"search\" />\n                        <em>{children}</em>\n                    </Header>\n                </Segment>\n            )}\n        </>\n    );\n};\n\nexport default DefaultPlaceholder;\n","import React, { useState, useContext, FC, MouseEvent } from 'react';\nimport { Button, Label, Icon, Grid, Segment, Header } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport Price from '../common/Price';\nimport {\n    ReceivingCard,\n    ReceivingContext,\n    Trade,\n} from '../context/ReceivingContext';\nimport TooltipImage from '../common/TooltipImage';\n\ninterface Props {\n    card: ReceivingCard;\n}\n\nconst BoldHelp = styled.b`\n    cursor: help;\n`;\n\n// Defines whether it uses cash or credit for trade types\nconst TRADE_TYPE = { CASH: 'CASH', CREDIT: 'CREDIT' };\n\nconst ReceivingListItem: FC<Props> = ({\n    card: {\n        display_name,\n        set,\n        rarity,\n        cashPrice,\n        creditPrice,\n        finishCondition,\n        uuid_key,\n        tradeType,\n        cardImage,\n    },\n}) => {\n    const { CASH, CREDIT } = TRADE_TYPE;\n    const [hovered, setHovered] = useState(false);\n    const [mouseInside, setMouseInside] = useState(false);\n    const [mousePos, setMousePos] = useState<{ X?: number }>({});\n    const { removeFromList, activeTradeType } = useContext(ReceivingContext);\n\n    const mouseEnter = (e: MouseEvent<HTMLElement>) => {\n        const node = e.target as HTMLElement;\n        const rect = node.getBoundingClientRect();\n        const X = Math.round(e.clientX - rect.x) + 30;\n        setMouseInside(true);\n        setMousePos({ X });\n    };\n\n    const mouseMove = (e: MouseEvent<HTMLElement>) => {\n        const node = e.target as HTMLElement;\n        const rect = node.getBoundingClientRect();\n        const X = Math.round(e.clientX - rect.x) + 30;\n        setMousePos({ X });\n    };\n\n    const mouseLeave = () => setMouseInside(false);\n\n    return (\n        <Segment>\n            <Grid verticalAlign=\"middle\">\n                <Grid.Column tablet={16} computer={11}>\n                    <div>\n                        <BoldHelp\n                            onMouseEnter={mouseEnter}\n                            onMouseMove={mouseMove}\n                            onMouseLeave={mouseLeave}\n                        >\n                            <Header as=\"h4\">{display_name}</Header>\n                        </BoldHelp>\n                        <span>\n                            {mouseInside && (\n                                <TooltipImage\n                                    image_uri={cardImage}\n                                    posX={mousePos.X}\n                                />\n                            )}\n                        </span>\n                    </div>\n                    <i\n                        className={`ss ss-fw ss-${set} ss-${rarity}`}\n                        style={{ fontSize: '20px' }}\n                    />\n                    <Label color=\"grey\">{set.toUpperCase()}</Label>\n                    {finishCondition && (\n                        <span>\n                            {finishCondition.split('_')[1]} {' | '}\n                            {finishCondition.split('_')[0]}\n                        </span>\n                    )}\n                    <div>\n                        <span style={{ whiteSpace: 'nowrap' }}>\n                            Cash:{' '}\n                            <b>\n                                <Price num={cashPrice || 0} />\n                            </b>\n                        </span>\n                        {' • '}\n                        <span style={{ whiteSpace: 'nowrap' }}>\n                            Credit:{' '}\n                            <b>\n                                <Price num={creditPrice || 0} />\n                            </b>\n                        </span>\n                    </div>\n                </Grid.Column>\n                <Grid.Column tablet={16} computer={5} textAlign=\"right\">\n                    <Button\n                        compact\n                        active={tradeType === CASH}\n                        color={tradeType === CASH ? 'blue' : undefined}\n                        onClick={() => activeTradeType(uuid_key, Trade.Cash)}\n                        disabled={cashPrice === 0}\n                        icon\n                    >\n                        <Icon name=\"dollar sign\"></Icon>\n                    </Button>\n                    <Button\n                        compact\n                        active={tradeType === CREDIT}\n                        color={tradeType === CREDIT ? 'blue' : undefined}\n                        onClick={() => activeTradeType(uuid_key, Trade.Credit)}\n                        disabled={creditPrice === 0}\n                        icon\n                    >\n                        <Icon name=\"credit card outline\"></Icon>\n                    </Button>\n                    <Button\n                        compact\n                        icon=\"cancel\"\n                        circular\n                        onClick={() => removeFromList(uuid_key)}\n                        onMouseOver={() => setHovered(true)}\n                        onMouseOut={() => setHovered(false)}\n                        color={hovered ? 'red' : undefined}\n                    />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    );\n};\n\nexport default ReceivingListItem;\n","import React, { FC } from 'react';\nimport _ from 'lodash';\nimport Price from '../common/Price';\nimport { Table } from 'semantic-ui-react';\nimport { ReceivingCard } from '../context/ReceivingContext';\n\ninterface Props {\n    receivingList: ReceivingCard[];\n}\n\n// Am I crazy or is this logic really convoluted?\n// Perhaps look at this down the line for improvement...\nconst CashReport: FC<Props> = ({ receivingList }) => {\n    // If id, cashPrice and marketPrice are the same, goes in one bucket\n    const countByPriceAndID = _.chain(receivingList)\n        .filter((c) => c.tradeType === 'CASH')\n        .map((c) => {\n            // Note: We're creating a unique uuid-esque comparator string based on:\n            // `id`, `cashPrice`, `marketPrice`, and `finishCondition`\n            return {\n                ...c,\n                temp_uuid: `${c.id}-${c.cashPrice}-${c.marketPrice}-${c.finishCondition}`,\n            };\n        })\n        .groupBy('temp_uuid')\n        .mapValues((val) => val.length)\n        .value();\n\n    const uniqLineItems = _.chain(receivingList)\n        .filter((c) => c.tradeType === 'CASH')\n        .map((c) => {\n            return {\n                ...c,\n                temp_uuid: `${c.id}-${c.cashPrice}-${c.marketPrice}-${c.finishCondition}`,\n            };\n        })\n        .uniqBy('temp_uuid')\n        .value();\n\n    const mergedWithQty = uniqLineItems.map((c) => {\n        return { ...c, tradeQty: countByPriceAndID[c.temp_uuid] }; // Add a trade quantity referencing the previous count\n    });\n\n    const totalCashOut = _.chain(receivingList)\n        .filter((c) => c.tradeType === 'CASH')\n        .sumBy((c) => c.cashPrice || 0)\n        .value();\n\n    return (\n        <React.Fragment>\n            <div id=\"cash-report\">\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell colSpan={6}>\n                                Employee Name:\n                            </Table.HeaderCell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.HeaderCell>Card Name</Table.HeaderCell>\n                            <Table.HeaderCell>Market Value</Table.HeaderCell>\n                            <Table.HeaderCell>Condition</Table.HeaderCell>\n                            <Table.HeaderCell>Quantity</Table.HeaderCell>\n                            <Table.HeaderCell>Cash Offer</Table.HeaderCell>\n                            <Table.HeaderCell>Cash Out</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {mergedWithQty.map((c) => {\n                            return (\n                                <Table.Row key={c.temp_uuid}>\n                                    <Table.Cell>{c.name}</Table.Cell>\n                                    <Table.Cell>\n                                        <Price num={c.marketPrice} />\n                                    </Table.Cell>\n                                    <Table.Cell>{c.finishCondition}</Table.Cell>\n                                    <Table.Cell>{c.tradeQty}</Table.Cell>\n                                    <Table.Cell>\n                                        <Price num={c.cashPrice} />\n                                    </Table.Cell>\n                                    <Table.Cell>\n                                        <Price\n                                            num={\n                                                c.tradeQty * (c.cashPrice || 0)\n                                            }\n                                        />\n                                    </Table.Cell>\n                                </Table.Row>\n                            );\n                        })}\n                    </Table.Body>\n                    <Table.Footer>\n                        <Table.HeaderCell colSpan={6}>\n                            Total: <Price num={totalCashOut} />\n                        </Table.HeaderCell>\n                    </Table.Footer>\n                </Table>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default CashReport;\n","import React, { useState, useContext, FC } from 'react';\nimport { Modal, Header, Button } from 'semantic-ui-react';\nimport { ReceivingContext } from '../context/ReceivingContext';\nimport Price from '../common/Price';\n\ninterface Props {\n    cashTotal: number;\n    creditTotal: number;\n}\n\nconst ReceivingListModal: FC<Props> = ({ cashTotal, creditTotal }) => {\n    const [loading, setLoading] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n\n    const { receivingList, commitToInventory } = useContext(ReceivingContext);\n\n    const submitToInventory = async () => {\n        setLoading(true);\n        await commitToInventory();\n        setLoading(false);\n    };\n\n    return (\n        <Modal\n            closeOnDimmerClick={false}\n            trigger={\n                <Button\n                    id=\"commit-to-inv\"\n                    color=\"blue\"\n                    disabled={receivingList.length === 0}\n                    onClick={() => setShowModal(true)}\n                >\n                    Commit to inventory\n                </Button>\n            }\n            open={showModal}\n            onClose={() => setShowModal(false)}\n            basic\n            style={{ marginTop: '50px' }}\n        >\n            <Header>Confirm receipt of new inventory?</Header>\n            <Modal.Content>\n                <p>\n                    <b>\n                        Pressing 'Submit' will commit the following items to\n                        inventory:\n                    </b>\n                </p>\n                <ul>\n                    {receivingList.map((c) => {\n                        return (\n                            <li key={c.uuid_key}>\n                                {c.name} | {c.set_name}({c.set.toUpperCase()})\n                            </li>\n                        );\n                    })}\n                </ul>\n                <div>\n                    <p>\n                        <b>The customer is owed: </b>\n                    </p>\n                    <ul>\n                        {cashTotal > 0 ? (\n                            <li>\n                                <Price num={cashTotal} /> in cold, hard cash\n                            </li>\n                        ) : null}\n                        {creditTotal > 0 ? (\n                            <li>\n                                <Price num={creditTotal} /> in store credit\n                            </li>\n                        ) : null}\n                    </ul>\n                </div>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button\n                    basic\n                    color=\"red\"\n                    inverted\n                    onClick={() => setShowModal(false)}\n                >\n                    Cancel\n                </Button>\n                <Button\n                    id=\"submit-to-inv\"\n                    color=\"green\"\n                    inverted\n                    loading={loading}\n                    disabled={loading}\n                    onClick={submitToInventory}\n                >\n                    Submit\n                </Button>\n            </Modal.Actions>\n        </Modal>\n    );\n};\n\nexport default ReceivingListModal;\n","import React, { useState, useContext, FC } from 'react';\nimport { Segment, Statistic, Button, Modal } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport Price from '../common/Price';\nimport CashReport from './CashReport';\nimport printCashReport from './printCashReport';\nimport ReceivingListModal from './ReceivingListModal';\nimport { ReceivingContext, Trade } from '../context/ReceivingContext';\nimport sum from '../utils/sum';\n\ninterface Props {}\n\nconst FlexRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nconst FlexCol = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n    min-height: 100px;\n`;\n\nconst StatisticColor = styled(Statistic.Label)`\n    color: gray !important;\n`;\n\nconst ReceivingListTotals: FC<Props> = () => {\n    const { Cash, Credit } = Trade;\n    const [showCashModal, setShowCashModal] = useState(false);\n    const { receivingList, selectAll } = useContext(ReceivingContext);\n\n    const openCashModal = () => setShowCashModal(true);\n    const closeCashModal = () => setShowCashModal(false);\n\n    const handlePrintCashReport = () => {\n        setShowCashModal(false); // Close the modal so users don't have to after printing in new tab\n        printCashReport();\n    };\n\n    const cashTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Cash)\n            .map((c) => c.cashPrice || 0)\n    );\n\n    const creditTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Credit)\n            .map((c) => c.creditPrice || 0)\n    );\n\n    return (\n        <Segment>\n            <FlexRow>\n                <FlexCol>\n                    <Button.Group>\n                        <Button\n                            id=\"select-all-cash\"\n                            onClick={() => selectAll(Trade.Cash)}\n                        >\n                            Select all cash\n                        </Button>\n                        <Button.Or />\n                        <Button\n                            id=\"select-all-credit\"\n                            onClick={() => selectAll(Trade.Credit)}\n                        >\n                            Select all credit\n                        </Button>\n                    </Button.Group>\n                    <Modal\n                        open={showCashModal}\n                        trigger={\n                            <Button\n                                color={cashTotal > 0 ? 'green' : undefined}\n                                disabled={cashTotal === 0}\n                                onClick={openCashModal}\n                            >\n                                Generate cash report\n                            </Button>\n                        }\n                    >\n                        <Modal.Content>\n                            <CashReport receivingList={receivingList} />\n                        </Modal.Content>\n                        <Modal.Actions>\n                            <Button\n                                onClick={handlePrintCashReport}\n                                color=\"blue\"\n                            >\n                                Print Report\n                            </Button>\n                            <Button onClick={closeCashModal}>Cancel</Button>\n                        </Modal.Actions>\n                    </Modal>\n                </FlexCol>\n                <FlexCol>\n                    <Segment>\n                        <div>\n                            <Statistic size=\"mini\">\n                                <StatisticColor>Cash Due</StatisticColor>\n                                <Statistic.Value id=\"cash-total\">\n                                    <Price num={cashTotal} />\n                                </Statistic.Value>\n                            </Statistic>\n                            <Statistic size=\"mini\">\n                                <StatisticColor>Credit Due</StatisticColor>\n                                <Statistic.Value id=\"credit-total\">\n                                    <Price num={creditTotal} />\n                                </Statistic.Value>\n                            </Statistic>\n                        </div>\n                        <ReceivingListModal\n                            cashTotal={cashTotal}\n                            creditTotal={creditTotal}\n                        />\n                    </Segment>\n                </FlexCol>\n            </FlexRow>\n        </Segment>\n    );\n};\n\nexport default ReceivingListTotals;\n","const printStyle = `\n    body {\n        font-family: 'helvetica neue', helvetica, arial, sans-serif;\n    }\n\n    table {\n        table-layout: fixed;\n        width: 100%;\n        border-collapse: collapse;\n        border: 1px solid gray;\n        text-align: left;\n    }\n\n    thead th:nth-child(1) {\n        width: 30%;\n    }\n\n    thead th:nth-child(2) {\n        width: 20%;\n    }\n\n    thead th:nth-child(3) {\n        width: 15%;\n    }\n\n    thead th:nth-child(4) {\n        width: 35%;\n    }\n\n    th, td {\n        border: 1px solid #ddd;\n        padding: 10px;\n    }\n\n    tfoot {\n        text-align: right !important;\n    }\n`;\n\n/**\n * We're creating a new tab here for the modal table and writing CSS to it - not the most elegant solution from a UX and\n * code standpoint, but time was of the essence for this release. Refactor down the road.\n *\n * The id cash-report is found on the cash report table\n */\nexport default function printCashReport() {\n    const divToPrint = document.getElementById('cash-report')!;\n    const popup = window.open('', '_blank');\n    if (popup) {\n        popup.document.open();\n        popup.document.write(`<html>`);\n        popup.document.write(`<head>`);\n        popup.document.write(`<title>Cash Report</title>`);\n        popup.document.write(`<style>${printStyle}</style>`);\n        popup.document.write(`</head>`);\n        popup.document.write(`<body onload=\"window.print()\">`);\n        popup.document.write(`${divToPrint.innerHTML}`);\n        popup.document.write(`</body>`);\n        popup.document.write(`</html>`);\n        popup.document.close();\n    }\n}\n","import React, { FC } from 'react';\nimport { Segment } from 'semantic-ui-react';\nimport { ReceivingCard } from '../context/ReceivingContext';\nimport ReceivingListItem from './ReceivingListItem';\nimport ReceivingListTotals from './ReceivingListTotals';\n\ninterface Props {\n    cards: ReceivingCard[];\n}\n\nconst ReceivingList: FC<Props> = ({ cards }) => {\n    return (\n        <>\n            {cards.length > 0 && (\n                <Segment.Group>\n                    {cards.map((card) => (\n                        <ReceivingListItem card={card} />\n                    ))}\n                </Segment.Group>\n            )}\n            {cards.length > 0 && <ReceivingListTotals />}\n        </>\n    );\n};\n\nexport default ReceivingList;\n","import React, { FC, useContext, useEffect } from 'react';\nimport SearchBar from '../common/SearchBar';\nimport ReceivingSearchItem from './ReceivingSearchItem';\nimport { Header, Grid, Divider } from 'semantic-ui-react';\nimport { ReceivingContext } from '../context/ReceivingContext';\nimport DefaultPlaceholder from './DefaultPlaceholder';\nimport ReceivingList from './ReceivingList';\nimport TotalCardsLabel from '../common/TotalCardsLabel';\nimport styled from 'styled-components';\nimport AllLocationInventory from '../ManageInventory/AllLocationInventory';\n\ninterface Props {}\n\nconst HeaderContainer = styled('div')({\n    display: 'flex',\n    justifyContent: 'space-between',\n});\n\nconst Receiving: FC<Props> = () => {\n    const {\n        searchResults,\n        receivingList,\n        handleSearchSelect,\n        resetSearchResults,\n    } = useContext(ReceivingContext);\n\n    // Reset the search results on componentDidUnmount to clear store\n    useEffect(() => {\n        return () => resetSearchResults();\n    }, []);\n\n    return (\n        <>\n            <SearchBar handleSearchSelect={handleSearchSelect} />\n            <br />\n            <Grid stackable={true}>\n                <Grid.Row>\n                    <Grid.Column width=\"10\">\n                        <HeaderContainer>\n                            <Header as=\"h2\">Card Search</Header>\n                            {searchResults.length > 0 && (\n                                <div>\n                                    <AllLocationInventory\n                                        searchResults={searchResults}\n                                        title={searchResults[0].name}\n                                    />\n                                </div>\n                            )}\n                        </HeaderContainer>\n\n                        <Divider />\n\n                        <DefaultPlaceholder active={!searchResults.length}>\n                            \"So many cards, so little time.\"\n                        </DefaultPlaceholder>\n\n                        {searchResults.map((card) => (\n                            <ReceivingSearchItem key={card.id} card={card} />\n                        ))}\n                    </Grid.Column>\n                    <Grid.Column width=\"6\">\n                        <Header as=\"h2\" style={{ display: 'inline-block' }}>\n                            Buylist\n                            <TotalCardsLabel\n                                listLength={receivingList.length}\n                            />\n                        </Header>\n\n                        <Divider />\n\n                        <DefaultPlaceholder active={!receivingList.length}>\n                            \"If you receive it, they will come.\"\n                        </DefaultPlaceholder>\n\n                        <ReceivingList cards={receivingList} />\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </>\n    );\n};\n\nexport default Receiving;\n","import React, { FC } from 'react';\nimport { Redirect, Route, RouteProps } from 'react-router';\nimport { useAuthContext } from './context/AuthProvider';\n\nconst AdminOnly: FC = ({ children }) => {\n    const { currentUser, currentLocation } = useAuthContext();\n\n    if (!currentUser || !currentLocation) {\n        return <Redirect to=\"/\" />;\n    }\n\n    return <>{children}</>;\n};\n\nconst AdminRoute: FC<RouteProps> = ({ children, ...props }) => {\n    return (\n        <Route {...props}>\n            <AdminOnly>{children}</AdminOnly>\n        </Route>\n    );\n};\n\nexport default AdminRoute;\n","export default __webpack_public_path__ + \"static/media/clubhouse_products.e622049f.png\";","export default __webpack_public_path__ + \"static/media/tables.451be904.jpg\";","export default __webpack_public_path__ + \"static/media/learn_to_play.91a17850.jpg\";","export default __webpack_public_path__ + \"static/media/ch2.f55f010a.jpg\";","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport clubhouse_products from './clubhouse_products.png';\nimport ch1 from './tables.jpg';\nimport learn_to_play from './learn_to_play.jpg';\nimport ch2 from './ch2.jpg';\n\nconst colors = {\n    primary: '#2185d0',\n    white: '#ffffff',\n    gray: {\n        light: '#99aab5',\n        main: '#2c2f33',\n        dark: '#23272a',\n    },\n};\n\nconst primaryRgb = '13, 49, 69,';\nconst bodyBackground = '#f8f5ef';\n\nconst desktopMediaQuery = `@media only screen and (min-width: 769px)`;\nconst tabletMediaQuery = `@media only screen and (max-width: 768px)`;\n\nconst headerHeight = 52;\nconst borderRadius = 7;\n\nconst HeroImageContainer = styled('div')({\n    width: '100%',\n    height: 500,\n});\n\nconst Container = styled('div')({\n    marginTop: headerHeight,\n});\n\ninterface ImageProps {\n    src: string;\n    rounded?: boolean;\n}\n\nconst Image = styled.div<ImageProps>`\n    background: url(${({ src }) => src});\n    background-size: cover;\n    height: 100%;\n    width: 100%;\n    border-radius: ${({ rounded }) => (rounded ? `${borderRadius}px` : '0px')};\n`;\n\nconst LocationImageContainer = styled('div')({\n    width: '100%',\n    height: 350,\n    borderRadius: borderRadius,\n});\n\nconst ImageGradient = styled('div')({\n    backgroundImage: `linear-gradient(\n        to top,\n        rgba(${primaryRgb} 0.9),\n        rgba(${primaryRgb} 0.85),\n        rgba(${primaryRgb} 0.70),\n        rgba(${primaryRgb} 0.60),\n        rgba(255, 255, 255, 0)\n    )`,\n    height: '100%',\n    width: '100%',\n});\n\nconst ImageGradient2 = styled('div')({\n    backgroundColor: `rgba(${primaryRgb} 0.85)`,\n    height: '100%',\n    width: '100%',\n    borderRadius: borderRadius,\n});\n\nconst HeroText = styled('h1')({\n    color: colors.white,\n    textAlign: 'center',\n    [tabletMediaQuery]: {\n        fontSize: 40,\n    },\n    [desktopMediaQuery]: {\n        fontSize: 50,\n    },\n});\n\ninterface HeaderTextProps {\n    inverted?: boolean;\n}\n\nconst HeaderText = styled.h1<HeaderTextProps>`\n    color: ${({ inverted }) => (inverted ? colors.white : colors.gray.main)};\n`;\n\nconst SectionText = styled('h2')({\n    color: colors.white,\n    textAlign: 'center',\n});\n\nconst SubheaderText = styled('div')({\n    color: colors.white,\n    fontSize: 18,\n});\n\nconst HeaderContainer = styled('div')({\n    display: 'flex',\n    height: 'inherit',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n});\n\nconst ServicesContainer = styled('div')({\n    display: 'grid',\n    gridGap: 60,\n    [tabletMediaQuery]: {\n        gridTemplateRows: '1fr 1fr 1fr',\n    },\n    [desktopMediaQuery]: {\n        gridTemplateColumns: '1fr 1fr 1fr',\n    },\n});\n\nconst LocationsContainer = styled('div')({\n    display: 'grid',\n    gridGap: 20,\n    [tabletMediaQuery]: {\n        gridTemplateRows: '1fr 1fr',\n    },\n    [desktopMediaQuery]: {\n        gridTemplateColumns: '1fr 1fr',\n    },\n});\n\nconst LocationContainer = styled('div')({\n    padding: 40,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    height: '100%',\n});\n\nconst Content = styled('div')({\n    padding: 20,\n});\n\ninterface DescriptionProps {\n    inverted?: boolean;\n}\n\nconst Description = styled.div<DescriptionProps>`\n    color: ${({ inverted }) => (inverted ? colors.white : colors.gray.main)};\n    font-size: 18px;\n`;\n\nconst TextWidth = styled('div')({\n    [tabletMediaQuery]: {\n        width: '100%',\n    },\n    [desktopMediaQuery]: {\n        width: '50%',\n    },\n});\n\nconst IconContainer = styled('div')({\n    padding: 40,\n    backgroundColor: colors.gray.main,\n    borderRadius: borderRadius,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n});\n\nconst SectionDivider = styled('div')({\n    width: '100%',\n    padding: 40,\n});\n\nconst Footer = styled('div')({\n    bottom: 0,\n    backgroundColor: colors.gray.dark,\n    [tabletMediaQuery]: {\n        padding: 20,\n    },\n    [desktopMediaQuery]: {\n        paddingLeft: 40,\n        paddingBottom: 20,\n        paddingRight: 40,\n        paddingTop: 40,\n    },\n});\n\ninterface FlexRowProps {\n    justify?: 'center' | 'space-between';\n}\n\nconst FlexRow = styled.div<FlexRowProps>`\n    display: flex;\n    justify-content: ${({ justify }) => justify || 'space-between'};\n    align-items: center;\n`;\n\nconst Home: FC = () => {\n    return (\n        <Container style={{ backgroundColor: bodyBackground }}>\n            <HeroImageContainer>\n                <Image src={learn_to_play}>\n                    <ImageGradient>\n                        <HeaderContainer>\n                            <HeroText>The Clubhouse is open 🎉</HeroText>\n                            <TextWidth>\n                                <SubheaderText>\n                                    <SectionText>\n                                        We are open all week for your tabletop\n                                        gaming needs!\n                                    </SectionText>\n                                </SubheaderText>\n                            </TextWidth>\n                            <br />\n                            <Link to=\"/public-inventory\">\n                                <Button size=\"huge\" primary>\n                                    Browse cards\n                                </Button>\n                            </Link>\n                        </HeaderContainer>\n                    </ImageGradient>\n                </Image>\n            </HeroImageContainer>\n            <SectionDivider />\n            <Content>\n                <HeaderText>Your local game store.</HeaderText>\n                <TextWidth>\n                    <Description>\n                        We take pride in our friendly community of players, and\n                        always ensure that our customers are well served.\n                    </Description>\n                </TextWidth>\n            </Content>\n            <Content>\n                <ServicesContainer>\n                    <div>\n                        <IconContainer>\n                            <Icon name=\"box\" size=\"huge\" inverted />\n                            <SectionText>Large product selection</SectionText>\n                        </IconContainer>\n                        <br />\n                        <Description>\n                            We stock an extensive selection of singles and CCG\n                            supplies just for you! When the deck-building itch\n                            strikes, turn to us\n                        </Description>\n                    </div>\n                    <div>\n                        <IconContainer>\n                            <Icon name=\"users\" size=\"huge\" inverted />\n                            <SectionText>Inclusive community</SectionText>\n                        </IconContainer>\n                        <br />\n                        <Description>\n                            Young or seasoned, beginner or advanced, we welcome\n                            all players!\n                        </Description>\n                    </div>\n                    <div>\n                        <IconContainer>\n                            <Icon name=\"dollar sign\" size=\"huge\" inverted />\n                            <SectionText>Cash or credit trade-ins</SectionText>\n                        </IconContainer>\n                        <br />\n                        <Description>\n                            Whether a whole collection or a single card, come on\n                            by and have one of our expert managers appraise it\n                            using competitive market rates\n                        </Description>\n                    </div>\n                </ServicesContainer>\n            </Content>\n            <SectionDivider />\n            <Content>\n                <HeaderText>Two convenient locations</HeaderText>\n                <LocationsContainer>\n                    <LocationImageContainer>\n                        <Image src={ch1} rounded>\n                            <ImageGradient2>\n                                <LocationContainer>\n                                    <HeaderText inverted>Beaverton</HeaderText>\n                                    <SectionDivider />\n                                    <div>\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"map marker alternate\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            13895 SW Farmington Rd, Beaverton,\n                                            OR 97005\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"clock\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            Mon - Fri 12pm to 7pm, Sat - Sun\n                                            11am to 7pm\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"phone\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            (503) 268-1449\n                                        </Description>\n                                    </div>\n                                </LocationContainer>\n                            </ImageGradient2>\n                        </Image>\n                    </LocationImageContainer>\n                    <LocationImageContainer>\n                        <Image src={ch2} rounded>\n                            <ImageGradient2>\n                                <LocationContainer>\n                                    <HeaderText inverted>Hillsboro</HeaderText>\n                                    <SectionDivider />\n                                    <div>\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"map marker alternate\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            1300 SW Oak St Suite B, Hillsboro,\n                                            OR 97123\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"clock\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            Mon - Fri 12pm to 7pm, Sat - Sun\n                                            11am to 7pm\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"phone\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            (971) 249-3096\n                                        </Description>\n                                    </div>\n                                </LocationContainer>\n                            </ImageGradient2>\n                        </Image>\n                    </LocationImageContainer>\n                </LocationsContainer>\n            </Content>\n            <SectionDivider />\n            <LocationImageContainer>\n                <Image src={clubhouse_products}>\n                    <ImageGradient>\n                        <HeaderContainer>\n                            <HeroText>We look forward to seeing you</HeroText>\n                            <TextWidth>\n                                <SubheaderText>\n                                    Follow us on Facebook or become a member of\n                                    our Discord community for up-to-date\n                                    announcements on store events, product\n                                    releases, pre-orders, and so much more!\n                                </SubheaderText>\n                            </TextWidth>\n                        </HeaderContainer>\n                    </ImageGradient>\n                </Image>\n            </LocationImageContainer>\n            <Footer>\n                <FlexRow>\n                    <Description inverted>© 2021 The Clubhouse</Description>\n                    <div>\n                        <a\n                            href=\"https://discord.gg/Wpej7dQ\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <Icon link name=\"discord\" size=\"huge\" inverted />\n                        </a>\n                        <a\n                            href=\"https://www.facebook.com/RGTClubhouse/\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <Icon link name=\"facebook\" size=\"huge\" inverted />\n                        </a>\n                    </div>\n                </FlexRow>\n                <FlexRow justify=\"center\">\n                    <Link to=\"/login\">\n                        <Button size=\"tiny\" color=\"black\">\n                            Staff login\n                        </Button>\n                    </Link>\n                </FlexRow>\n            </Footer>\n        </Container>\n    );\n};\n\nexport default Home;\n","import axios from 'axios';\nimport { FinishCondition } from '../utils/ScryfallCard';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { GET_RECEIVING_LIST } from '../utils/api_resources';\nimport { Trade } from '../context/ReceivingContext';\n\ninterface ReceivedCard {\n    quantity: number;\n    marketPrice: number;\n    cashPrice: number;\n    creditPrice: number;\n    tradeType: Trade;\n    finishCondition: FinishCondition;\n    id: string;\n    name: string;\n    set_name: string;\n    set: string;\n}\n\nexport interface Received {\n    _id: string;\n    created_at: string;\n    employee_number: string;\n    received_card_list: ReceivedCard[];\n}\n\ninterface Response {\n    data: Received[];\n}\n\ninterface Payload {\n    cardName: string | null;\n    startDate: string | null;\n    endDate: string | null;\n}\n\nconst browseReceivingQuery = async ({\n    cardName,\n    startDate,\n    endDate,\n}: Payload) => {\n    try {\n        const { data }: Response = await axios.get(GET_RECEIVING_LIST, {\n            // TODO: pass date params\n            params: { cardName },\n            headers: makeAuthHeader(),\n        });\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default browseReceivingQuery;\n","import React, { FC, useEffect, useState } from 'react';\nimport SearchBar from '../common/SearchBar';\nimport {\n    Header,\n    Button,\n    Loader,\n    Accordion,\n    List,\n    Segment,\n    Label,\n} from 'semantic-ui-react';\nimport browseReceivingQuery, { Received } from './browseReceivingQuery';\nimport pluralize from '../utils/pluralize';\nimport formatDate from '../utils/formatDate';\nimport { Trade } from '../context/ReceivingContext';\nimport displayFinishCondition from '../utils/finishCondition';\nimport { price } from '../utils/price';\n\nfunction alphaSort<T extends { name: string }>(arr: T[]) {\n    return [...arr].sort((a, b) => a.name.localeCompare(b.name));\n}\n\nfunction displayTrade(trade: Trade) {\n    if (trade === Trade.Credit) return 'Credit';\n    else if (trade === Trade.Cash) return 'Cash';\n}\n\nconst BrowseReceiving: FC = () => {\n    const [receivedList, setReceivedList] = useState<Received[]>([]);\n    const [cardName, setCardName] = useState<string | null>(null);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [count, setCount] = useState<number>(0);\n    const [activeIndex, setActiveIndex] = useState<number | null>(null);\n\n    useEffect(() => {\n        (async () => {\n            setLoading(true);\n            const received = await browseReceivingQuery({\n                cardName,\n                startDate: null,\n                endDate: null,\n            });\n            setLoading(false);\n            setReceivedList(received);\n        })();\n    }, [cardName]);\n\n    const handleSearchSelect = (cardName: string) => setCardName(cardName);\n\n    // This used to reset the key of the searchbar to force a rerender via key change and state reset\n    // Hacky but gets the job done until we can refactor the search bar component\n    const handleClear = () => {\n        setCount(count + 1);\n        setCardName(null);\n    };\n\n    return (\n        <div>\n            <SearchBar handleSearchSelect={handleSearchSelect} key={count} />\n            {cardName && <Button onClick={handleClear}>Clear</Button>}\n\n            <Header as=\"h2\">Browse Receiving</Header>\n            {loading ? (\n                <Loader active inline=\"centered\" />\n            ) : (\n                <Accordion>\n                    {receivedList.map((rl, idx) => {\n                        return (\n                            <ReceivingItem\n                                key={rl._id}\n                                received={rl}\n                                index={idx}\n                                activeIndex={activeIndex}\n                                onClick={(v) => {\n                                    if (v === activeIndex) {\n                                        setActiveIndex(null);\n                                    } else {\n                                        setActiveIndex(v);\n                                    }\n                                }}\n                            />\n                        );\n                    })}\n                </Accordion>\n            )}\n        </div>\n    );\n};\n\ninterface ReceivingItemProps {\n    received: Received;\n    index: number;\n    activeIndex: number | null;\n    onClick: (v: number) => void;\n}\n\nconst ReceivingItem: FC<ReceivingItemProps> = ({\n    received,\n    index,\n    activeIndex,\n    onClick,\n}) => {\n    const active = activeIndex === index;\n\n    return (\n        <Segment>\n            <Accordion.Title\n                active={active}\n                index={index}\n                onClick={(_, titleProps) => {\n                    if (typeof titleProps.index === 'number') {\n                        onClick(titleProps.index);\n                    }\n                }}\n            >\n                <List.Item>\n                    <List.Icon\n                        name=\"dropdown\"\n                        size=\"large\"\n                        verticalAlign=\"middle\"\n                    />\n\n                    <Label>\n                        {`${received.received_card_list.length} ${pluralize(\n                            received.received_card_list.length,\n                            'card'\n                        )}`}\n                    </Label>\n                    <span> {formatDate(received.created_at)}</span>\n                </List.Item>\n            </Accordion.Title>\n            <Accordion.Content active={active}>\n                <List divided relaxed>\n                    {alphaSort(received.received_card_list).map((c) => {\n                        return (\n                            <List.Item>\n                                <List.Content>\n                                    <List.Header>\n                                        <span>{c.name}</span>\n                                        <i\n                                            className={`ss ss-fw ss-${c.set}`}\n                                            style={{ fontSize: '20px' }}\n                                        />\n                                        <span>({c.set_name})</span>\n                                    </List.Header>\n                                    <List.Description>\n                                        <span>\n                                            {`${displayFinishCondition(\n                                                c.finishCondition\n                                            )} | ${displayTrade(c.tradeType)}`}\n                                        </span>\n                                        {c.tradeType === Trade.Credit && (\n                                            <span>\n                                                {` | Credit price: ${price(\n                                                    c.creditPrice\n                                                )}`}\n                                            </span>\n                                        )}\n                                        {c.tradeType === Trade.Cash && (\n                                            <span>\n                                                {` | Cash price: ${price(\n                                                    c.cashPrice\n                                                )} | Market price: ${price(\n                                                    c.marketPrice\n                                                )}`}\n                                            </span>\n                                        )}\n                                    </List.Description>\n                                </List.Content>\n                            </List.Item>\n                        );\n                    })}\n                </List>\n            </Accordion.Content>\n        </Segment>\n    );\n};\n\nexport default BrowseReceiving;\n","import React, { FC } from 'react';\nimport Header from './Header/Header';\nimport AuthProvider from './context/AuthProvider';\nimport { Switch, Route } from 'react-router-dom';\nimport ManageInventory from './ManageInventory/ManageInventory';\nimport Sale from './NewSale/Sale';\nimport BrowseSales from './BrowseSales/BrowseSales';\nimport PublicInventory from './PublicInventory/PublicInventory';\nimport DeckboxClone from './DeckboxClone/DeckboxClone';\nimport Login from './Login/Login';\nimport Logout from './Logout/Logout';\nimport Receiving from './Receiving/Receiving';\nimport styled from 'styled-components';\nimport { SaleProvider } from './context/SaleContext';\nimport ReceivingProvider from './context/ReceivingContext';\nimport InventoryProvider from './context/InventoryContext';\nimport AdminRoute from './AuthenticatedRoute';\nimport Home from './LandingPage/Home';\nimport BrowseReceiving from './BrowseReceiving/BrowseReceiving';\n\nconst ContentContainer = styled.div`\n    padding-top: 75px;\n    margin-left: 20px;\n    margin-right: 20px;\n`;\n\nconst BackgroundColor = styled.div`\n    background-color: #f9fafb;\n    min-height: 100vh;\n`;\n\nconst App: FC = () => {\n    return (\n        <AuthProvider>\n            <Header />\n            <Switch>\n                <Route exact path=\"/\" component={Home} />\n                <BackgroundColor>\n                    <ContentContainer id=\"content-container\">\n                        <AdminRoute exact path=\"/manage-inventory\">\n                            <InventoryProvider>\n                                <ManageInventory />\n                            </InventoryProvider>\n                        </AdminRoute>\n                        <AdminRoute exact path=\"/new-sale\">\n                            <SaleProvider>\n                                <Sale />\n                            </SaleProvider>\n                        </AdminRoute>\n                        <AdminRoute exact path=\"/receiving\">\n                            <ReceivingProvider>\n                                <Receiving />\n                            </ReceivingProvider>\n                        </AdminRoute>\n                        <AdminRoute exact path=\"/browse-sales\">\n                            <BrowseSales />\n                        </AdminRoute>\n                        <AdminRoute exact path=\"/browse-inventory\">\n                            <DeckboxClone />\n                        </AdminRoute>\n                        <AdminRoute exact path=\"/browse-receiving\">\n                            <BrowseReceiving />\n                        </AdminRoute>\n                        <Route\n                            exact\n                            path=\"/public-inventory\"\n                            component={PublicInventory}\n                        />\n                        <Route exact path=\"/login\" component={Login} />\n                        <Route exact path=\"/logout\" component={Logout} />\n                    </ContentContainer>\n                </BackgroundColor>\n            </Switch>\n        </AuthProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n    <HashRouter basename='/'>\n        <App />\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}