{"version":3,"sources":["utils/api_resources.ts","utils/makeAuthHeader.ts","context/loginQuery.ts","context/AuthProvider.tsx","ManageInventory/allLocationInventoryQuery.ts","ManageInventory/TotalStoreInventory.tsx","utils/createDisplayName.ts","utils/getCardImage.ts","utils/ScryfallCard.ts","context/cardSearchQuery.ts","context/InventoryContext.tsx","common/createToast.tsx","common/CardImage.tsx","utils/dropdownOptions.ts","utils/checkCardFinish.ts","ui/InventoryChip.tsx","utils/finishCondition.ts","utils/parseQoh.ts","common/QohLabels.tsx","common/Chip.tsx","common/marketPriceQuery.ts","common/MarketPrice.tsx","ui/SetIcon.tsx","ui/Button.tsx","utils/Language.ts","ui/CardHeader.tsx","ManageInventory/addCardToInventoryQuery.ts","ManageInventory/ManageInventoryListItem.tsx","ui/Typography.tsx","ui/Loading.tsx","common/autocompleteQuery.ts","ui/SearchBar.tsx","ui/ControlledSearchBar.tsx","ui/Placeholder.tsx","ManageInventory/ManageInventory.tsx","context/getSuspendedSaleQuery.ts","context/deleteSuspendedSaleQuery.ts","context/createSuspendedSaleQuery.ts","context/finishSaleQuery.tsx","context/SaleContext.tsx","utils/sortSaleList.ts","ui/FormikSelectField.tsx","utils/roundPrice.ts","Sale/SaleSearchCard.tsx","Sale/SaleSearchCardList.tsx","utils/price.ts","common/Price.tsx","ui/CardImageTooltip.tsx","Sale/SaleCartItem.tsx","utils/sum.ts","Sale/SaleCartPriceTotal.tsx","Sale/FinishSale.tsx","Sale/SaleCartList.tsx","Sale/PrintList.tsx","Sale/getSuspendedSalesQuery.ts","Sale/SuspendSaleButton.tsx","utils/pluralize.ts","common/TotalCardsLabel.tsx","utils/useInterruptExit.ts","Sale/Sale.tsx","utils/formatDate.ts","BrowseSales/BrowseSalesItem.tsx","BrowseSales/BrowseSalesList.tsx","BrowseSales/browseSalesQuery.ts","BrowseSales/BrowseSales.tsx","PublicInventory/PublicCard.tsx","PublicInventory/publicCardSearchQuery.ts","ui/ControlledDropdown.tsx","PublicInventory/PublicInventory.tsx","BrowseInventory/setNameQuery.ts","ui/ControlledMultiSelect.tsx","context/ReceivingContext.tsx","BrowseInventory/BrowseInventoryForm.tsx","BrowseInventory/BrowseInventoryRow.tsx","BrowseInventory/filteredCardsQuery.ts","BrowseInventory/BrowseInventory.tsx","Login/Login.tsx","Logout/Logout.tsx","context/receivingQuery.tsx","Receiving/ReceivingSearchItem.tsx","Receiving/ReceivingCartItem.tsx","Receiving/ReceivingCart.tsx","Receiving/CashReport.tsx","Receiving/ReceivingListModal.tsx","Receiving/ReceivingListTotals.tsx","Receiving/printCashReport.ts","Receiving/Receiving.tsx","AuthenticatedRoute.tsx","LandingPage/clubhouse_products.png","LandingPage/tables.jpg","LandingPage/learn_to_play.jpg","LandingPage/ch2.jpg","LandingPage/Home.tsx","BrowseReceiving/browseReceivingQuery.ts","ui/MetaData.tsx","utils/displayEmpty.ts","BrowseReceiving/receivedByIdQuery.ts","BrowseReceiving/BrowseReceivingListDialog.tsx","BrowseReceiving/BrowseReceivingItem.tsx","ui/FormikNativeDatePicker.tsx","BrowseReceiving/BrowseReceivingFilterDialog.tsx","BrowseReceiving/BrowseReceiving.tsx","Reporting/Reporting.tsx","NavBar/NavLinks.tsx","NavBar/NavBar.tsx","Reporting/reportingQuery.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["REACT_APP_ENVIRONMENT","process","env","getPrefix","FINISH_SALE","GET_CARD_FROM_ALL_LOCATIONS","ADD_CARD_TO_INVENTORY","RECEIVE_CARDS","GET_CARDS_BY_FILTER","GET_SET_NAMES","SUSPEND_SALE","LOGIN","GET_SALES_BY_TITLE","RECEIVING","GET_CARDS_WITH_INFO_PUBLIC","GET_CARDS_WITH_INFO","GET_REPORT","AUTOCOMPLETE","GET_LIVE_PRICE","makeAuthHeader","Authorization","localStorage","getItem","loginQuery","username","password","currentLocation","a","axios","post","toLowerCase","headers","data","AuthContext","React","createContext","loggedIn","currentUser","handleLogout","handleLogin","Promise","useAuthContext","useContext","AuthProvider","children","useState","setLoggedIn","setCurrentLocation","setCurrentUser","token","setItem","console","log","Provider","value","removeItem","allLocationInventoryQuery","title","get","params","StyledContainer","styled","display","FlexContainer","alignItems","marginLeft","QohLabel","label","Label","color","undefined","image","Detail","TotalStoreInventory","searchResults","ch1","foilQty","nonfoilQty","ch2","quantities","setQuantities","loading","setLoading","useEffect","Loader","active","inline","size","Header","sub","createDisplayName","card","name","frame_effects","border_color","lang","set","foil","nonfoil","promo_types","displayName","includes","length","toUpperCase","getCardImage","myImage","image_uris","normal","e","card_faces","ScryfallCard","id","printed_name","set_name","rarity","colors","type_line","display_name","cardImage","color_identity","tcgplayer_id","qoh","this","cardSearchQuery","cardName","inStockOnly","matchInStock","map","d","InventoryContext","changeCardQuantity","handleSearchSelect","InventoryProvider","setSearchResults","term","cards","copiedState","targetIndex","findIndex","ToastContainer","Message","createToast","header","message","duration","toaster","notify","compact","position","useStyles","makeStyles","imageStyle","boxShadow","zIndex","appBar","transition","hoveredStyle","transform","CardImage","hover","hovered","setHovered","onHover","val","src","className","clsx","onMouseOver","onMouseOut","finishes","key","text","cardConditions","checkCardFinish","selectedFinish","finishDisabled","container","borderRadius","chip","leftChip","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","rightChip","InventoryChip","forwardRef","props","ref","quantity","quantityColor","displayFinishCondition","finishCondition","FOIL_NM","FOIL_LP","FOIL_MP","FOIL_HP","NONFOIL_NM","NONFOIL_LP","NONFOIL_MP","NONFOIL_HP","parseQoh","createInventoryLineItems","inventoryQty","matchStrings","matches","filter","m","LabelWithPopup","popupLineItems","Tooltip","item","Typography","variant","Math","random","arrow","placement","QohLabels","foilQuantity","nonfoilQuantity","foilLineItems","nonfoilLineItems","foilContainer","backgroundColor","backgroundImage","border","Chip","marketPriceQuery","scryfallId","Axios","marketPrices","medianPrices","displayPrice","price","toFixed","MarketPrice","finish","round","showMid","market","setMarket","median","setMedian","isFoil","_isMounted","Number","n","loader","ceil","StyledIcon","fontSize","SetIcon","rarityClass","Button","primary","disableElevation","LANG_CODES","en","es","fr","de","it","pt","ja","ko","ru","zhs","zht","he","la","grc","ar","sa","px","language","languageCode","TcgPriceButton","tcgId","tcgUrl","Link","href","target","underline","disabled","SubheaderContainer","withStyles","root","marginRight","spacing","Box","CardHeader","addCardToInventoryQuery","payload","validate","errors","isInteger","ManageInventoryListItem","setSelectedFinish","initialFormValues","selectedCondition","onSubmit","resetForm","parseInt","cardInfo","$","focus","select","useFormik","initialValues","validateOnMount","values","handleSubmit","setFieldValue","isSubmitting","isValid","Paper","p","Item","Group","divided","Image","Content","Description","Form","Field","control","Input","type","onChange","_","onFocus","Select","options","onClick","HeaderText","SectionText","Loading","justifyContent","width","py","CircularProgress","autocompleteQuery","popupIndicatorOpen","SearchBar","classes","results","setResults","internalValue","setInternalValue","fetchResults","v","formattedResults","el","debouncedFetch","useCallback","debounce","handleSearchChange","handleResultSelect","reason","setTimeout","Autocomplete","autoHighlight","selectOnFocus","onInputChange","getOptionLabel","o","getOptionSelected","placeholder","closeIcon","popupIcon","noOptionsText","renderInput","TextField","ControlledSearchBar","typography","font","fontWeight","fontWeightBold","flexContainer","minHeight","Placeholder","icon","flexDirection","ManageInventory","setTerm","Grid","xs","md","justify","style","getSuspendedSaleQuery","saleId","deleteSuspendedSaleQuery","delete","createSuspendedSaleQuery","finishSaleQuery","defaultSuspendedSale","_id","notes","list","SaleContext","saleListCards","searchTerm","suspendedSale","addToSaleList","removeFromSaleList","restoreSale","suspendSale","deleteSuspendedSale","finalizeSale","resetSaleState","SaleProvider","setSaleListCards","setSearchTerm","setSuspendedSale","sale","modeledData","c","response","customerName","saleList","ops","sale_data","Sale","saleID","qtyToSell","oldState","newCard","idx","splice","push","ORDER","helpSort","arrayConst","colorsLength","cardFace","sort","b","localeCompare","indexOf","sortSaleList","newState","FormikSelectField","error","roundPrice","num","handleFocus","SaleSearchCard","conditionSelectOptions","removeZeroedQuantites","pickBy","Object","entries","conditionFinish","qty","split","join","createConditionOptions","selectedFinishCondition","quantityToSell","roundedPrice","handleChange","defaultValue","castVal","step","BrowseCardList","isNaN","getPrice","DisplayPrice","transparentBackground","borderRounded","imageSize","height","CardImageTooltip","tooltip","SaleCartItem","ListItem","cursor","Price","IconButton","sum","nums","reduce","acc","curr","SaleCartPriceTotal","total","FinishSale","submit","setSubmit","showModal","setShowModal","handleFinalizeSale","modalTrigger","fluid","Modal","basic","open","trigger","inverted","as","Actions","Icon","SaleCartList","List","component","arr","Divider","PrintWrapper","div","PrintList","componentRef","useRef","handlePrint","useReactToPrint","content","current","slc","getSuspendedSalesQuery","ClearMargin","CharLimit","SuspendSaleButton","saleListLength","sales","setSales","setSaleID","modalOpen","setModalOpen","setCustomerName","setNotes","setDisabled","suspendBtn","restoreBtn","deleteBtn","loadingBtn","setLoadingBtn","getSales","suspendedSales","clearFields","submitSuspendSale","submitRestoreSale","submitDeleteSale","Fragment","columns","stackable","relaxed","Column","substring","TextArea","s","info","pluralize","word","TotalCardsLabel","listLength","onInterrupt","preventDefault","returnValue","initBeforeUnload","showPrompt","window","addEventListener","removeEventListener","useInterruptExit","initial","setShowPrompt","when","lg","formatDate","date","moment","format","BrowseSalesItem","card_list","quantitySold","TableRow","TableCell","createTime","BrowseSalesList","TableContainer","Table","TableHead","TableBody","browseSalesQuery","BrowseSales","salesList","setSalesList","Wrapper","InventoryWrapper","InventoryRow","ImageWrapper","cardImageRatio","SurImage","PublicCard","publicCardSearchQuery","ControlledDropdown","FormControl","fullWidth","InputLabel","MenuItem","GridContainer","gridGap","gridTemplateColumns","justifyItems","initialState","selectedLocation","initialFormState","locationOptions","PublicInventory","state","setState","formSubmitted","setFormSubmitted","fetchCards","location","Subheader","setNameQuery","ControlledMultiSelect","Trade","multiple","renderValue","formatDropdownOptions","priceOperatorDropdownOptions","finishDropdownOptions","sortByDropdownOptions","sortByDirectionDropdownOptions","sortByColorDropdownOptions","colorSpecificityDropdownOptions","typeLineOptions","frameOptions","initialFilters","setName","priceOperator","sortBy","colorsArray","sortByDirection","colorSpecificity","typeLine","frame","FormContainer","padding","BrowseInventoryForm","doSubmit","editionDropdownOptions","setEditionDropdownOptions","White","Blue","Black","Red","Green","names","setNameOptions","concatWithBlankOption","sm","toString","conditionMap","NM","LP","MP","HP","BrowseInventoryRow","quantityInStock","image_uri","condition","verticalAlign","filteredCardsQuery","filters","page","InvertedLoader","palette","common","white","BrowseInventory","count","currentPage","numPages","isLoading","cachedFilters","searchTouched","fetchData","Container","pb","Pagination","LoginContainer","Segment","locationDropdownOptions","Login","validateOnChange","to","raised","Logout","receivingQuery","customerContact","TRADE_TYPES","CASH","Cash","CREDIT","Credit","defaultContext","receivingList","addToList","removeFromList","activeTradeType","selectAll","commitToInventory","resetSearchResults","ReceivingContext","ReceivingProvider","setReceivingList","cardsToCommit","creditPrice","cashPrice","marketPrice","tradeType","previousState","cardsToAdd","Array","uuid_key","uuid","selectType","ReceivingSearchItem","Error","handleInventoryAdd","widths","min","TRADE_TYPE","ReceivingCartItem","whiteSpace","ReceivingCart","CashReport","countByPriceAndID","chain","temp_uuid","groupBy","mapValues","mergedWithQty","uniqBy","tradeQty","totalCashOut","sumBy","colSpan","TableFooter","ReceivingListModal","cashTotal","creditTotal","closeOnDimmerClick","onClose","scrolling","ReceivingListTotals","showCashModal","setShowCashModal","Or","floated","divToPrint","document","getElementById","popup","write","innerHTML","close","printCashReport","Receiving","AdminOnly","AdminRoute","light","main","dark","primaryRgb","desktopMediaQuery","tabletMediaQuery","HeroImageContainer","marginTop","rounded","LocationImageContainer","ImageGradient","ImageGradient2","HeroText","textAlign","h1","SubheaderText","HeaderContainer","ServicesContainer","gridTemplateRows","LocationsContainer","LocationContainer","TextWidth","IconContainer","SectionDivider","Footer","bottom","paddingLeft","paddingBottom","paddingRight","paddingTop","FlexRow","Home","learn_to_play","clubhouse_products","rel","link","browseReceivingQuery","startDate","endDate","meta","MetaData","displayEmpty","str","receivedByIdQuery","receivedId","BrowseReceivingListDialog","setData","Dialog","maxWidth","DialogTitle","DialogContent","received_cards","created_at","created_by","customer_name","customer_contact","bulk_card_data","trade","modeledCard","ListItemText","secondary","DialogActions","BrowseReceivingItem","received","dialogOpen","setDialogOpen","received_card_list","r","Card","CardActionArea","disableRipple","CardContent","FormikNativeDatePicker","max","InputProps","inputProps","BrowseReceivingFilterDialog","onDialogClose","enableReinitialize","subtract","RangeName","BrowseReceiving","obj1","obj2","setFilters","receivedList","setReceivedList","formValues","JSON","stringify","rl","NavLinks","pathname","useLocation","button","RouterLink","selected","replace","ListItemIcon","flexGrow","menuLinkText","menuButton","NavBar","drawerOpen","setDrawerOpen","AppBar","Toolbar","edge","Drawer","anchor","direction","align","version","reportingQuery","allTimeDates","year","toISOString","lastMonthDates","Reporting","report","setReport","ALL_TIME","searchName","setSearchName","searchDates","setSearchDates","LAST_MONTH","countByCardName","card_title","uniqueId","countByPrinting","card_metadata","contentContainer","theme","createMuiTheme","App","ThemeProvider","exact","path","Boolean","hostname","match","ReactDOM","render","basename","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.653b3021.chunk.js","sourcesContent":["// Maps all GCF and Scryfall API endpoints for code re-use\nconst { REACT_APP_ENVIRONMENT } = process.env;\n\n/**\n * Check the environment for dev - if dev, we reach out\n * to all endpoints appended by `_test` instead of production\n */\nconst env = REACT_APP_ENVIRONMENT === 'development' ? '_test' : '';\n\n/**\n * Asserts the development env and returns the proper path prefix for resources\n */\nconst getPrefix = () => {\n    return REACT_APP_ENVIRONMENT === 'development'\n        ? 'http://localhost:7331'\n        : 'https://clubhouse-collection.appspot.com';\n};\n\nexport const FINISH_SALE = `${getPrefix()}/auth/finishSale`;\nexport const GET_CARD_FROM_ALL_LOCATIONS = `${getPrefix()}/getCardFromAllLocations`;\nexport const ADD_CARD_TO_INVENTORY = `${getPrefix()}/auth/addCardToInventory`;\nexport const RECEIVE_CARDS = `${getPrefix()}/auth/receiveCards`;\nexport const GET_CARDS_BY_FILTER = `${getPrefix()}/auth/getCardsByFilter`;\nexport const GET_SET_NAMES = `${getPrefix()}/auth/getDistinctSetNames`;\nexport const SUSPEND_SALE = `${getPrefix()}/auth/suspendSale`;\nexport const LOGIN = `${getPrefix()}/jwt`;\nexport const GET_SALES_BY_TITLE = `${getPrefix()}/auth/getSaleByTitle`;\nexport const RECEIVING = `${getPrefix()}/auth/getReceivedCards`;\nexport const GET_ALL_SALES = `${getPrefix()}/auth/allSales`;\nexport const GET_CARDS_WITH_INFO_PUBLIC = `${getPrefix()}/getCardsWithInfo`;\nexport const GET_CARDS_WITH_INFO = `${getPrefix()}/auth/getCardsWithInfo`;\nexport const GET_REPORT = `${getPrefix()}/auth/getSalesReport`;\nexport const AUTOCOMPLETE = `${getPrefix()}/autocomplete`;\nexport const SCRYFALL_SEARCH = 'https://api.scryfall.com/cards/search';\nexport const GET_LIVE_PRICE = `https://us-central1-clubhouse-collection.cloudfunctions.net/getPriceFromTcg${env}`;\n","/**\n * This function is a helper for Axios, it yields an object for Axios params\n */\nexport default function makeAuthHeader() {\n    const header = {\n        Authorization: `Bearer ${localStorage.getItem('clubhouse_JWT')}`,\n    };\n    return header;\n}\n","import axios from 'axios';\nimport { LOGIN } from '../utils/api_resources';\nimport makeAuthHeader from '../utils/makeAuthHeader';\n\ntype ClubhouseLocation = 'ch1' | 'ch2';\n\ninterface ResponseData {\n    token: string;\n}\n\nconst loginQuery = async (\n    username: string,\n    password: string,\n    currentLocation: ClubhouseLocation\n) => {\n    try {\n        const { data } = await axios.post<ResponseData>(\n            LOGIN,\n            {\n                username: username.toLowerCase(),\n                password,\n                currentLocation,\n            },\n            { headers: makeAuthHeader() }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default loginQuery;\n","import React, { FC, useContext, useState } from 'react';\nimport loginQuery from './loginQuery';\n\ninterface Props {}\n\nexport type ClubhouseLocation = 'ch1' | 'ch2';\n\ninterface Context {\n    loggedIn: boolean;\n    handleLogin: (\n        username: string,\n        password: string,\n        currentLocation: ClubhouseLocation\n    ) => Promise<any>;\n    handleLogout: () => void;\n    currentLocation: ClubhouseLocation | null;\n    currentUser: string | null;\n}\n\nexport const AuthContext = React.createContext<Context>({\n    loggedIn: false,\n    currentLocation: null,\n    currentUser: null,\n    handleLogout: () => null,\n    handleLogin: () => new Promise(() => null),\n});\n\nexport const useAuthContext = () => useContext(AuthContext);\n\nconst AuthProvider: FC<Props> = ({ children }) => {\n    const [loggedIn, setLoggedIn] = useState(\n        !!localStorage.getItem('clubhouse_JWT')\n    );\n\n    const [\n        currentLocation,\n        setCurrentLocation,\n    ] = useState<ClubhouseLocation | null>(\n        localStorage.getItem('currentLocation') as ClubhouseLocation\n    );\n\n    const [currentUser, setCurrentUser] = useState<string | null>(\n        localStorage.getItem('currentUser')\n    );\n\n    const handleLogin = async (\n        username: string,\n        password: string,\n        currentLocation: ClubhouseLocation\n    ) => {\n        try {\n            const data = await loginQuery(username, password, currentLocation);\n\n            if (data.token) {\n                localStorage.setItem('clubhouse_JWT', data.token);\n                setLoggedIn(!!localStorage.getItem('clubhouse_JWT'));\n\n                localStorage.setItem('currentLocation', currentLocation);\n                setCurrentLocation(currentLocation);\n\n                localStorage.setItem('currentUser', username);\n                setCurrentUser(username);\n            }\n\n            return data;\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const handleLogout = () => {\n        localStorage.removeItem('clubhouse_JWT');\n        setLoggedIn(!!localStorage.getItem('clubhouse_JWT'));\n\n        localStorage.removeItem('currentLocation');\n        setCurrentLocation(null);\n\n        localStorage.removeItem('currentUser');\n        setCurrentUser(null);\n    };\n\n    return (\n        <AuthContext.Provider\n            value={{\n                loggedIn,\n                currentLocation,\n                currentUser,\n                handleLogin,\n                handleLogout,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport default AuthProvider;\n","import axios from 'axios';\nimport { GET_CARD_FROM_ALL_LOCATIONS } from '../utils/api_resources';\n\ninterface Quantities {\n    foilQty: number;\n    nonfoilQty: number;\n}\n\nexport interface ResponseData {\n    ch1: Quantities;\n    ch2: Quantities;\n}\n\ninterface Payload {\n    title: string;\n}\n\n/**\n * Fetches total inventory for the given card name across all store locations\n */\nconst allLocationInventoryQuery = async ({ title }: Payload) => {\n    try {\n        const { data } = await axios.get<ResponseData>(\n            GET_CARD_FROM_ALL_LOCATIONS,\n            {\n                params: { title },\n            }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default allLocationInventoryQuery;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Header, Label, Loader } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport allLocationInventoryQuery, {\n    ResponseData,\n} from './allLocationInventoryQuery';\n\nconst StyledContainer = styled('div')({\n    display: 'inline',\n});\n\nconst FlexContainer = styled('div')({\n    display: 'flex',\n    alignItems: 'center',\n    '& > *': {\n        marginLeft: '10px',\n    },\n});\n\ninterface QohLabelProps {\n    label: string;\n    value: number;\n}\n\nconst QohLabel: FC<QohLabelProps> = ({ label, value }) => (\n    <Label color={value > 0 ? 'blue' : undefined} image>\n        {label}\n        <Label.Detail>{value}</Label.Detail>\n    </Label>\n);\n\ninterface Props {\n    title: string;\n    searchResults: ScryfallCard[];\n}\n\n// TODO: refetch on result set change\nconst TotalStoreInventory: FC<Props> = ({ title, searchResults }) => {\n    const [quantities, setQuantities] = useState<ResponseData>({\n        ch1: { foilQty: 0, nonfoilQty: 0 },\n        ch2: { foilQty: 0, nonfoilQty: 0 },\n    });\n\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                setLoading(true);\n                const data = await allLocationInventoryQuery({ title });\n                setQuantities(data);\n                setLoading(false);\n            } catch (err) {\n                console.log(err);\n            }\n        })();\n    }, [title, searchResults]);\n\n    if (loading) {\n        return (\n            <FlexContainer>\n                <span>Loading totals for all locations</span>\n                <div>\n                    <Loader active inline size=\"small\" />\n                </div>\n            </FlexContainer>\n        );\n    }\n\n    return (\n        <FlexContainer>\n            <div>\n                <Header sub>Beaverton totals:</Header>\n                <StyledContainer>\n                    <QohLabel label=\"Foil\" value={quantities.ch1.foilQty} />\n                    <QohLabel\n                        label=\"Nonfoil\"\n                        value={quantities.ch1.nonfoilQty}\n                    />\n                </StyledContainer>\n            </div>\n            <div>\n                <Header sub>Hillsboro totals:</Header>\n                <StyledContainer>\n                    <QohLabel label=\"Foil\" value={quantities.ch2.foilQty} />\n                    <QohLabel\n                        label=\"Nonfoil\"\n                        value={quantities.ch2.nonfoilQty}\n                    />\n                </StyledContainer>\n            </div>\n        </FlexContainer>\n    );\n};\n\nexport default TotalStoreInventory;\n","import { ScryfallCard } from './ScryfallCard';\n\ntype Card = Pick<\n    ScryfallCard,\n    | 'name'\n    | 'frame_effects'\n    | 'border_color'\n    | 'lang'\n    | 'set'\n    | 'foil'\n    | 'nonfoil'\n    | 'promo_types'\n>;\n\n/** Computes the proper displayName for a card, depending on its properties */\nconst createDisplayName = (card: Card) => {\n    const {\n        name,\n        frame_effects,\n        border_color,\n        lang,\n        set,\n        foil,\n        nonfoil,\n        promo_types,\n    } = card;\n\n    let displayName: string = name;\n\n    // Covers strixhaven etched foil mystical archive cards\n    if (set === 'sta' && foil === true && nonfoil === false) {\n        displayName += ` (Etched foil)`;\n    } else if (promo_types.includes('godzillaseries')) {\n        // Covers cards like Godzilla series\n        displayName += ` (IP series)`;\n    } else if (frame_effects.includes('showcase')) {\n        // Covers showcase cards like comic-art Illuna, Apex of Wishes\n        displayName += ` (Showcase)`;\n    } else if (frame_effects.length === 0 && border_color === 'borderless') {\n        // Covers cards like comic-art Vivien, Monsters' Advocate\n        displayName += ` (Borderless)`;\n    } else if (frame_effects.includes('extendedart')) {\n        // Covers cards with extended left and roght border art\n        displayName += ` (Extended art)`;\n    }\n\n    if (lang !== 'en') displayName += ` (${lang.toUpperCase()})`;\n\n    return displayName;\n};\n\nexport default createDisplayName;\n","import { ScryfallCard } from './ScryfallCard';\n\nconst getCardImage = (card: ScryfallCard) => {\n    let myImage: string;\n\n    try {\n        // If normal prop doesn't exist, move to catch block for flip card faces\n        myImage = card.image_uris.normal;\n    } catch (e) {\n        myImage = card.card_faces[0].image_uris.normal;\n    }\n\n    return myImage;\n};\nexport default getCardImage;\n","import createDisplayName from './createDisplayName';\nimport getCardImage from './getCardImage';\n\n// Language codes from Scryfall. See https://scryfall.com/docs/api/languages for reference.\nexport type LanguageCode =\n    | 'en'\n    | 'es'\n    | 'fr'\n    | 'de'\n    | 'it'\n    | 'pt'\n    | 'ja'\n    | 'ko'\n    | 'ru'\n    | 'zhs'\n    | 'zht'\n    | 'he'\n    | 'la'\n    | 'grc'\n    | 'ar'\n    | 'sa'\n    | 'px';\n\nexport type FinishCondition =\n    | 'FOIL_NM'\n    | 'FOIL_LP'\n    | 'FOIL_MP'\n    | 'FOIL_HP'\n    | 'NONFOIL_NM'\n    | 'NONFOIL_LP'\n    | 'NONFOIL_MP'\n    | 'NONFOIL_HP';\n\nexport interface QOH {\n    FOIL_NM: number;\n    FOIL_LP: number;\n    FOIL_MP: number;\n    FOIL_HP: number;\n    NONFOIL_NM: number;\n    NONFOIL_LP: number;\n    NONFOIL_MP: number;\n    NONFOIL_HP: number;\n}\n\nexport interface ImageURIs {\n    normal: string;\n}\n\nexport interface CardFace {\n    colors: string[];\n    type_line: string;\n    color_identity: string[];\n    image_uris: ImageURIs;\n}\n\nexport interface ScryfallApiCard {\n    id: string;\n    name: string;\n    printed_name: string;\n    set: string;\n    set_name: string;\n    rarity: string;\n    image_uris: ImageURIs;\n    card_faces: CardFace[];\n    nonfoil: boolean;\n    foil: boolean;\n    colors: string[];\n    type_line: string;\n    frame_effects: string[];\n    lang: LanguageCode;\n    border_color: string;\n    display_name: string;\n    cardImage: string;\n    color_identity: string[];\n    qoh?: Partial<QOH>;\n    quantity?: number;\n    qtyToSell?: number;\n    finishCondition?: string;\n    price?: number;\n    promo_types?: string[];\n    tcgplayer_id?: number;\n}\n\n/**\n * TODO: We should return this from the API. The backend should control this data shape\n *\n * This class wraps the Scryfall API request data and models it to something we can control.\n * Also acts as a safeguard for any future updates to Scryfall's API data model and makes\n * the code easier to maintain and debug.\n */\nexport class ScryfallCard {\n    public id: string;\n    public name: string;\n    public printed_name: string | null;\n    public set: string;\n    public set_name: string;\n    public rarity: string;\n    public image_uris: { normal: string };\n    public card_faces: CardFace[];\n    public nonfoil: boolean;\n    public foil: boolean;\n    public colors: string[];\n    public type_line: string;\n    public frame_effects: string[];\n    public lang: LanguageCode;\n    public border_color: string;\n    public display_name: string;\n    public cardImage: string;\n    public color_identity: string[];\n    public promo_types: string[];\n    public tcgplayer_id: number | null;\n    public qoh: Partial<QOH>;\n\n    public constructor(card: ScryfallApiCard) {\n        this.id = card.id;\n        this.name = card.name;\n        this.printed_name = card.printed_name || null;\n        this.set = card.set;\n        this.set_name = card.set_name;\n        this.rarity = card.rarity;\n        this.image_uris = card.image_uris || null;\n        this.card_faces = card.card_faces || null;\n        this.nonfoil = card.nonfoil;\n        this.foil = card.foil;\n        this.colors = card.colors;\n        this.type_line = card.type_line;\n        this.frame_effects = card.frame_effects || [];\n        this.lang = card.lang;\n        this.border_color = card.border_color;\n        this.color_identity = card.color_identity || null;\n        this.promo_types = card.promo_types || [];\n        this.cardImage = getCardImage(this);\n        this.display_name = createDisplayName(this);\n        this.tcgplayer_id = card.tcgplayer_id || null;\n        this.qoh = card.qoh ? card.qoh : {};\n    }\n}\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { ScryfallApiCard, ScryfallCard } from '../utils/ScryfallCard';\nimport { GET_CARDS_WITH_INFO } from '../utils/api_resources';\n\ninterface Params {\n    cardName: string;\n    inStockOnly: boolean;\n}\n\n/**\n * Fetches cards from the DB by title when a user selects a title after querying.\n * This function merges the data (inventory quantity and card objects) from two endpoints into one array.\n */\nconst cardSearchQuery = async ({ cardName, inStockOnly }: Params) => {\n    try {\n        const { data } = await axios.get<ScryfallApiCard[]>(\n            GET_CARDS_WITH_INFO,\n            {\n                params: {\n                    title: cardName,\n                    matchInStock: inStockOnly,\n                },\n                headers: makeAuthHeader(),\n            }\n        );\n\n        return data.map((d) => new ScryfallCard(d));\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default cardSearchQuery;\n","import React, { createContext, FC, useState } from 'react';\nimport { QOH, ScryfallCard } from '../utils/ScryfallCard';\nimport cardSearchQuery from './cardSearchQuery';\n\ninterface Props {}\n\ninterface Context {\n    searchResults: ScryfallCard[];\n    changeCardQuantity: (id: string, qoh: Partial<QOH>) => void;\n    handleSearchSelect: (term: string) => void;\n}\n\nexport const InventoryContext = createContext<Context>({\n    searchResults: [],\n    changeCardQuantity: () => null,\n    handleSearchSelect: () => null,\n});\n\nconst InventoryProvider: FC<Props> = ({ children }) => {\n    const [searchResults, setSearchResults] = useState<ScryfallCard[]>([]);\n\n    const handleSearchSelect = async (term: string) => {\n        const cards = await cardSearchQuery({\n            cardName: term,\n            inStockOnly: false,\n        });\n\n        setSearchResults(cards);\n    };\n\n    const changeCardQuantity = (id: string, qoh: Partial<QOH>) => {\n        const copiedState = [...searchResults];\n        const targetIndex = copiedState.findIndex((e) => e.id === id);\n        copiedState[targetIndex].qoh = qoh;\n        setSearchResults(copiedState);\n    };\n\n    return (\n        <InventoryContext.Provider\n            value={{ searchResults, changeCardQuantity, handleSearchSelect }}\n        >\n            {children}\n        </InventoryContext.Provider>\n    );\n};\n\nexport default InventoryProvider;\n","import React from 'react';\nimport { Message } from 'semantic-ui-react';\nimport toaster from 'toasted-notes';\nimport styled from 'styled-components';\n\nconst ToastContainer = styled(Message)`\n    position: relative;\n    right: 10px;\n    bottom: 10px;\n`;\n\ninterface CreateToastArgs {\n    color: string;\n    header: string;\n    message?: string;\n    duration?: number;\n}\n\nconst createToast = ({\n    color,\n    header,\n    message,\n    duration = 2000,\n}: CreateToastArgs) => {\n    return toaster.notify(\n        () => (\n            <ToastContainer color={color} compact>\n                <Message.Header>{header}</Message.Header>\n                {message}\n            </ToastContainer>\n        ),\n        {\n            position: 'bottom-right',\n            duration: duration,\n        }\n    );\n};\n\nexport default createToast;\n","import { makeStyles } from '@material-ui/core';\nimport React, { FC, useState } from 'react';\nimport clsx from 'clsx';\n\ninterface Props {\n    image: string;\n    hover?: boolean;\n}\n\nconst useStyles = makeStyles(({ zIndex }) => ({\n    imageStyle: {\n        boxShadow: '2px 2px 5px 0 rgba(0,0,0,.25)',\n        zIndex: zIndex.appBar,\n        transition: 'all .2s ease-in-out',\n    },\n    hoveredStyle: {\n        transform: 'scale(1.75)',\n    },\n}));\n\nconst CardImage: FC<Props> = ({ image, hover }) => {\n    const { imageStyle, hoveredStyle } = useStyles();\n    const [hovered, setHovered] = useState<boolean>(false);\n\n    const onHover = (val: boolean) => {\n        if (!hover) return;\n        setHovered(val);\n    };\n\n    return (\n        <img\n            src={image}\n            className={clsx(imageStyle, {\n                [hoveredStyle]: hovered,\n            })}\n            onMouseOver={() => onHover(true)}\n            onMouseOut={() => onHover(false)}\n        />\n    );\n};\n\nexport default CardImage;\n","export const finishes = [\n    { key: 'NONFOIL', text: 'Nonfoil', value: 'NONFOIL' },\n    { key: 'FOIL', text: 'Foil', value: 'FOIL' },\n];\n\nexport const cardConditions = [\n    { key: 'NM', text: 'Near Mint', value: 'NM' },\n    { key: 'LP', text: 'Light Play', value: 'LP' },\n    { key: 'MP', text: 'Moderate Play', value: 'MP' },\n    { key: 'HP', text: 'Heavy Play', value: 'HP' },\n];\n","export type Finish = 'FOIL' | 'NONFOIL';\n\ninterface CardFinishState {\n    selectedFinish: Finish;\n    finishDisabled: boolean;\n}\n\n/**\n * Seeds state from props. Used to determine if cards have only foil, nonfoil, or both printings\n * from their `foil` and `nonfoil` properties\n *\n * @param {Boolean} nonfoilProp\n * @param {Boolean} foilProp\n */\nexport default function checkCardFinish(\n    nonfoil: boolean,\n    foil: boolean\n): CardFinishState {\n    if (!nonfoil && foil) {\n        return { selectedFinish: 'FOIL', finishDisabled: true };\n    } else if (nonfoil && !foil) {\n        return { selectedFinish: 'NONFOIL', finishDisabled: true };\n    } else {\n        return { selectedFinish: 'NONFOIL', finishDisabled: false };\n    }\n}\n","import React, { FC } from 'react';\nimport { Chip, makeStyles } from '@material-ui/core';\nimport { forwardRef } from 'react';\n\nconst useStyles = makeStyles({\n    container: {\n        display: 'inline-block',\n        borderRadius: 5,\n    },\n    chip: {\n        borderRadius: 5,\n    },\n    leftChip: {\n        borderTopRightRadius: 0,\n        borderBottomRightRadius: 0,\n        borderTopLeftRadius: 5,\n        borderBottomLeftRadius: 5,\n    },\n    rightChip: {\n        borderTopLeftRadius: 0,\n        borderBottomLeftRadius: 0,\n        borderTopRightRadius: 5,\n        borderBottomRightRadius: 5,\n    },\n});\n\ninterface Props {\n    label: string;\n    quantity: number;\n}\n\n/**\n * We need to forward the refs from possible tooltip implementations to this custom\n * component so `Tooltip` can access and modify the underlying children\n */\nconst InventoryChip: FC<Props> = forwardRef<HTMLDivElement, Props>(\n    (props, ref) => {\n        const { quantity, label } = props;\n        const { container, leftChip, rightChip } = useStyles();\n        const quantityColor = quantity > 0 ? 'primary' : undefined;\n\n        return (\n            <div {...props} ref={ref} className={container}>\n                <Chip\n                    color={quantityColor}\n                    className={leftChip}\n                    size=\"small\"\n                    label={label}\n                />\n                <Chip\n                    color={quantityColor}\n                    className={rightChip}\n                    size=\"small\"\n                    label={quantity}\n                />\n            </div>\n        );\n    }\n);\n\nexport default InventoryChip;\n","import { QOH } from '../utils/ScryfallCard';\n\ntype FinishConditionLabels = Record<keyof QOH, string>;\n\nconst displayFinishCondition = (finishCondition: keyof QOH) => {\n    const finishConditionLabels: FinishConditionLabels = {\n        FOIL_NM: 'Foil (NM)',\n        FOIL_LP: 'Foil (LP)',\n        FOIL_MP: 'Foil (MP)',\n        FOIL_HP: 'Foil (HP)',\n        NONFOIL_NM: 'Nonfoil (NM)',\n        NONFOIL_LP: 'Nonfoil (LP)',\n        NONFOIL_MP: 'Nonfoil (MP)',\n        NONFOIL_HP: 'Nonfoil (HP)',\n    };\n\n    return finishConditionLabels[finishCondition];\n};\n\nexport default displayFinishCondition;\n","import { QOH } from './ScryfallCard';\n\nexport default function parseQoh(qoh: Partial<QOH>) {\n    const foilQty =\n        (qoh.FOIL_NM || 0) +\n        (qoh.FOIL_LP || 0) +\n        (qoh.FOIL_MP || 0) +\n        (qoh.FOIL_HP || 0);\n\n    const nonfoilQty =\n        (qoh.NONFOIL_NM || 0) +\n        (qoh.NONFOIL_LP || 0) +\n        (qoh.NONFOIL_MP || 0) +\n        (qoh.NONFOIL_HP || 0);\n\n    return [foilQty, nonfoilQty] as const;\n}\n","import React, { FC } from 'react';\nimport { Tooltip, Typography } from '@material-ui/core';\nimport InventoryChip from '../ui/InventoryChip';\nimport displayFinishCondition from '../utils/finishCondition';\nimport parseQoh from '../utils/parseQoh';\nimport { QOH } from '../utils/ScryfallCard';\n\nexport const createInventoryLineItems = (\n    inventoryQty: Partial<QOH>,\n    matchStrings: (keyof QOH)[]\n): string[] => {\n    const matches = matchStrings\n        .map((finishCondition) => {\n            const quantity = inventoryQty[finishCondition];\n            if (quantity && quantity > 0)\n                return `${displayFinishCondition(\n                    finishCondition\n                )}: ${quantity}`;\n        })\n        .filter((m): m is string => !!m);\n\n    if (matches.length === 0) return ['None in stock'];\n    return matches;\n};\n\ninterface Props {\n    inventoryQty: Partial<QOH>;\n}\n\ninterface LabelWithPopupProps {\n    quantity: number;\n    label: string;\n    popupLineItems: string[];\n}\n\nconst LabelWithPopup: FC<LabelWithPopupProps> = ({\n    quantity,\n    label,\n    popupLineItems,\n}) => (\n    <Tooltip\n        title={popupLineItems.map((item) => (\n            <Typography key={Math.random()} variant=\"body2\">\n                {item}\n            </Typography>\n        ))}\n        arrow\n        placement=\"top\"\n    >\n        <InventoryChip quantity={quantity} label={label} />\n    </Tooltip>\n);\n\n// This component parses the `qoh` object from mongo into something more presentable\nconst QohLabels: FC<Props> = ({ inventoryQty }) => {\n    const [foilQuantity, nonfoilQuantity] = parseQoh(inventoryQty);\n\n    const foilLineItems = createInventoryLineItems(inventoryQty, [\n        'FOIL_NM',\n        'FOIL_LP',\n        'FOIL_MP',\n        'FOIL_HP',\n    ]);\n\n    const nonfoilLineItems = createInventoryLineItems(inventoryQty, [\n        'NONFOIL_NM',\n        'NONFOIL_LP',\n        'NONFOIL_MP',\n        'NONFOIL_HP',\n    ]);\n\n    return (\n        <>\n            <LabelWithPopup\n                label=\"Foil\"\n                quantity={foilQuantity}\n                popupLineItems={foilLineItems}\n            />\n            <LabelWithPopup\n                label=\"Nonfoil\"\n                quantity={nonfoilQuantity}\n                popupLineItems={nonfoilLineItems}\n            />\n        </>\n    );\n};\n\nexport default QohLabels;\n","import React, { FC } from 'react';\nimport { Chip as MUIChip, makeStyles, ChipProps } from '@material-ui/core';\nimport clsx from 'clsx';\n\ntype Props = ChipProps & { foil?: boolean };\n\nconst useStyles = makeStyles({\n    foilContainer: {\n        backgroundColor: '#ffcfdf !important',\n        backgroundImage:\n            'linear-gradient(90deg, #ffcfdf 0%, #b0f3f1 74%) !important',\n    },\n    border: {\n        borderRadius: 5,\n    },\n});\n\nconst Chip: FC<Props> = (props) => {\n    const { foilContainer, border } = useStyles();\n\n    if (props.foil) {\n        return <MUIChip {...props} className={clsx(foilContainer, border)} />;\n    }\n\n    return <MUIChip {...props} className={border} />;\n};\n\nexport default Chip;\n","import Axios from 'axios';\nimport { GET_LIVE_PRICE } from '../utils/api_resources';\n\ninterface ResponseData {\n    marketPrices: { foil: number; normal: number };\n    medianPrices: { foil: number; normal: number };\n}\n\ninterface Payload {\n    scryfallId: string;\n}\n\nconst marketPriceQuery = async ({ scryfallId }: Payload) => {\n    try {\n        const { data } = await Axios.get<ResponseData>(GET_LIVE_PRICE, {\n            params: { scryfallId },\n        });\n\n        const { marketPrices, medianPrices } = data;\n\n        return {\n            marketPrices,\n            medianPrices,\n        };\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default marketPriceQuery;\n","import React, { useState, useEffect, FC } from 'react';\nimport Chip from './Chip';\nimport marketPriceQuery from './marketPriceQuery';\n\ntype Finish = 'FOIL' | 'NONFOIL';\n\ninterface Props {\n    id: string;\n    finish: Finish;\n    round: boolean;\n    showMid: boolean;\n}\n\n// Rounds the passed number to the nearest fifty cents\nconst roundNearestStep = (n: number) => Math.ceil(n * 2) / 2;\n\nconst displayPrice = (price: number | null) =>\n    !!price ? `$${price.toFixed(2)}` : 'N/A';\n\nconst MarketPrice: FC<Props> = ({ id, finish, round, showMid = true }) => {\n    const [market, setMarket] = useState<number | null>(null);\n    const [median, setMedian] = useState<number | null>(null);\n    const [loading, setLoading] = useState<boolean>(false);\n    const isFoil = finish === 'FOIL';\n\n    useEffect(() => {\n        (async function fetchData() {\n            let _isMounted = true;\n            setLoading(true);\n\n            const { marketPrices, medianPrices } = await marketPriceQuery({\n                scryfallId: id,\n            });\n\n            if (_isMounted) {\n                if (isFoil) {\n                    setMarket(Number(marketPrices.foil));\n                    setMedian(Number(medianPrices.foil));\n                } else {\n                    setMarket(Number(marketPrices.normal));\n                    setMedian(Number(medianPrices.normal));\n                }\n\n                setLoading(false);\n            }\n\n            return () => (_isMounted = false);\n        })();\n    }, [id, finish]);\n\n    const loader = <span>Loading...</span>;\n\n    return (\n        <>\n            <Chip\n                size=\"small\"\n                foil={isFoil}\n                label={\n                    loading ? (\n                        loader\n                    ) : (\n                        <span>\n                            Mkt.{' '}\n                            {round\n                                ? displayPrice(\n                                      market ? roundNearestStep(market) : null\n                                  )\n                                : displayPrice(market)}\n                        </span>\n                    )\n                }\n            />\n            {showMid && (\n                <Chip\n                    size=\"small\"\n                    foil={isFoil}\n                    label={\n                        loading ? (\n                            loader\n                        ) : (\n                            <span>Mid. {displayPrice(median)}</span>\n                        )\n                    }\n                />\n            )}\n        </>\n    );\n};\n\nexport default MarketPrice;\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\n\ninterface Props {\n    set: string;\n    rarity?: string;\n}\n\nconst StyledIcon = styled('i')({\n    fontSize: '20px',\n});\n\nconst SetIcon: FC<Props> = ({ set, rarity }) => {\n    const rarityClass = rarity ? `ss-${rarity}` : '';\n    return <StyledIcon className={`ss ss-fw ss-${set} ${rarityClass}`} />;\n};\n\nexport default SetIcon;\n","import React, { FC } from 'react';\nimport { Button as MUIButton, ButtonProps } from '@material-ui/core';\n\ntype Props = Omit<ButtonProps, 'variant' | 'color' | 'disableElevation'> & {\n    primary?: boolean;\n};\n\nconst Button: FC<Props> = ({ primary, children, ...props }) => {\n    return (\n        <MUIButton\n            color=\"primary\"\n            disableElevation\n            variant={primary ? 'contained' : 'outlined'}\n            {...props}\n        >\n            {children}\n        </MUIButton>\n    );\n};\n\nexport default Button;\n","import { LanguageCode } from './ScryfallCard';\n\nconst LANG_CODES: Record<LanguageCode, string> = {\n    en: 'English',\n    es: 'Spanish',\n    fr: 'French',\n    de: 'German',\n    it: 'Italian',\n    pt: 'Portuguese',\n    ja: 'Japanese',\n    ko: 'Korean',\n    ru: 'Russian',\n    zhs: 'Simplified Chinese',\n    zht: 'Traditional Chinese',\n    he: 'Hebrew',\n    la: 'Latin',\n    grc: 'Ancient Greek',\n    ar: 'Arabic',\n    sa: 'Sanskrit',\n    px: 'Phyrexian',\n};\n\nfunction language(languageCode: LanguageCode): string {\n    return LANG_CODES[languageCode];\n}\n\nexport default language;\n","import React, { FC } from 'react';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport QohLabels from '../common/QohLabels';\nimport MarketPrice from '../common/MarketPrice';\nimport { Finish } from '../utils/checkCardFinish';\nimport SetIcon from './SetIcon';\nimport Button from './Button';\nimport { Box, Link, Typography, withStyles } from '@material-ui/core';\nimport language from '../utils/Language';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\n\ninterface Props {\n    card: ScryfallCard;\n    selectedFinish: Finish;\n    showMid?: boolean;\n    round?: boolean;\n}\n\n// TODO: remove this shim after TCG api approval and integration\nconst TcgPriceButton: FC<{ tcgId: number | null }> = ({ tcgId }) => {\n    const tcgUrl = `https://www.tcgplayer.com/product/${tcgId}`;\n\n    if (!tcgId) {\n        return (\n            <Button disabled size=\"small\">\n                TCG Link unavailable\n            </Button>\n        );\n    }\n\n    return (\n        <Link href={tcgUrl} target=\"_blank\" underline=\"none\">\n            <Button size=\"small\">\n                View on TCG <OpenInNewIcon fontSize=\"small\" />\n            </Button>\n        </Link>\n    );\n};\n\nconst SubheaderContainer = withStyles(({ spacing }) => ({\n    root: {\n        '& > div': {\n            marginRight: spacing(1),\n        },\n    },\n}))(Box);\n\nconst CardHeader: FC<Props> = ({\n    card,\n    selectedFinish,\n    showMid = false,\n    round = false,\n}) => {\n    const {\n        id,\n        display_name,\n        set,\n        rarity,\n        set_name,\n        qoh,\n        lang,\n        tcgplayer_id,\n    } = card;\n\n    return (\n        <Box>\n            <Box display=\"flex\" alignItems=\"center\">\n                <Typography variant=\"h6\">\n                    <b>{display_name}</b>\n                </Typography>\n                <SetIcon set={set} rarity={rarity} />\n            </Box>\n            <SubheaderContainer>\n                <Typography variant=\"body2\">\n                    {set_name} ({set.toUpperCase()}) - {language(lang)}\n                </Typography>\n                <QohLabels inventoryQty={qoh} />\n                <MarketPrice\n                    id={id}\n                    finish={selectedFinish}\n                    showMid={showMid}\n                    round={round}\n                />\n                <TcgPriceButton tcgId={tcgplayer_id} />\n            </SubheaderContainer>\n        </Box>\n    );\n};\n\nexport default CardHeader;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { ADD_CARD_TO_INVENTORY } from '../utils/api_resources';\nimport { QOH } from '../utils/ScryfallCard';\n\ninterface CardInfo {\n    id: string;\n    name: string;\n    set_name: string;\n    set: string;\n}\n\ninterface Payload {\n    quantity: number;\n    finishCondition: string;\n    cardInfo: CardInfo;\n}\n\ninterface ResponseData {\n    _id: string;\n    name: string;\n    set: string;\n    qoh: Partial<QOH>;\n}\n\nconst addCardToInventoryQuery = async (payload: Payload) => {\n    try {\n        const { data } = await axios.post<ResponseData>(\n            ADD_CARD_TO_INVENTORY,\n            payload,\n            { headers: makeAuthHeader() }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default addCardToInventoryQuery;\n","import React, { FC, useContext, useState } from 'react';\nimport { Input, Button, Form, Select, Item } from 'semantic-ui-react';\nimport $ from 'jquery';\nimport { FormikErrors, FormikHelpers, useFormik } from 'formik';\nimport createToast from '../common/createToast';\nimport CardImage from '../common/CardImage';\nimport { finishes, cardConditions } from '../utils/dropdownOptions';\nimport checkCardFinish from '../utils/checkCardFinish';\nimport { InventoryContext } from '../context/InventoryContext';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport CardHeader from '../ui/CardHeader';\nimport addCardToInventoryQuery from './addCardToInventoryQuery';\nimport { Box, Paper } from '@material-ui/core';\n\ninterface Props {\n    card: ScryfallCard;\n}\n\ninterface FormValues {\n    selectedFinish: Finish;\n    selectedCondition: string;\n    quantity: string;\n}\n\ntype Finish = 'FOIL' | 'NONFOIL';\n\nconst validate = ({ quantity }: FormValues) => {\n    let errors: FormikErrors<FormValues> = {};\n\n    if (!Number(quantity) || !Number.isInteger(+quantity) || +quantity > 100) {\n        errors.quantity = 'error';\n    }\n\n    return errors;\n};\n\nconst ManageInventoryListItem: FC<Props> = ({ card }) => {\n    const { foil, nonfoil, name, set_name, set, id, cardImage } = card;\n\n    const [selectedFinish, setSelectedFinish] = useState<Finish>(\n        checkCardFinish(nonfoil, foil).selectedFinish\n    );\n\n    const { changeCardQuantity } = useContext(InventoryContext);\n\n    const initialFormValues: FormValues = {\n        selectedFinish: checkCardFinish(nonfoil, foil).selectedFinish,\n        selectedCondition: 'NM',\n        quantity: '0',\n    };\n\n    const onSubmit = async (\n        { quantity, selectedFinish, selectedCondition }: FormValues,\n        { resetForm }: FormikHelpers<FormValues>\n    ) => {\n        try {\n            const { qoh } = await addCardToInventoryQuery({\n                quantity: parseInt(quantity, 10),\n                finishCondition: `${selectedFinish}_${selectedCondition}`,\n                cardInfo: { id, name, set_name, set },\n            });\n\n            // Imperatively reset the form using Formik actions\n            resetForm();\n\n            changeCardQuantity(id, qoh);\n\n            createToast({\n                color: 'green',\n                header: `${quantity}x ${name} ${\n                    parseInt(quantity, 10) > 0 ? 'added' : 'removed'\n                }!`,\n                duration: 2000,\n            });\n\n            // Highlight the input after successful card add\n            $('#searchBar').focus().select();\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const {\n        values,\n        handleSubmit,\n        setFieldValue,\n        isSubmitting,\n        isValid,\n    } = useFormik({\n        initialValues: initialFormValues,\n        validate,\n        onSubmit,\n        validateOnMount: true,\n    });\n\n    return (\n        <Paper variant=\"outlined\">\n            <Box p={2}>\n                <Item.Group divided>\n                    <Item>\n                        <Item.Image size=\"tiny\">\n                            <CardImage image={cardImage} hover />\n                        </Item.Image>\n                        <Item.Content>\n                            <CardHeader\n                                card={card}\n                                selectedFinish={selectedFinish}\n                                round\n                            />\n                            <Item.Description>\n                                <Form>\n                                    <Form.Group>\n                                        <Form.Field\n                                            control={Input}\n                                            type=\"number\"\n                                            label=\"Quantity\"\n                                            value={values.quantity}\n                                            onChange={(\n                                                _: any,\n                                                { value }: { value: number }\n                                            ) =>\n                                                setFieldValue('quantity', value)\n                                            }\n                                            onFocus={() => {\n                                                if (+values.quantity === 0) {\n                                                    setFieldValue(\n                                                        'quantity',\n                                                        ''\n                                                    );\n                                                }\n                                            }}\n                                        />\n                                        <Form.Field\n                                            label=\"Finish\"\n                                            control={Select}\n                                            value={values.selectedFinish}\n                                            options={finishes}\n                                            disabled={\n                                                checkCardFinish(nonfoil, foil)\n                                                    .finishDisabled\n                                            }\n                                            onChange={(\n                                                _: any,\n                                                { value }: { value: Finish }\n                                            ) => {\n                                                setSelectedFinish(value);\n                                                setFieldValue(\n                                                    'selectedFinish',\n                                                    value\n                                                );\n                                            }}\n                                        />\n                                        <Form.Field\n                                            label=\"Condition\"\n                                            control={Select}\n                                            value={values.selectedCondition}\n                                            options={cardConditions}\n                                            onChange={(\n                                                _: any,\n                                                { value }: { value: string }\n                                            ) =>\n                                                setFieldValue(\n                                                    'selectedCondition',\n                                                    value\n                                                )\n                                            }\n                                        />\n                                        <Form.Button\n                                            label=\"Add to Inventory?\"\n                                            control={Button}\n                                            primary\n                                            disabled={!isValid || isSubmitting}\n                                            onClick={() => handleSubmit()}\n                                            loading={isSubmitting}\n                                        >\n                                            Submit\n                                        </Form.Button>\n                                    </Form.Group>\n                                </Form>\n                            </Item.Description>\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Box>\n        </Paper>\n    );\n};\n\nexport default ManageInventoryListItem;\n","import { Typography } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nexport const HeaderText: FC = ({ children }) => {\n    return <Typography variant=\"h4\">{children}</Typography>;\n};\n\nexport const SectionText: FC = ({ children }) => {\n    return (\n        <Typography variant=\"h6\">\n            <b>{children}</b>\n        </Typography>\n    );\n};\n","import { Box, CircularProgress } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nconst Loading: FC = () => {\n    return (\n        <Box display=\"flex\" justifyContent=\"center\" width={1} py={3}>\n            <CircularProgress />\n        </Box>\n    );\n};\n\nexport default Loading;\n","import axios from 'axios';\nimport { AUTOCOMPLETE } from '../utils/api_resources';\n\nconst autocompleteQuery = async (cardName: string) => {\n    try {\n        const { data } = await axios.get<string[]>(AUTOCOMPLETE, {\n            params: {\n                title: cardName,\n            },\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default autocompleteQuery;\n","import React, { ChangeEvent, FC, useCallback, useState } from 'react';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport autocompleteQuery from '../common/autocompleteQuery';\nimport Autocomplete, {\n    AutocompleteChangeReason,\n} from '@material-ui/lab/Autocomplete';\nimport { TextField, makeStyles } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\n\nexport type Option = { title: string };\n\nconst useStyles = makeStyles({\n    /*\n     * Prevents the option-list icon from rotating 180 degrees to preserve orientation of custom icon\n     */\n    popupIndicatorOpen: {\n        transform: 'rotate(0deg)',\n    },\n});\n\ninterface Props {\n    value: Option | null;\n    onChange: (result: Option | null) => void;\n}\n\nconst SearchBar: FC<Props> = ({ value, onChange }) => {\n    const classes = useStyles();\n    const [loading, setLoading] = useState<boolean>(false);\n    const [results, setResults] = useState<Option[]>([]);\n    const [internalValue, setInternalValue] = useState<Option | null>(value);\n\n    const fetchResults = async (v: string) => {\n        setLoading(true);\n        const data = await autocompleteQuery(v);\n        const formattedResults = data.map((el) => ({ title: el }));\n        setResults(formattedResults);\n        setLoading(false);\n    };\n\n    // Cache so it doesn't create a new instance each render\n    const debouncedFetch = useCallback(_.debounce(fetchResults, 500), []);\n\n    // `value` is the search input string\n    const handleSearchChange = async (_: ChangeEvent<{}>, val: string) => {\n        setInternalValue({ title: val });\n\n        // Skip undefined and short internalValues\n        if (!val || val.length < 3) {\n            setResults([]);\n            return;\n        }\n\n        await debouncedFetch(val);\n    };\n\n    const handleResultSelect = async (\n        _: ChangeEvent<{}>,\n        value: Option | null,\n        reason: AutocompleteChangeReason\n    ) => {\n        // If the user clears the input, then we need to reset the state\n        if (reason === 'clear') {\n            onChange(null);\n            return;\n        }\n\n        // This line is a hacky way to get around the fact that if we just select(), then\n        // when the user manually clicks the first (or any) result in the resultlist, it does not select,\n        // presumably because there is some collision between selecting the resultList element and focusing the input\n        setTimeout(() => $('#searchBar').select(), 10);\n\n        try {\n            setLoading(true);\n            setInternalValue(value);\n            await onChange(value);\n            setLoading(false);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    return (\n        <Autocomplete\n            id=\"searchBar\"\n            autoHighlight\n            selectOnFocus\n            value={internalValue}\n            onInputChange={handleSearchChange}\n            onChange={handleResultSelect}\n            loading={loading}\n            options={results}\n            getOptionLabel={(o) => o.title}\n            getOptionSelected={(o, v) => o.title === v.title}\n            placeholder=\"Enter a card title\"\n            closeIcon={null}\n            popupIcon={<SearchIcon />}\n            noOptionsText=\"No results found\"\n            classes={{\n                popupIndicatorOpen: classes.popupIndicatorOpen,\n            }}\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    label=\"Enter a card title\"\n                    variant=\"outlined\"\n                    size=\"small\"\n                />\n            )}\n        />\n    );\n};\n\nexport default SearchBar;\n","import { FC } from 'react';\nimport SearchBar from './SearchBar';\n\ninterface ControlledSearchBarProps {\n    value: string;\n    onChange: (value: string) => void;\n}\n\nexport const ControlledSearchBar: FC<ControlledSearchBarProps> = ({\n    value,\n    onChange,\n}) => {\n    return (\n        <SearchBar\n            value={value ? { title: value } : null}\n            onChange={(v) => (v ? onChange(v.title) : onChange(''))}\n        />\n    );\n};\n\nexport default ControlledSearchBar;\n","import React, { FC, ReactNode } from 'react';\nimport { Box, makeStyles, Paper, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles(({ typography, spacing }) => ({\n    font: {\n        fontWeight: typography.fontWeightBold,\n    },\n    container: {\n        boxShadow: '0 2px 25px 0 rgb(34 36 38 / 5%) inset',\n        backgroundColor: 'transparent',\n    },\n    flexContainer: {\n        minHeight: spacing(25),\n    },\n}));\n\ninterface Props {\n    icon?: ReactNode;\n}\n\nconst Placeholder: FC<Props> = ({ icon, children }) => {\n    const { font, container, flexContainer } = useStyles();\n\n    return (\n        <Paper variant=\"outlined\" className={container}>\n            <Box\n                display=\"flex\"\n                flexDirection=\"column\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                className={flexContainer}\n            >\n                {icon && icon}\n                <Typography variant=\"h6\" className={font}>\n                    {children}\n                </Typography>\n            </Box>\n        </Paper>\n    );\n};\n\nexport default Placeholder;\n","import React, { useContext, useEffect, useState } from 'react';\nimport TotalStoreInventory from './TotalStoreInventory';\nimport { InventoryContext } from '../context/InventoryContext';\nimport ManageInventoryListItem from './ManageInventoryListItem';\nimport { Grid } from '@material-ui/core';\nimport { HeaderText } from '../ui/Typography';\nimport Loading from '../ui/Loading';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport Placeholder from '../ui/Placeholder';\nimport SearchIcon from '@material-ui/icons/Search';\n\nexport default function ManageInventory() {\n    const [term, setTerm] = useState<string>('');\n    const [loading, setLoading] = useState<boolean>(false);\n    const { searchResults, handleSearchSelect } = useContext(InventoryContext);\n\n    useEffect(() => {\n        if (term) {\n            (async () => {\n                setLoading(true);\n                await handleSearchSelect(term);\n                setLoading(false);\n            })();\n        }\n    }, [term]);\n\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={12} md={4}>\n                    <ControlledSearchBar\n                        value={term}\n                        onChange={(v) => setTerm(v)}\n                    />\n                </Grid>\n            </Grid>\n            <br />\n            <Grid container justify=\"space-between\">\n                <HeaderText>Manage Inventory</HeaderText>\n                {searchResults.length > 0 && (\n                    <TotalStoreInventory\n                        searchResults={searchResults}\n                        title={searchResults[0].name}\n                    />\n                )}\n            </Grid>\n            <br />\n            {loading ? (\n                <Loading />\n            ) : (\n                <>\n                    {!searchResults.length && (\n                        <Placeholder\n                            icon={<SearchIcon style={{ fontSize: 80 }} />}\n                        >\n                            <em>\n                                \"For the first time in his life, Grakk felt a\n                                little warm and fuzzy inside.\"\n                            </em>\n                        </Placeholder>\n                    )}\n                    <Grid container spacing={2}>\n                        {searchResults.map((card) => (\n                            <Grid item xs={12} key={card.id}>\n                                <ManageInventoryListItem card={card} />\n                            </Grid>\n                        ))}\n                    </Grid>\n                </>\n            )}\n        </>\n    );\n}\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { SUSPEND_SALE } from '../utils/api_resources';\nimport { SaleListCard } from './SaleContext';\n\nexport interface SuspendedSale {\n    _id: string;\n    name: string;\n    notes: string;\n    list: SaleListCard[];\n}\n\nconst getSuspendedSaleQuery = async (saleId: string) => {\n    try {\n        const { data } = await axios.get<SuspendedSale>(\n            `${SUSPEND_SALE}/${saleId}`,\n            {\n                headers: makeAuthHeader(),\n            }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default getSuspendedSaleQuery;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { SUSPEND_SALE } from '../utils/api_resources';\n\nconst deleteSuspendedSaleQuery = async (saleId: string) => {\n    try {\n        const { data } = await axios.delete<void>(`${SUSPEND_SALE}/${saleId}`, {\n            headers: makeAuthHeader(),\n        });\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default deleteSuspendedSaleQuery;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { SUSPEND_SALE } from '../utils/api_resources';\nimport { SaleListCard } from './SaleContext';\n\ninterface Payload {\n    customerName: string;\n    notes: string;\n    saleList: SaleListCard[];\n}\n\ninterface ResponseData {\n    ops: [{ name: string }];\n}\n\nconst createSuspendedSaleQuery = async (payload: Payload) => {\n    try {\n        const { data } = await axios.post<ResponseData>(SUSPEND_SALE, payload, {\n            headers: makeAuthHeader(),\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default createSuspendedSaleQuery;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { FINISH_SALE } from '../utils/api_resources';\nimport { Trade } from './ReceivingContext';\nimport { SaleListCard } from './SaleContext';\n\ninterface Payload {\n    cards: SaleListCard[];\n}\n\ninterface ResponseData {\n    sale_data: {\n        Sale: {\n            saleID: string;\n        };\n    };\n}\n\nconst finishSaleQuery = async (payload: Payload) => {\n    try {\n        const { data } = await axios.post<ResponseData>(FINISH_SALE, payload, {\n            headers: makeAuthHeader(),\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default finishSaleQuery;\n","import React, { useState, createContext, FC } from 'react';\nimport $ from 'jquery';\nimport sortSaleList from '../utils/sortSaleList';\nimport createToast from '../common/createToast';\nimport getSuspendedSaleQuery, { SuspendedSale } from './getSuspendedSaleQuery';\nimport deleteSuspendedSaleQuery from './deleteSuspendedSaleQuery';\nimport createSuspendedSaleQuery from './createSuspendedSaleQuery';\nimport finishSaleQuery from './finishSaleQuery';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport cardSearchQuery from './cardSearchQuery';\n\ninterface Props {}\n\ninterface SuspendSaleArgs {\n    customerName: string;\n    notes: string;\n}\n\nexport type SaleListCard = ScryfallCard & {\n    finishCondition: string;\n    qtyToSell: number;\n    price: number;\n};\n\nexport interface SaleContext {\n    saleListCards: SaleListCard[];\n    searchResults: ScryfallCard[];\n    searchTerm: string;\n    suspendedSale: SuspendedSale;\n    handleResultSelect: (term: string) => void;\n    addToSaleList: (\n        card: ScryfallCard,\n        finishCondition: string,\n        qtyToSell: number,\n        price: number\n    ) => void;\n    removeFromSaleList: (id: string, finishCondition: string) => void;\n    restoreSale: (saleId: string) => void;\n    suspendSale: (args: SuspendSaleArgs) => void;\n    deleteSuspendedSale: () => void;\n    finalizeSale: () => void;\n    resetSaleState: () => void;\n}\n\nconst defaultSuspendedSale: SuspendedSale = {\n    _id: '',\n    name: '',\n    notes: '',\n    list: [],\n};\n\nexport const SaleContext = createContext<SaleContext>({\n    saleListCards: [],\n    searchResults: [],\n    searchTerm: '',\n    suspendedSale: defaultSuspendedSale,\n    handleResultSelect: () => null,\n    addToSaleList: () => null,\n    removeFromSaleList: () => null,\n    restoreSale: () => null,\n    suspendSale: () => null,\n    deleteSuspendedSale: () => null,\n    finalizeSale: () => null,\n    resetSaleState: () => null,\n});\n\nexport const SaleProvider: FC<Props> = ({ children }) => {\n    const [saleListCards, setSaleListCards] = useState<SaleListCard[]>([]);\n    const [searchTerm, setSearchTerm] = useState<string>('');\n    const [searchResults, setSearchResults] = useState<ScryfallCard[]>([]);\n    const [suspendedSale, setSuspendedSale] = useState<SuspendedSale>(\n        defaultSuspendedSale\n    );\n\n    /**\n     * Executes after a user selects an autocompleted suggestion\n     */\n    const handleResultSelect = async (term: string) => {\n        const cards = await cardSearchQuery({\n            cardName: term,\n            inStockOnly: true,\n        });\n\n        setSearchResults(cards);\n        setSearchTerm(term);\n\n        if (cards.length === 0) {\n            $('#searchBar').focus().select();\n        }\n    };\n\n    /**\n     * Adds product to the sale list\n     */\n    const addToSaleList = (\n        card: ScryfallCard,\n        finishCondition: string,\n        qtyToSell: number,\n        price: number\n    ) => {\n        const oldState = [...saleListCards];\n\n        const newCard: SaleListCard = {\n            ...card,\n            finishCondition,\n            qtyToSell,\n            price,\n        };\n\n        // Need to make sure same ID's with differing conditions are separate line-items\n        const idx = oldState.findIndex((el) => {\n            return (\n                el.id === newCard.id && el.finishCondition === finishCondition\n            );\n        });\n\n        if (idx !== -1) {\n            oldState.splice(idx, 1, newCard);\n        } else {\n            oldState.push(newCard);\n        }\n\n        setSaleListCards(sortSaleList(oldState));\n    };\n\n    /**\n     * Removes product from the sale list\n     */\n    const removeFromSaleList = (id: string, finishCondition: string) => {\n        const newState = [...saleListCards].filter((c) => {\n            return !(c.id === id && c.finishCondition === finishCondition);\n        });\n\n        setSaleListCards(newState);\n    };\n\n    /**\n     * Restores a sale (assigns a saleList to state) from a suspended sale from the db\n     */\n    const restoreSale = async (id: string) => {\n        try {\n            const sale = await getSuspendedSaleQuery(id);\n\n            const modeledData = sale.list.map((c) => c);\n\n            setSaleListCards(modeledData);\n            setSuspendedSale(sale);\n\n            createToast({\n                color: 'green',\n                header: `You are viewing ${sale.name}'s sale`,\n            });\n        } catch (e) {\n            console.log(e.response);\n            createToast({ color: 'red', header: `Error` });\n        }\n    };\n\n    /**\n     * Suspends a sale (persists it to mongo) via the SuspendedSale component and API\n     */\n    const suspendSale = async ({\n        customerName,\n        notes,\n    }: {\n        customerName: string;\n        notes: string;\n    }) => {\n        const { _id } = suspendedSale;\n\n        try {\n            if (!!_id)\n                // If we're suspended, delete the previous to replace\n                await deleteSuspendedSaleQuery(_id);\n\n            const data = await createSuspendedSaleQuery({\n                customerName: customerName,\n                notes: notes,\n                saleList: saleListCards,\n            });\n\n            resetSaleState();\n\n            createToast({\n                color: 'green',\n                header: `${data.ops[0].name}'s sale was suspended`,\n            });\n        } catch (e) {\n            console.log(e.response);\n            createToast({\n                color: 'red',\n                header: `Error`,\n                message: e.response.data || 'Error suspending sale',\n            });\n        }\n    };\n\n    const deleteSuspendedSale = async () => {\n        try {\n            const { _id, name } = suspendedSale;\n            await deleteSuspendedSaleQuery(_id);\n\n            resetSaleState();\n\n            createToast({\n                color: 'green',\n                header: `${name}'s sale was deleted`,\n            });\n        } catch (e) {\n            console.log(e.response);\n            createToast({\n                color: 'red',\n                header: `Error`,\n                message: e.response.data || 'Error deleting suspended sale',\n            });\n        }\n    };\n\n    /**\n     * Extracts the saleList state and uses it to complete sale\n     */\n    const finalizeSale = async () => {\n        const { _id } = suspendedSale;\n\n        try {\n            // Must delete currently suspended sale to faithfully restore inventory prior to sale\n            if (!!_id) await deleteSuspendedSaleQuery(_id);\n\n            const { sale_data } = await finishSaleQuery({\n                cards: saleListCards,\n            });\n\n            createToast({\n                color: 'green',\n                header: 'Sale created in Lightspeed!',\n                message: `The id number is #${sale_data.Sale.saleID}`,\n            });\n\n            resetSaleState();\n        } catch (e) {\n            createToast({\n                color: 'red',\n                header: 'Error',\n                message: e.response.data || 'Sale was not created',\n            });\n\n            resetSaleState();\n        }\n    };\n\n    const resetSaleState = () => {\n        setSaleListCards([]);\n        setSearchResults([]);\n        setSearchTerm('');\n        setSuspendedSale(defaultSuspendedSale);\n    };\n\n    return (\n        <SaleContext.Provider\n            value={{\n                saleListCards,\n                searchTerm,\n                searchResults,\n                suspendedSale,\n                handleResultSelect,\n                addToSaleList,\n                removeFromSaleList,\n                restoreSale,\n                suspendSale,\n                deleteSuspendedSale,\n                finalizeSale,\n                resetSaleState,\n            }}\n        >\n            {children}\n        </SaleContext.Provider>\n    );\n};\n","import { ScryfallCard } from './ScryfallCard';\n\n/**\n * Takes in an unordered group of cards and sorts them according to The Clubhouse's specs:\n * WUBRG, then multicolor, then colorless, then land, alphabetically within each color/category\n */\nexport default function sortSaleList<T extends ScryfallCard>(cards: T[]) {\n    const ORDER = ['W', 'U', 'B', 'R', 'G', 'MULTI', 'COLORLESS', 'LAND'];\n\n    /**\n     * Main helper function that manages sort order\n     * @param {Object} card\n     */\n    function helpSort(card: ScryfallCard) {\n        let arrayConst = null;\n\n        let colorsLength = null;\n        let cardFace = null;\n\n        try {\n            // If colors don't exist, it's a flip card or storybook frame\n            colorsLength = card.colors.length;\n            cardFace = card;\n        } catch (e) {\n            try {\n                // Storybook frames from Eldraine may throw error\n                colorsLength = card.card_faces[0].colors.length;\n                cardFace = card.card_faces[0];\n            } catch (e) {\n                colorsLength = card.colors.length;\n                cardFace = card;\n            }\n        }\n\n        // Apply logic to return correct constant enum\n        if (colorsLength === 0) {\n            arrayConst = 'COLORLESS';\n        } else if (colorsLength === 1) {\n            arrayConst = cardFace.colors[0];\n        } else if (colorsLength > 1) {\n            arrayConst = 'MULTI';\n        }\n\n        // Drill into colorless cards, if they are lands or not\n        if (arrayConst === 'COLORLESS') {\n            if (cardFace.color_identity) {\n                if (cardFace.color_identity.length === 1) {\n                    arrayConst = cardFace.color_identity[0];\n                }\n                if (cardFace.color_identity.length > 1) {\n                    arrayConst = 'MULTI';\n                }\n            }\n            if (cardFace.type_line.includes('Land')) {\n                arrayConst = 'LAND';\n            }\n        }\n\n        // Final check to guard against a null arrayConst\n        if (!arrayConst) {\n            arrayConst = 'LAND';\n        }\n\n        return arrayConst;\n    }\n\n    const alphaSort = cards.sort((a, b) => {\n        return a.name.localeCompare(b.name);\n    });\n\n    const sorted = alphaSort.sort((a, b) => {\n        return ORDER.indexOf(helpSort(a)) - ORDER.indexOf(helpSort(b));\n    });\n\n    return sorted;\n}\n","import { Form, Select, FormFieldProps } from 'semantic-ui-react';\n\ntype FormSelectFieldProps<T> = {\n    label: string;\n    name: string;\n    onChange: (value: string) => void;\n    options: T[];\n    error?: string;\n} & Omit<FormFieldProps, 'label' | 'name' | 'options' | 'onChange'>;\n\nfunction FormikSelectField<T>({\n    label,\n    name,\n    options,\n    onChange,\n    error,\n    ...props\n}: FormSelectFieldProps<T>) {\n    return (\n        <Form.Field\n            error={error}\n            control={Select}\n            label={label}\n            placeholder={label}\n            options={options}\n            name={name}\n            onChange={(_: any, { value }: { value: string }) => {\n                onChange(value);\n            }}\n            {...props}\n        />\n    );\n}\n\nexport default FormikSelectField;\n","const roundPrice = (num: number) => {\n    return Math.round(num * 1e2) / 1e2;\n};\n\nexport default roundPrice;\n","import React, { useContext, FC, ChangeEvent } from 'react';\nimport { Form, Input, Button, Item } from 'semantic-ui-react';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport CardImage from '../common/CardImage';\nimport { SaleContext } from '../context/SaleContext';\nimport { ScryfallCard, QOH } from '../utils/ScryfallCard';\nimport CardHeader from '../ui/CardHeader';\nimport { FormikErrors, useFormik } from 'formik';\nimport FormikSelectField from '../ui/FormikSelectField';\nimport { Box, Paper } from '@material-ui/core';\nimport roundPrice from '../utils/roundPrice';\n\ninterface ConditionOptions {\n    text: string;\n    value: keyof QOH;\n    key: string;\n}\n\n/**\n * Creates a list of conditions for the dropdown menu from the `qoh`\n * Note: Is this not needed if we default select initially?\n * @param {Object} qoh\n * @param {String} id\n */\nfunction createConditionOptions(\n    qoh: Partial<QOH>,\n    id: string\n): ConditionOptions[] {\n    const removeZeroedQuantites = _.pickBy(qoh, (p) => p && p > 0); // Quantites of zero not included\n\n    return Object.entries(removeZeroedQuantites).map((d) => {\n        const [conditionFinish, qty] = d;\n\n        return {\n            text: `${conditionFinish.split('_').join(' | ')} | Qty: ${qty}`,\n            value: conditionFinish as keyof QOH,\n            key: `${id}${conditionFinish}`,\n        };\n    });\n}\n\ntype Finish = 'FOIL' | 'NONFOIL';\n\ninterface FormValues {\n    quantityToSell: number;\n    price: number;\n    selectedFinishCondition: keyof QOH;\n}\n\nconst handleFocus = (e: ChangeEvent<HTMLInputElement>) => e.target.select();\n\ninterface Props {\n    card: ScryfallCard;\n}\n\nconst SaleSearchCard: FC<Props> = ({ card }) => {\n    const { addToSaleList } = useContext(SaleContext);\n\n    const conditionSelectOptions = createConditionOptions(card.qoh, card.id);\n\n    const onSubmit = ({\n        selectedFinishCondition,\n        quantityToSell,\n        price,\n    }: FormValues) => {\n        const roundedPrice = roundPrice(price);\n\n        addToSaleList(\n            card,\n            selectedFinishCondition,\n            quantityToSell,\n            roundedPrice\n        );\n\n        // Highlight the input after successful card add\n        $('#searchBar').focus().select();\n    };\n\n    const initialFormValues = {\n        selectedFinishCondition: conditionSelectOptions[0].value,\n        price: 0,\n        quantityToSell: 0,\n    };\n\n    const validate = ({\n        quantityToSell,\n        price,\n        selectedFinishCondition: selectedFinish,\n    }: FormValues) => {\n        const errors: FormikErrors<FormValues> = {};\n\n        if (!quantityToSell) errors.quantityToSell = 'error';\n        if (!price) errors.price = 'error';\n\n        if (!selectedFinish) {\n            errors.selectedFinishCondition = 'error';\n        }\n\n        if (quantityToSell > card.qoh[selectedFinish]!) {\n            errors.quantityToSell = 'error';\n        }\n\n        if (price < 0) {\n            errors.price = 'error';\n        }\n\n        if (quantityToSell < 1) {\n            errors.quantityToSell = 'error';\n        }\n\n        return errors;\n    };\n\n    const {\n        handleChange,\n        handleSubmit,\n        setFieldValue,\n        values,\n        isValid,\n    } = useFormik({\n        initialValues: initialFormValues,\n        validate,\n        onSubmit,\n        validateOnMount: true,\n    });\n\n    return (\n        <Paper variant=\"outlined\">\n            <Box p={2}>\n                <Item.Group divided>\n                    <Item>\n                        <Item.Image size=\"tiny\">\n                            <CardImage image={card.cardImage} />\n                        </Item.Image>\n                        <Item.Content>\n                            <CardHeader\n                                card={card}\n                                selectedFinish={\n                                    values.selectedFinishCondition.split(\n                                        '_'\n                                    )[0] as Finish\n                                }\n                                showMid\n                                round\n                            />\n                            <Item.Description>\n                                <Form>\n                                    <Form.Group>\n                                        <FormikSelectField\n                                            label=\"Select finish/condition\"\n                                            name=\"selectedFinishCondition\"\n                                            options={conditionSelectOptions}\n                                            defaultValue={\n                                                initialFormValues.selectedFinishCondition\n                                            }\n                                            onChange={(v) => {\n                                                setFieldValue(\n                                                    'selectedFinishCondition',\n                                                    v\n                                                );\n                                                setFieldValue(\n                                                    'quantityToSell',\n                                                    0\n                                                );\n                                            }}\n                                        />\n                                        <Form.Field\n                                            control={Input}\n                                            type=\"number\"\n                                            label=\"Quantity to sell\"\n                                            value={values.quantityToSell}\n                                            onChange={(\n                                                _: any,\n                                                { value }: { value: string }\n                                            ) => {\n                                                const castVal = parseInt(\n                                                    value,\n                                                    10\n                                                );\n\n                                                if (\n                                                    castVal >\n                                                    card.qoh[\n                                                        values\n                                                            .selectedFinishCondition\n                                                    ]!\n                                                ) {\n                                                    return;\n                                                }\n\n                                                setFieldValue(\n                                                    'quantityToSell',\n                                                    castVal\n                                                );\n                                            }}\n                                            onFocus={handleFocus}\n                                        />\n                                        <Form.Field\n                                            label=\"Price\"\n                                            name=\"price\"\n                                            control={Input}\n                                            type=\"number\"\n                                            value={values.price}\n                                            onChange={handleChange}\n                                            onFocus={handleFocus}\n                                            step=\"0.5\"\n                                        />\n                                        <Form.Button\n                                            type=\"submit\"\n                                            label=\"Add to sale?\"\n                                            control={Button}\n                                            primary\n                                            onClick={() => handleSubmit()}\n                                            disabled={!isValid}\n                                        >\n                                            Sell\n                                        </Form.Button>\n                                    </Form.Group>\n                                </Form>\n                            </Item.Description>\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Box>\n        </Paper>\n    );\n};\n\nexport default SaleSearchCard;\n","import React, { FC } from 'react';\nimport SaleSearchCard from './SaleSearchCard';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport { Grid } from '@material-ui/core';\nimport Loading from '../ui/Loading';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Placeholder from '../ui/Placeholder';\n\ninterface Props {\n    loading: boolean;\n    term: string;\n    cards: ScryfallCard[];\n}\n\nconst BrowseCardList: FC<Props> = ({ loading, term, cards }) => {\n    // Creates text to notify the user of zero-result searches\n    const searchNotification = () => {\n        if (term && !cards.length) {\n            // Check to make sure the user has searched and no results\n            return (\n                <p>\n                    Zero results for <em>{term}</em>\n                </p>\n            );\n        }\n        return (\n            <p>\n                <em>\"Don't give the people what they want\"</em>\n            </p>\n        );\n    };\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    if (cards.length === 0) {\n        return (\n            <Placeholder icon={<SearchIcon style={{ fontSize: 80 }} />}>\n                <span>{searchNotification()}</span>\n            </Placeholder>\n        );\n    }\n\n    return (\n        <Grid container spacing={2}>\n            {cards.map((card) => {\n                return (\n                    <Grid item xs={12} key={card.id}>\n                        <SaleSearchCard card={card} />\n                    </Grid>\n                );\n            })}\n        </Grid>\n    );\n};\n\nexport default BrowseCardList;\n","export type Price = number | string | null;\n\nexport function price(val: Price) {\n    if (val === null) return '$0.00';\n    let price: number = typeof val === 'string' ? Number(val) : val;\n    if (isNaN(price)) return '$0.00';\n    return `$${price.toFixed(2)}`;\n}\n","import React, { FC } from 'react';\nimport { Price, price } from '../utils/price';\n\ninterface Props {\n    num: Price;\n}\n\nexport function getPrice(val: Price) {\n    if (val === null) return '$0.00';\n    let price: number = typeof val === 'string' ? Number(val) : val;\n    if (isNaN(price)) return '$0.00';\n    return `$${price.toFixed(2)}`;\n}\n\nconst DisplayPrice: FC<Props> = ({ num }) => <span>{price(num)}</span>;\n\nexport default DisplayPrice;\n","import { makeStyles, Tooltip } from '@material-ui/core';\nimport { FC } from 'react';\nimport clsx from 'clsx';\n\ninterface Props {\n    cardImage: string;\n}\n\nconst useStyles = makeStyles({\n    transparentBackground: {\n        backgroundColor: 'transparent',\n    },\n    borderRounded: {\n        borderRadius: '7px 7px 7px 7px',\n    },\n    imageSize: {\n        width: 155,\n        height: 'auto',\n    },\n});\n\nconst CardImageTooltip: FC<Props> = ({ cardImage, children }) => {\n    const { transparentBackground, borderRounded, imageSize } = useStyles();\n\n    return (\n        <Tooltip\n            placement=\"bottom-start\"\n            title={\n                <img\n                    className={clsx(borderRounded, imageSize)}\n                    src={cardImage}\n                />\n            }\n            classes={{\n                tooltip: transparentBackground,\n            }}\n        >\n            <span>{children}</span>\n        </Tooltip>\n    );\n};\n\nexport default CardImageTooltip;\n","import React, { useContext, FC } from 'react';\nimport { SaleContext, SaleListCard } from '../context/SaleContext';\nimport Price from '../common/Price';\nimport SetIcon from '../ui/SetIcon';\nimport CardImageTooltip from '../ui/CardImageTooltip';\nimport { ListItem, Grid, Box, Typography, IconButton } from '@material-ui/core';\nimport Chip from '../common/Chip';\nimport CloseIcon from '@material-ui/icons/Close';\n\ninterface Props {\n    card: SaleListCard;\n}\n\nconst SaleCartItem: FC<Props> = ({\n    card: {\n        display_name,\n        set,\n        finishCondition,\n        qtyToSell,\n        price,\n        rarity,\n        id,\n        cardImage,\n    },\n}) => {\n    const { removeFromSaleList } = useContext(SaleContext);\n\n    return (\n        <ListItem>\n            <Grid container alignItems=\"center\" justify=\"space-between\">\n                <Grid item>\n                    <CardImageTooltip cardImage={cardImage}>\n                        <Box display=\"flex\" alignItems=\"center\">\n                            <Typography variant=\"h6\" style={{ cursor: 'help' }}>\n                                {display_name}\n                            </Typography>\n                            <SetIcon set={set} rarity={rarity} />\n                            <Chip size=\"small\" label={set.toUpperCase()} />\n                        </Box>\n                    </CardImageTooltip>\n                    <div className=\"line-item-price\">\n                        {qtyToSell}x @ <Price num={price} />\n                        {' • '}\n                        {finishCondition && (\n                            <span>\n                                {finishCondition.split('_')[1]} {' | '}\n                                {finishCondition.split('_')[0]}\n                            </span>\n                        )}\n                    </div>\n                </Grid>\n                <Grid item>\n                    <IconButton\n                        onClick={() => removeFromSaleList(id, finishCondition)}\n                        color=\"secondary\"\n                    >\n                        <CloseIcon />\n                    </IconButton>\n                </Grid>\n            </Grid>\n        </ListItem>\n    );\n};\n\nexport default SaleCartItem;\n","/**\n * Sums numbers up\n */\nexport default function sum(nums: number[]): number {\n    return nums.reduce((acc, curr) => acc + curr, 0);\n}\n","import React, { FC } from 'react';\nimport Price from '../common/Price';\nimport { SaleListCard } from '../context/SaleContext';\nimport sum from '../utils/sum';\n\ninterface Props {\n    saleList: SaleListCard[];\n}\n\nconst SaleCartPriceTotal: FC<Props> = ({ saleList }) => {\n    const total = sum(saleList.map((c) => c.qtyToSell * Number(c.price)));\n\n    return (\n        <div id=\"sale-price-total\">\n            <Price num={total} />\n        </div>\n    );\n};\n\nexport default SaleCartPriceTotal;\n","import React, { useState, useContext, FC } from 'react';\nimport { Modal, Button, Header, Icon } from 'semantic-ui-react';\nimport { SaleContext } from '../context/SaleContext';\n\ninterface Props {}\n\nconst FinishSale: FC<Props> = () => {\n    const [submit, setSubmit] = useState({ loading: false, disabled: false });\n    const [showModal, setShowModal] = useState(false);\n    const { finalizeSale } = useContext(SaleContext);\n\n    const handleFinalizeSale = async () => {\n        setSubmit({ loading: true, disabled: true });\n        await finalizeSale();\n    };\n\n    const modalTrigger = (\n        <Button fluid primary onClick={() => setShowModal(true)}>\n            Finalize sale\n        </Button>\n    );\n\n    return (\n        <Modal basic open={showModal} trigger={modalTrigger}>\n            <Modal.Content>\n                <Header inverted as=\"h2\">\n                    Finalize this sale?\n                </Header>\n                <p>\n                    Click 'Yes' to create a sale in Lightspeed. Ensure that you\n                    have all cards pulled and double-checked the customer list.\n                    Undoing this action will require manual data entry!\n                </p>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button\n                    basic\n                    color=\"red\"\n                    inverted\n                    onClick={() => setShowModal(false)}\n                >\n                    <Icon name=\"remove\" /> No\n                </Button>\n                <Button\n                    color=\"green\"\n                    inverted\n                    onClick={handleFinalizeSale}\n                    loading={submit.loading}\n                    disabled={submit.disabled}\n                >\n                    <Icon name=\"checkmark\" /> Yes\n                </Button>\n            </Modal.Actions>\n        </Modal>\n    );\n};\n\nexport default FinishSale;\n","import React, { FC, Fragment } from 'react';\nimport SaleCartItem from './SaleCartItem';\nimport SaleCartPriceTotal from './SaleCartPriceTotal';\nimport FinishSale from './FinishSale';\nimport { SaleListCard } from '../context/SaleContext';\nimport AddIcon from '@material-ui/icons/Add';\nimport Placeholder from '../ui/Placeholder';\nimport { List, Paper, Divider, Box, Grid, Typography } from '@material-ui/core';\n\ninterface Props {\n    saleList: SaleListCard[];\n}\n\nconst SaleCartList: FC<Props> = ({ saleList }) => {\n    if (saleList.length === 0) {\n        return (\n            <Placeholder icon={<AddIcon style={{ fontSize: 80 }} />}>\n                <em>\"Give them what they need\"</em>\n            </Placeholder>\n        );\n    }\n\n    return (\n        <>\n            <List component={Paper} variant=\"outlined\">\n                {saleList.map((card, idx, arr) => (\n                    <Fragment\n                        key={`${card.id}${card.finishCondition}${card.qtyToSell}`}\n                    >\n                        <SaleCartItem card={card} />\n                        {idx !== arr.length - 1 && <Divider />}\n                    </Fragment>\n                ))}\n            </List>\n            <br />\n            <Paper variant=\"outlined\">\n                <Box p={2}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Box\n                                display=\"flex\"\n                                justifyContent=\"space-between\"\n                                alignItems=\"center\"\n                            >\n                                <Typography>SUBTOTAL</Typography>\n                                <Typography variant=\"h6\">\n                                    <b>\n                                        <SaleCartPriceTotal\n                                            saleList={saleList}\n                                        />\n                                    </b>\n                                </Typography>\n                            </Box>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <FinishSale />\n                        </Grid>\n                    </Grid>\n                </Box>\n            </Paper>\n        </>\n    );\n};\n\nexport default SaleCartList;\n","import React, { FC, useRef } from 'react';\nimport { useReactToPrint } from 'react-to-print';\nimport { Button, Icon } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport Price from '../common/Price';\nimport { SaleListCard } from '../context/SaleContext';\nimport SaleCartPriceTotal from './SaleCartPriceTotal';\n\ninterface Props {\n    saleListCards: SaleListCard[];\n}\n\nconst PrintWrapper = styled.div`\n    @media print {\n        background-color: white;\n        margin: 0;\n        padding: 0;\n        font-size: 30px;\n        line-height: 40px;\n        z-index: 5000;\n        overflow: hidden;\n    }\n    @media screen {\n        display: none !important;\n    }\n`;\n\nconst PrintList: FC<Props> = ({ saleListCards }) => {\n    const componentRef = useRef<HTMLDivElement>(null);\n\n    const handlePrint = useReactToPrint({\n        content: () => componentRef.current,\n    });\n\n    return (\n        <>\n            <div>\n                <Button size=\"tiny\" onClick={handlePrint} icon>\n                    <Icon name=\"print\" />\n                </Button>\n            </div>\n            <PrintWrapper ref={componentRef}>\n                <ul>\n                    {saleListCards.map((slc) => {\n                        return (\n                            <li key={slc.id}>\n                                <b>\n                                    {slc.display_name} | x{slc.qtyToSell} |{' '}\n                                    {slc.finishCondition} | {slc.set_name} |{' '}\n                                    <Price num={slc.price} />\n                                </b>\n                            </li>\n                        );\n                    })}\n                </ul>\n                <span>\n                    <b>\n                        Subtotal:{' '}\n                        <SaleCartPriceTotal saleList={saleListCards} />\n                    </b>\n                </span>\n            </PrintWrapper>\n        </>\n    );\n};\n\nexport default PrintList;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { SUSPEND_SALE } from '../utils/api_resources';\nimport { SuspendedSale } from '../context/getSuspendedSaleQuery';\n\nconst getSuspendedSalesQuery = async () => {\n    try {\n        const { data } = await axios.get<SuspendedSale[]>(SUSPEND_SALE, {\n            headers: makeAuthHeader(),\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default getSuspendedSalesQuery;\n","import React, { useState, useEffect, FC } from 'react';\nimport {\n    Modal,\n    Button,\n    Grid,\n    Form,\n    Message,\n    TextAreaProps,\n    DropdownProps,\n} from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { SaleContext } from '../context/SaleContext';\nimport { SuspendedSale } from '../context/getSuspendedSaleQuery';\nimport getSuspendedSalesQuery from './getSuspendedSalesQuery';\n\ninterface Props {\n    id: string;\n    saleListLength: number;\n    restoreSale: SaleContext['restoreSale'];\n    deleteSuspendedSale: SaleContext['deleteSuspendedSale'];\n    suspendSale: SaleContext['suspendSale'];\n}\n\ninterface SuspendButtonState {\n    suspendBtn: boolean;\n    restoreBtn: boolean;\n    deleteBtn: boolean;\n}\n\nconst Divider = styled.div`\n    border-left: 1px solid rgba(0, 0, 0, 0.2);\n    height: 100%;\n`;\n\nconst ClearMargin = styled.div`\n    margin-top: 0px;\n    margin-bottom: 0px;\n`;\n\nconst CharLimit = styled.p`\n    font-size: 12px;\n    color: rgba(0, 0, 0, 0.2);\n    float: right;\n`;\n\nconst SuspendSaleButton: FC<Props> = ({\n    restoreSale,\n    deleteSuspendedSale,\n    saleListLength,\n    suspendSale,\n    id,\n}) => {\n    const [sales, setSales] = useState<SuspendedSale[]>([]);\n    const [saleID, setSaleID] = useState<string>('');\n    const [modalOpen, setModalOpen] = useState<boolean>(false);\n    const [customerName, setCustomerName] = useState<string>('');\n    const [notes, setNotes] = useState<string>('');\n    const [disabled, setDisabled] = useState<boolean>(false);\n    const [loadingBtn, setLoadingBtn] = useState<SuspendButtonState>({\n        suspendBtn: false,\n        restoreBtn: false,\n        deleteBtn: false,\n    });\n\n    const getSales = async () => {\n        const suspendedSales = await getSuspendedSalesQuery();\n\n        setSales(suspendedSales);\n    };\n\n    const clearFields = () => {\n        setCustomerName('');\n        setNotes('');\n        setSaleID('');\n    };\n\n    // Get the previously suspended sales on mount and parent state (_id) change\n    useEffect(() => {\n        getSales();\n    }, [id]); // If the parent-level suspended-sale _id changes, we fetch again\n\n    const modalTrigger = (\n        <div>\n            <Button\n                size=\"tiny\"\n                id=\"suspend-sale-btn\"\n                onClick={() => setModalOpen(true)}\n                icon=\"ellipsis horizontal\"\n            />\n        </div>\n    );\n\n    const submitSuspendSale = async () => {\n        setDisabled(true);\n        setLoadingBtn({ ...loadingBtn, suspendBtn: true });\n        await suspendSale({ customerName, notes });\n        setModalOpen(false); // Close the modal to avoid \"flicker\" when state re-renders\n        await getSales(); // Parent _id does not change, re-fetch sales\n        clearFields();\n        setDisabled(false);\n        setLoadingBtn({ ...loadingBtn, suspendBtn: false });\n    };\n\n    const submitRestoreSale = async () => {\n        setDisabled(true);\n        setLoadingBtn({ ...loadingBtn, restoreBtn: true });\n        await restoreSale(saleID);\n        setModalOpen(false);\n        clearFields();\n        setDisabled(false);\n        setLoadingBtn({ ...loadingBtn, restoreBtn: false });\n    };\n\n    const submitDeleteSale = async () => {\n        setDisabled(true);\n        setLoadingBtn({ ...loadingBtn, deleteBtn: true });\n        await deleteSuspendedSale();\n        setModalOpen(false);\n        clearFields();\n        setDisabled(false);\n        setLoadingBtn({ ...loadingBtn, deleteBtn: false });\n    };\n\n    return (\n        <React.Fragment>\n            <Modal trigger={modalTrigger} open={modalOpen}>\n                <Modal.Header>Sales menu</Modal.Header>\n                <Modal.Content>\n                    <Grid columns={2} stackable relaxed=\"very\">\n                        {saleListLength > 0 && (\n                            <React.Fragment>\n                                <Grid.Column width=\"7\">\n                                    <h3>Suspend Sale</h3>\n                                    <Form>\n                                        <ClearMargin>\n                                            <Form.Input\n                                                id=\"suspend-sale-name\"\n                                                label=\"Customer Name\"\n                                                placeholder=\"Jace, the Mind Sculptor\"\n                                                value={customerName}\n                                                onChange={(e, { value }) =>\n                                                    setCustomerName(\n                                                        value.substring(0, 50)\n                                                    )\n                                                }\n                                            />\n                                        </ClearMargin>\n                                        <ClearMargin>\n                                            <CharLimit>\n                                                {customerName.length}/50\n                                            </CharLimit>\n                                        </ClearMargin>\n                                        <ClearMargin>\n                                            <Form.TextArea\n                                                label=\"Notes\"\n                                                placeholder=\"Sometimes, I forget things...\"\n                                                value={notes}\n                                                onChange={(\n                                                    e,\n                                                    { value }: TextAreaProps\n                                                ) => {\n                                                    if (\n                                                        typeof value ===\n                                                        'string'\n                                                    ) {\n                                                        setNotes(\n                                                            value.substring(\n                                                                0,\n                                                                150\n                                                            )\n                                                        );\n                                                    }\n                                                }}\n                                            />\n                                        </ClearMargin>\n                                        <ClearMargin>\n                                            <CharLimit>\n                                                {notes.length}/150\n                                            </CharLimit>\n                                        </ClearMargin>\n                                        <Form.Button\n                                            id=\"suspend-sale-submit\"\n                                            primary\n                                            disabled={disabled || !customerName}\n                                            loading={loadingBtn.suspendBtn}\n                                            onClick={submitSuspendSale}\n                                        >\n                                            Suspend Sale\n                                        </Form.Button>\n                                    </Form>\n                                </Grid.Column>\n                                <Grid.Column width=\"1\">\n                                    <Divider />\n                                </Grid.Column>\n                            </React.Fragment>\n                        )}\n                        <Grid.Column width=\"7\">\n                            <h3>Restore Sale</h3>\n                            {sales.length > 0 && (\n                                <React.Fragment>\n                                    <Form>\n                                        <Form.Select\n                                            fluid\n                                            label=\"Previously suspended sales\"\n                                            options={sales.map((s) => {\n                                                return {\n                                                    key: s._id,\n                                                    text: s.name,\n                                                    value: s._id,\n                                                };\n                                            })}\n                                            placeholder=\"Select a sale\"\n                                            onChange={(\n                                                e,\n                                                { value }: DropdownProps\n                                            ) => {\n                                                if (typeof value === 'string') {\n                                                    setSaleID(value);\n                                                }\n                                            }}\n                                        />\n                                        <Form.Button\n                                            primary\n                                            disabled={disabled || !saleID}\n                                            loading={loadingBtn.restoreBtn}\n                                            onClick={submitRestoreSale}\n                                        >\n                                            Restore Sale\n                                        </Form.Button>\n                                    </Form>\n                                </React.Fragment>\n                            )}\n                            {sales.length === 0 && (\n                                <Message info>\n                                    <Message.Header>No sales</Message.Header>\n                                    Suspend a sale first\n                                </Message>\n                            )}\n                        </Grid.Column>\n                    </Grid>\n                </Modal.Content>\n                <Modal.Actions>\n                    {!!id && (\n                        <Button\n                            color=\"red\"\n                            disabled={disabled}\n                            loading={loadingBtn.deleteBtn}\n                            onClick={submitDeleteSale}\n                        >\n                            Delete current Sale\n                        </Button>\n                    )}\n                    <Button\n                        primary\n                        disabled={disabled}\n                        onClick={() => setModalOpen(false)}\n                    >\n                        Cancel\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nexport default SuspendSaleButton;\n","export default function pluralize(quantity: number, word: string) {\n    return `${word}${quantity === 1 ? '' : 's'}`;\n}\n","import React, { FC } from 'react';\nimport pluralize from '../utils/pluralize';\nimport Chip from './Chip';\n\ninterface Props {\n    listLength: number;\n}\n\nconst TotalCardsLabel: FC<Props> = ({ listLength }) => {\n    if (listLength === 0) return null;\n\n    return (\n        <Chip\n            label={`${listLength} ${pluralize(listLength, 'card')}`}\n            size=\"small\"\n        />\n    );\n};\n\nexport default TotalCardsLabel;\n","import { useState, useEffect } from 'react';\n\n/**\n * The browser emits a \"beforeunload\" event right before the user closes a tab or refreshes\n * to indicate freeing resources. We interrupt this process and render a confirmation dialog.\n */\nconst onInterrupt = (e: BeforeUnloadEvent) => {\n    e.preventDefault();\n    e.returnValue = '';\n};\n\nconst initBeforeUnload = (showPrompt: boolean) => {\n    if (showPrompt) {\n        window.addEventListener('beforeunload', onInterrupt);\n    } else {\n        window.removeEventListener('beforeunload', onInterrupt);\n    }\n};\n\n/**\n * Custom hook that tracks whether or not we add the listener event,\n * based on an initial value.\n */\nconst useInterruptExit = (initial: boolean) => {\n    const [showPrompt, setShowPrompt] = useState<boolean>(initial);\n\n    initBeforeUnload(showPrompt);\n\n    useEffect(() => {\n        initBeforeUnload(showPrompt);\n\n        // Remember to remove the listener on unmount!\n        return () => {\n            window.removeEventListener('beforeunload', onInterrupt);\n        };\n    }, [showPrompt]);\n\n    return { showPrompt, setShowPrompt };\n};\n\nexport default useInterruptExit;\n","import React, { useContext, FC, useState, useEffect } from 'react';\nimport BrowseCardList from './SaleSearchCardList';\nimport SaleCartList from './SaleCartList';\nimport PrintList from './PrintList';\nimport SuspendSaleButton from './SuspendSaleButton';\nimport { SaleContext } from '../context/SaleContext';\nimport TotalCardsLabel from '../common/TotalCardsLabel';\nimport TotalStoreInventory from '../ManageInventory/TotalStoreInventory';\nimport sum from '../utils/sum';\nimport { Box, Grid } from '@material-ui/core';\nimport { HeaderText } from '../ui/Typography';\nimport useInterruptExit from '../utils/useInterruptExit';\nimport { Prompt } from 'react-router';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\n\ninterface Props {}\n\nconst Sale: FC<Props> = () => {\n    const { setShowPrompt } = useInterruptExit(false);\n    const [term, setTerm] = useState<string>('');\n    const [loading, setLoading] = useState<boolean>(false);\n    const {\n        saleListCards,\n        searchTerm,\n        searchResults,\n        handleResultSelect,\n        suspendedSale,\n        restoreSale,\n        deleteSuspendedSale,\n        suspendSale,\n    } = useContext(SaleContext);\n\n    /**\n     * Maintains whether or not we show the exit prompt on tab close or refresh\n     */\n    useEffect(() => {\n        if (saleListCards.length > 0) {\n            setShowPrompt(true);\n        } else {\n            setShowPrompt(false);\n        }\n    }, [saleListCards]);\n\n    useEffect(() => {\n        if (term) {\n            (async () => {\n                setLoading(true);\n                await handleResultSelect(term);\n                setLoading(false);\n            })();\n        }\n    }, [term]);\n\n    return (\n        <>\n            <Prompt\n                message=\"You have items in your list. Are you sure you wish to leave?\"\n                when={saleListCards.length > 0}\n            />\n            <Grid container>\n                <Grid item xs={12} md={4}>\n                    <ControlledSearchBar\n                        value={term}\n                        onChange={(v) => setTerm(v)}\n                    />\n                </Grid>\n            </Grid>\n            <br />\n            <Grid container spacing={2}>\n                <Grid item xs={12} lg={8}>\n                    <Grid container justify=\"space-between\">\n                        <HeaderText>Inventory</HeaderText>\n                        {searchResults.length > 0 && (\n                            <TotalStoreInventory\n                                searchResults={searchResults}\n                                title={searchResults[0].name}\n                            />\n                        )}\n                    </Grid>\n                    <br />\n                    <BrowseCardList\n                        loading={loading}\n                        term={searchTerm}\n                        cards={searchResults}\n                    />\n                </Grid>\n                <Grid item xs={12} lg={4}>\n                    <Grid container justify=\"space-between\">\n                        <Box display=\"flex\" alignItems=\"center\">\n                            <HeaderText>\n                                {suspendedSale.name === ''\n                                    ? 'Sale Items'\n                                    : `${suspendedSale.name}'s Items`}\n                            </HeaderText>\n                            <TotalCardsLabel\n                                listLength={sum(\n                                    saleListCards.map((c) => c.qtyToSell)\n                                )}\n                            />\n                        </Box>\n                        <Box display=\"flex\">\n                            <SuspendSaleButton\n                                restoreSale={restoreSale}\n                                suspendSale={suspendSale}\n                                saleListLength={saleListCards.length}\n                                deleteSuspendedSale={deleteSuspendedSale}\n                                id={suspendedSale._id}\n                            />\n                            {saleListCards.length > 0 && (\n                                <PrintList saleListCards={saleListCards} />\n                            )}\n                        </Box>\n                    </Grid>\n                    <br />\n                    <SaleCartList saleList={saleListCards} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default Sale;\n","import moment from 'moment';\n\nfunction formatDate(date: string) {\n    return moment(date).format('MM/DD/YYYY - h:mm A');\n}\n\nexport default formatDate;\n","import React, { FC } from 'react';\nimport sum from '../utils/sum';\nimport { Sale } from './browseSalesQuery';\nimport formatDate from '../utils/formatDate';\nimport { TableCell, TableRow } from '@material-ui/core';\n\ninterface Props {\n    sale: Sale;\n}\n\nconst BrowseSalesItem: FC<Props> = ({ sale }) => {\n    const { card_list, sale_data } = sale;\n\n    const quantitySold = sum(card_list.map((c) => Number(c.qtyToSell)));\n\n    return (\n        <TableRow>\n            <TableCell>{sale_data.saleID}</TableCell>\n            <TableCell>{formatDate(sale_data.createTime)}</TableCell>\n            <TableCell>{quantitySold}</TableCell>\n        </TableRow>\n    );\n};\n\nexport default BrowseSalesItem;\n","import {\n    Table,\n    TableCell,\n    TableHead,\n    TableBody,\n    TableRow,\n    Paper,\n    TableContainer,\n} from '@material-ui/core';\nimport React, { FC } from 'react';\nimport BrowseSalesItem from './BrowseSalesItem';\nimport { Sale } from './browseSalesQuery';\n\ninterface Props {\n    list: Sale[];\n}\n\nconst BrowseSalesList: FC<Props> = ({ list }) => {\n    return (\n        <TableContainer component={Paper} variant=\"outlined\">\n            <Table size=\"small\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Sale ID</TableCell>\n                        <TableCell>Date of Sale</TableCell>\n                        <TableCell>Quantity Sold</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {list.map((sale) => (\n                        <BrowseSalesItem sale={sale} />\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nexport default BrowseSalesList;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { GET_SALES_BY_TITLE } from '../utils/api_resources';\nimport { SaleListCard } from '../context/SaleContext';\n\ninterface SaleData {\n    total: string;\n    saleID: string;\n    timeStamp: string;\n    createTime: string;\n}\n\nexport interface Sale {\n    _id: string;\n    sale_data: SaleData;\n    card_list: SaleListCard[];\n}\n\ninterface Payload {\n    cardName: string;\n}\n\nconst browseSalesQuery = async ({ cardName }: Payload) => {\n    try {\n        const { data } = await axios.get<Sale[]>(GET_SALES_BY_TITLE, {\n            params: { cardName: cardName },\n            headers: makeAuthHeader(),\n        });\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default browseSalesQuery;\n","import React, { FC, useEffect, useState } from 'react';\nimport BrowseSalesList from './BrowseSalesList';\nimport browseSalesQuery, { Sale } from './browseSalesQuery';\nimport { HeaderText } from '../ui/Typography';\nimport Loading from '../ui/Loading';\nimport { Grid, Typography, Divider, Box } from '@material-ui/core';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\n\nconst BrowseSales: FC = () => {\n    const [term, setTerm] = useState<string>('');\n    const [loading, setLoading] = useState<boolean>(false);\n    const [salesList, setSalesList] = useState<Sale[]>([]);\n\n    const handleSearchSelect = async (cardName: string) => {\n        const sales = await browseSalesQuery({ cardName });\n        setSalesList(sales);\n    };\n\n    useEffect(() => {\n        if (term) {\n            (async () => {\n                setLoading(true);\n                await handleSearchSelect(term);\n                setLoading(false);\n            })();\n        }\n    }, [term]);\n\n    return (\n        <div>\n            <Grid container>\n                <Grid item xs={12} md={4}>\n                    <ControlledSearchBar\n                        value={term}\n                        onChange={(v) => setTerm(v)}\n                    />\n                </Grid>\n            </Grid>\n            <br />\n            <HeaderText>Browse Sales</HeaderText>\n            <Divider />\n\n            {loading ? (\n                <Loading />\n            ) : (\n                <>\n                    <Box py={2}>\n                        {term !== '' && (\n                            <Typography>\n                                {salesList.length} results for <em>{term}</em>\n                            </Typography>\n                        )}\n                    </Box>\n                    <BrowseSalesList list={salesList} />\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default BrowseSales;\n","import React, { FC } from 'react';\nimport { Image as SurImage, Label } from 'semantic-ui-react';\nimport MarketPrice from '../common/MarketPrice';\nimport styled from 'styled-components';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport parseQoh from '../utils/parseQoh';\n\ninterface Props {\n    card: ScryfallCard;\n}\n\n// These numbers were the originally calculated px values\nconst cardImageRatio = 418.3 / 300;\nconst cardImageWidth = 275;\nconst cardImageHeight = cardImageRatio * cardImageWidth;\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: ${cardImageWidth}px;\n`;\n\nconst InventoryWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    justify-content: space-between;\n    padding: 5px;\n    background-color: rgba(0, 0, 0, 0.9);\n    border-radius: 10px 10px 10px 10px;\n    box-shadow: 2px 2px 5px 0 rgba(0, 0, 0, 0.25);\n`;\n\nconst InventoryRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    margin: 5px;\n`;\n\nconst ImageWrapper = styled.div`\n    width: ${cardImageWidth}px;\n    height: ${cardImageHeight}px;\n    box-shadow: 2px 2px 5px 0 rgba(0, 0, 0, 0.25);\n    background: repeating-linear-gradient(\n        45deg,\n        #bfbfbf,\n        #bfbfbf 10px,\n        #b0b0b0 10px,\n        #b0b0b0 20px\n    );\n    border-radius: 15px;\n`;\n\nconst Image = styled(SurImage)({\n    borderRadius: '15px',\n});\n\nconst PublicCard: FC<Props> = ({ card }) => {\n    const { id, cardImage } = card;\n    const [foilQty, nonfoilQty] = parseQoh(card.qoh);\n\n    return (\n        <Wrapper>\n            <ImageWrapper>\n                <Image src={cardImage} size=\"medium\" />\n            </ImageWrapper>\n            <InventoryWrapper>\n                {foilQty > 0 && (\n                    <InventoryRow>\n                        <Label color=\"blue\" image>\n                            Foil<Label.Detail>{foilQty}</Label.Detail>\n                        </Label>\n                        <MarketPrice\n                            id={id}\n                            finish=\"FOIL\"\n                            round\n                            showMid={false}\n                        />\n                    </InventoryRow>\n                )}\n                {nonfoilQty > 0 && (\n                    <InventoryRow>\n                        <Label color=\"blue\" image>\n                            Nonfoil<Label.Detail>{nonfoilQty}</Label.Detail>\n                        </Label>\n                        <MarketPrice\n                            id={id}\n                            finish=\"NONFOIL\"\n                            round\n                            showMid={false}\n                        />\n                    </InventoryRow>\n                )}\n            </InventoryWrapper>\n        </Wrapper>\n    );\n};\n\nexport default PublicCard;\n","import axios from 'axios';\nimport { ScryfallCard, ScryfallApiCard } from '../utils/ScryfallCard';\nimport { GET_CARDS_WITH_INFO_PUBLIC } from '../utils/api_resources';\nimport { ClubhouseLocation } from '../context/AuthProvider';\n\ninterface Params {\n    title: string;\n    matchInStock: boolean;\n    location: ClubhouseLocation;\n}\n\n/**\n * Fetches cards from the DB by title when a user selects a title after querying.\n * This function merges the data (inventory quantity and card objects) from two endpoints into one array.\n */\nconst publicCardSearchQuery = async (params: Params) => {\n    try {\n        const { data } = await axios.get<ScryfallApiCard[]>(\n            GET_CARDS_WITH_INFO_PUBLIC,\n            {\n                params,\n            }\n        );\n\n        return data.map((d) => new ScryfallCard(d));\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default publicCardSearchQuery;\n","import { ChangeEvent } from 'react';\nimport {\n    Select,\n    SelectProps,\n    MenuItem,\n    FormControl,\n    InputLabel,\n} from '@material-ui/core';\n\nexport interface DropdownOption {\n    key: string;\n    value: string | number;\n    text: string;\n}\n\ntype ControlledDropdownProps = {\n    name: string;\n    value: string;\n    onChange: (value: string) => void;\n    options: DropdownOption[];\n} & Omit<SelectProps, 'name' | 'multiple' | 'value' | 'onChange'>;\n\nfunction ControlledDropdown({\n    label,\n    name,\n    value,\n    onChange,\n    options,\n    ...props\n}: ControlledDropdownProps) {\n    return (\n        <FormControl variant=\"outlined\" size=\"small\" fullWidth>\n            <InputLabel>{label}</InputLabel>\n            <Select\n                label={label}\n                name={name}\n                value={value}\n                onChange={(e: ChangeEvent<{ value: unknown }>) => {\n                    onChange(e.target.value as string);\n                }}\n                {...props}\n            >\n                {options.map((o, idx) => (\n                    <MenuItem key={`${o.value}-${idx}`} value={o.value}>\n                        {o.text}\n                    </MenuItem>\n                ))}\n            </Select>\n        </FormControl>\n    );\n}\n\nexport default ControlledDropdown;\n","import React, { FC, useState } from 'react';\nimport { Grid, Header } from 'semantic-ui-react';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport { FormikErrors, useFormik } from 'formik';\nimport { ClubhouseLocation } from '../context/AuthProvider';\nimport styled from 'styled-components';\nimport PublicCard from './PublicCard';\nimport publicCardSearchQuery from './publicCardSearchQuery';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport ControlledDropdown from '../ui/ControlledDropdown';\nimport Button from '../ui/Button';\nimport { Grid as MUIGrid } from '@material-ui/core';\nimport Placeholder from '../ui/Placeholder';\nimport SearchIcon from '@material-ui/icons/Search';\n\ninterface State {\n    searchResults: ScryfallCard[];\n    searchTerm: string;\n    selectedLocation: ClubhouseLocation;\n}\n\ninterface FormValues {\n    searchTerm: string;\n    selectedLocation: ClubhouseLocation;\n}\n\nconst GridContainer = styled('div')({\n    display: 'grid',\n    gridGap: '20px',\n    gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))',\n    justifyItems: 'center',\n});\n\nconst initialState: State = {\n    searchResults: [],\n    searchTerm: '',\n    selectedLocation: 'ch1',\n};\n\nconst initialFormState: FormValues = {\n    searchTerm: '',\n    selectedLocation: 'ch1',\n};\n\nconst locationOptions = [\n    { key: 'beaverton', text: 'CH Beaverton', value: 'ch1' },\n    { key: 'hillsboro', text: 'CH Hillsboro', value: 'ch2' },\n];\n\nconst validate = ({ searchTerm }: FormValues) => {\n    let errors: FormikErrors<FormValues> = {};\n\n    if (!searchTerm) {\n        errors.searchTerm = 'error';\n    }\n\n    return errors;\n};\n\nconst PublicInventory: FC = () => {\n    const [state, setState] = useState<State>(initialState);\n    const [formSubmitted, setFormSubmitted] = useState<boolean>(false);\n\n    const fetchCards = async ({\n        title,\n        location,\n    }: {\n        title: string;\n        location: ClubhouseLocation;\n    }) => {\n        try {\n            const cards = await publicCardSearchQuery({\n                title,\n                location,\n                matchInStock: true,\n            });\n\n            setState({\n                ...state,\n                searchResults: cards,\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const onSubmit = async ({ searchTerm, selectedLocation }: FormValues) => {\n        await fetchCards({\n            title: searchTerm,\n            location: selectedLocation,\n        });\n\n        setFormSubmitted(true);\n    };\n\n    const { values, handleSubmit, setFieldValue, isSubmitting } = useFormik({\n        initialValues: initialFormState,\n        validate,\n        onSubmit,\n    });\n\n    return (\n        <>\n            <MUIGrid container spacing={2} alignItems=\"center\">\n                <MUIGrid item xs={12} md={4}>\n                    <ControlledSearchBar\n                        value={values.searchTerm}\n                        onChange={(v) => setFieldValue('searchTerm', v)}\n                    />\n                </MUIGrid>\n                <MUIGrid item xs={12} md={4}>\n                    <ControlledDropdown\n                        name=\"storeLocation\"\n                        value={values.selectedLocation}\n                        options={locationOptions}\n                        onChange={(v) => setFieldValue('selectedLocation', v)}\n                    />\n                </MUIGrid>\n                <MUIGrid item xs={12} md={4}>\n                    <Button\n                        type=\"submit\"\n                        primary\n                        disabled={!values.searchTerm || isSubmitting}\n                        onClick={() => handleSubmit()}\n                    >\n                        Search\n                    </Button>\n                </MUIGrid>\n            </MUIGrid>\n\n            <br />\n            <Grid stackable={true}>\n                <Grid.Column>\n                    <Header as=\"h2\">\n                        Inventory Search\n                        <Header.Subheader>\n                            <em>\n                                Card prices subject to change. Consult a\n                                Clubhouse employee for final estimates\n                            </em>\n                        </Header.Subheader>\n                    </Header>\n                    {state.searchResults.length > 0 ? (\n                        <GridContainer>\n                            {state.searchResults.map((c) => (\n                                <PublicCard key={c.id} card={c} />\n                            ))}\n                        </GridContainer>\n                    ) : (\n                        <Placeholder\n                            icon={<SearchIcon style={{ fontSize: 80 }} />}\n                        >\n                            {formSubmitted ? (\n                                <span>No cards found in stock</span>\n                            ) : (\n                                <span>Search for a card</span>\n                            )}\n                        </Placeholder>\n                    )}\n                </Grid.Column>\n            </Grid>\n        </>\n    );\n};\n\nexport default PublicInventory;\n","import axios from 'axios';\nimport { GET_SET_NAMES } from '../utils/api_resources';\nimport makeAuthHeader from '../utils/makeAuthHeader';\n\nconst setNameQuery = async () => {\n    try {\n        const { data } = await axios.get<string[]>(GET_SET_NAMES, {\n            headers: makeAuthHeader(),\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default setNameQuery;\n","import { ChangeEvent } from 'react';\nimport {\n    Select,\n    SelectProps,\n    MenuItem,\n    FormControl,\n    InputLabel,\n} from '@material-ui/core';\n\nexport interface DropdownOption {\n    key: string;\n    value: string | number;\n    text: string;\n}\n\ntype ControlledMultiSelectProps = {\n    name: string;\n    value: string[];\n    onChange: (value: string[]) => void;\n    options: DropdownOption[];\n} & Omit<SelectProps, 'name' | 'multiple' | 'value' | 'onChange'>;\n\nfunction ControlledMultiSelect({\n    label,\n    name,\n    value,\n    onChange,\n    options,\n    ...props\n}: ControlledMultiSelectProps) {\n    return (\n        <FormControl variant=\"outlined\" size=\"small\" fullWidth>\n            <InputLabel>{label}</InputLabel>\n            <Select\n                label={label}\n                name={name}\n                multiple\n                renderValue={(s) => (s as string[]).join(', ')}\n                value={value}\n                onChange={(e: ChangeEvent<{ value: unknown }>) => {\n                    onChange(e.target.value as string[]);\n                }}\n                {...props}\n            >\n                {options.map((o, idx) => (\n                    <MenuItem key={`${o.value}-${idx}`} value={o.value}>\n                        {o.text}\n                    </MenuItem>\n                ))}\n            </Select>\n        </FormControl>\n    );\n}\n\nexport default ControlledMultiSelect;\n","import React, { useState, createContext, FC } from 'react';\nimport { sortBy } from 'lodash';\nimport { v4 as uuid } from 'uuid';\nimport createToast from '../common/createToast';\nimport receivingQuery from './receivingQuery';\nimport cardSearchQuery from './cardSearchQuery';\nimport { ScryfallCard } from '../utils/ScryfallCard';\n\ninterface Props {}\n\nexport enum Trade {\n    Cash = 'CASH',\n    Credit = 'CREDIT',\n}\n\n// Customers can only receive cash or credit for their assets\nconst TRADE_TYPES = { CASH: Trade.Cash, CREDIT: Trade.Credit };\n\nexport type ReceivingCard = ScryfallCard & {\n    uuid_key: string;\n    finishCondition: string;\n    cashPrice: number | null;\n    marketPrice: number | null;\n    creditPrice: number | null;\n    tradeType: Trade;\n};\n\ninterface Context {\n    searchResults: ScryfallCard[];\n    receivingList: ReceivingCard[];\n    handleSearchSelect: (term: string) => void;\n    addToList: (\n        quantity: number,\n        card: ScryfallCard,\n        meta: AddToListMeta\n    ) => void;\n    removeFromList: (uuid: string) => void;\n    activeTradeType: (uuid: string, tradeType: Trade) => void;\n    selectAll: (trade: Trade) => void;\n    commitToInventory: (\n        customerName: string,\n        customerContact: string | null\n    ) => void;\n    resetSearchResults: () => void;\n}\n\nconst defaultContext: Context = {\n    searchResults: [],\n    receivingList: [],\n    handleSearchSelect: () => null,\n    addToList: () => null,\n    removeFromList: () => null,\n    activeTradeType: () => null,\n    selectAll: () => null,\n    commitToInventory: () => null,\n    resetSearchResults: () => null,\n};\n\ninterface AddToListMeta {\n    cashPrice: number | null;\n    marketPrice: number | null;\n    creditPrice: number | null;\n    finishCondition: string;\n}\n\nexport const ReceivingContext = createContext<Context>(defaultContext);\n\nconst ReceivingProvider: FC<Props> = ({ children }) => {\n    const [searchResults, setSearchResults] = useState<ScryfallCard[]>([]);\n    const [receivingList, setReceivingList] = useState<ReceivingCard[]>([]);\n\n    const handleSearchSelect = async (term: string) => {\n        const cards = await cardSearchQuery({\n            cardName: term,\n            inStockOnly: false,\n        });\n\n        setSearchResults(cards);\n    };\n\n    /**\n     * Adds a card to the receiving list, with a unique uuid\n     */\n    const addToList = (\n        quantity: number,\n        card: ScryfallCard,\n        { cashPrice, marketPrice, creditPrice, finishCondition }: AddToListMeta\n    ) => {\n        const previousState = [...receivingList];\n\n        // Each line-item represents one card\n        const cardsToAdd: ReceivingCard[] = [...new Array(quantity)].map(() => {\n            const newCard: ReceivingCard = {\n                ...card,\n                cashPrice,\n                marketPrice,\n                creditPrice,\n                finishCondition,\n                // Set to cash if customer doesn't want credit\n                tradeType: creditPrice === 0 ? Trade.Cash : Trade.Credit,\n                uuid_key: uuid(),\n            };\n\n            return newCard;\n        });\n\n        setReceivingList(sortBy([...previousState, ...cardsToAdd], 'name'));\n    };\n\n    /**\n     * Removes a card from the receiving list using the uuid\n     */\n    const removeFromList = (uuid_key: string) => {\n        const copiedState = [...receivingList];\n        setReceivingList(copiedState.filter((e) => e.uuid_key !== uuid_key));\n    };\n\n    /**\n     * Determines whether line-items use cash or credit.\n     * Assigns a new trade type.\n     */\n    const activeTradeType = (uuid_key: string, tradeType: Trade) => {\n        setReceivingList(\n            [...receivingList].map((card) => {\n                if (card.uuid_key === uuid_key) {\n                    card.tradeType = TRADE_TYPES[tradeType];\n                }\n                return card;\n            })\n        );\n    };\n\n    /**\n     * Sets all items to a tradeType, if possible\n     */\n    const selectAll = (selectType: Trade) => {\n        const { CASH, CREDIT } = TRADE_TYPES;\n\n        const newState = [...receivingList].map((card) => {\n            if (\n                selectType === CASH &&\n                card.cashPrice !== null &&\n                card.cashPrice > 0\n            )\n                card.tradeType = selectType;\n            else if (\n                selectType === CREDIT &&\n                card.creditPrice !== null &&\n                card.creditPrice > 0\n            )\n                card.tradeType = selectType;\n\n            return card;\n        });\n\n        setReceivingList(newState);\n    };\n\n    /**\n     * Persists all passed cards to inventory\n     */\n    const commitToInventory = async (\n        customerName: string,\n        customerContact: string | null\n    ) => {\n        try {\n            const cardsToCommit = receivingList.map((card) => ({\n                quantity: 1, // Only committing one per line-item\n                id: card.id,\n                name: card.name,\n                set_name: card.set_name,\n                finishCondition: card.finishCondition,\n                set: card.set,\n                creditPrice: card.creditPrice,\n                cashPrice: card.cashPrice,\n                marketPrice: card.marketPrice,\n                tradeType: card.tradeType,\n            }));\n\n            await receivingQuery({\n                cards: cardsToCommit,\n                customerName,\n                customerContact,\n            });\n\n            setSearchResults([]);\n            setReceivingList([]);\n\n            createToast({\n                color: 'green',\n                header: `${receivingList.length} cards were added to inventory!`,\n                duration: 2000,\n            });\n        } catch (e) {\n            console.log(e);\n            createToast({\n                color: 'red',\n                header: 'Error',\n                message: e.response.data || 'Error receiving cards',\n                duration: 2000,\n            });\n        }\n    };\n\n    const resetSearchResults = () => setSearchResults([]);\n\n    return (\n        <ReceivingContext.Provider\n            value={{\n                searchResults,\n                receivingList,\n                handleSearchSelect,\n                addToList,\n                removeFromList,\n                activeTradeType,\n                selectAll,\n                commitToInventory,\n                resetSearchResults,\n            }}\n        >\n            {children}\n        </ReceivingContext.Provider>\n    );\n};\n\nexport default ReceivingProvider;\n","import React, { FC, useEffect, useState } from 'react';\nimport { FormikHelpers, useFormik } from 'formik';\nimport setNameQuery from './setNameQuery';\nimport { Filters } from './filteredCardsQuery';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport ControlledDropdown, { DropdownOption } from '../ui/ControlledDropdown';\nimport ControlledMultiSelect from '../ui/ControlledMultiSelect';\nimport {\n    FormControl,\n    Grid,\n    Paper,\n    TextField,\n    withStyles,\n} from '@material-ui/core';\nimport Button from '../ui/Button';\nimport { SectionText } from '../ui/Typography';\n\nconst formatDropdownOptions: DropdownOption[] = [\n    { key: 'qw', value: '', text: 'None' },\n    { key: 'we', value: 'standard', text: 'Standard' },\n    { key: 'er', value: 'future', text: 'Future' },\n    { key: 'rt', value: 'historic', text: 'Historic' },\n    { key: 'ty', value: 'pioneer', text: 'Pioneer' },\n    { key: 'yu', value: 'modern', text: 'Modern' },\n    { key: 'ui', value: 'legacy', text: 'Legacy' },\n    { key: 'io', value: 'pauper', text: 'Pauper' },\n    { key: 'op', value: 'vintage', text: 'Vintage' },\n    { key: 'as', value: 'penny', text: 'Penny' },\n    { key: 'sd', value: 'commander', text: 'Commander' },\n    { key: 'df', value: 'brawl', text: 'Brawl' },\n    { key: 'fg', value: 'duel', text: 'Duel' },\n    { key: 'gh', value: 'oldschool', text: 'Oldschool' },\n];\n\nconst priceOperatorDropdownOptions: DropdownOption[] = [\n    { key: 'gte', value: 'gte', text: '>=' },\n    { key: 'lte', value: 'lte', text: '<=' },\n    { key: 'gtx', value: 'gt', text: '>' },\n    { key: 'ltx', value: 'lt', text: '<' },\n];\n\nconst finishDropdownOptions: DropdownOption[] = [\n    { key: 'nonfoil_foil', value: '', text: 'None' },\n    { key: 'nonfoil', value: 'NONFOIL', text: 'Nonfoil' },\n    { key: 'foil', value: 'FOIL', text: 'Foil' },\n];\n\nconst sortByDropdownOptions: DropdownOption[] = [\n    { key: 'pricesort', value: 'price', text: 'Price' },\n    { key: 'alphasort', value: 'name', text: 'Card Name' },\n];\n\nconst sortByDirectionDropdownOptions: DropdownOption[] = [\n    { key: 'descdirsort', value: 1, text: 'Ascending' },\n    { key: 'ascdirsort', value: -1, text: 'Descending' },\n];\n\nconst sortByColorDropdownOptions: DropdownOption[] = [\n    { key: 'w', value: 'White', text: 'White' },\n    { key: 'u', value: 'Blue', text: 'Blue' },\n    { key: 'b', value: 'Black', text: 'Black' },\n    { key: 'r', value: 'Red', text: 'Red' },\n    { key: 'g', value: 'Green', text: 'Green' },\n];\n\nconst colorSpecificityDropdownOptions: DropdownOption[] = [\n    { key: 'all', value: '', text: 'None' },\n    { key: 'colorless', value: 'colorless', text: 'Colorless only' },\n    { key: 'mono', value: 'mono', text: 'Monocolor only' },\n    { key: 'multi', value: 'multi', text: 'Multicolor only' },\n];\n\nconst typeLineOptions: DropdownOption[] = [\n    { key: 'na', value: '', text: 'None' },\n    { key: 'artifact', value: 'Artifact', text: 'Artifact' },\n    { key: 'creature', value: 'Creature', text: 'Creature' },\n    { key: 'enchantment', value: 'Enchantment', text: 'Enchantment' },\n    { key: 'instant', value: 'Instant', text: 'Instant' },\n    { key: 'land', value: 'Land', text: 'Land' },\n    { key: 'planeswalker', value: 'Planeswalker', text: 'Planeswalker' },\n    { key: 'sorcery', value: 'Sorcery', text: 'Sorcery' },\n    { key: 'tribal', value: 'Tribal', text: 'Tribal' },\n];\n\nconst frameOptions: DropdownOption[] = [\n    { key: 'na', value: '', text: 'None' },\n    { key: 'borderless', value: 'borderless', text: 'Borderless' },\n    { key: 'extendedArt', value: 'extendedArt', text: 'Extended Art' },\n    { key: 'showcase', value: 'showcase', text: 'Showcase' },\n];\n\ninterface FormValues {\n    title: string;\n    setName: string;\n    format: string;\n    price: number;\n    finish: string;\n    colorsArray: string[];\n    colorSpecificity: string;\n    typeLine: string;\n    frame: string;\n    sortByDirection: number;\n    priceOperator: string;\n    sortBy: string;\n}\n\nexport const initialFilters: FormValues = {\n    title: '',\n    setName: '',\n    format: '',\n    price: 0,\n    priceOperator: 'gte',\n    finish: '',\n    sortBy: 'price',\n    colorsArray: [],\n    sortByDirection: -1,\n    colorSpecificity: '',\n    typeLine: '',\n    frame: '',\n};\n\n// No validations needed for now\nconst validate = () => {\n    return {};\n};\n\ninterface Props {\n    doSubmit: (v: Filters, page: number) => Promise<void>;\n}\n\nconst FormContainer = withStyles(({ spacing }) => ({\n    root: {\n        padding: spacing(2),\n    },\n}))(Paper);\n\nconst BrowseInventoryForm: FC<Props> = ({ doSubmit }) => {\n    const [editionDropdownOptions, setEditionDropdownOptions] = useState<\n        DropdownOption[]\n    >([]);\n\n    const onSubmit = async (\n        values: FormValues,\n        {}: FormikHelpers<FormValues>\n    ) => {\n        try {\n            await doSubmit(\n                {\n                    title: values.title || undefined,\n                    setName: values.setName || undefined,\n                    format: values.format || undefined,\n                    price: Number(values.price) || undefined,\n                    finish: values.finish || undefined,\n                    colors:\n                        values.colorsArray.length > 0\n                            ? values.colorsArray\n                                  .map((c) => {\n                                      const colorsMap: Record<\n                                          string,\n                                          string\n                                      > = {\n                                          White: 'W',\n                                          Blue: 'U',\n                                          Black: 'B',\n                                          Red: 'R',\n                                          Green: 'G',\n                                      };\n\n                                      return colorsMap[c];\n                                  })\n                                  .sort()\n                                  .join('')\n                            : undefined,\n                    colorSpecificity: values.colorSpecificity || undefined,\n                    type: values.typeLine || undefined,\n                    frame: values.frame || undefined,\n                    sortByDirection: values.sortByDirection,\n                    priceOperator: values.priceOperator,\n                    sortBy: values.sortBy,\n                },\n                // Always start at page 1 after filtering\n                1\n            );\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    useEffect(() => {\n        (async () => {\n            const names = await setNameQuery();\n\n            const setNameOptions = names.map((name, idx) => ({\n                key: `set${idx}`,\n                value: name,\n                text: name,\n            }));\n\n            const concatWithBlankOption = [\n                { key: 'snull', value: '', text: 'None' },\n                ...setNameOptions,\n            ];\n\n            setEditionDropdownOptions(concatWithBlankOption);\n        })();\n    }, []);\n\n    const { handleChange, setFieldValue, handleSubmit, values } = useFormik({\n        initialValues: initialFilters,\n        validate,\n        onSubmit,\n    });\n\n    return (\n        <FormContainer variant=\"outlined\">\n            <SectionText>Filters</SectionText>\n            <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                    <ControlledSearchBar\n                        value={values.title}\n                        onChange={(v) => setFieldValue('title', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"format\"\n                        label=\"Format\"\n                        options={formatDropdownOptions}\n                        value={values.format}\n                        onChange={(v) => setFieldValue('format', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"setName\"\n                        label=\"Edition\"\n                        options={editionDropdownOptions}\n                        value={values.setName}\n                        onChange={(v) => setFieldValue('setName', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"finish\"\n                        label=\"Finish\"\n                        options={finishDropdownOptions}\n                        value={values.finish}\n                        onChange={(v) => setFieldValue('finish', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledMultiSelect\n                        name=\"colorsArray\"\n                        label=\"Colors\"\n                        options={sortByColorDropdownOptions}\n                        value={values.colorsArray}\n                        onChange={(v) => setFieldValue('colorsArray', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"colorSpecificity\"\n                        label=\"Color specificity\"\n                        options={colorSpecificityDropdownOptions}\n                        value={values.colorSpecificity}\n                        onChange={(v) => setFieldValue('colorSpecificity', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"typeLine\"\n                        label=\"Type Line\"\n                        options={typeLineOptions}\n                        value={values.typeLine}\n                        onChange={(v) => setFieldValue('typeLine', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"frame\"\n                        label=\"Frame Effects\"\n                        options={frameOptions}\n                        value={values.frame}\n                        onChange={(v) => setFieldValue('frame', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"priceOperator\"\n                        label=\"Price operator\"\n                        options={priceOperatorDropdownOptions}\n                        value={values.priceOperator}\n                        onChange={(v) => setFieldValue('priceOperator', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <FormControl fullWidth>\n                        <TextField\n                            label=\"Price filter\"\n                            variant=\"outlined\"\n                            size=\"small\"\n                            placeholder=\"Enter a price\"\n                            name=\"price\"\n                            type=\"number\"\n                            onChange={handleChange}\n                        />\n                    </FormControl>\n                </Grid>\n            </Grid>\n            <br />\n            <SectionText>{'Sort & Order'}</SectionText>\n            <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"sortBy\"\n                        label=\"Sort by\"\n                        options={sortByDropdownOptions}\n                        value={values.sortBy}\n                        onChange={(v) => setFieldValue('sortBy', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"sortByDirection\"\n                        label=\"Order\"\n                        options={sortByDirectionDropdownOptions}\n                        value={values.sortByDirection.toString()}\n                        onChange={(v) => setFieldValue('sortByDirection', v)}\n                    />\n                </Grid>\n            </Grid>\n            <br />\n            <Button type=\"submit\" onClick={() => handleSubmit()} primary>\n                Submit\n            </Button>\n        </FormContainer>\n    );\n};\n\nexport default BrowseInventoryForm;\n","import { TableCell, TableRow } from '@material-ui/core';\nimport React, { FC } from 'react';\nimport Price from '../common/Price';\nimport CardImageTooltip from '../ui/CardImageTooltip';\nimport SetIcon from '../ui/SetIcon';\nimport { ResponseCard } from './filteredCardsQuery';\nimport StarIcon from '@material-ui/icons/Star';\n\nconst conditionMap = {\n    NM: 'Near Mint',\n    LP: 'Light Play',\n    MP: 'Moderate Play',\n    HP: 'Heavy Play',\n};\n\ntype Condition = keyof typeof conditionMap;\n\ninterface Props {\n    card: ResponseCard;\n}\n\nconst BrowseInventoryRow: FC<Props> = ({\n    card: {\n        finishCondition,\n        quantityInStock,\n        name,\n        set_name,\n        price,\n        set,\n        rarity,\n        image_uri,\n    },\n}) => {\n    const finish = finishCondition.split('_')[0];\n    const condition = finishCondition.split('_')[1] as Condition;\n\n    return (\n        <TableRow>\n            <TableCell>\n                <CardImageTooltip cardImage={image_uri}>\n                    <span style={{ cursor: 'help' }}>{name} </span>\n                </CardImageTooltip>\n                {finish === 'FOIL' && (\n                    // TODO: Pull out this inline styling into a custom component\n                    <StarIcon\n                        fontSize=\"small\"\n                        color=\"primary\"\n                        style={{ verticalAlign: 'middle' }}\n                    />\n                )}\n            </TableCell>\n            <TableCell>\n                <SetIcon set={set} rarity={rarity} />\n                {set_name}\n            </TableCell>\n            <TableCell>{conditionMap[condition]}</TableCell>\n            <TableCell>{quantityInStock}</TableCell>\n            <TableCell>\n                <Price num={price} />\n            </TableCell>\n        </TableRow>\n    );\n};\n\nexport default BrowseInventoryRow;\n","import axios from 'axios';\nimport { GET_CARDS_BY_FILTER } from '../utils/api_resources';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { FinishCondition } from '../utils/ScryfallCard';\n\nexport interface Filters {\n    title?: string;\n    setName?: string;\n    format?: string;\n    price?: number;\n    finish?: string;\n    colors?: string;\n    colorSpecificity?: string;\n    type?: string;\n    frame?: string;\n    sortByDirection: number;\n    priceOperator: string;\n    sortBy: string;\n}\n\ntype Params = Filters & { page: number };\n\nexport interface ResponseCard {\n    _id: string;\n    image_uri: string;\n    name: string;\n    price: number;\n    rarity: string;\n    set: string;\n    set_name: string;\n    finishCondition: FinishCondition;\n    quantityInStock: number;\n}\n\ninterface ResponseData {\n    cards: ResponseCard[];\n    total: number;\n}\n\nconst filteredCardsQuery = async (filters: Filters, page: number) => {\n    const params: Params = { ...filters, page };\n\n    const { data } = await axios.get<ResponseData>(GET_CARDS_BY_FILTER, {\n        params,\n        headers: makeAuthHeader(),\n    });\n\n    return data;\n};\n\nexport default filteredCardsQuery;\n","import React, { FC, useState } from 'react';\nimport BrowseInventoryForm, { initialFilters } from './BrowseInventoryForm';\nimport BrowseInventoryRow from './BrowseInventoryRow';\nimport _ from 'lodash';\nimport filteredCardsQuery, {\n    Filters,\n    ResponseCard,\n} from './filteredCardsQuery';\nimport Placeholder from '../ui/Placeholder';\nimport SearchIcon from '@material-ui/icons/Search';\nimport {\n    Box,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Typography,\n    Container,\n    Modal,\n    CircularProgress,\n    withStyles,\n} from '@material-ui/core';\nimport ReportProblemIcon from '@material-ui/icons/ReportProblem';\nimport Pagination from '@material-ui/lab/Pagination';\n\nconst LIMIT = 100; // Matching the backend for now\n\nexport const InvertedLoader = withStyles(({ palette }) => ({\n    root: {\n        color: palette.common.white,\n    },\n}))(CircularProgress);\n\ninterface State {\n    cards: ResponseCard[];\n    count: number;\n    currentPage: number;\n    numPages: number;\n    isLoading: boolean;\n    cachedFilters: Filters;\n    searchTouched: boolean;\n}\n\nconst BrowseInventory: FC = () => {\n    const [state, setState] = useState<State>({\n        cards: [],\n        count: 0,\n        currentPage: 0,\n        numPages: 0,\n        isLoading: false,\n        cachedFilters: initialFilters,\n        searchTouched: false, // Tracks whether the user has initially searched for the 'no results' message\n    });\n\n    const fetchData = async (filters: Filters, page: number) => {\n        try {\n            setState({ ...state, isLoading: true });\n\n            const { cards, total } = await filteredCardsQuery(filters, page);\n\n            const numPages = Math.ceil(total / LIMIT);\n\n            setState({\n                ...state,\n                cards: cards,\n                count: total,\n                isLoading: false,\n                numPages: numPages,\n                currentPage: page,\n                searchTouched: true,\n                // Set the filters for pagination requests later\n                cachedFilters: filters,\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const {\n        cards,\n        isLoading,\n        currentPage,\n        numPages,\n        count,\n        cachedFilters,\n    } = state;\n\n    return (\n        <Container>\n            <Modal open={isLoading}>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                    height={1}\n                >\n                    <InvertedLoader />\n                </Box>\n            </Modal>\n            <Box pb={2}>\n                <Typography>\n                    <ReportProblemIcon\n                        fontSize=\"small\"\n                        color=\"primary\"\n                        style={{ verticalAlign: 'middle' }}\n                    />\n                    Prices from this table are updated weekly and are subject to\n                    fluctuations. Consult 'New Sale' or 'Manage Inventory' for\n                    up-to-date values\n                </Typography>\n            </Box>\n            <BrowseInventoryForm doSubmit={fetchData} />\n            <br />\n            {!!cards.length && (\n                <TableContainer component={Paper} variant=\"outlined\">\n                    <Box p={2} display=\"flex\" justifyContent=\"space-between\">\n                        <Pagination\n                            count={numPages}\n                            page={currentPage}\n                            onChange={(_, page) =>\n                                fetchData(cachedFilters, page)\n                            }\n                            color=\"primary\"\n                        />\n                        <Typography>Total results: {count}</Typography>\n                    </Box>\n                    <Table size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Name</TableCell>\n                                <TableCell>Edition</TableCell>\n                                <TableCell>Condition</TableCell>\n                                <TableCell>Quantity</TableCell>\n                                <TableCell>Price Estimate</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {cards.map((card) => (\n                                <BrowseInventoryRow\n                                    key={`${card._id}-${card.finishCondition}`}\n                                    card={card}\n                                />\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            )}\n            {!cards.length && (\n                <Placeholder icon={<SearchIcon style={{ fontSize: 80 }} />}>\n                    {state.searchTouched\n                        ? 'No results found'\n                        : 'Use the filters to browse inventory'}\n                </Placeholder>\n            )}\n        </Container>\n    );\n};\n\nexport default BrowseInventory;\n","import React from 'react';\nimport createToast from '../common/createToast';\nimport { Form, Button, Segment } from 'semantic-ui-react';\nimport { Redirect } from 'react-router-dom';\nimport { ClubhouseLocation, useAuthContext } from '../context/AuthProvider';\nimport styled from 'styled-components';\nimport { FormikErrors, useFormik } from 'formik';\nimport FormikSelectField from '../ui/FormikSelectField';\n\ninterface FormValues {\n    username: string;\n    password: string;\n    location: ClubhouseLocation | null;\n}\n\nconst LoginContainer = styled.div`\n    margin-top: 15px;\n    display: flex;\n    justify-content: center;\n`;\n\nconst FormContainer = styled(Segment)`\n    width: 400px;\n    padding: 25px 25px 25px 25px !important;\n`;\n\nconst initialFormValues: FormValues = {\n    username: '',\n    password: '',\n    location: null,\n};\n\nconst locationDropdownOptions = [\n    {\n        key: 'beaverton',\n        text: 'Beaverton',\n        value: 'ch1',\n    },\n    {\n        key: 'hillsboro',\n        text: 'Hillsboro',\n        value: 'ch2',\n    },\n];\n\nconst validate = ({ username, password, location }: FormValues) => {\n    const errors: FormikErrors<FormValues> = {};\n\n    if (!username) {\n        errors.username = 'Required';\n    }\n\n    if (!password) {\n        errors.password = 'Required';\n    }\n\n    if (!location) {\n        errors.location = 'Please select a location';\n    }\n\n    return errors;\n};\n\nconst Login = () => {\n    const { loggedIn, handleLogin } = useAuthContext();\n\n    const onSubmit = async ({ username, password, location }: FormValues) => {\n        if (!location) return;\n\n        const data = await handleLogin(username, password, location);\n\n        if (data.token) {\n            createToast({\n                color: 'green',\n                header: 'Success',\n                message: `Enjoy your time here!`,\n            });\n        } else {\n            createToast({\n                color: 'red',\n                header: 'Error',\n                message: data,\n            });\n        }\n    };\n\n    const {\n        handleChange,\n        handleSubmit,\n        setFieldValue,\n        errors,\n        isSubmitting,\n    } = useFormik({\n        initialValues: initialFormValues,\n        validate,\n        onSubmit,\n        validateOnChange: false,\n    });\n\n    if (loggedIn) return <Redirect to=\"/manage-inventory\" />;\n\n    return (\n        <LoginContainer>\n            <FormContainer raised loading={isSubmitting}>\n                <Form>\n                    <Form.Field>\n                        <label>Username</label>\n                        <Form.Input\n                            error={errors.username}\n                            onChange={handleChange}\n                            name=\"username\"\n                        />\n                    </Form.Field>\n                    <Form.Field>\n                        <label>Password</label>\n                        <Form.Input\n                            error={errors.password}\n                            type=\"password\"\n                            onChange={handleChange}\n                            name=\"password\"\n                        />\n                    </Form.Field>\n                    <FormikSelectField\n                        error={errors.location}\n                        label=\"Location\"\n                        name=\"location\"\n                        placeholder=\"Select location\"\n                        options={locationDropdownOptions}\n                        onChange={(v) => {\n                            setFieldValue('location', v);\n                        }}\n                    />\n                    <Button\n                        primary\n                        fluid\n                        type=\"submit\"\n                        onClick={() => handleSubmit()}\n                    >\n                        Submit\n                    </Button>\n                </Form>\n            </FormContainer>\n        </LoginContainer>\n    );\n};\n\nexport default Login;\n","import React, { FC } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useAuthContext } from '../context/AuthProvider';\n\nconst Logout: FC = () => {\n    const { handleLogout } = useAuthContext();\n    handleLogout();\n    return <Redirect to=\"/login\" />;\n};\n\nexport default Logout;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { RECEIVE_CARDS } from '../utils/api_resources';\nimport { Trade } from './ReceivingContext';\n\ninterface ReceivingQueryCard {\n    quantity: number;\n    finishCondition: string;\n    id: string;\n    name: string;\n    set_name: string;\n    set: string;\n    marketPrice: number | null;\n    cashPrice: number | null;\n    creditPrice: number | null;\n    tradeType: Trade;\n}\n\ninterface Payload {\n    cards: ReceivingQueryCard[];\n    customerName: string;\n    customerContact: string | null;\n}\n\nconst receivingQuery = async ({\n    cards,\n    customerName,\n    customerContact,\n}: Payload) => {\n    try {\n        // We do not expect to use the return type, so we designate it `void`\n        const { data } = await axios.post<void>(\n            RECEIVE_CARDS,\n            { cards, customerName, customerContact },\n            { headers: makeAuthHeader() }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default receivingQuery;\n","import React, { useContext, FC, ChangeEvent } from 'react';\nimport $ from 'jquery';\nimport { Input, Button, Form, Item } from 'semantic-ui-react';\nimport CardImage from '../common/CardImage';\nimport createToast from '../common/createToast';\nimport { ReceivingContext } from '../context/ReceivingContext';\nimport { finishes, cardConditions } from '../utils/dropdownOptions';\nimport checkCardFinish, { Finish } from '../utils/checkCardFinish';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport CardHeader from '../ui/CardHeader';\nimport { FormikErrors, useFormik } from 'formik';\nimport FormikSelectField from '../ui/FormikSelectField';\nimport { Box, Paper } from '@material-ui/core';\n\ninterface Props {\n    card: ScryfallCard;\n}\n\ntype Condition = 'NM' | 'LP' | 'MP' | 'HP';\n\ninterface FormValues {\n    quantity: number;\n    cashPrice: number;\n    creditPrice: number;\n    marketPrice: number;\n    selectedCondition: Condition;\n    selectedFinish: Finish;\n}\n\nconst validate = ({\n    quantity,\n    cashPrice,\n    creditPrice,\n    marketPrice,\n    selectedFinish,\n    selectedCondition,\n}: FormValues) => {\n    const errors: FormikErrors<FormValues> = {};\n\n    if (!quantity) errors.quantity = 'error';\n\n    if (!cashPrice && !creditPrice) {\n        errors.cashPrice = 'error';\n        errors.creditPrice = 'error';\n    }\n\n    if (cashPrice) {\n        // Cards with cash prices must have market prices specified\n        if (!marketPrice) errors.marketPrice = 'error';\n    }\n\n    if (!selectedFinish) errors.selectedFinish = 'error';\n    if (!selectedCondition) errors.selectedCondition = 'error';\n\n    return errors;\n};\n\nconst ReceivingSearchItem: FC<Props> = ({ card }) => {\n    const initialValues: FormValues = {\n        quantity: 1,\n        cashPrice: 0,\n        creditPrice: 0,\n        marketPrice: 0,\n        selectedCondition: 'NM',\n        selectedFinish: checkCardFinish(card.nonfoil, card.foil).selectedFinish,\n    };\n\n    // Determines whether the select finish dropdown is permanently disabled, seeded from props\n    const finishDisabled = checkCardFinish(card.nonfoil, card.foil)\n        .finishDisabled;\n\n    const { addToList } = useContext(ReceivingContext);\n\n    const handleFocus = (e: ChangeEvent<HTMLInputElement>) => e.target.select();\n\n    const handleInventoryAdd = ({\n        quantity,\n        cashPrice,\n        creditPrice,\n        marketPrice,\n        selectedFinish,\n        selectedCondition,\n    }: FormValues) => {\n        if (!quantity) throw new Error('Quantity is missing');\n\n        addToList(quantity, card, {\n            cashPrice: cashPrice || 0,\n            marketPrice: marketPrice || 0,\n            creditPrice: creditPrice || 0,\n            finishCondition: `${selectedFinish}_${selectedCondition}`, // ex. NONFOIL_NM\n        });\n\n        createToast({\n            color: 'green',\n            header: `${quantity}x ${card.name} added to buylist!`,\n            duration: 2000,\n        });\n\n        // Highlight the input after successful card add\n        $('#searchBar').focus().select();\n    };\n\n    const {\n        handleSubmit,\n        setFieldValue,\n        values,\n        isValid,\n        handleChange,\n    } = useFormik({\n        initialValues,\n        validate,\n        onSubmit: (v, { resetForm }) => {\n            handleInventoryAdd(v);\n            resetForm();\n        },\n        validateOnMount: true,\n    });\n\n    const { cardImage } = card;\n\n    return (\n        <Paper variant=\"outlined\">\n            <Box p={2}>\n                <Item.Group divided>\n                    <Item>\n                        <Item.Image size=\"small\">\n                            <CardImage image={cardImage} />\n                        </Item.Image>\n                        <Item.Content>\n                            <CardHeader\n                                card={card}\n                                selectedFinish={values.selectedFinish}\n                                showMid\n                            />\n                            <Item.Description>\n                                <Form>\n                                    <Form.Group widths=\"equal\">\n                                        <Form.Field\n                                            fluid\n                                            control={Input}\n                                            type=\"number\"\n                                            label=\"Quantity\"\n                                            value={values.quantity}\n                                            onChange={(\n                                                _: any,\n                                                { value }: { value: string }\n                                            ) => {\n                                                const castVal = parseInt(value);\n                                                setFieldValue(\n                                                    'quantity',\n                                                    Math.min(\n                                                        castVal < 0\n                                                            ? 0\n                                                            : castVal,\n                                                        50\n                                                    )\n                                                );\n                                            }}\n                                            onFocus={(\n                                                e: ChangeEvent<HTMLInputElement>\n                                            ) => e.target.select()}\n                                        />\n                                        <Form.Field\n                                            fluid\n                                            label=\"Credit Price\"\n                                            name=\"creditPrice\"\n                                            control={Input}\n                                            type=\"number\"\n                                            value={values.creditPrice}\n                                            onChange={handleChange}\n                                            onFocus={handleFocus}\n                                            step=\"0.25\"\n                                        />\n                                        <Form.Field\n                                            fluid\n                                            label=\"Cash Price\"\n                                            name=\"cashPrice\"\n                                            control={Input}\n                                            type=\"number\"\n                                            value={values.cashPrice}\n                                            onChange={handleChange}\n                                            onFocus={handleFocus}\n                                            step=\"0.25\"\n                                        />\n                                        <Form.Field\n                                            fluid\n                                            label=\"Market Price\"\n                                            name=\"marketPrice\"\n                                            control={Input}\n                                            type=\"number\"\n                                            value={values.marketPrice}\n                                            onChange={handleChange}\n                                            onFocus={handleFocus}\n                                            step=\"0.25\"\n                                            disabled={!values.cashPrice}\n                                        />\n                                    </Form.Group>\n                                    <Form.Group widths=\"equal\">\n                                        <FormikSelectField\n                                            label=\"Finish\"\n                                            name=\"selectedFinish\"\n                                            options={finishes}\n                                            defaultValue={\n                                                initialValues.selectedFinish\n                                            }\n                                            onChange={(v) => {\n                                                setFieldValue(\n                                                    'selectedFinish',\n                                                    v\n                                                );\n                                            }}\n                                            disabled={finishDisabled}\n                                        />\n                                        <FormikSelectField\n                                            label=\"Condition\"\n                                            name=\"selectedCondition\"\n                                            options={cardConditions}\n                                            defaultValue={\n                                                initialValues.selectedCondition\n                                            }\n                                            onChange={(v) => {\n                                                setFieldValue(\n                                                    'selectedCondition',\n                                                    v\n                                                );\n                                            }}\n                                        />\n                                        <Form.Button\n                                            type=\"submit\"\n                                            label=\"Add to List?\"\n                                            control={Button}\n                                            primary\n                                            disabled={!isValid}\n                                            onClick={() => handleSubmit()}\n                                        >\n                                            Add\n                                        </Form.Button>\n                                    </Form.Group>\n                                </Form>\n                            </Item.Description>\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Box>\n        </Paper>\n    );\n};\n\nexport default ReceivingSearchItem;\n","import React, { useContext, FC } from 'react';\nimport Price from '../common/Price';\nimport {\n    ReceivingCard,\n    ReceivingContext,\n    Trade,\n} from '../context/ReceivingContext';\nimport SetIcon from '../ui/SetIcon';\nimport CardImageTooltip from '../ui/CardImageTooltip';\nimport { ListItem, Grid, Typography, Box, IconButton } from '@material-ui/core';\nimport Chip from '../common/Chip';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\nimport CloseIcon from '@material-ui/icons/Close';\n\ninterface Props {\n    card: ReceivingCard;\n}\n\n// Defines whether it uses cash or credit for trade types\nconst TRADE_TYPE = { CASH: 'CASH', CREDIT: 'CREDIT' };\n\nconst ReceivingCartItem: FC<Props> = ({\n    card: {\n        display_name,\n        set,\n        rarity,\n        cashPrice,\n        creditPrice,\n        finishCondition,\n        uuid_key,\n        tradeType,\n        cardImage,\n    },\n}) => {\n    const { CASH, CREDIT } = TRADE_TYPE;\n    const { removeFromList, activeTradeType } = useContext(ReceivingContext);\n\n    return (\n        <ListItem>\n            <Grid container alignItems=\"center\" justify=\"space-between\">\n                <Grid item>\n                    <CardImageTooltip cardImage={cardImage}>\n                        <Box display=\"flex\" alignItems=\"center\">\n                            <Typography variant=\"h6\" style={{ cursor: 'help' }}>\n                                {display_name}\n                            </Typography>\n                            <SetIcon set={set} rarity={rarity} />\n                            <Chip size=\"small\" label={set.toUpperCase()} />\n                        </Box>\n                    </CardImageTooltip>\n                    {finishCondition && (\n                        <span>\n                            {finishCondition.split('_')[1]} {' | '}\n                            {finishCondition.split('_')[0]}\n                        </span>\n                    )}\n                    <div>\n                        <span style={{ whiteSpace: 'nowrap' }}>\n                            Cash:{' '}\n                            <b>\n                                <Price num={cashPrice || 0} />\n                            </b>\n                        </span>\n                        {' • '}\n                        <span style={{ whiteSpace: 'nowrap' }}>\n                            Credit:{' '}\n                            <b>\n                                <Price num={creditPrice || 0} />\n                            </b>\n                        </span>\n                    </div>\n                </Grid>\n                <Grid item>\n                    <IconButton\n                        color={tradeType === CASH ? 'primary' : undefined}\n                        onClick={() => activeTradeType(uuid_key, Trade.Cash)}\n                        disabled={cashPrice === 0}\n                    >\n                        <AttachMoneyIcon />\n                    </IconButton>\n                    <IconButton\n                        color={tradeType === CREDIT ? 'primary' : undefined}\n                        onClick={() => activeTradeType(uuid_key, Trade.Credit)}\n                        disabled={creditPrice === 0}\n                    >\n                        <CreditCardIcon />\n                    </IconButton>\n                    <IconButton\n                        onClick={() => removeFromList(uuid_key)}\n                        color=\"secondary\"\n                    >\n                        <CloseIcon />\n                    </IconButton>\n                </Grid>\n            </Grid>\n        </ListItem>\n    );\n};\n\nexport default ReceivingCartItem;\n","import { Divider, List, Paper } from '@material-ui/core';\nimport React, { FC, Fragment } from 'react';\nimport { ReceivingCard } from '../context/ReceivingContext';\nimport ReceivingCartItem from './ReceivingCartItem';\n\ninterface Props {\n    cards: ReceivingCard[];\n}\n\nconst ReceivingCart: FC<Props> = ({ cards }) => {\n    return (\n        <>\n            {cards.length > 0 && (\n                <List component={Paper} variant=\"outlined\">\n                    {cards.map((card, idx, arr) => (\n                        <Fragment>\n                            <ReceivingCartItem card={card} />\n                            {idx !== arr.length - 1 && <Divider />}\n                        </Fragment>\n                    ))}\n                </List>\n            )}\n        </>\n    );\n};\n\nexport default ReceivingCart;\n","import React, { FC } from 'react';\nimport _ from 'lodash';\nimport Price from '../common/Price';\nimport { ReceivingCard } from '../context/ReceivingContext';\nimport {\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    TableFooter,\n} from '@material-ui/core';\n\ninterface Props {\n    receivingList: ReceivingCard[];\n}\n\n// Am I crazy or is this logic really convoluted?\n// Perhaps look at this down the line for improvement...\nconst CashReport: FC<Props> = ({ receivingList }) => {\n    // If id, cashPrice and marketPrice are the same, goes in one bucket\n    const countByPriceAndID = _.chain(receivingList)\n        .filter((c) => c.tradeType === 'CASH')\n        .map((c) => {\n            // Note: We're creating a unique uuid-esque comparator string based on:\n            // `id`, `cashPrice`, `marketPrice`, and `finishCondition`\n            return {\n                ...c,\n                temp_uuid: `${c.id}-${c.cashPrice}-${c.marketPrice}-${c.finishCondition}`,\n            };\n        })\n        .groupBy('temp_uuid')\n        .mapValues((val) => val.length)\n        .value();\n\n    const uniqLineItems = _.chain(receivingList)\n        .filter((c) => c.tradeType === 'CASH')\n        .map((c) => {\n            return {\n                ...c,\n                temp_uuid: `${c.id}-${c.cashPrice}-${c.marketPrice}-${c.finishCondition}`,\n            };\n        })\n        .uniqBy('temp_uuid')\n        .value();\n\n    const mergedWithQty = uniqLineItems.map((c) => {\n        return { ...c, tradeQty: countByPriceAndID[c.temp_uuid] }; // Add a trade quantity referencing the previous count\n    });\n\n    const totalCashOut = _.chain(receivingList)\n        .filter((c) => c.tradeType === 'CASH')\n        .sumBy((c) => c.cashPrice || 0)\n        .value();\n\n    return (\n        <React.Fragment>\n            <div id=\"cash-report\">\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell colSpan={6}>Employee Name:</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>Card Name</TableCell>\n                            <TableCell>Market Value</TableCell>\n                            <TableCell>Condition</TableCell>\n                            <TableCell>Quantity</TableCell>\n                            <TableCell>Cash Offer</TableCell>\n                            <TableCell>Cash Out</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {mergedWithQty.map((c) => {\n                            return (\n                                <TableRow key={c.temp_uuid}>\n                                    <TableCell>{c.name}</TableCell>\n                                    <TableCell>\n                                        <Price num={c.marketPrice} />\n                                    </TableCell>\n                                    <TableCell>{c.finishCondition}</TableCell>\n                                    <TableCell>{c.tradeQty}</TableCell>\n                                    <TableCell>\n                                        <Price num={c.cashPrice} />\n                                    </TableCell>\n                                    <TableCell>\n                                        <Price\n                                            num={\n                                                c.tradeQty * (c.cashPrice || 0)\n                                            }\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                    <TableFooter>\n                        <TableCell colSpan={6}>\n                            Total: <Price num={totalCashOut} />\n                        </TableCell>\n                    </TableFooter>\n                </Table>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default CashReport;\n","import React, { useState, useContext, FC } from 'react';\nimport { Modal, Button, Form, List, Header } from 'semantic-ui-react';\nimport { ReceivingContext, Trade } from '../context/ReceivingContext';\nimport Price from '../common/Price';\nimport { FormikErrors, useFormik } from 'formik';\nimport sum from '../utils/sum';\n\ninterface Props {}\n\ninterface FormValues {\n    customerName: string;\n    customerContact: string;\n}\n\nconst initialFormValues: FormValues = {\n    customerName: '',\n    customerContact: '',\n};\n\n// TODO: Extract and generalize this\nconst validate = ({ customerName, customerContact }: FormValues) => {\n    const errors: FormikErrors<FormValues> = {};\n\n    if (!customerName) {\n        errors.customerName = 'Required';\n    }\n\n    if (customerName.length < 3) {\n        errors.customerName = 'Min 3 characters';\n    }\n\n    if (customerName.length > 50) {\n        errors.customerName = 'Max 50 characters';\n    }\n\n    if (customerContact.length > 50) {\n        errors.customerContact = 'Max 50 characters';\n    }\n\n    return errors;\n};\n\nconst ReceivingListModal: FC<Props> = () => {\n    const [loading, setLoading] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n\n    const { receivingList, commitToInventory } = useContext(ReceivingContext);\n\n    const onSubmit = async ({ customerName, customerContact }: FormValues) => {\n        setLoading(true);\n        await commitToInventory(\n            customerName,\n            customerContact ? customerContact : null\n        );\n        setLoading(false);\n    };\n\n    const { handleChange, handleSubmit, errors } = useFormik({\n        initialValues: initialFormValues,\n        validate,\n        onSubmit,\n    });\n\n    const cashTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Trade.Cash)\n            .map((c) => c.cashPrice || 0)\n    );\n\n    const creditTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Trade.Credit)\n            .map((c) => c.creditPrice || 0)\n    );\n\n    return (\n        <>\n            <Button\n                fluid\n                color=\"blue\"\n                disabled={receivingList.length === 0}\n                onClick={() => setShowModal(true)}\n            >\n                Commit to inventory\n            </Button>\n            {setShowModal && (\n                <Modal\n                    closeOnDimmerClick={false}\n                    open={showModal}\n                    onClose={() => setShowModal(false)}\n                >\n                    <Modal.Header>Receiving confirmation</Modal.Header>\n                    <Modal.Content scrolling>\n                        <Header as=\"h5\">\n                            Committing the following cards to inventory:\n                        </Header>\n                        <List>\n                            {receivingList.map((c) => {\n                                return (\n                                    <List.Item key={c.uuid_key}>\n                                        {`● ${c.name} | ${c.set_name} (\n                                        ${c.set.toUpperCase()})`}\n                                    </List.Item>\n                                );\n                            })}\n                        </List>\n                        <Header as=\"h5\">The customer is owed:</Header>\n                        <List>\n                            {cashTotal > 0 ? (\n                                <List.Item>\n                                    ● <Price num={cashTotal} /> in cold, hard\n                                    cash\n                                </List.Item>\n                            ) : null}\n                            {creditTotal > 0 ? (\n                                <List.Item>\n                                    ● <Price num={creditTotal} /> in store\n                                    credit\n                                </List.Item>\n                            ) : null}\n                        </List>\n                    </Modal.Content>\n                    <Modal.Content>\n                        <Form>\n                            <Form.Group widths=\"equal\">\n                                <Form.Field>\n                                    <label>Customer name</label>\n                                    <Form.Input\n                                        onChange={handleChange}\n                                        name=\"customerName\"\n                                        error={errors.customerName}\n                                    />\n                                </Form.Field>\n                                <Form.Field>\n                                    <label>Customer contact (optional)</label>\n                                    <Form.Input\n                                        onChange={handleChange}\n                                        name=\"customerContact\"\n                                        error={errors.customerContact}\n                                    />\n                                </Form.Field>\n                            </Form.Group>\n                        </Form>\n                    </Modal.Content>\n                    <Modal.Actions>\n                        <Button onClick={() => setShowModal(false)}>\n                            Cancel\n                        </Button>\n                        <Button\n                            color=\"blue\"\n                            type=\"submit\"\n                            loading={loading}\n                            disabled={loading}\n                            onClick={() => handleSubmit()}\n                        >\n                            Submit\n                        </Button>\n                    </Modal.Actions>\n                </Modal>\n            )}\n        </>\n    );\n};\n\nexport default ReceivingListModal;\n","import React, { useState, useContext, FC } from 'react';\nimport { Button, Modal } from 'semantic-ui-react';\nimport Price from '../common/Price';\nimport CashReport from './CashReport';\nimport printCashReport from './printCashReport';\nimport ReceivingListModal from './ReceivingListModal';\nimport { ReceivingContext, Trade } from '../context/ReceivingContext';\nimport sum from '../utils/sum';\nimport { Box, Grid, Paper, Typography } from '@material-ui/core';\n\ninterface Props {}\n\nconst ReceivingListTotals: FC<Props> = () => {\n    const { Cash, Credit } = Trade;\n    const [showCashModal, setShowCashModal] = useState(false);\n    const { receivingList, selectAll } = useContext(ReceivingContext);\n\n    const openCashModal = () => setShowCashModal(true);\n    const closeCashModal = () => setShowCashModal(false);\n\n    const handlePrintCashReport = () => {\n        setShowCashModal(false); // Close the modal so users don't have to after printing in new tab\n        printCashReport();\n    };\n\n    const cashTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Cash)\n            .map((c) => c.cashPrice || 0)\n    );\n\n    const creditTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Credit)\n            .map((c) => c.creditPrice || 0)\n    );\n\n    return (\n        <Paper variant=\"outlined\">\n            <Box p={2}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} justify=\"space-between\">\n                        <Button.Group fluid>\n                            <Button\n                                id=\"select-all-cash\"\n                                onClick={() => selectAll(Trade.Cash)}\n                            >\n                                Select all cash\n                            </Button>\n                            <Button.Or />\n                            <Button\n                                id=\"select-all-credit\"\n                                onClick={() => selectAll(Trade.Credit)}\n                            >\n                                Select all credit\n                            </Button>\n                        </Button.Group>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Modal\n                            open={showCashModal}\n                            trigger={\n                                <Button\n                                    floated=\"right\"\n                                    color={cashTotal > 0 ? 'green' : undefined}\n                                    disabled={cashTotal === 0}\n                                    onClick={openCashModal}\n                                >\n                                    Generate cash report\n                                </Button>\n                            }\n                        >\n                            <Modal.Content>\n                                <CashReport receivingList={receivingList} />\n                            </Modal.Content>\n                            <Modal.Actions>\n                                <Button\n                                    onClick={handlePrintCashReport}\n                                    color=\"blue\"\n                                >\n                                    Print Report\n                                </Button>\n                                <Button onClick={closeCashModal}>Cancel</Button>\n                            </Modal.Actions>\n                        </Modal>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Box\n                            display=\"flex\"\n                            justifyContent=\"space-between\"\n                            alignItems=\"center\"\n                        >\n                            <Typography>CASH DUE</Typography>\n\n                            <Typography variant=\"h6\">\n                                <b>\n                                    <Price num={cashTotal} />\n                                </b>\n                            </Typography>\n                        </Box>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Box\n                            display=\"flex\"\n                            justifyContent=\"space-between\"\n                            alignItems=\"center\"\n                        >\n                            <Typography>CREDIT DUE</Typography>\n\n                            <Typography variant=\"h6\">\n                                <b>\n                                    <Price num={creditTotal} />\n                                </b>\n                            </Typography>\n                        </Box>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <ReceivingListModal />\n                    </Grid>\n                </Grid>\n            </Box>\n        </Paper>\n    );\n};\n\nexport default ReceivingListTotals;\n","const printStyle = `\n    body {\n        font-family: 'helvetica neue', helvetica, arial, sans-serif;\n    }\n\n    table {\n        table-layout: fixed;\n        width: 100%;\n        border-collapse: collapse;\n        border: 1px solid gray;\n        text-align: left;\n    }\n\n    thead th:nth-child(1) {\n        width: 30%;\n    }\n\n    thead th:nth-child(2) {\n        width: 20%;\n    }\n\n    thead th:nth-child(3) {\n        width: 15%;\n    }\n\n    thead th:nth-child(4) {\n        width: 35%;\n    }\n\n    th, td {\n        border: 1px solid #ddd;\n        padding: 10px;\n    }\n\n    tfoot {\n        text-align: right !important;\n    }\n`;\n\n/**\n * We're creating a new tab here for the modal table and writing CSS to it - not the most elegant solution from a UX and\n * code standpoint, but time was of the essence for this release. Refactor down the road.\n *\n * The id cash-report is found on the cash report table\n */\nexport default function printCashReport() {\n    const divToPrint = document.getElementById('cash-report')!;\n    const popup = window.open('', '_blank');\n    if (popup) {\n        popup.document.open();\n        popup.document.write(`<html>`);\n        popup.document.write(`<head>`);\n        popup.document.write(`<title>Cash Report</title>`);\n        popup.document.write(`<style>${printStyle}</style>`);\n        popup.document.write(`</head>`);\n        popup.document.write(`<body onload=\"window.print()\">`);\n        popup.document.write(`${divToPrint.innerHTML}`);\n        popup.document.write(`</body>`);\n        popup.document.write(`</html>`);\n        popup.document.close();\n    }\n}\n","import React, { FC, useContext, useEffect, useState } from 'react';\nimport ReceivingSearchItem from './ReceivingSearchItem';\nimport { ReceivingContext } from '../context/ReceivingContext';\nimport ReceivingCart from './ReceivingCart';\nimport TotalCardsLabel from '../common/TotalCardsLabel';\nimport TotalStoreInventory from '../ManageInventory/TotalStoreInventory';\nimport { Grid } from '@material-ui/core';\nimport { HeaderText } from '../ui/Typography';\nimport Loading from '../ui/Loading';\nimport { Prompt } from 'react-router';\nimport useInterruptExit from '../utils/useInterruptExit';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport Placeholder from '../ui/Placeholder';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ReceivingListTotals from './ReceivingListTotals';\n\ninterface Props {}\n\nconst Receiving: FC<Props> = () => {\n    const { setShowPrompt } = useInterruptExit(false);\n    const [term, setTerm] = useState<string>('');\n    const [loading, setLoading] = useState<boolean>(false);\n    const {\n        searchResults,\n        receivingList,\n        handleSearchSelect,\n        resetSearchResults,\n    } = useContext(ReceivingContext);\n\n    /**\n     * Reset the search results on unmount to clear store\n     */\n    useEffect(() => {\n        return () => resetSearchResults();\n    }, []);\n\n    /**\n     * Maintains whether or not we show the exit prompt on tab close or refresh\n     */\n    useEffect(() => {\n        if (receivingList.length > 0) {\n            setShowPrompt(true);\n        } else {\n            setShowPrompt(false);\n        }\n    }, [receivingList]);\n\n    useEffect(() => {\n        if (term) {\n            (async () => {\n                setLoading(true);\n                await handleSearchSelect(term);\n                setLoading(false);\n            })();\n        }\n    }, [term]);\n\n    return (\n        <>\n            <Prompt\n                message=\"You have items in your list. Are you sure you wish to leave?\"\n                when={receivingList.length > 0}\n            />\n            <Grid container>\n                <Grid item xs={12} md={4}>\n                    <ControlledSearchBar\n                        value={term}\n                        onChange={(v) => setTerm(v)}\n                    />\n                </Grid>\n            </Grid>\n            <br />\n            <Grid container spacing={2}>\n                <Grid item xs={12} lg={8}>\n                    <Grid container justify=\"space-between\">\n                        <HeaderText>Card Search</HeaderText>\n                        {searchResults.length > 0 && (\n                            <TotalStoreInventory\n                                searchResults={searchResults}\n                                title={searchResults[0].name}\n                            />\n                        )}\n                    </Grid>\n                    <br />\n                    {!loading && !searchResults.length && (\n                        <Placeholder\n                            icon={<SearchIcon style={{ fontSize: 80 }} />}\n                        >\n                            <em>\"So many cards, so little time.\"</em>\n                        </Placeholder>\n                    )}\n                    {loading ? (\n                        <Loading />\n                    ) : (\n                        <Grid container spacing={2}>\n                            {searchResults.map((card) => (\n                                <Grid item xs={12} key={card.id}>\n                                    <ReceivingSearchItem card={card} />\n                                </Grid>\n                            ))}\n                        </Grid>\n                    )}\n                </Grid>\n                <Grid item xs={12} lg={4}>\n                    <Grid container justify=\"space-between\">\n                        <HeaderText>Buylist</HeaderText>\n                        <TotalCardsLabel listLength={receivingList.length} />\n                    </Grid>\n                    <br />\n                    {!receivingList.length && (\n                        <Placeholder\n                            icon={<SearchIcon style={{ fontSize: 80 }} />}\n                        >\n                            <em>\"If you receive it, they will come.\"</em>\n                        </Placeholder>\n                    )}\n                    <ReceivingCart cards={receivingList} />\n                    <br />\n                    {receivingList.length > 0 && <ReceivingListTotals />}\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default Receiving;\n","import React, { FC } from 'react';\nimport { Redirect, Route, RouteProps } from 'react-router';\nimport { useAuthContext } from './context/AuthProvider';\n\nconst AdminOnly: FC = ({ children }) => {\n    const { currentUser, currentLocation } = useAuthContext();\n\n    if (!currentUser || !currentLocation) {\n        return <Redirect to=\"/\" />;\n    }\n\n    return <>{children}</>;\n};\n\nconst AdminRoute: FC<RouteProps> = ({ children, ...props }) => {\n    return (\n        <Route {...props}>\n            <AdminOnly>{children}</AdminOnly>\n        </Route>\n    );\n};\n\nexport default AdminRoute;\n","export default __webpack_public_path__ + \"static/media/clubhouse_products.e622049f.png\";","export default __webpack_public_path__ + \"static/media/tables.451be904.jpg\";","export default __webpack_public_path__ + \"static/media/learn_to_play.91a17850.jpg\";","export default __webpack_public_path__ + \"static/media/ch2.f55f010a.jpg\";","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport clubhouse_products from './clubhouse_products.png';\nimport ch1 from './tables.jpg';\nimport learn_to_play from './learn_to_play.jpg';\nimport ch2 from './ch2.jpg';\n\nconst colors = {\n    primary: '#2185d0',\n    white: '#ffffff',\n    gray: {\n        light: '#99aab5',\n        main: '#2c2f33',\n        dark: '#23272a',\n    },\n};\n\nconst primaryRgb = '13, 49, 69,';\nconst bodyBackground = '#f8f5ef';\n\nconst desktopMediaQuery = `@media only screen and (min-width: 769px)`;\nconst tabletMediaQuery = `@media only screen and (max-width: 768px)`;\n\nconst headerHeight = 52;\nconst borderRadius = 7;\n\nconst HeroImageContainer = styled('div')({\n    width: '100%',\n    height: 500,\n});\n\nconst Container = styled('div')({\n    marginTop: headerHeight,\n});\n\ninterface ImageProps {\n    src: string;\n    rounded?: boolean;\n}\n\nconst Image = styled.div<ImageProps>`\n    background: url(${({ src }) => src});\n    background-size: cover;\n    height: 100%;\n    width: 100%;\n    border-radius: ${({ rounded }) => (rounded ? `${borderRadius}px` : '0px')};\n`;\n\nconst LocationImageContainer = styled('div')({\n    width: '100%',\n    height: 350,\n    borderRadius: borderRadius,\n});\n\nconst ImageGradient = styled('div')({\n    backgroundImage: `linear-gradient(\n        to top,\n        rgba(${primaryRgb} 0.9),\n        rgba(${primaryRgb} 0.85),\n        rgba(${primaryRgb} 0.70),\n        rgba(${primaryRgb} 0.60),\n        rgba(255, 255, 255, 0)\n    )`,\n    height: '100%',\n    width: '100%',\n});\n\nconst ImageGradient2 = styled('div')({\n    backgroundColor: `rgba(${primaryRgb} 0.85)`,\n    height: '100%',\n    width: '100%',\n    borderRadius: borderRadius,\n});\n\nconst HeroText = styled('h1')({\n    color: colors.white,\n    textAlign: 'center',\n    [tabletMediaQuery]: {\n        fontSize: 40,\n    },\n    [desktopMediaQuery]: {\n        fontSize: 50,\n    },\n});\n\ninterface HeaderTextProps {\n    inverted?: boolean;\n}\n\nconst HeaderText = styled.h1<HeaderTextProps>`\n    color: ${({ inverted }) => (inverted ? colors.white : colors.gray.main)};\n`;\n\nconst SectionText = styled('h2')({\n    color: colors.white,\n    textAlign: 'center',\n});\n\nconst SubheaderText = styled('div')({\n    color: colors.white,\n    fontSize: 18,\n});\n\nconst HeaderContainer = styled('div')({\n    display: 'flex',\n    height: 'inherit',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n});\n\nconst ServicesContainer = styled('div')({\n    display: 'grid',\n    gridGap: 60,\n    [tabletMediaQuery]: {\n        gridTemplateRows: '1fr 1fr 1fr',\n    },\n    [desktopMediaQuery]: {\n        gridTemplateColumns: '1fr 1fr 1fr',\n    },\n});\n\nconst LocationsContainer = styled('div')({\n    display: 'grid',\n    gridGap: 20,\n    [tabletMediaQuery]: {\n        gridTemplateRows: '1fr 1fr',\n    },\n    [desktopMediaQuery]: {\n        gridTemplateColumns: '1fr 1fr',\n    },\n});\n\nconst LocationContainer = styled('div')({\n    padding: 40,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    height: '100%',\n});\n\nconst Content = styled('div')({\n    padding: 20,\n});\n\ninterface DescriptionProps {\n    inverted?: boolean;\n}\n\nconst Description = styled.div<DescriptionProps>`\n    color: ${({ inverted }) => (inverted ? colors.white : colors.gray.main)};\n    font-size: 18px;\n`;\n\nconst TextWidth = styled('div')({\n    [tabletMediaQuery]: {\n        width: '100%',\n    },\n    [desktopMediaQuery]: {\n        width: '50%',\n    },\n});\n\nconst IconContainer = styled('div')({\n    padding: 40,\n    backgroundColor: colors.gray.main,\n    borderRadius: borderRadius,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n});\n\nconst SectionDivider = styled('div')({\n    width: '100%',\n    padding: 40,\n});\n\nconst Footer = styled('div')({\n    bottom: 0,\n    backgroundColor: colors.gray.dark,\n    [tabletMediaQuery]: {\n        padding: 20,\n    },\n    [desktopMediaQuery]: {\n        paddingLeft: 40,\n        paddingBottom: 20,\n        paddingRight: 40,\n        paddingTop: 40,\n    },\n});\n\ninterface FlexRowProps {\n    justify?: 'center' | 'space-between';\n}\n\nconst FlexRow = styled.div<FlexRowProps>`\n    display: flex;\n    justify-content: ${({ justify }) => justify || 'space-between'};\n    align-items: center;\n`;\n\nconst Home: FC = () => {\n    return (\n        <Container style={{ backgroundColor: bodyBackground }}>\n            <HeroImageContainer>\n                <Image src={learn_to_play}>\n                    <ImageGradient>\n                        <HeaderContainer>\n                            <HeroText>The Clubhouse is open 🎉</HeroText>\n                            <TextWidth>\n                                <SubheaderText>\n                                    <SectionText>\n                                        We are open all week for your tabletop\n                                        gaming needs!\n                                    </SectionText>\n                                </SubheaderText>\n                            </TextWidth>\n                            <br />\n                            <Link to=\"/public-inventory\">\n                                <Button size=\"huge\" primary>\n                                    Browse cards\n                                </Button>\n                            </Link>\n                        </HeaderContainer>\n                    </ImageGradient>\n                </Image>\n            </HeroImageContainer>\n            <SectionDivider />\n            <Content>\n                <HeaderText>Your local game store.</HeaderText>\n                <TextWidth>\n                    <Description>\n                        We take pride in our friendly community of players, and\n                        always ensure that our customers are well served.\n                    </Description>\n                </TextWidth>\n            </Content>\n            <Content>\n                <ServicesContainer>\n                    <div>\n                        <IconContainer>\n                            <Icon name=\"box\" size=\"huge\" inverted />\n                            <SectionText>Large product selection</SectionText>\n                        </IconContainer>\n                        <br />\n                        <Description>\n                            We stock an extensive selection of singles and CCG\n                            supplies just for you! When the deck-building itch\n                            strikes, turn to us\n                        </Description>\n                    </div>\n                    <div>\n                        <IconContainer>\n                            <Icon name=\"users\" size=\"huge\" inverted />\n                            <SectionText>Inclusive community</SectionText>\n                        </IconContainer>\n                        <br />\n                        <Description>\n                            Young or seasoned, beginner or advanced, we welcome\n                            all players!\n                        </Description>\n                    </div>\n                    <div>\n                        <IconContainer>\n                            <Icon name=\"dollar sign\" size=\"huge\" inverted />\n                            <SectionText>Cash or credit trade-ins</SectionText>\n                        </IconContainer>\n                        <br />\n                        <Description>\n                            Whether a whole collection or a single card, come on\n                            by and have one of our expert managers appraise it\n                            using competitive market rates\n                        </Description>\n                    </div>\n                </ServicesContainer>\n            </Content>\n            <SectionDivider />\n            <Content>\n                <HeaderText>Two convenient locations</HeaderText>\n                <LocationsContainer>\n                    <LocationImageContainer>\n                        <Image src={ch1} rounded>\n                            <ImageGradient2>\n                                <LocationContainer>\n                                    <HeaderText inverted>Beaverton</HeaderText>\n                                    <SectionDivider />\n                                    <div>\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"map marker alternate\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            13895 SW Farmington Rd, Beaverton,\n                                            OR 97005\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"clock\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            Mon - Fri 12pm to 7pm, Sat - Sun\n                                            11am to 7pm\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"phone\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            (503) 268-1449\n                                        </Description>\n                                    </div>\n                                </LocationContainer>\n                            </ImageGradient2>\n                        </Image>\n                    </LocationImageContainer>\n                    <LocationImageContainer>\n                        <Image src={ch2} rounded>\n                            <ImageGradient2>\n                                <LocationContainer>\n                                    <HeaderText inverted>Hillsboro</HeaderText>\n                                    <SectionDivider />\n                                    <div>\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"map marker alternate\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            1300 SW Oak St Suite B, Hillsboro,\n                                            OR 97123\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"clock\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            Mon - Fri 12pm to 7pm, Sat - Sun\n                                            11am to 7pm\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"phone\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            (971) 249-3096\n                                        </Description>\n                                    </div>\n                                </LocationContainer>\n                            </ImageGradient2>\n                        </Image>\n                    </LocationImageContainer>\n                </LocationsContainer>\n            </Content>\n            <SectionDivider />\n            <LocationImageContainer>\n                <Image src={clubhouse_products}>\n                    <ImageGradient>\n                        <HeaderContainer>\n                            <HeroText>We look forward to seeing you</HeroText>\n                            <TextWidth>\n                                <SubheaderText>\n                                    Follow us on Facebook or become a member of\n                                    our Discord community for up-to-date\n                                    announcements on store events, product\n                                    releases, pre-orders, and so much more!\n                                </SubheaderText>\n                            </TextWidth>\n                        </HeaderContainer>\n                    </ImageGradient>\n                </Image>\n            </LocationImageContainer>\n            <Footer>\n                <FlexRow>\n                    <Description inverted>© 2021 The Clubhouse</Description>\n                    <div>\n                        <a\n                            href=\"https://discord.gg/Wpej7dQ\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <Icon link name=\"discord\" size=\"huge\" inverted />\n                        </a>\n                        <a\n                            href=\"https://www.facebook.com/RGTClubhouse/\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <Icon link name=\"facebook\" size=\"huge\" inverted />\n                        </a>\n                    </div>\n                </FlexRow>\n                <FlexRow justify=\"center\">\n                    <Link to=\"/login\">\n                        <Button size=\"tiny\" color=\"black\">\n                            Staff login\n                        </Button>\n                    </Link>\n                </FlexRow>\n            </Footer>\n        </Container>\n    );\n};\n\nexport default Home;\n","import axios from 'axios';\nimport { FinishCondition } from '../utils/ScryfallCard';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { RECEIVING } from '../utils/api_resources';\nimport { Trade } from '../context/ReceivingContext';\nimport { ClubhouseLocation } from '../context/AuthProvider';\n\nexport interface ReceivedCard {\n    quantity: number;\n    marketPrice: number;\n    cashPrice: number;\n    creditPrice: number;\n    tradeType: Trade;\n    finishCondition: FinishCondition;\n    id: string;\n    name: string;\n    set_name: string;\n    set: string;\n}\n\ninterface ReceivedUser {\n    _id: string;\n    lightspeedEmployeeNumber: number;\n    locations: ClubhouseLocation[];\n    username: string;\n}\n\nexport interface Received {\n    _id: string;\n    created_at: string;\n    employee_number: string;\n    received_card_list: ReceivedCard[];\n    created_by: ReceivedUser;\n    customer_name: string | null;\n    customer_contact: string | null;\n}\n\ninterface Payload {\n    cardName: string | null;\n    startDate: string | null;\n    endDate: string | null;\n}\n\nconst browseReceivingQuery = async ({\n    cardName,\n    startDate,\n    endDate,\n}: Payload) => {\n    try {\n        const { data } = await axios.get<Received[]>(RECEIVING, {\n            params: { cardName, startDate, endDate },\n            headers: makeAuthHeader(),\n        });\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default browseReceivingQuery;\n","import { makeStyles } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nconst useStyles = makeStyles({\n    meta: {\n        '& > *:not(:last-of-type):after': {\n            content: '\" • \"',\n        },\n    },\n});\n\nconst MetaData: FC = ({ children }) => {\n    const { meta } = useStyles();\n    return <span className={meta}>{children}</span>;\n};\n\nexport default MetaData;\n","/**\n * Used for old entities did not have certain fields\n */\nconst displayEmpty = (str: string | null): string => {\n    return str ? str : '—';\n};\n\nexport default displayEmpty;\n","import axios from 'axios';\nimport { ClubhouseLocation } from '../context/AuthProvider';\nimport { Trade } from '../context/ReceivingContext';\nimport { RECEIVING } from '../utils/api_resources';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { FinishCondition, ScryfallApiCard } from '../utils/ScryfallCard';\n\ninterface ReceivedUser {\n    _id: string;\n    lightspeedEmployeeNumber: number;\n    locations: ClubhouseLocation[];\n    username: string;\n}\n\n/**\n * Individual receiving entities contain bulk card information\n * so users can view images, frames, etc.\n */\nexport interface ReceivedCard {\n    quantity: number;\n    marketPrice: number;\n    cashPrice: number;\n    creditPrice: number;\n    tradeType: Trade;\n    finishCondition: FinishCondition;\n    // TODO: this casing difference is mildly irritating...\n    bulk_card_data: ScryfallApiCard;\n}\n\nexport interface Received {\n    _id: string;\n    created_at: string;\n    employee_number: string;\n    received_cards: ReceivedCard[];\n    created_by: ReceivedUser;\n    customer_name: string | null;\n    customer_contact: string | null;\n}\n\nconst receivedByIdQuery = async (receivedId: string) => {\n    const { data } = await axios.get<Received>(`${RECEIVING}/${receivedId}`, {\n        headers: makeAuthHeader(),\n    });\n\n    // We still need to convert ScryfallApiCard to ScryfallCard downstream\n    return data;\n};\n\nexport default receivedByIdQuery;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Trade } from '../context/ReceivingContext';\nimport displayFinishCondition from '../utils/finishCondition';\nimport { price } from '../utils/price';\nimport {\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    DialogActions,\n    Button,\n    List,\n    ListItem,\n    ListItemText,\n    Typography,\n} from '@material-ui/core';\nimport MetaData from '../ui/MetaData';\nimport formatDate from '../utils/formatDate';\nimport displayEmpty from '../utils/displayEmpty';\nimport SetIcon from '../ui/SetIcon';\nimport receivedByIdQuery, { Received } from './receivedByIdQuery';\nimport Loading from '../ui/Loading';\nimport CardImageTooltip from '../ui/CardImageTooltip';\nimport { ScryfallCard } from '../utils/ScryfallCard';\n\ninterface Props {\n    receivedId: string;\n    onClose: () => void;\n}\n\nfunction alphaSort<T extends { bulk_card_data: { name: string } }>(arr: T[]) {\n    return [...arr].sort((a, b) =>\n        a.bulk_card_data.name.localeCompare(b.bulk_card_data.name)\n    );\n}\n\nfunction displayTrade(trade: Trade) {\n    if (trade === Trade.Credit) return 'Credit';\n    else if (trade === Trade.Cash) return 'Cash';\n}\n\nconst BrowseReceivingListDialog: FC<Props> = ({ receivedId, onClose }) => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [data, setData] = useState<Received | null>(null);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                setLoading(true);\n                const data = await receivedByIdQuery(receivedId);\n                setData(data);\n                setLoading(false);\n            } catch (err) {\n                console.log(err);\n            }\n        })();\n    }, []);\n\n    if (!data || loading) {\n        return (\n            <Dialog open onClose={onClose} maxWidth=\"md\" fullWidth>\n                <DialogTitle>Received cards</DialogTitle>\n                <DialogContent>\n                    <Loading />\n                </DialogContent>\n            </Dialog>\n        );\n    }\n\n    const {\n        received_cards: receivingList,\n        created_at,\n        created_by,\n        customer_name,\n        customer_contact,\n    } = data;\n\n    return (\n        <Dialog open onClose={onClose} maxWidth=\"md\" fullWidth>\n            <DialogTitle>\n                Received cards\n                <Typography color=\"textSecondary\">\n                    <MetaData>\n                        <span>{formatDate(created_at)}</span>\n                        <span>Received by {created_by.username}</span>\n                        <span>Customer: {displayEmpty(customer_name)}</span>\n                        <span>\n                            Customer contact: {displayEmpty(customer_contact)}\n                        </span>\n                    </MetaData>\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <List>\n                    {alphaSort(receivingList).map((card) => {\n                        const {\n                            finishCondition,\n                            tradeType,\n                            creditPrice,\n                            cashPrice,\n                            marketPrice,\n                        } = card;\n\n                        const modeledCard = new ScryfallCard(\n                            card.bulk_card_data\n                        );\n\n                        const {\n                            name,\n                            cardImage,\n                            set,\n                            set_name,\n                            rarity,\n                        } = modeledCard;\n\n                        return (\n                            <ListItem>\n                                <ListItemText\n                                    primary={\n                                        <>\n                                            <CardImageTooltip\n                                                cardImage={cardImage}\n                                            >\n                                                <span\n                                                    style={{ cursor: 'help' }}\n                                                >\n                                                    {name}{' '}\n                                                </span>\n                                            </CardImageTooltip>\n                                            <SetIcon\n                                                set={set}\n                                                rarity={rarity}\n                                            />\n                                            <span>({set_name})</span>\n                                        </>\n                                    }\n                                    secondary={\n                                        <MetaData>\n                                            <span>\n                                                {displayFinishCondition(\n                                                    finishCondition\n                                                )}\n                                            </span>\n                                            <span>\n                                                {displayTrade(tradeType)}\n                                            </span>\n                                            {tradeType === Trade.Credit && (\n                                                <span>\n                                                    Credit price:{' '}\n                                                    {price(creditPrice)}\n                                                </span>\n                                            )}\n                                            {tradeType === Trade.Cash && (\n                                                <>\n                                                    <span>\n                                                        Cash price:{' '}\n                                                        {price(cashPrice)}\n                                                    </span>\n                                                    <span>\n                                                        Market price:{' '}\n                                                        {price(marketPrice)}\n                                                    </span>\n                                                </>\n                                            )}\n                                        </MetaData>\n                                    }\n                                />\n                            </ListItem>\n                        );\n                    })}\n                </List>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} variant=\"outlined\" color=\"primary\">\n                    Dismiss\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default BrowseReceivingListDialog;\n","import React, { FC, useState } from 'react';\nimport { Received } from './browseReceivingQuery';\nimport pluralize from '../utils/pluralize';\nimport formatDate from '../utils/formatDate';\nimport {\n    Card,\n    CardActionArea,\n    CardContent,\n    Grid,\n    Typography,\n} from '@material-ui/core';\nimport BrowseReceivingListDialog from './BrowseReceivingListDialog';\nimport { sum } from 'lodash';\nimport { getPrice } from '../common/Price';\nimport MetaData from '../ui/MetaData';\nimport { Trade } from '../context/ReceivingContext';\nimport displayEmpty from '../utils/displayEmpty';\nimport Chip from '../common/Chip';\n\ninterface Props {\n    received: Received;\n}\n\nconst BrowseReceivingItem: FC<Props> = ({ received }) => {\n    const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n    const {\n        received_card_list,\n        created_at,\n        created_by,\n        customer_name,\n    } = received;\n\n    const cashPrice = sum(\n        received_card_list\n            .filter((r) => r.tradeType === Trade.Cash)\n            .map((r) => r.cashPrice)\n    );\n\n    const creditPrice = sum(\n        received_card_list\n            .filter((r) => r.tradeType === Trade.Credit)\n            .map((r) => r.creditPrice)\n    );\n\n    return (\n        <>\n            {dialogOpen && (\n                <BrowseReceivingListDialog\n                    receivedId={received._id}\n                    onClose={() => setDialogOpen(false)}\n                />\n            )}\n            <Card variant=\"outlined\">\n                <CardActionArea\n                    disableRipple\n                    onClick={() => setDialogOpen(true)}\n                >\n                    <CardContent>\n                        <Grid\n                            container\n                            spacing={2}\n                            justify=\"space-between\"\n                            alignItems=\"center\"\n                        >\n                            <Grid item>\n                                <Typography variant=\"h6\">\n                                    {`${received_card_list.length} ${pluralize(\n                                        received_card_list.length,\n                                        'card'\n                                    )}`}\n                                </Typography>\n                                <Typography color=\"textSecondary\">\n                                    <MetaData>\n                                        <span>{formatDate(created_at)}</span>\n                                        <span>\n                                            Received by {created_by.username}\n                                        </span>\n                                        <span>\n                                            Customer:{' '}\n                                            {displayEmpty(customer_name)}\n                                        </span>\n                                    </MetaData>\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Chip\n                                    size=\"small\"\n                                    label={`Cash: ${getPrice(cashPrice)}`}\n                                    color={\n                                        cashPrice > 0 ? 'primary' : undefined\n                                    }\n                                />\n                                <Chip\n                                    size=\"small\"\n                                    label={`Cash: ${getPrice(creditPrice)}`}\n                                    color={\n                                        creditPrice > 0 ? 'primary' : undefined\n                                    }\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </CardActionArea>\n            </Card>\n        </>\n    );\n};\n\nexport default BrowseReceivingItem;\n","import { ChangeEvent, FC } from 'react';\nimport { FormControl, TextField } from '@material-ui/core';\n\ninterface FormikNativeDatePickerProps {\n    label: string;\n    name: string;\n    defaultValue: string;\n    handleChange: (e: ChangeEvent) => void;\n    min?: string;\n    max?: string;\n}\n\nexport const FormikNativeDatePicker: FC<FormikNativeDatePickerProps> = ({\n    label,\n    name,\n    defaultValue,\n    handleChange,\n    min,\n    max,\n}) => {\n    return (\n        <FormControl fullWidth>\n            <TextField\n                id={name}\n                label={label}\n                name={name}\n                size=\"small\"\n                variant=\"outlined\"\n                type=\"date\"\n                onChange={handleChange}\n                defaultValue={defaultValue}\n                InputProps={{\n                    inputProps: {\n                        min,\n                        max,\n                    },\n                }}\n            />\n        </FormControl>\n    );\n};\n\nexport default FormikNativeDatePicker;\n","import React, { FC, useState } from 'react';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Grid,\n} from '@material-ui/core';\nimport { useFormik } from 'formik';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport FormikNativeDatePicker from '../ui/FormikNativeDatePicker';\n\nexport interface FormValues {\n    cardName: string;\n    startDate: string;\n    endDate: string;\n}\n\ninterface Props {\n    onSubmit: (v: FormValues) => void;\n    filters: FormValues;\n}\n\n// No validations needed for now\nconst validate = () => {\n    return {};\n};\n\nconst BrowseReceivingFilterDialog: FC<Props> = ({ onSubmit, filters }) => {\n    const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n\n    const onDialogOpen = () => setDialogOpen(true);\n    const onDialogClose = () => setDialogOpen(false);\n\n    const { handleChange, values, setFieldValue, handleSubmit } = useFormik({\n        initialValues: filters,\n        validate,\n        onSubmit: async (v: FormValues) => {\n            await onSubmit(v);\n            onDialogClose();\n        },\n        /**\n         * Formik will not update `initialValues` from externally-controlled sources (ie. props) if changed,\n         * even if the component is unmounted. We have to flip this switch to initialize with updated prop values\n         */\n        enableReinitialize: true,\n    });\n\n    return (\n        <>\n            <Button\n                disableElevation\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={onDialogOpen}\n            >\n                Filter\n            </Button>\n            {dialogOpen && (\n                <Dialog open onClose={onDialogClose} maxWidth=\"sm\" fullWidth>\n                    <DialogTitle>Receiving search</DialogTitle>\n                    <DialogContent>\n                        <form>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12}>\n                                    <ControlledSearchBar\n                                        value={values.cardName}\n                                        onChange={(v) =>\n                                            setFieldValue('cardName', v)\n                                        }\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <FormikNativeDatePicker\n                                        label=\"Start date\"\n                                        name=\"startDate\"\n                                        defaultValue={filters.startDate}\n                                        handleChange={handleChange}\n                                        max={values.endDate}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <FormikNativeDatePicker\n                                        label=\"End date\"\n                                        name=\"endDate\"\n                                        defaultValue={filters.endDate}\n                                        handleChange={handleChange}\n                                        max={filters.endDate}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </form>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button variant=\"outlined\" onClick={onDialogClose}>\n                            Cancel\n                        </Button>\n                        <Button\n                            disableElevation\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => handleSubmit()}\n                        >\n                            Search\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            )}\n        </>\n    );\n};\n\nexport default BrowseReceivingFilterDialog;\n","import React, { FC, useEffect, useState } from 'react';\nimport browseReceivingQuery, { Received } from './browseReceivingQuery';\nimport { Grid, Box, Typography, Button } from '@material-ui/core';\nimport BrowseReceivingItem from './BrowseReceivingItem';\nimport moment from 'moment';\nimport Loading from '../ui/Loading';\nimport { HeaderText, SectionText } from '../ui/Typography';\nimport BrowseReceivingFilterDialog, {\n    FormValues,\n} from './BrowseReceivingFilterDialog';\nimport Placeholder from '../ui/Placeholder';\n\ninterface Filters {\n    cardName: string;\n    startDate: string;\n    endDate: string;\n}\n\nconst initialFilters: Filters = {\n    cardName: '',\n    startDate: moment().subtract(30, 'days').format('YYYY-MM-DD'),\n    endDate: moment().format('YYYY-MM-DD'),\n};\n\nfunction shallowCompare(obj1: Filters, obj2: Filters) {\n    return JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\nconst BrowseReceiving: FC = () => {\n    const [filters, setFilters] = useState<Filters>(initialFilters);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [receivedList, setReceivedList] = useState<Received[]>([]);\n\n    const onSubmit = async (formValues: FormValues) => {\n        /**\n         * If the types of `Filters` changes, we can convert them here\n         * from the submitted form values.\n         */\n        setFilters({ ...filters, ...formValues }); // preserves order when using JSON.stringify to diff\n    };\n\n    const onClearFilters = () => setFilters(initialFilters);\n\n    useEffect(() => {\n        (async () => {\n            const { cardName, startDate, endDate } = filters;\n\n            setLoading(true);\n            const received = await browseReceivingQuery({\n                cardName: cardName ? cardName : null,\n                startDate,\n                endDate,\n            });\n            setLoading(false);\n            setReceivedList(received);\n        })();\n    }, [filters]);\n\n    return (\n        <div>\n            <Box pb={2}>\n                <HeaderText>Browse Receiving</HeaderText>\n            </Box>\n            <Grid container justify=\"space-between\" spacing={2}>\n                <Grid item alignItems=\"center\" md={12} lg={6}>\n                    <Box\n                        display=\"flex\"\n                        justifyContent=\"space-between\"\n                        alignItems=\"center\"\n                    >\n                        <div>\n                            <SectionText>Results</SectionText>\n                            <Typography color=\"textSecondary\">\n                                {`Searching ${\n                                    filters.cardName || 'all cards'\n                                } from ${filters.startDate} to ${\n                                    filters.endDate\n                                }`}\n                            </Typography>\n                        </div>\n                        <div>\n                            {!shallowCompare(initialFilters, filters) && (\n                                <Button\n                                    color=\"primary\"\n                                    onClick={onClearFilters}\n                                >\n                                    Clear filters\n                                </Button>\n                            )}\n                            <BrowseReceivingFilterDialog\n                                filters={filters}\n                                onSubmit={onSubmit}\n                            />\n                        </div>\n                    </Box>\n                </Grid>\n                {loading ? (\n                    <Loading />\n                ) : receivedList.length === 0 ? (\n                    <Grid item xs={12}>\n                        <Placeholder>No results</Placeholder>\n                    </Grid>\n                ) : (\n                    receivedList.map((rl) => (\n                        <Grid item xs={12} key={rl._id}>\n                            <BrowseReceivingItem received={rl} />\n                        </Grid>\n                    ))\n                )}\n            </Grid>\n        </div>\n    );\n};\n\nexport default BrowseReceiving;\n","import React, { ChangeEvent, useEffect, useState } from 'react';\nimport moment from 'moment';\nimport Loading from '../ui/Loading';\nimport reportingQuery, { ResponseData } from './reportingQuery';\nimport {\n    Box,\n    Grid,\n    MenuItem,\n    Paper,\n    Select,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n} from '@material-ui/core';\nimport { HeaderText, SectionText } from '../ui/Typography';\nimport { uniqueId } from 'lodash';\n\ninterface SearchDates {\n    startDate: string;\n    endDate: string;\n}\n\nenum RangeName {\n    ALL_TIME = 'All time',\n    LAST_MONTH = 'Last 30 days',\n}\n\nconst allTimeDates: SearchDates = {\n    startDate: moment().year(1999).toISOString(),\n    endDate: moment().toISOString(),\n};\n\nconst lastMonthDates: SearchDates = {\n    startDate: moment().subtract(30, 'days').toISOString(),\n    endDate: moment().toISOString(),\n};\n\nconst Reporting = () => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [report, setReport] = useState<ResponseData | null>(null);\n    const [searchName, setSearchName] = useState<RangeName>(RangeName.ALL_TIME);\n    const [searchDates, setSearchDates] = useState<SearchDates>(allTimeDates);\n\n    useEffect(() => {\n        (async () => {\n            setLoading(true);\n            const data = await reportingQuery(searchDates);\n            setLoading(false);\n            setReport(data);\n        })();\n    }, [searchName, searchDates]);\n\n    const onChange = (e: ChangeEvent<{ value: unknown }>) => {\n        if (e.target.value === RangeName.ALL_TIME) {\n            setSearchName(RangeName.ALL_TIME);\n            setSearchDates(allTimeDates);\n        } else if (e.target.value === RangeName.LAST_MONTH) {\n            setSearchName(RangeName.LAST_MONTH);\n            setSearchDates(lastMonthDates);\n        } else {\n            throw new Error('Range selection not found');\n        }\n    };\n\n    return (\n        <div>\n            <Box\n                pb={2}\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"space-between\"\n            >\n                <HeaderText>Reporting</HeaderText>\n                <Select value={searchName} onChange={onChange}>\n                    <MenuItem value={RangeName.ALL_TIME}>All time</MenuItem>\n                    <MenuItem value={RangeName.LAST_MONTH}>\n                        Last 30 days\n                    </MenuItem>\n                </Select>\n            </Box>\n            {loading || !report ? (\n                <Loading />\n            ) : (\n                <Grid container spacing={2}>\n                    <Grid item xs={12} md={6}>\n                        <SectionText>Top cards sold by name</SectionText>\n                        <TableContainer component={Paper} variant=\"outlined\">\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>\n                                            <b>Quantity sold</b>\n                                        </TableCell>\n                                        <TableCell>\n                                            <b>Card name</b>\n                                        </TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {report.countByCardName.map((c) => (\n                                        <TableRow key={uniqueId()}>\n                                            <TableCell>{c.count}</TableCell>\n                                            <TableCell>\n                                                {c.card_title}\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <SectionText>\n                            Top cards sold by a single printing\n                        </SectionText>\n                        <TableContainer component={Paper} variant=\"outlined\">\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>\n                                            <b>Quantity sold</b>\n                                        </TableCell>\n                                        <TableCell>\n                                            <b>Card name</b>\n                                        </TableCell>\n                                        <TableCell>\n                                            <b>Set name</b>\n                                        </TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {report.countByPrinting.map((c) => (\n                                        <TableRow key={uniqueId()}>\n                                            <TableCell>{c.count}</TableCell>\n                                            <TableCell>\n                                                {c.card_title}\n                                            </TableCell>\n                                            <TableCell>\n                                                {c.card_metadata.set_name}\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Grid>\n                </Grid>\n            )}\n        </div>\n    );\n};\n\nexport default Reporting;\n","import React, { FC } from 'react';\nimport { Divider, List, ListItem, ListItemIcon } from '@material-ui/core';\nimport { useLocation, Link as RouterLink } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport ListAltIcon from '@material-ui/icons/ListAlt';\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\n\nconst NavLinks: FC<{}> = () => {\n    const { pathname } = useLocation();\n\n    return (\n        <List>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/manage-inventory\"\n                selected={pathname === '/manage-inventory'}\n                replace\n            >\n                <ListItemIcon>\n                    <AddIcon color=\"primary\" />\n                </ListItemIcon>\n                Manage Inventory\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/new-sale\"\n                selected={pathname === '/new-sale'}\n                replace\n            >\n                <ListItemIcon>\n                    <AttachMoneyIcon color=\"primary\" />\n                </ListItemIcon>\n                New Sale\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/receiving\"\n                selected={pathname === '/receiving'}\n                replace\n            >\n                <ListItemIcon>\n                    <ListAltIcon color=\"primary\" />\n                </ListItemIcon>\n                Receiving\n            </ListItem>\n            <Divider />\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/browse-inventory\"\n                selected={pathname === '/browse-inventory'}\n                replace\n            >\n                <ListItemIcon>\n                    <BusinessCenterIcon color=\"primary\" />\n                </ListItemIcon>\n                Browse Inventory\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/browse-sales\"\n                selected={pathname === '/browse-sales'}\n                replace\n            >\n                <ListItemIcon>\n                    <VisibilityIcon color=\"primary\" />\n                </ListItemIcon>\n                Browse Sales\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/browse-receiving\"\n                selected={pathname === '/browse-receiving'}\n                replace\n            >\n                <ListItemIcon>\n                    <ViewListIcon color=\"primary\" />\n                </ListItemIcon>\n                Browse Receiving\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/reporting\"\n                selected={pathname === '/reporting'}\n                replace\n            >\n                <ListItemIcon>\n                    <EqualizerIcon color=\"primary\" />\n                </ListItemIcon>\n                Reporting (Beta)\n            </ListItem>\n            <Divider />\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/logout\"\n                selected={pathname === '/logout'}\n                replace\n            >\n                <ListItemIcon>\n                    <ExitToAppIcon color=\"primary\" />\n                </ListItemIcon>\n                Log Out\n            </ListItem>\n        </List>\n    );\n};\n\nexport default NavLinks;\n","import React, { FC, useState } from 'react';\nimport {\n    AppBar,\n    Box,\n    Drawer,\n    Grid,\n    IconButton,\n    makeStyles,\n    Toolbar,\n    Typography,\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { ClubhouseLocation, useAuthContext } from '../context/AuthProvider';\nimport NavLinks from './NavLinks';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport { version } from '../../package.json';\n\nconst useStyles = makeStyles(({ spacing, typography, palette }) => ({\n    title: {\n        flexGrow: 1,\n    },\n    menuLinkText: {\n        fontWeight: typography.fontWeightBold,\n        '&:hover': {\n            color: palette.common.white,\n        },\n    },\n    list: {\n        width: 250,\n    },\n    menuButton: {\n        marginRight: spacing(2),\n    },\n}));\n\n// TODO: This information needs to be populated on the backend via a collection of shop entities\nconst getClubhouseLocationName = (location: ClubhouseLocation | null) => {\n    if (location === 'ch1') return 'Beaverton';\n    if (location === 'ch2') return 'Hillsboro';\n    return '';\n};\n\nconst NavBar: FC<{}> = () => {\n    const { loggedIn, currentLocation, currentUser } = useAuthContext();\n    const [drawerOpen, setDrawerOpen] = useState<boolean>(false);\n    const { title, list, menuButton, menuLinkText } = useStyles();\n\n    return (\n        <AppBar>\n            <Toolbar>\n                {loggedIn && (\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        className={menuButton}\n                        onClick={() => setDrawerOpen(true)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                )}\n                <div className={title}>\n                    <Typography\n                        color=\"inherit\"\n                        className={menuLinkText}\n                        component={RouterLink}\n                        variant=\"h6\"\n                        to=\"/\"\n                    >\n                        Clubhouse Collection\n                    </Typography>\n                </div>\n                <Typography\n                    color=\"inherit\"\n                    className={menuLinkText}\n                    component={RouterLink}\n                    variant=\"button\"\n                    to=\"/public-inventory\"\n                >\n                    Search cards\n                </Typography>\n                <Drawer\n                    anchor=\"left\"\n                    open={drawerOpen}\n                    onClose={() => setDrawerOpen(false)}\n                >\n                    <Box\n                        py={2}\n                        display=\"flex\"\n                        flexDirection=\"column\"\n                        justifyContent=\"space-between\"\n                        height={1}\n                    >\n                        <div>\n                            <Grid\n                                container\n                                direction=\"row\"\n                                alignItems=\"center\"\n                                justify=\"center\"\n                            >\n                                <LocationOnIcon color=\"primary\" />\n                                <Typography color=\"primary\" variant=\"h6\">\n                                    {getClubhouseLocationName(currentLocation)}\n                                </Typography>\n                            </Grid>\n                            <Typography color=\"textSecondary\" align=\"center\">\n                                Logged in as {currentUser}\n                            </Typography>\n                            <div\n                                className={list}\n                                onClick={() => setDrawerOpen(false)}\n                            >\n                                <NavLinks />\n                            </div>\n                        </div>\n                        <Typography color=\"textSecondary\" align=\"center\">\n                            Version {version}\n                        </Typography>\n                    </Box>\n                </Drawer>\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nexport default NavBar;\n","import Axios from 'axios';\nimport { GET_REPORT } from '../utils/api_resources';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { ScryfallApiCard } from '../utils/ScryfallCard';\n\nexport interface ResponseData {\n    countByPrinting: Array<{\n        count: number;\n        card_title: string;\n        scryfall_id: string;\n        card_metadata: ScryfallApiCard;\n    }>;\n    countByCardName: Array<{\n        count: number;\n        card_title: string;\n    }>;\n}\n\ninterface Args {\n    startDate: string;\n    endDate: string;\n}\n\nconst reportingQuery = async ({ startDate, endDate }: Args) => {\n    try {\n        const { data } = await Axios.get<ResponseData>(GET_REPORT, {\n            params: { startDate, endDate },\n            headers: makeAuthHeader(),\n        });\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default reportingQuery;\n","import React, { FC } from 'react';\nimport AuthProvider from './context/AuthProvider';\nimport { Switch, Route } from 'react-router-dom';\nimport ManageInventory from './ManageInventory/ManageInventory';\nimport Sale from './Sale/Sale';\nimport BrowseSales from './BrowseSales/BrowseSales';\nimport PublicInventory from './PublicInventory/PublicInventory';\nimport BrowseInventory from './BrowseInventory/BrowseInventory';\nimport Login from './Login/Login';\nimport Logout from './Logout/Logout';\nimport Receiving from './Receiving/Receiving';\nimport { SaleProvider } from './context/SaleContext';\nimport ReceivingProvider from './context/ReceivingContext';\nimport InventoryProvider from './context/InventoryContext';\nimport AdminRoute from './AuthenticatedRoute';\nimport Home from './LandingPage/Home';\nimport BrowseReceiving from './BrowseReceiving/BrowseReceiving';\nimport { createMuiTheme, makeStyles, ThemeProvider } from '@material-ui/core';\nimport NavBar from './NavBar/NavBar';\nimport Reporting from './Reporting/Reporting';\n\nconst useStyles = makeStyles(({ spacing }) => ({\n    contentContainer: {\n        paddingTop: spacing(10),\n        marginLeft: spacing(3),\n        marginRight: spacing(3),\n    },\n    backgroundColor: {\n        backgroundColor: '#f9fafb',\n        minHeight: '100vh',\n    },\n}));\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#2185d0',\n        },\n    },\n});\n\nconst App: FC = () => {\n    const { backgroundColor, contentContainer } = useStyles();\n\n    return (\n        <AuthProvider>\n            <ThemeProvider theme={theme}>\n                <NavBar />\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n                    <div className={backgroundColor}>\n                        <div className={contentContainer}>\n                            <AdminRoute exact path=\"/manage-inventory\">\n                                <InventoryProvider>\n                                    <ManageInventory />\n                                </InventoryProvider>\n                            </AdminRoute>\n                            <AdminRoute exact path=\"/new-sale\">\n                                <SaleProvider>\n                                    <Sale />\n                                </SaleProvider>\n                            </AdminRoute>\n                            <AdminRoute exact path=\"/receiving\">\n                                <ReceivingProvider>\n                                    <Receiving />\n                                </ReceivingProvider>\n                            </AdminRoute>\n                            <AdminRoute exact path=\"/browse-sales\">\n                                <BrowseSales />\n                            </AdminRoute>\n                            <AdminRoute exact path=\"/browse-inventory\">\n                                <BrowseInventory />\n                            </AdminRoute>\n                            <AdminRoute exact path=\"/browse-receiving\">\n                                <BrowseReceiving />\n                            </AdminRoute>\n                            <Route\n                                exact\n                                path=\"/public-inventory\"\n                                component={PublicInventory}\n                            />\n                            <Route\n                                exact\n                                path=\"/reporting\"\n                                component={Reporting}\n                            />\n                            <Route exact path=\"/login\" component={Login} />\n                            <Route exact path=\"/logout\" component={Logout} />\n                        </div>\n                    </div>\n                </Switch>\n            </ThemeProvider>\n        </AuthProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport '@fontsource/roboto';\n\nReactDOM.render(\n    <HashRouter basename=\"/\">\n        <App />\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}