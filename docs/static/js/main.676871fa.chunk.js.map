{"version":3,"sources":["Header/logos/magic-ball.png","utils/api_resources.ts","utils/makeAuthHeader.ts","context/loginQuery.ts","context/AuthProvider.tsx","Header/AppVersion.tsx","Header/Header.tsx","common/autocompleteQuery.ts","common/SearchBar.tsx","ManageInventory/allLocationInventoryQuery.ts","ManageInventory/AllLocationInventory.tsx","utils/createDisplayName.ts","utils/getCardImage.ts","utils/ScryfallCard.ts","context/cardSearchQuery.ts","context/InventoryContext.tsx","common/createToast.tsx","common/CardImage.tsx","utils/dropdownOptions.ts","utils/checkCardFinish.ts","utils/finishCondition.ts","utils/parseQoh.ts","common/QohLabels.tsx","common/Language.tsx","common/marketPriceQuery.ts","common/MarketPrice.tsx","ui/SetIcon.tsx","ui/CardHeader.tsx","ManageInventory/addCardToInventoryQuery.ts","ManageInventory/ManageInventoryListItem.tsx","ManageInventory/ManageInventory.tsx","context/getSuspendedSaleQuery.ts","context/deleteSuspendedSaleQuery.ts","context/createSuspendedSaleQuery.ts","context/finishSaleQuery.tsx","context/SaleContext.tsx","utils/sortSaleList.ts","NewSale/BrowseCardItem.tsx","NewSale/BrowseCardList.tsx","utils/price.ts","common/Price.tsx","ui/CardImageTooltip.tsx","NewSale/SaleLineItem.tsx","utils/sum.ts","NewSale/SalePriceTotal.tsx","NewSale/FinishSale.tsx","NewSale/CustomerSaleList.tsx","NewSale/PrintList.tsx","NewSale/getSuspendedSalesQuery.ts","NewSale/SuspendedSale.tsx","utils/pluralize.ts","common/TotalCardsLabel.tsx","NewSale/Sale.tsx","utils/formatDate.ts","BrowseSales/SalesListItem.tsx","BrowseSales/SalesList.tsx","BrowseSales/browseSalesQuery.ts","BrowseSales/BrowseSales.tsx","PublicInventory/PublicCardItem.tsx","PublicInventory/publicCardSearchQuery.ts","PublicInventory/PublicInventory.tsx","ui/FormikSelectField.tsx","ui/FormikDropdown.tsx","context/ReceivingContext.tsx","DeckboxClone/setNameQuery.ts","DeckboxClone/DeckboxCloneForm.tsx","DeckboxClone/DeckboxCloneRow.tsx","DeckboxClone/filteredCardsQuery.ts","DeckboxClone/DeckboxClone.tsx","Login/Login.tsx","Logout/Logout.tsx","context/receivingQuery.tsx","Receiving/ReceivingSearchItem.tsx","Receiving/DefaultPlaceholder.tsx","Receiving/ReceivingListItem.tsx","Receiving/CashReport.tsx","Receiving/ReceivingListModal.tsx","Receiving/ReceivingListTotals.tsx","Receiving/printCashReport.ts","Receiving/ReceivingList.tsx","Receiving/Receiving.tsx","AuthenticatedRoute.tsx","LandingPage/clubhouse_products.png","LandingPage/tables.jpg","LandingPage/learn_to_play.jpg","LandingPage/ch2.jpg","LandingPage/Home.tsx","BrowseReceiving/browseReceivingQuery.ts","ui/MetaData.tsx","utils/displayEmpty.ts","BrowseReceiving/receivedByIdQuery.ts","ui/Loading.tsx","BrowseReceiving/ReceivingListDialog.tsx","BrowseReceiving/ReceivingListItem.tsx","ui/FormikSearchBar.tsx","ui/FormikNativeDatePicker.tsx","BrowseReceiving/BrowseReceiving.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["REACT_APP_ENVIRONMENT","process","env","getPrefix","FINISH_SALE","GET_CARD_FROM_ALL_LOCATIONS","ADD_CARD_TO_INVENTORY","RECEIVE_CARDS","GET_CARDS_BY_FILTER","GET_SET_NAMES","SUSPEND_SALE","LOGIN","GET_SALES_BY_TITLE","RECEIVING","GET_CARDS_WITH_INFO_PUBLIC","GET_CARDS_WITH_INFO","AUTOCOMPLETE","GET_LIVE_PRICE","makeAuthHeader","Authorization","localStorage","getItem","loginQuery","username","password","currentLocation","a","axios","post","toLowerCase","headers","data","AuthContext","React","createContext","loggedIn","currentUser","handleLogout","handleLogin","Promise","useAuthContext","useContext","AuthProvider","children","useState","setLoggedIn","setCurrentLocation","setCurrentUser","token","setItem","console","log","Provider","value","removeItem","VersionNumber","styled","display","alignItems","padding","color","AppVersion","version","StyledMenu","Menu","boxShadow","Header","location","pathname","useLocation","inverted","fixed","Item","as","Link","replace","to","src","ballLogo","style","marginRight","alt","position","active","Dropdown","item","icon","Icon","name","Divider","autocompleteQuery","cardName","get","params","title","SearchBar","handleSearchSelect","onBlur","loading","setLoading","results","setResults","handleResultSelect","_","result","setTimeout","$","select","Search","onSearchChange","debounce","length","formattedResults","map","el","leading","trailing","onResultSelect","placeholder","selectFirstResult","id","onFocus","e","target","allLocationInventoryQuery","StyledContainer","FlexContainer","marginLeft","QohLabel","label","Label","undefined","image","Detail","AllLocationInventory","searchResults","ch1","foilQty","nonfoilQty","ch2","quantities","setQuantities","useEffect","Loader","inline","size","sub","createDisplayName","card","frame_effects","border_color","lang","set","foil","nonfoil","promo_types","displayName","includes","toUpperCase","getCardImage","myImage","image_uris","normal","card_faces","ScryfallCard","printed_name","set_name","rarity","colors","type_line","display_name","cardImage","color_identity","tcgplayer_id","qoh","this","cardSearchQuery","inStockOnly","matchInStock","d","InventoryContext","changeCardQuantity","InventoryProvider","setSearchResults","term","cards","copiedState","targetIndex","findIndex","ToastContainer","Message","createToast","header","message","duration","toaster","notify","compact","StyledImage","Image","zIndex","transition","CardImage","hover","hovered","setHovered","onMouseOver","onMouseOut","transform","finishes","key","text","cardConditions","checkCardFinish","selectedFinish","finishDisabled","displayFinishCondition","finishCondition","FOIL_NM","FOIL_LP","FOIL_MP","FOIL_HP","NONFOIL_NM","NONFOIL_LP","NONFOIL_MP","NONFOIL_HP","parseQoh","createInventoryLineItems","inventoryQty","matchStrings","matches","quantity","filter","m","LabelWithPopup","popupLineItems","Popup","content","msg","trigger","QohLabels","foilQuantity","nonfoilQuantity","foilLineItems","nonfoilLineItems","LANG_CODES","en","es","fr","de","it","pt","ja","ko","ru","zhs","zht","he","la","grc","ar","sa","px","Language","languageCode","marketPriceQuery","scryfallId","Axios","marketPrices","medianPrices","LabelStyle","props","displayPrice","price","toFixed","MarketPrice","finish","round","showMid","market","setMarket","median","setMedian","isFoil","_isMounted","Number","n","loader","Math","ceil","StyledIcon","fontSize","SetIcon","rarityClass","className","TcgPriceButton","tcgId","tcgUrl","Button","disabled","labelPosition","href","CardHeader","addCardToInventoryQuery","payload","ManageInventoryListItem","setSelectedFinish","initialFormValues","selectedCondition","onSubmit","resetForm","parseInt","cardInfo","focus","Segment","Group","divided","Content","Description","initialValues","validate","errors","isInteger","initialErrors","values","handleSubmit","setFieldValue","isSubmitting","isValid","Form","Field","control","Input","type","onChange","Select","options","primary","onClick","HeaderContainer","justifyContent","ManageInventory","getSuspendedSaleQuery","saleId","deleteSuspendedSaleQuery","delete","createSuspendedSaleQuery","finishSaleQuery","defaultSuspendedSale","_id","notes","list","SaleContext","saleListCards","suspendedSale","addToSaleList","removeFromSaleList","restoreSale","suspendSale","deleteSuspendedSale","finalizeSale","resetSaleState","SaleProvider","setSaleListCards","setSuspendedSale","sale","modeledData","c","response","customerName","saleList","ops","sale_data","Sale","saleID","qtyToSell","oldState","newCard","idx","splice","push","ORDER","helpSort","arrayConst","colorsLength","cardFace","sort","b","localeCompare","indexOf","sortSaleList","newState","createConditionOptions","removeZeroedQuantites","pickBy","p","Object","entries","conditionFinish","qty","split","join","createInitialSelectedFinish","keysMapped","keys","k","uniq","BrowseCardItem","selectedFinishCondition","setSelectedFinishCondition","selectedFinishConditionQty","setSelectedFinishConditionQty","quantityToSell","setQuantityToSell","setPrice","conditionOptions","setConditionOptions","selection","numVal","isNaN","step","BrowseCardList","val","getPrice","DisplayPrice","num","useStyles","makeStyles","transparentBackground","backgroundColor","borderRounded","borderRadius","CardImageTooltip","Tooltip","placement","classes","tooltip","SaleLineItem","Grid","verticalAlign","Column","tablet","computer","cursor","Price","textAlign","circular","sum","nums","reduce","acc","curr","SalePriceTotal","total","FinishSale","submit","setSubmit","showModal","setShowModal","handleFinalizeSale","modalTrigger","floated","Modal","basic","open","Actions","CustomerSaleList","clearing","PrintWrapper","div","PrintList","componentRef","useRef","handlePrint","useReactToPrint","current","ref","slc","getSuspendedSalesQuery","ClearMargin","CharLimit","SuspendSales","saleListLength","sales","setSales","setSaleID","modalOpen","setModalOpen","setCustomerName","setNotes","setDisabled","suspendBtn","restoreBtn","deleteBtn","loadingBtn","setLoadingBtn","getSales","suspendedSales","clearFields","submitSuspendSale","submitRestoreSale","submitDeleteSale","Fragment","columns","stackable","relaxed","width","substring","TextArea","fluid","s","info","pluralize","word","TotalCardsLabel","listLength","ButtonContainer","searchTerm","setSearchTerm","Row","formatDate","date","moment","format","SalesListItem","card_list","quantitySold","Table","Cell","createTime","SalesList","celled","unstackable","HeaderCell","Body","browseSalesQuery","BrowseSales","salesList","setSalesList","setCardName","Wrapper","InventoryWrapper","InventoryRow","ImageWrapper","cardImageRatio","SurImage","PublicCardItem","publicCardSearchQuery","GridContainer","gridGap","gridTemplateColumns","justifyItems","StyledFormGroup","initialState","selectedLocation","initialFormState","locationOptions","PublicInventory","state","setState","formSubmitted","setFormSubmitted","fetchCards","widths","Subheader","FormikSelectField","field","form","FormikDropdown","Trade","setNameQuery","formatDropdownOptions","priceOperatorDropdownOptions","finishDropdownOptions","sortByDropdownOptions","sortByDirectionDropdownOptions","sortByColorDropdownOptions","colorSpecificityDropdownOptions","typeLineOptions","frameOptions","initialFilters","setName","priceOperator","sortBy","colorsArray","sortByDirection","colorSpecificity","typeLine","frame","DeckboxCloneForm","doSubmit","editionDropdownOptions","setEditionDropdownOptions","names","setNameOptions","concatWithBlankOption","handleChange","event","element","component","search","multiple","defaultValue","conditionMap","NM","LP","MP","HP","DeckboxCloneRow","quantityInStock","image_uri","condition","filteredCardsQuery","filters","page","DeckboxClone","count","currentPage","numPages","isLoading","cachedFilters","showPages","searchTouched","fetchData","pages","range","slice","showLeftPageButtons","showRightPageButtons","Container","Dimmer","marginTop","secondary","striped","colSpan","Footer","LoginContainer","FormContainer","Login","raised","Logout","receivingQuery","customerContact","TRADE_TYPES","CASH","Cash","CREDIT","Credit","defaultContext","receivingList","addToList","removeFromList","activeTradeType","selectAll","commitToInventory","resetSearchResults","ReceivingContext","ReceivingProvider","setReceivingList","cardsToCommit","creditPrice","cashPrice","marketPrice","tradeType","previousState","cardsToAdd","Array","uuid_key","uuid","selectType","ReceivingSearchItem","setQuantity","setCashPrice","setCreditPrice","setSelectedCondition","setMarketPrice","handlePriceChange","handleFocus","validateQty","validateTradeTypes","submitDisabled","DefaultPlaceholder","TRADE_TYPE","ReceivingListItem","whiteSpace","CashReport","countByPriceAndID","chain","temp_uuid","groupBy","mapValues","mergedWithQty","uniqBy","tradeQty","totalCashOut","sumBy","ReceivingListModal","useFormik","cashTotal","creditTotal","closeOnDimmerClick","onClose","scrolling","List","error","FlexRow","FlexCol","StatisticColor","Statistic","ReceivingListTotals","showCashModal","setShowCashModal","Or","divToPrint","document","getElementById","popup","window","write","innerHTML","close","printCashReport","Value","ReceivingList","Receiving","AdminOnly","AdminRoute","light","main","dark","primaryRgb","desktopMediaQuery","tabletMediaQuery","HeroImageContainer","height","rounded","LocationImageContainer","ImageGradient","backgroundImage","ImageGradient2","HeroText","HeaderText","h1","SectionText","SubheaderText","flexDirection","ServicesContainer","gridTemplateRows","LocationsContainer","LocationContainer","TextWidth","IconContainer","SectionDivider","bottom","paddingLeft","paddingBottom","paddingRight","paddingTop","justify","Home","learn_to_play","clubhouse_products","rel","link","browseReceivingQuery","startDate","endDate","meta","MetaData","displayEmpty","str","receivedByIdQuery","receivedId","Loading","Box","py","CircularProgress","ReceivingListDialog","setData","Dialog","maxWidth","fullWidth","DialogTitle","DialogContent","arr","received_cards","created_at","created_by","customer_name","customer_contact","Typography","bulk_card_data","trade","modeledCard","ListItem","ListItemText","DialogActions","variant","received","dialogOpen","setDialogOpen","received_card_list","r","Card","CardActionArea","disableRipple","CardContent","container","spacing","FormikSearchBar","FormikNativeDatePicker","min","max","subtract","BrowseReceiving","receivedList","setReceivedList","pb","direction","rl","xs","md","ContentContainer","BackgroundColor","theme","createMuiTheme","palette","App","ThemeProvider","exact","path","Boolean","hostname","match","ReactDOM","render","basename","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.676871fa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/magic-ball.85c86bd8.png\";","// Maps all GCF and Scryfall API endpoints for code re-use\nconst { REACT_APP_ENVIRONMENT } = process.env;\n\n/**\n * Check the environment for dev - if dev, we reach out\n * to all endpoints appended by `_test` instead of production\n */\nconst env = REACT_APP_ENVIRONMENT === 'development' ? '_test' : '';\n\n/**\n * Asserts the development env and returns the proper path prefix for resources\n */\nconst getPrefix = () => {\n    return REACT_APP_ENVIRONMENT === 'development'\n        ? 'http://localhost:7331'\n        : 'https://clubhouse-collection.appspot.com';\n};\n\nexport const FINISH_SALE = `${getPrefix()}/auth/finishSale`;\nexport const GET_CARD_FROM_ALL_LOCATIONS = `${getPrefix()}/getCardFromAllLocations`;\nexport const ADD_CARD_TO_INVENTORY = `${getPrefix()}/auth/addCardToInventory`;\nexport const RECEIVE_CARDS = `${getPrefix()}/auth/receiveCards`;\nexport const GET_CARDS_BY_FILTER = `${getPrefix()}/auth/getCardsByFilter`;\nexport const GET_SET_NAMES = `${getPrefix()}/auth/getDistinctSetNames`;\nexport const SUSPEND_SALE = `${getPrefix()}/auth/suspendSale`;\nexport const LOGIN = `${getPrefix()}/jwt`;\nexport const GET_SALES_BY_TITLE = `${getPrefix()}/auth/getSaleByTitle`;\nexport const RECEIVING = `${getPrefix()}/auth/getReceivedCards`;\nexport const GET_ALL_SALES = `${getPrefix()}/auth/allSales`;\nexport const GET_CARDS_WITH_INFO_PUBLIC = `${getPrefix()}/getCardsWithInfo`;\nexport const GET_CARDS_WITH_INFO = `${getPrefix()}/auth/getCardsWithInfo`;\nexport const AUTOCOMPLETE = `${getPrefix()}/autocomplete`;\nexport const SCRYFALL_SEARCH = 'https://api.scryfall.com/cards/search';\nexport const GET_LIVE_PRICE = `https://us-central1-clubhouse-collection.cloudfunctions.net/getPriceFromTcg${env}`;\n","/**\n * This function is a helper for Axios, it yields an object for Axios params\n */\nexport default function makeAuthHeader() {\n    const header = {\n        Authorization: `Bearer ${localStorage.getItem('clubhouse_JWT')}`,\n    };\n    return header;\n}\n","import axios from 'axios';\nimport { LOGIN } from '../utils/api_resources';\nimport makeAuthHeader from '../utils/makeAuthHeader';\n\ntype ClubhouseLocation = 'ch1' | 'ch2';\n\ninterface ResponseData {\n    token: string;\n}\n\nconst loginQuery = async (\n    username: string,\n    password: string,\n    currentLocation: ClubhouseLocation\n) => {\n    try {\n        const { data } = await axios.post<ResponseData>(\n            LOGIN,\n            {\n                username: username.toLowerCase(),\n                password,\n                currentLocation,\n            },\n            { headers: makeAuthHeader() }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default loginQuery;\n","import React, { FC, useContext, useState } from 'react';\nimport loginQuery from './loginQuery';\n\ninterface Props {}\n\nexport type ClubhouseLocation = 'ch1' | 'ch2';\n\ninterface Context {\n    loggedIn: boolean;\n    handleLogin: (\n        username: string,\n        password: string,\n        currentLocation: ClubhouseLocation\n    ) => Promise<any>;\n    handleLogout: () => void;\n    currentLocation: ClubhouseLocation | null;\n    currentUser: string | null;\n}\n\nexport const AuthContext = React.createContext<Context>({\n    loggedIn: false,\n    currentLocation: null,\n    currentUser: null,\n    handleLogout: () => null,\n    handleLogin: () => new Promise(() => null),\n});\n\nexport const useAuthContext = () => useContext(AuthContext);\n\nconst AuthProvider: FC<Props> = ({ children }) => {\n    const [loggedIn, setLoggedIn] = useState(\n        !!localStorage.getItem('clubhouse_JWT')\n    );\n\n    const [\n        currentLocation,\n        setCurrentLocation,\n    ] = useState<ClubhouseLocation | null>(\n        localStorage.getItem('currentLocation') as ClubhouseLocation\n    );\n\n    const [currentUser, setCurrentUser] = useState<string | null>(\n        localStorage.getItem('currentUser')\n    );\n\n    const handleLogin = async (\n        username: string,\n        password: string,\n        currentLocation: ClubhouseLocation\n    ) => {\n        try {\n            const data = await loginQuery(username, password, currentLocation);\n\n            if (data.token) {\n                localStorage.setItem('clubhouse_JWT', data.token);\n                setLoggedIn(!!localStorage.getItem('clubhouse_JWT'));\n\n                localStorage.setItem('currentLocation', currentLocation);\n                setCurrentLocation(currentLocation);\n\n                localStorage.setItem('currentUser', username);\n                setCurrentUser(username);\n            }\n\n            return data;\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const handleLogout = () => {\n        localStorage.removeItem('clubhouse_JWT');\n        setLoggedIn(!!localStorage.getItem('clubhouse_JWT'));\n\n        localStorage.removeItem('currentLocation');\n        setCurrentLocation(null);\n\n        localStorage.removeItem('currentUser');\n        setCurrentUser(null);\n    };\n\n    return (\n        <AuthContext.Provider\n            value={{\n                loggedIn,\n                currentLocation,\n                currentUser,\n                handleLogin,\n                handleLogout,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport default AuthProvider;\n","import { FC } from 'react';\nimport styled from 'styled-components';\nimport { version } from '../../package.json';\n\nconst VersionNumber = styled('div')({\n    display: 'flex',\n    alignItems: 'center',\n    padding: '10px',\n    color: 'rgba(255,255,255,0.4)',\n});\n\nconst AppVersion: FC = () => {\n    return <VersionNumber>v{version}</VersionNumber>;\n};\n\nexport default AppVersion;\n","import React, { FC } from 'react';\nimport ballLogo from './logos/magic-ball.png';\nimport { Menu, Icon, Dropdown } from 'semantic-ui-react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { ClubhouseLocation, useAuthContext } from '../context/AuthProvider';\nimport styled from 'styled-components';\nimport AppVersion from './AppVersion';\n\nconst StyledMenu = styled(Menu)({\n    boxShadow: '0 3px 5px 0 rgba(0,0,0,.25) !important',\n});\n\nconst getClubhouseLocationName = (location: ClubhouseLocation | null) => {\n    if (location === 'ch1') return 'Beaverton';\n    if (location === 'ch2') return 'Hillsboro';\n    return '';\n};\n\ninterface Props {}\n\nconst Header: FC<Props> = () => {\n    const { loggedIn, currentLocation, currentUser } = useAuthContext();\n    const { pathname } = useLocation();\n\n    return (\n        <StyledMenu inverted fixed=\"top\" color=\"blue\">\n            <Menu.Item as={Link} replace to=\"/\">\n                <img src={ballLogo} style={{ marginRight: '7px' }} alt=\"logo\" />\n                <span>\n                    <h3>\n                        Clubhouse Collection{' '}\n                        {getClubhouseLocationName(currentLocation)}\n                    </h3>\n                </span>\n            </Menu.Item>\n            {currentUser && (\n                <>\n                    <Menu.Item>\n                        <span>\n                            Currently logged in as <b>{currentUser}</b>\n                        </span>\n                    </Menu.Item>\n                    <AppVersion />\n                </>\n            )}\n            <Menu.Menu position=\"right\">\n                <Menu.Item\n                    active={pathname === '/public-inventory'}\n                    position=\"right\"\n                    as={Link}\n                    replace\n                    to=\"/public-inventory\"\n                >\n                    Search\n                </Menu.Item>\n                {loggedIn && (\n                    <Dropdown item icon=\"bars\">\n                        <Dropdown.Menu>\n                            <Dropdown.Item\n                                active={pathname === '/manage-inventory'}\n                                as={Link}\n                                replace\n                                to=\"/manage-inventory\"\n                            >\n                                <Icon name=\"plus\" color=\"blue\" />\n                                Manage Inventory\n                            </Dropdown.Item>\n                            <Dropdown.Item\n                                active={pathname === '/new-sale'}\n                                as={Link}\n                                replace\n                                to=\"/new-sale\"\n                            >\n                                <Icon name=\"dollar sign\" color=\"blue\" />\n                                New Sale\n                            </Dropdown.Item>\n                            <Dropdown.Item\n                                active={pathname === '/receiving'}\n                                as={Link}\n                                replace\n                                to=\"/receiving\"\n                            >\n                                <Icon\n                                    name=\"list alternate outline\"\n                                    color=\"blue\"\n                                />\n                                Receiving\n                            </Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item\n                                active={pathname === '/browse-inventory'}\n                                as={Link}\n                                replace\n                                to=\"/browse-inventory\"\n                            >\n                                <Icon name=\"box\" color=\"blue\" />\n                                Browse Inventory\n                            </Dropdown.Item>\n                            <Dropdown.Item\n                                active={pathname === '/browse-sales'}\n                                as={Link}\n                                replace\n                                to=\"/browse-sales\"\n                            >\n                                <Icon name=\"eye\" color=\"blue\" />\n                                Browse Sales\n                            </Dropdown.Item>\n                            <Dropdown.Item\n                                active={pathname === '/browse-receiving'}\n                                as={Link}\n                                replace\n                                to=\"/browse-receiving\"\n                            >\n                                <Icon name=\"list layout\" color=\"blue\" />\n                                Browse Receiving\n                            </Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item\n                                active={pathname === '/logout'}\n                                as={Link}\n                                replace\n                                to=\"/logout\"\n                            >\n                                <Icon name=\"log out\" color=\"blue\" />\n                                Log out\n                            </Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                )}\n            </Menu.Menu>\n        </StyledMenu>\n    );\n};\n\nexport default Header;\n","import axios from 'axios';\nimport { AUTOCOMPLETE } from '../utils/api_resources';\n\nconst autocompleteQuery = async (cardName: string) => {\n    try {\n        const { data } = await axios.get<string[]>(AUTOCOMPLETE, {\n            params: {\n                title: cardName,\n            },\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default autocompleteQuery;\n","import React, { FC, SyntheticEvent, useState } from 'react';\nimport { Search, SearchProps, SearchResultData } from 'semantic-ui-react';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport autocompleteQuery from './autocompleteQuery';\n\ninterface Props {\n    handleSearchSelect: (result: string) => void;\n    onBlur?: (event: SyntheticEvent, data: SearchProps) => void;\n}\n\nconst SearchBar: FC<Props> = ({ handleSearchSelect, onBlur }) => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [results, setResults] = useState<{ title: string }[]>([]);\n\n    // `value` is the search input string\n    const handleSearchChange = (_: SyntheticEvent, { value }: SearchProps) => {\n        if (!value) return;\n\n        if (value.length < 1) {\n            setLoading(false);\n            setResults([]);\n            return;\n        }\n\n        if (value.length < 3) return; // Don't search if only 2 letters in input\n\n        setLoading(true);\n\n        setTimeout(async () => {\n            const data = await autocompleteQuery(value);\n            const formattedResults = data.map((el) => ({ title: el }));\n            setResults(formattedResults);\n            setLoading(false);\n        }, 100);\n    };\n\n    const handleResultSelect = async (\n        _: SyntheticEvent,\n        { result }: SearchResultData\n    ) => {\n        // This line is a hacky way to get around the fact that if we just select(), then\n        // when the user manually clicks the first (or any) result in the resultlist, it does not select,\n        // presumably because there is some collision between selecting the resultList element and focusing the input\n        setTimeout(() => $('#searchBar').select(), 10);\n        try {\n            setLoading(true);\n            await handleSearchSelect(result.title);\n            setLoading(false);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    return (\n        <Search\n            onSearchChange={_.debounce(handleSearchChange, 500, {\n                leading: false,\n                trailing: true,\n            })}\n            onResultSelect={handleResultSelect}\n            loading={loading}\n            results={results}\n            placeholder=\"Enter a card title\"\n            selectFirstResult={true}\n            id=\"searchBar\"\n            onFocus={(e) => (e.target as HTMLInputElement).select()}\n            onBlur={onBlur} // Used to clear state in the Browse Inventory feature\n        />\n    );\n};\n\nexport default SearchBar;\n","import axios from 'axios';\nimport { GET_CARD_FROM_ALL_LOCATIONS } from '../utils/api_resources';\n\ninterface Quantities {\n    foilQty: number;\n    nonfoilQty: number;\n}\n\nexport interface ResponseData {\n    ch1: Quantities;\n    ch2: Quantities;\n}\n\ninterface Payload {\n    title: string;\n}\n\n/**\n * Fetches total inventory for the given card name across all store locations\n */\nconst allLocationInventoryQuery = async ({ title }: Payload) => {\n    try {\n        const { data } = await axios.get<ResponseData>(\n            GET_CARD_FROM_ALL_LOCATIONS,\n            {\n                params: { title },\n            }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default allLocationInventoryQuery;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Header, Label, Loader } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport allLocationInventoryQuery, {\n    ResponseData,\n} from './allLocationInventoryQuery';\n\nconst StyledContainer = styled('div')({\n    display: 'inline',\n});\n\nconst FlexContainer = styled('div')({\n    display: 'flex',\n    alignItems: 'center',\n    '& > *': {\n        marginLeft: '10px',\n    },\n});\n\ninterface QohLabelProps {\n    label: string;\n    value: number;\n}\n\nconst QohLabel: FC<QohLabelProps> = ({ label, value }) => (\n    <Label color={value > 0 ? 'blue' : undefined} image>\n        {label}\n        <Label.Detail>{value}</Label.Detail>\n    </Label>\n);\n\ninterface AllLocationInventoryProps {\n    title: string;\n    searchResults: ScryfallCard[];\n}\n\n// TODO: refetch on result set change\nconst AllLocationInventory: FC<AllLocationInventoryProps> = ({\n    title,\n    searchResults,\n}) => {\n    const [quantities, setQuantities] = useState<ResponseData>({\n        ch1: { foilQty: 0, nonfoilQty: 0 },\n        ch2: { foilQty: 0, nonfoilQty: 0 },\n    });\n\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                setLoading(true);\n                const data = await allLocationInventoryQuery({ title });\n                setQuantities(data);\n                setLoading(false);\n            } catch (err) {\n                console.log(err);\n            }\n        })();\n    }, [title, searchResults]);\n\n    if (loading) {\n        return (\n            <FlexContainer>\n                <span>Loading totals for all locations</span>\n                <div>\n                    <Loader active inline size=\"small\" />\n                </div>\n            </FlexContainer>\n        );\n    }\n\n    return (\n        <FlexContainer>\n            <div>\n                <Header sub>Beaverton totals:</Header>\n                <StyledContainer>\n                    <QohLabel label=\"Foil\" value={quantities.ch1.foilQty} />\n                    <QohLabel\n                        label=\"Nonfoil\"\n                        value={quantities.ch1.nonfoilQty}\n                    />\n                </StyledContainer>\n            </div>\n            <div>\n                <Header sub>Hillsboro totals:</Header>\n                <StyledContainer>\n                    <QohLabel label=\"Foil\" value={quantities.ch2.foilQty} />\n                    <QohLabel\n                        label=\"Nonfoil\"\n                        value={quantities.ch2.nonfoilQty}\n                    />\n                </StyledContainer>\n            </div>\n        </FlexContainer>\n    );\n};\n\nexport default AllLocationInventory;\n","import { ScryfallCard } from './ScryfallCard';\n\ntype Card = Pick<\n    ScryfallCard,\n    | 'name'\n    | 'frame_effects'\n    | 'border_color'\n    | 'lang'\n    | 'set'\n    | 'foil'\n    | 'nonfoil'\n    | 'promo_types'\n>;\n\n/** Computes the proper displayName for a card, depending on its properties */\nconst createDisplayName = (card: Card) => {\n    const {\n        name,\n        frame_effects,\n        border_color,\n        lang,\n        set,\n        foil,\n        nonfoil,\n        promo_types,\n    } = card;\n\n    let displayName: string = name;\n\n    // Covers strixhaven etched foil mystical archive cards\n    if (set === 'sta' && foil === true && nonfoil === false) {\n        displayName += ` (Etched foil)`;\n    } else if (promo_types.includes('godzillaseries')) {\n        // Covers cards like Godzilla series\n        displayName += ` (IP series)`;\n    } else if (frame_effects.includes('showcase')) {\n        // Covers showcase cards like comic-art Illuna, Apex of Wishes\n        displayName += ` (Showcase)`;\n    } else if (frame_effects.length === 0 && border_color === 'borderless') {\n        // Covers cards like comic-art Vivien, Monsters' Advocate\n        displayName += ` (Borderless)`;\n    } else if (frame_effects.includes('extendedart')) {\n        // Covers cards with extended left and roght border art\n        displayName += ` (Extended art)`;\n    }\n\n    if (lang !== 'en') displayName += ` (${lang.toUpperCase()})`;\n\n    return displayName;\n};\n\nexport default createDisplayName;\n","import { ScryfallCard } from './ScryfallCard';\n\nconst getCardImage = (card: ScryfallCard) => {\n    let myImage: string;\n\n    try {\n        // If normal prop doesn't exist, move to catch block for flip card faces\n        myImage = card.image_uris.normal;\n    } catch (e) {\n        myImage = card.card_faces[0].image_uris.normal;\n    }\n\n    return myImage;\n};\nexport default getCardImage;\n","import createDisplayName from './createDisplayName';\nimport getCardImage from './getCardImage';\n\n// Language codes from Scryfall. See https://scryfall.com/docs/api/languages for reference.\nexport type LanguageCode =\n    | 'en'\n    | 'es'\n    | 'fr'\n    | 'de'\n    | 'it'\n    | 'pt'\n    | 'ja'\n    | 'ko'\n    | 'ru'\n    | 'zhs'\n    | 'zht'\n    | 'he'\n    | 'la'\n    | 'grc'\n    | 'ar'\n    | 'sa'\n    | 'px';\n\nexport type FinishCondition =\n    | 'FOIL_NM'\n    | 'FOIL_LP'\n    | 'FOIL_MP'\n    | 'FOIL_HP'\n    | 'NONFOIL_NM'\n    | 'NONFOIL_LP'\n    | 'NONFOIL_MP'\n    | 'NONFOIL_HP';\n\nexport interface QOH {\n    FOIL_NM: number;\n    FOIL_LP: number;\n    FOIL_MP: number;\n    FOIL_HP: number;\n    NONFOIL_NM: number;\n    NONFOIL_LP: number;\n    NONFOIL_MP: number;\n    NONFOIL_HP: number;\n}\n\nexport interface ImageURIs {\n    normal: string;\n}\n\nexport interface CardFace {\n    colors: string[];\n    type_line: string;\n    color_identity: string[];\n    image_uris: ImageURIs;\n}\n\nexport interface ScryfallApiCard {\n    id: string;\n    name: string;\n    printed_name: string;\n    set: string;\n    set_name: string;\n    rarity: string;\n    image_uris: ImageURIs;\n    card_faces: CardFace[];\n    nonfoil: boolean;\n    foil: boolean;\n    colors: string[];\n    type_line: string;\n    frame_effects: string[];\n    lang: LanguageCode;\n    border_color: string;\n    display_name: string;\n    cardImage: string;\n    color_identity: string[];\n    qoh?: Partial<QOH>;\n    quantity?: number;\n    qtyToSell?: number;\n    finishCondition?: string;\n    price?: number;\n    promo_types?: string[];\n    tcgplayer_id?: number;\n}\n\n/**\n * TODO: We should return this from the API. The backend should control this data shape\n *\n * This class wraps the Scryfall API request data and models it to something we can control.\n * Also acts as a safeguard for any future updates to Scryfall's API data model and makes\n * the code easier to maintain and debug.\n */\nexport class ScryfallCard {\n    public id: string;\n    public name: string;\n    public printed_name: string | null;\n    public set: string;\n    public set_name: string;\n    public rarity: string;\n    public image_uris: { normal: string };\n    public card_faces: CardFace[];\n    public nonfoil: boolean;\n    public foil: boolean;\n    public colors: string[];\n    public type_line: string;\n    public frame_effects: string[];\n    public lang: LanguageCode;\n    public border_color: string;\n    public display_name: string;\n    public cardImage: string;\n    public color_identity: string[];\n    public promo_types: string[];\n    public tcgplayer_id: number | null;\n    public qoh: Partial<QOH>;\n\n    public constructor(card: ScryfallApiCard) {\n        this.id = card.id;\n        this.name = card.name;\n        this.printed_name = card.printed_name || null;\n        this.set = card.set;\n        this.set_name = card.set_name;\n        this.rarity = card.rarity;\n        this.image_uris = card.image_uris || null;\n        this.card_faces = card.card_faces || null;\n        this.nonfoil = card.nonfoil;\n        this.foil = card.foil;\n        this.colors = card.colors;\n        this.type_line = card.type_line;\n        this.frame_effects = card.frame_effects || [];\n        this.lang = card.lang;\n        this.border_color = card.border_color;\n        this.color_identity = card.color_identity || null;\n        this.promo_types = card.promo_types || [];\n        this.cardImage = getCardImage(this);\n        this.display_name = createDisplayName(this);\n        this.tcgplayer_id = card.tcgplayer_id || null;\n        this.qoh = card.qoh ? card.qoh : {};\n    }\n}\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { ScryfallApiCard, ScryfallCard } from '../utils/ScryfallCard';\nimport { GET_CARDS_WITH_INFO } from '../utils/api_resources';\n\ninterface Params {\n    cardName: string;\n    inStockOnly: boolean;\n}\n\n/**\n * Fetches cards from the DB by title when a user selects a title after querying.\n * This function merges the data (inventory quantity and card objects) from two endpoints into one array.\n */\nconst cardSearchQuery = async ({ cardName, inStockOnly }: Params) => {\n    try {\n        const { data } = await axios.get<ScryfallApiCard[]>(\n            GET_CARDS_WITH_INFO,\n            {\n                params: {\n                    title: cardName,\n                    matchInStock: inStockOnly,\n                },\n                headers: makeAuthHeader(),\n            }\n        );\n\n        return data.map((d) => new ScryfallCard(d));\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default cardSearchQuery;\n","import React, { createContext, FC, useState } from 'react';\nimport { QOH, ScryfallCard } from '../utils/ScryfallCard';\nimport cardSearchQuery from './cardSearchQuery';\n\ninterface Props {}\n\ninterface Context {\n    searchResults: ScryfallCard[];\n    changeCardQuantity: (id: string, qoh: Partial<QOH>) => void;\n    handleSearchSelect: (term: string) => void;\n}\n\nexport const InventoryContext = createContext<Context>({\n    searchResults: [],\n    changeCardQuantity: () => null,\n    handleSearchSelect: () => null,\n});\n\nconst InventoryProvider: FC<Props> = ({ children }) => {\n    const [searchResults, setSearchResults] = useState<ScryfallCard[]>([]);\n\n    const handleSearchSelect = async (term: string) => {\n        const cards = await cardSearchQuery({\n            cardName: term,\n            inStockOnly: false,\n        });\n\n        setSearchResults(cards);\n    };\n\n    const changeCardQuantity = (id: string, qoh: Partial<QOH>) => {\n        const copiedState = [...searchResults];\n        const targetIndex = copiedState.findIndex((e) => e.id === id);\n        copiedState[targetIndex].qoh = qoh;\n        setSearchResults(copiedState);\n    };\n\n    return (\n        <InventoryContext.Provider\n            value={{ searchResults, changeCardQuantity, handleSearchSelect }}\n        >\n            {children}\n        </InventoryContext.Provider>\n    );\n};\n\nexport default InventoryProvider;\n","import React from 'react';\nimport { Message } from 'semantic-ui-react';\nimport toaster from 'toasted-notes';\nimport styled from 'styled-components';\n\nconst ToastContainer = styled(Message)`\n    position: relative;\n    right: 10px;\n    bottom: 10px;\n`;\n\ninterface CreateToastArgs {\n    color: string;\n    header: string;\n    message?: string;\n    duration?: number;\n}\n\nconst createToast = ({\n    color,\n    header,\n    message,\n    duration = 2000,\n}: CreateToastArgs) => {\n    return toaster.notify(\n        () => (\n            <ToastContainer color={color} compact>\n                <Message.Header>{header}</Message.Header>\n                {message}\n            </ToastContainer>\n        ),\n        {\n            position: 'bottom-right',\n            duration: duration,\n        }\n    );\n};\n\nexport default createToast;\n","import React, { FC, useState } from 'react';\nimport { Image } from 'semantic-ui-react';\nimport styled from 'styled-components';\n\ninterface Props {\n    image: string;\n    hover?: boolean;\n}\n\nconst StyledImage = styled(Image)({\n    boxShadow: '2px 2px 5px 0 rgba(0,0,0,.25)',\n    zIndex: 10,\n    transition: 'all .2s ease-in-out',\n});\n\nconst CardImage: FC<Props> = ({ image, hover }) => {\n    const [hovered, setHovered] = useState<boolean>(false);\n\n    return (\n        <StyledImage\n            src={image}\n            onMouseOver={() => (hover ? setHovered(true) : null)}\n            onMouseOut={() => (hover ? setHovered(false) : null)}\n            style={{\n                transform: `${hovered ? 'scale(1.75)' : 'scale(1)'}`,\n            }}\n        />\n    );\n};\n\nexport default CardImage;\n","export const finishes = [\n    { key: 'NONFOIL', text: 'Nonfoil', value: 'NONFOIL' },\n    { key: 'FOIL', text: 'Foil', value: 'FOIL' },\n];\n\nexport const cardConditions = [\n    { key: 'NM', text: 'Near Mint', value: 'NM' },\n    { key: 'LP', text: 'Light Play', value: 'LP' },\n    { key: 'MP', text: 'Moderate Play', value: 'MP' },\n    { key: 'HP', text: 'Heavy Play', value: 'HP' },\n];\n","export type Finish = 'FOIL' | 'NONFOIL';\n\ninterface CardFinishState {\n    selectedFinish: Finish;\n    finishDisabled: boolean;\n}\n\n/**\n * Seeds state from props. Used to determine if cards have only foil, nonfoil, or both printings\n * from their `foil` and `nonfoil` properties\n *\n * @param {Boolean} nonfoilProp\n * @param {Boolean} foilProp\n */\nexport default function checkCardFinish(\n    nonfoil: boolean,\n    foil: boolean\n): CardFinishState {\n    if (!nonfoil && foil) {\n        return { selectedFinish: 'FOIL', finishDisabled: true };\n    } else if (nonfoil && !foil) {\n        return { selectedFinish: 'NONFOIL', finishDisabled: true };\n    } else {\n        return { selectedFinish: 'NONFOIL', finishDisabled: false };\n    }\n}\n","import { QOH } from '../utils/ScryfallCard';\n\ntype FinishConditionLabels = Record<keyof QOH, string>;\n\nconst displayFinishCondition = (finishCondition: keyof QOH) => {\n    const finishConditionLabels: FinishConditionLabels = {\n        FOIL_NM: 'Foil (NM)',\n        FOIL_LP: 'Foil (LP)',\n        FOIL_MP: 'Foil (MP)',\n        FOIL_HP: 'Foil (HP)',\n        NONFOIL_NM: 'Nonfoil (NM)',\n        NONFOIL_LP: 'Nonfoil (LP)',\n        NONFOIL_MP: 'Nonfoil (MP)',\n        NONFOIL_HP: 'Nonfoil (HP)',\n    };\n\n    return finishConditionLabels[finishCondition];\n};\n\nexport default displayFinishCondition;\n","import { QOH } from './ScryfallCard';\n\nexport default function parseQoh(qoh: Partial<QOH>) {\n    const foilQty =\n        (qoh.FOIL_NM || 0) +\n        (qoh.FOIL_LP || 0) +\n        (qoh.FOIL_MP || 0) +\n        (qoh.FOIL_HP || 0);\n\n    const nonfoilQty =\n        (qoh.NONFOIL_NM || 0) +\n        (qoh.NONFOIL_LP || 0) +\n        (qoh.NONFOIL_MP || 0) +\n        (qoh.NONFOIL_HP || 0);\n\n    return [foilQty, nonfoilQty] as const;\n}\n","import React, { FC } from 'react';\nimport { Label, Popup } from 'semantic-ui-react';\nimport displayFinishCondition from '../utils/finishCondition';\nimport parseQoh from '../utils/parseQoh';\nimport { QOH } from '../utils/ScryfallCard';\n\nexport const createInventoryLineItems = (\n    inventoryQty: Partial<QOH>,\n    matchStrings: (keyof QOH)[]\n): string[] => {\n    const matches = matchStrings\n        .map((finishCondition) => {\n            const quantity = inventoryQty[finishCondition];\n            if (quantity && quantity > 0)\n                return `${displayFinishCondition(\n                    finishCondition\n                )}: ${quantity}`;\n        })\n        .filter((m): m is string => !!m);\n\n    if (matches.length === 0) return ['None in stock'];\n    return matches;\n};\n\ninterface Props {\n    inventoryQty: Partial<QOH>;\n}\n\ninterface LabelWithPopupProps {\n    quantity: number;\n    label: string;\n    popupLineItems: string[];\n}\n\nconst LabelWithPopup: FC<LabelWithPopupProps> = ({\n    quantity,\n    label,\n    popupLineItems,\n}) => (\n    <Popup\n        content={popupLineItems.map((msg) => (\n            <div>{msg}</div>\n        ))}\n        trigger={\n            <Label color={quantity > 0 ? 'blue' : undefined} image>\n                {label}\n                <Label.Detail>{quantity}</Label.Detail>\n            </Label>\n        }\n    />\n);\n\n// This component parses the `qoh` object from mongo into something more presentable\nconst QohLabels: FC<Props> = ({ inventoryQty }) => {\n    const [foilQuantity, nonfoilQuantity] = parseQoh(inventoryQty);\n\n    const foilLineItems = createInventoryLineItems(inventoryQty, [\n        'FOIL_NM',\n        'FOIL_LP',\n        'FOIL_MP',\n        'FOIL_HP',\n    ]);\n\n    const nonfoilLineItems = createInventoryLineItems(inventoryQty, [\n        'NONFOIL_NM',\n        'NONFOIL_LP',\n        'NONFOIL_MP',\n        'NONFOIL_HP',\n    ]);\n\n    return (\n        <>\n            <LabelWithPopup\n                label=\"Foil\"\n                quantity={foilQuantity}\n                popupLineItems={foilLineItems}\n            />\n            <LabelWithPopup\n                label=\"Nonfoil\"\n                quantity={nonfoilQuantity}\n                popupLineItems={nonfoilLineItems}\n            />\n        </>\n    );\n};\n\nexport default QohLabels;\n","import React, { FC } from 'react';\nimport { Label } from 'semantic-ui-react';\nimport { LanguageCode } from '../utils/ScryfallCard';\n\nconst LANG_CODES: Record<LanguageCode, string> = {\n    en: 'English',\n    es: 'Spanish',\n    fr: 'French',\n    de: 'German',\n    it: 'Italian',\n    pt: 'Portuguese',\n    ja: 'Japanese',\n    ko: 'Korean',\n    ru: 'Russian',\n    zhs: 'Simplified Chinese',\n    zht: 'Traditional Chinese',\n    he: 'Hebrew',\n    la: 'Latin',\n    grc: 'Ancient Greek',\n    ar: 'Arabic',\n    sa: 'Sanskrit',\n    px: 'Phyrexian',\n};\ninterface Props {\n    languageCode: LanguageCode;\n}\n\nconst Language: FC<Props> = ({ languageCode }) => (\n    <Label image color=\"grey\">\n        {LANG_CODES[languageCode]}\n    </Label>\n);\n\nexport default Language;\n","import Axios from 'axios';\nimport { GET_LIVE_PRICE } from '../utils/api_resources';\n\ninterface ResponseData {\n    marketPrices: { foil: number; normal: number };\n    medianPrices: { foil: number; normal: number };\n}\n\ninterface Payload {\n    scryfallId: string;\n}\n\nconst marketPriceQuery = async ({ scryfallId }: Payload) => {\n    try {\n        const { data } = await Axios.get<ResponseData>(GET_LIVE_PRICE, {\n            params: { scryfallId },\n        });\n\n        const { marketPrices, medianPrices } = data;\n\n        return {\n            marketPrices,\n            medianPrices,\n        };\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default marketPriceQuery;\n","import React, { useState, useEffect, FC } from 'react';\nimport { Label, Icon } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport marketPriceQuery from './marketPriceQuery';\n\nconst LabelStyle = styled(Label)`\n    background-color: ${(props) =>\n        !!props.foil ? '#ffcfdf' : null} !important;\n    background-image: ${(props) =>\n        !!props.foil\n            ? 'linear-gradient(90deg, #ffcfdf 0%, #b0f3f1 74%)'\n            : null} !important;\n`;\n\ninterface Response {\n    data: {\n        marketPrices: { foil: number; normal: number };\n        medianPrices: { foil: number; normal: number };\n    };\n}\n\ntype Finish = 'FOIL' | 'NONFOIL';\n\ninterface Props {\n    id: string;\n    finish: Finish;\n    round: boolean;\n    showMid: boolean;\n}\n\n// Rounds the passed number to the nearest fifty cents\nconst roundNearestStep = (n: number) => Math.ceil(n * 2) / 2;\n\nconst displayPrice = (price: number | null) =>\n    !!price ? `$${price.toFixed(2)}` : 'N/A';\n\nconst MarketPrice: FC<Props> = ({ id, finish, round, showMid = true }) => {\n    const [market, setMarket] = useState<number | null>(null);\n    const [median, setMedian] = useState<number | null>(null);\n    const [loading, setLoading] = useState<boolean>(false);\n    const isFoil = finish === 'FOIL';\n\n    useEffect(() => {\n        (async function fetchData() {\n            let _isMounted = true;\n            setLoading(true);\n\n            const { marketPrices, medianPrices } = await marketPriceQuery({\n                scryfallId: id,\n            });\n\n            if (_isMounted) {\n                if (isFoil) {\n                    setMarket(Number(marketPrices.foil));\n                    setMedian(Number(medianPrices.foil));\n                } else {\n                    setMarket(Number(marketPrices.normal));\n                    setMedian(Number(medianPrices.normal));\n                }\n\n                setLoading(false);\n            }\n\n            return () => (_isMounted = false);\n        })();\n    }, [id, finish]);\n\n    const loader = (\n        <span>\n            Loading <Icon loading name=\"spinner\" />\n        </span>\n    );\n\n    return (\n        <>\n            <LabelStyle foil={isFoil}>\n                {loading ? (\n                    loader\n                ) : (\n                    <span>\n                        Mkt.{' '}\n                        {round\n                            ? displayPrice(\n                                  market ? roundNearestStep(market) : null\n                              )\n                            : displayPrice(market)}\n                    </span>\n                )}\n            </LabelStyle>\n            {showMid && (\n                <LabelStyle foil={isFoil}>\n                    {loading ? (\n                        loader\n                    ) : (\n                        <span>Mid. {displayPrice(median)}</span>\n                    )}\n                </LabelStyle>\n            )}\n        </>\n    );\n};\n\nexport default MarketPrice;\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\n\ninterface Props {\n    set: string;\n    rarity?: string;\n}\n\nconst StyledIcon = styled('i')({\n    fontSize: '20px',\n});\n\nconst SetIcon: FC<Props> = ({ set, rarity }) => {\n    const rarityClass = rarity ? `ss-${rarity}` : '';\n    return <StyledIcon className={`ss ss-fw ss-${set} ${rarityClass}`} />;\n};\n\nexport default SetIcon;\n","import React, { FC } from 'react';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport { Label, Item, Button, Icon } from 'semantic-ui-react';\nimport QohLabels from '../common/QohLabels';\nimport Language from '../common/Language';\nimport MarketPrice from '../common/MarketPrice';\nimport { Finish } from '../utils/checkCardFinish';\nimport SetIcon from './SetIcon';\n\ninterface Props {\n    card: ScryfallCard;\n    selectedFinish: Finish;\n    showMid?: boolean;\n    round?: boolean;\n}\n\n// TODO: remove this shim after TCG api approval and integration\nconst TcgPriceButton: FC<{ tcgId: number | null }> = ({ tcgId }) => {\n    const tcgUrl = `https://www.tcgplayer.com/product/${tcgId}`;\n\n    return (\n        <Button\n            icon\n            disabled={!tcgId}\n            color=\"twitter\"\n            labelPosition=\"right\"\n            size=\"mini\"\n            as=\"a\"\n            href={tcgUrl}\n            target=\"_blank\"\n        >\n            {!tcgId ? 'Link unavailable' : 'View on TCG'}\n            <Icon name=\"external share\" />\n        </Button>\n    );\n};\n\nconst CardHeader: FC<Props> = ({\n    card,\n    selectedFinish,\n    showMid = false,\n    round = false,\n}) => {\n    const {\n        id,\n        display_name,\n        set,\n        rarity,\n        set_name,\n        qoh,\n        lang,\n        tcgplayer_id,\n    } = card;\n\n    return (\n        <Item.Header as=\"h3\">\n            {display_name}\n            <SetIcon set={set} rarity={rarity} />\n            <Label color=\"grey\">\n                {set_name} ({set.toUpperCase()})\n            </Label>\n            <QohLabels inventoryQty={qoh} />\n            <MarketPrice\n                id={id}\n                finish={selectedFinish}\n                showMid={showMid}\n                round={round}\n            />\n            <Language languageCode={lang} />\n            <TcgPriceButton tcgId={tcgplayer_id} />\n        </Item.Header>\n    );\n};\n\nexport default CardHeader;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { ADD_CARD_TO_INVENTORY } from '../utils/api_resources';\nimport { QOH } from '../utils/ScryfallCard';\n\ninterface CardInfo {\n    id: string;\n    name: string;\n    set_name: string;\n    set: string;\n}\n\ninterface Payload {\n    quantity: number;\n    finishCondition: string;\n    cardInfo: CardInfo;\n}\n\ninterface ResponseData {\n    _id: string;\n    name: string;\n    set: string;\n    qoh: Partial<QOH>;\n}\n\nconst addCardToInventoryQuery = async (payload: Payload) => {\n    try {\n        const { data } = await axios.post<ResponseData>(\n            ADD_CARD_TO_INVENTORY,\n            payload,\n            { headers: makeAuthHeader() }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default addCardToInventoryQuery;\n","import React, { FC, useContext, useState } from 'react';\nimport { Segment, Input, Button, Form, Select, Item } from 'semantic-ui-react';\nimport $ from 'jquery';\nimport { Formik, FormikErrors, FormikHelpers } from 'formik';\nimport createToast from '../common/createToast';\nimport CardImage from '../common/CardImage';\nimport { finishes, cardConditions } from '../utils/dropdownOptions';\nimport checkCardFinish from '../utils/checkCardFinish';\nimport { InventoryContext } from '../context/InventoryContext';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport CardHeader from '../ui/CardHeader';\nimport addCardToInventoryQuery from './addCardToInventoryQuery';\n\ninterface Props {\n    card: ScryfallCard;\n}\n\ninterface FormValues {\n    selectedFinish: Finish;\n    selectedCondition: string;\n    quantity: string;\n}\n\ntype Finish = 'FOIL' | 'NONFOIL';\n\nconst ManageInventoryListItem: FC<Props> = ({ card }) => {\n    const { foil, nonfoil, name, set_name, set, id, cardImage } = card;\n\n    const [selectedFinish, setSelectedFinish] = useState<Finish>(\n        checkCardFinish(nonfoil, foil).selectedFinish\n    );\n\n    const { changeCardQuantity } = useContext(InventoryContext);\n\n    const initialFormValues: FormValues = {\n        selectedFinish: checkCardFinish(nonfoil, foil).selectedFinish,\n        selectedCondition: 'NM',\n        quantity: '0',\n    };\n\n    const validate = ({ quantity }: FormValues) => {\n        let errors: FormikErrors<FormValues> = {};\n\n        if (\n            !Number(quantity) ||\n            !Number.isInteger(+quantity) ||\n            +quantity > 100\n        )\n            errors.quantity = 'error';\n\n        return errors;\n    };\n\n    const onSubmit = async (\n        { quantity, selectedFinish, selectedCondition }: FormValues,\n        { resetForm }: FormikHelpers<FormValues>\n    ) => {\n        try {\n            const { qoh } = await addCardToInventoryQuery({\n                quantity: parseInt(quantity, 10),\n                finishCondition: `${selectedFinish}_${selectedCondition}`,\n                cardInfo: { id, name, set_name, set },\n            });\n\n            // Imperatively reset the form using Formik actions\n            resetForm();\n\n            changeCardQuantity(id, qoh);\n\n            createToast({\n                color: 'green',\n                header: `${quantity}x ${name} ${\n                    parseInt(quantity, 10) > 0 ? 'added' : 'removed'\n                }!`,\n                duration: 2000,\n            });\n\n            // Highlight the input after successful card add\n            $('#searchBar').focus().select();\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    return (\n        <Segment>\n            <Item.Group divided>\n                <Item>\n                    <Item.Image size=\"tiny\">\n                        <CardImage image={cardImage} hover />\n                    </Item.Image>\n                    <Item.Content>\n                        <CardHeader\n                            card={card}\n                            selectedFinish={selectedFinish}\n                            round\n                        />\n                        <Item.Description>\n                            <Formik\n                                initialValues={initialFormValues}\n                                validate={validate}\n                                onSubmit={onSubmit}\n                                initialErrors={{ quantity: 'error' }}\n                            >\n                                {({\n                                    values,\n                                    handleSubmit,\n                                    setFieldValue,\n                                    isSubmitting,\n                                    isValid,\n                                }) => (\n                                    <Form>\n                                        <Form.Group>\n                                            <Form.Field\n                                                control={Input}\n                                                type=\"number\"\n                                                label=\"Quantity\"\n                                                value={values.quantity}\n                                                onChange={(\n                                                    _: any,\n                                                    { value }: { value: number }\n                                                ) =>\n                                                    setFieldValue(\n                                                        'quantity',\n                                                        value\n                                                    )\n                                                }\n                                                onFocus={() => {\n                                                    if (\n                                                        +values.quantity === 0\n                                                    ) {\n                                                        setFieldValue(\n                                                            'quantity',\n                                                            ''\n                                                        );\n                                                    }\n                                                }}\n                                            />\n                                            <Form.Field\n                                                label=\"Finish\"\n                                                control={Select}\n                                                value={values.selectedFinish}\n                                                options={finishes}\n                                                disabled={\n                                                    checkCardFinish(\n                                                        nonfoil,\n                                                        foil\n                                                    ).finishDisabled\n                                                }\n                                                onChange={(\n                                                    _: any,\n                                                    { value }: { value: Finish }\n                                                ) => {\n                                                    setSelectedFinish(value);\n                                                    setFieldValue(\n                                                        'selectedFinish',\n                                                        value\n                                                    );\n                                                }}\n                                            />\n                                            <Form.Field\n                                                label=\"Condition\"\n                                                control={Select}\n                                                value={values.selectedCondition}\n                                                options={cardConditions}\n                                                onChange={(\n                                                    _: any,\n                                                    { value }: { value: string }\n                                                ) =>\n                                                    setFieldValue(\n                                                        'selectedCondition',\n                                                        value\n                                                    )\n                                                }\n                                            />\n                                            <Form.Button\n                                                label=\"Add to Inventory?\"\n                                                control={Button}\n                                                primary\n                                                disabled={\n                                                    !isValid || isSubmitting\n                                                }\n                                                onClick={() => handleSubmit()}\n                                                loading={isSubmitting}\n                                            >\n                                                Submit\n                                            </Form.Button>\n                                        </Form.Group>\n                                    </Form>\n                                )}\n                            </Formik>\n                        </Item.Description>\n                    </Item.Content>\n                </Item>\n            </Item.Group>\n        </Segment>\n    );\n};\n\nexport default ManageInventoryListItem;\n","import React, { useContext } from 'react';\nimport SearchBar from '../common/SearchBar';\nimport { Segment, Header, Icon, Divider } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport AllLocationInventory from './AllLocationInventory';\nimport { InventoryContext } from '../context/InventoryContext';\nimport ManageInventoryListItem from './ManageInventoryListItem';\n\nconst HeaderContainer = styled('div')({\n    display: 'flex',\n    justifyContent: 'space-between',\n});\n\nexport default function ManageInventory() {\n    const { searchResults, handleSearchSelect } = useContext(InventoryContext);\n\n    return (\n        <>\n            <SearchBar handleSearchSelect={handleSearchSelect} />\n            <br />\n            <HeaderContainer>\n                <Header as=\"h2\">Manage Inventory</Header>\n                {searchResults.length > 0 && (\n                    <div>\n                        <AllLocationInventory\n                            searchResults={searchResults}\n                            title={searchResults[0].name}\n                        />\n                    </div>\n                )}\n            </HeaderContainer>\n            <Divider />\n            {!searchResults.length && (\n                <Segment placeholder>\n                    <Header icon>\n                        <Icon name=\"search\" />\n                        <em>\n                            \"For the first time in his life, Grakk felt a little\n                            warm and fuzzy inside.\"\n                        </em>\n                    </Header>\n                </Segment>\n            )}\n            {searchResults.map((card) => (\n                <ManageInventoryListItem key={card.id} card={card} />\n            ))}\n        </>\n    );\n}\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { SUSPEND_SALE } from '../utils/api_resources';\nimport { SaleListCard } from './SaleContext';\n\nexport interface SuspendedSale {\n    _id: string;\n    name: string;\n    notes: string;\n    list: SaleListCard[];\n}\n\nconst getSuspendedSaleQuery = async (saleId: string) => {\n    try {\n        const { data } = await axios.get<SuspendedSale>(\n            `${SUSPEND_SALE}/${saleId}`,\n            {\n                headers: makeAuthHeader(),\n            }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default getSuspendedSaleQuery;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { SUSPEND_SALE } from '../utils/api_resources';\n\nconst deleteSuspendedSaleQuery = async (saleId: string) => {\n    try {\n        const { data } = await axios.delete<void>(`${SUSPEND_SALE}/${saleId}`, {\n            headers: makeAuthHeader(),\n        });\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default deleteSuspendedSaleQuery;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { SUSPEND_SALE } from '../utils/api_resources';\nimport { SaleListCard } from './SaleContext';\n\ninterface Payload {\n    customerName: string;\n    notes: string;\n    saleList: SaleListCard[];\n}\n\ninterface ResponseData {\n    ops: [{ name: string }];\n}\n\nconst createSuspendedSaleQuery = async (payload: Payload) => {\n    try {\n        const { data } = await axios.post<ResponseData>(SUSPEND_SALE, payload, {\n            headers: makeAuthHeader(),\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default createSuspendedSaleQuery;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { FINISH_SALE } from '../utils/api_resources';\nimport { Trade } from './ReceivingContext';\nimport { SaleListCard } from './SaleContext';\n\ninterface Payload {\n    cards: SaleListCard[];\n}\n\ninterface ResponseData {\n    sale_data: {\n        Sale: {\n            saleID: string;\n        };\n    };\n}\n\nconst finishSaleQuery = async (payload: Payload) => {\n    try {\n        const { data } = await axios.post<ResponseData>(FINISH_SALE, payload, {\n            headers: makeAuthHeader(),\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default finishSaleQuery;\n","import React, { useState, createContext, FC } from 'react';\nimport sortSaleList from '../utils/sortSaleList';\nimport createToast from '../common/createToast';\nimport getSuspendedSaleQuery, { SuspendedSale } from './getSuspendedSaleQuery';\nimport deleteSuspendedSaleQuery from './deleteSuspendedSaleQuery';\nimport createSuspendedSaleQuery from './createSuspendedSaleQuery';\nimport finishSaleQuery from './finishSaleQuery';\nimport { ScryfallCard } from '../utils/ScryfallCard';\n\ninterface Props {}\n\ninterface SuspendSaleArgs {\n    customerName: string;\n    notes: string;\n}\n\nexport type SaleListCard = ScryfallCard & {\n    finishCondition: string;\n    qtyToSell: number;\n    price: number;\n};\n\nexport interface SaleContext {\n    saleListCards: SaleListCard[];\n    suspendedSale: SuspendedSale;\n    addToSaleList: (\n        card: ScryfallCard,\n        finishCondition: string,\n        qtyToSell: number,\n        price: number\n    ) => void;\n    removeFromSaleList: (id: string, finishCondition: string) => void;\n    restoreSale: (saleId: string) => void;\n    suspendSale: (args: SuspendSaleArgs) => void;\n    deleteSuspendedSale: () => void;\n    finalizeSale: () => void;\n    resetSaleState: () => void;\n}\n\nconst defaultSuspendedSale: SuspendedSale = {\n    _id: '',\n    name: '',\n    notes: '',\n    list: [],\n};\n\nexport const SaleContext = createContext<SaleContext>({\n    saleListCards: [],\n    suspendedSale: defaultSuspendedSale,\n    addToSaleList: () => null,\n    removeFromSaleList: () => null,\n    restoreSale: () => null,\n    suspendSale: () => null,\n    deleteSuspendedSale: () => null,\n    finalizeSale: () => null,\n    resetSaleState: () => null,\n});\n\nexport const SaleProvider: FC<Props> = ({ children }) => {\n    const [saleListCards, setSaleListCards] = useState<SaleListCard[]>([]);\n    const [suspendedSale, setSuspendedSale] = useState<SuspendedSale>(\n        defaultSuspendedSale\n    );\n\n    /**\n     * Adds product to the sale list\n     */\n    const addToSaleList = (\n        card: ScryfallCard,\n        finishCondition: string,\n        qtyToSell: number,\n        price: number\n    ) => {\n        const oldState = [...saleListCards];\n\n        const newCard: SaleListCard = {\n            ...card,\n            finishCondition,\n            qtyToSell,\n            price,\n        };\n\n        // Need to make sure same ID's with differing conditions are separate line-items\n        const idx = oldState.findIndex((el) => {\n            return (\n                el.id === newCard.id && el.finishCondition === finishCondition\n            );\n        });\n\n        if (idx !== -1) {\n            oldState.splice(idx, 1, newCard);\n        } else {\n            oldState.push(newCard);\n        }\n\n        setSaleListCards(sortSaleList(oldState));\n    };\n\n    /**\n     * Removes product from the sale list\n     */\n    const removeFromSaleList = (id: string, finishCondition: string) => {\n        const newState = [...saleListCards].filter((c) => {\n            return !(c.id === id && c.finishCondition === finishCondition);\n        });\n\n        setSaleListCards(newState);\n    };\n\n    /**\n     * Restores a sale (assigns a saleList to state) from a suspended sale from the db\n     */\n    const restoreSale = async (id: string) => {\n        try {\n            const sale = await getSuspendedSaleQuery(id);\n\n            const modeledData = sale.list.map((c) => c);\n\n            setSaleListCards(modeledData);\n            setSuspendedSale(sale);\n\n            createToast({\n                color: 'green',\n                header: `You are viewing ${sale.name}'s sale`,\n            });\n        } catch (e) {\n            console.log(e.response);\n            createToast({ color: 'red', header: `Error` });\n        }\n    };\n\n    /**\n     * Suspends a sale (persists it to mongo) via the SuspendedSale component and API\n     */\n    const suspendSale = async ({\n        customerName,\n        notes,\n    }: {\n        customerName: string;\n        notes: string;\n    }) => {\n        const { _id } = suspendedSale;\n\n        try {\n            if (!!_id)\n                // If we're suspended, delete the previous to replace\n                await deleteSuspendedSaleQuery(_id);\n\n            const data = await createSuspendedSaleQuery({\n                customerName: customerName,\n                notes: notes,\n                saleList: saleListCards,\n            });\n\n            resetSaleState();\n\n            createToast({\n                color: 'green',\n                header: `${data.ops[0].name}'s sale was suspended`,\n            });\n        } catch (e) {\n            console.log(e.response);\n            createToast({\n                color: 'red',\n                header: `Error`,\n                message: e.response.data || 'Error suspending sale',\n            });\n        }\n    };\n\n    const deleteSuspendedSale = async () => {\n        try {\n            const { _id, name } = suspendedSale;\n            await deleteSuspendedSaleQuery(_id);\n\n            resetSaleState();\n\n            createToast({\n                color: 'green',\n                header: `${name}'s sale was deleted`,\n            });\n        } catch (e) {\n            console.log(e.response);\n            createToast({\n                color: 'red',\n                header: `Error`,\n                message: e.response.data || 'Error deleting suspended sale',\n            });\n        }\n    };\n\n    /**\n     * Extracts the saleList state and uses it to complete sale\n     */\n    const finalizeSale = async () => {\n        const { _id } = suspendedSale;\n\n        try {\n            // Must delete currently suspended sale to faithfully restore inventory prior to sale\n            if (!!_id) await deleteSuspendedSaleQuery(_id);\n\n            const { sale_data } = await finishSaleQuery({\n                cards: saleListCards,\n            });\n\n            createToast({\n                color: 'green',\n                header: 'Sale created in Lightspeed!',\n                message: `The id number is #${sale_data.Sale.saleID}`,\n            });\n\n            resetSaleState();\n        } catch (e) {\n            createToast({\n                color: 'red',\n                header: 'Error',\n                message: e.response.data || 'Sale was not created',\n            });\n\n            resetSaleState();\n        }\n    };\n\n    const resetSaleState = () => {\n        setSaleListCards([]);\n        setSuspendedSale(defaultSuspendedSale);\n    };\n\n    return (\n        <SaleContext.Provider\n            value={{\n                saleListCards,\n                suspendedSale,\n                addToSaleList,\n                removeFromSaleList,\n                restoreSale,\n                suspendSale,\n                deleteSuspendedSale,\n                finalizeSale,\n                resetSaleState,\n            }}\n        >\n            {children}\n        </SaleContext.Provider>\n    );\n};\n","import { ScryfallCard } from './ScryfallCard';\n\n/**\n * Takes in an unordered group of cards and sorts them according to The Clubhouse's specs:\n * WUBRG, then multicolor, then colorless, then land, alphabetically within each color/category\n */\nexport default function sortSaleList<T extends ScryfallCard>(cards: T[]) {\n    const ORDER = ['W', 'U', 'B', 'R', 'G', 'MULTI', 'COLORLESS', 'LAND'];\n\n    /**\n     * Main helper function that manages sort order\n     * @param {Object} card\n     */\n    function helpSort(card: ScryfallCard) {\n        let arrayConst = null;\n\n        let colorsLength = null;\n        let cardFace = null;\n\n        try {\n            // If colors don't exist, it's a flip card or storybook frame\n            colorsLength = card.colors.length;\n            cardFace = card;\n        } catch (e) {\n            try {\n                // Storybook frames from Eldraine may throw error\n                colorsLength = card.card_faces[0].colors.length;\n                cardFace = card.card_faces[0];\n            } catch (e) {\n                colorsLength = card.colors.length;\n                cardFace = card;\n            }\n        }\n\n        // Apply logic to return correct constant enum\n        if (colorsLength === 0) {\n            arrayConst = 'COLORLESS';\n        } else if (colorsLength === 1) {\n            arrayConst = cardFace.colors[0];\n        } else if (colorsLength > 1) {\n            arrayConst = 'MULTI';\n        }\n\n        // Drill into colorless cards, if they are lands or not\n        if (arrayConst === 'COLORLESS') {\n            if (cardFace.color_identity) {\n                if (cardFace.color_identity.length === 1) {\n                    arrayConst = cardFace.color_identity[0];\n                }\n                if (cardFace.color_identity.length > 1) {\n                    arrayConst = 'MULTI';\n                }\n            }\n            if (cardFace.type_line.includes('Land')) {\n                arrayConst = 'LAND';\n            }\n        }\n\n        // Final check to guard against a null arrayConst\n        if (!arrayConst) {\n            arrayConst = 'LAND';\n        }\n\n        return arrayConst;\n    }\n\n    const alphaSort = cards.sort((a, b) => {\n        return a.name.localeCompare(b.name);\n    });\n\n    const sorted = alphaSort.sort((a, b) => {\n        return ORDER.indexOf(helpSort(a)) - ORDER.indexOf(helpSort(b));\n    });\n\n    return sorted;\n}\n","import React, {\n    useState,\n    useContext,\n    FC,\n    SyntheticEvent,\n    ChangeEvent,\n} from 'react';\nimport {\n    Segment,\n    Form,\n    Input,\n    Dropdown,\n    Button,\n    Item,\n} from 'semantic-ui-react';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport CardImage from '../common/CardImage';\nimport { SaleContext } from '../context/SaleContext';\nimport { ScryfallCard, QOH } from '../utils/ScryfallCard';\nimport CardHeader from '../ui/CardHeader';\n\ninterface ConditionOptions {\n    text: string;\n    value: string;\n    key: string;\n}\n\n/**\n * Creates a list of conditions for the dropdown menu from the `qoh`\n * Note: Is this not needed if we default select initially?\n * @param {Object} qoh\n * @param {String} id\n */\nfunction createConditionOptions(\n    qoh: Partial<QOH>,\n    id: string\n): ConditionOptions[] {\n    const removeZeroedQuantites = _.pickBy(qoh, (p) => p && p > 0); // Quantites of zero not included\n\n    return Object.entries(removeZeroedQuantites).map((d) => {\n        const [conditionFinish, qty] = d;\n\n        return {\n            text: `${conditionFinish.split('_').join(' | ')} | Qty: ${qty}`,\n            value: conditionFinish,\n            key: `${id}${conditionFinish}`,\n        };\n    });\n}\n\ntype Finish = 'FOIL' | 'NONFOIL';\n\n/**\n * Creates initial selectedFinish value, used for the MarketPrice component\n * Returns FOIL or NONFOIL depending on what's in current inventory (qoh)\n * @param {Object} qoh\n */\nfunction createInitialSelectedFinish(qoh: Partial<QOH>): Finish {\n    const removeZeroedQuantites = _.pickBy(qoh, (p) => p && p > 0);\n    // Isolate only the FOIL or NONFOIL values with mapping\n    const keysMapped = _.keys(removeZeroedQuantites).map(\n        (k) => k.split('_')[0]\n    );\n    const uniqueValues = _.uniq(keysMapped);\n    return uniqueValues.indexOf('NONFOIL') > -1 ? 'NONFOIL' : 'FOIL';\n}\n\ninterface Props {\n    card: ScryfallCard;\n}\n\nconst BrowseCardItem: FC<Props> = ({ card }) => {\n    const [selectedFinishCondition, setSelectedFinishCondition] = useState<\n        string\n    >('');\n    const [\n        selectedFinishConditionQty,\n        setSelectedFinishConditionQty,\n    ] = useState<number>(0);\n    const [quantityToSell, setQuantityToSell] = useState<number | null>(0);\n    const [price, setPrice] = useState<number | null>(0);\n    const [selectedFinish, setSelectedFinish] = useState<Finish>(\n        createInitialSelectedFinish(card.qoh)\n    );\n    const [conditionOptions, setConditionOptions] = useState<\n        ConditionOptions[]\n    >(createConditionOptions(card.qoh, card.id));\n    const { addToSaleList } = useContext(SaleContext);\n\n    const handleQuantityChange = (\n        e: SyntheticEvent,\n        { value }: { value: string }\n    ) => {\n        if (value === '') {\n            setQuantityToSell(null);\n            return;\n        }\n\n        let numVal = parseInt(value);\n\n        if (numVal > selectedFinishConditionQty)\n            numVal = selectedFinishConditionQty;\n\n        if (isNaN(numVal) || numVal < 0) numVal = 0;\n\n        setQuantityToSell(numVal);\n    };\n\n    const handleSelectedFinishCondition = (\n        e: SyntheticEvent,\n        { value }: { value: keyof QOH }\n    ) => {\n        // TODO: we need to not coerce here\n        setSelectedFinish(value.split('_')[0] as Finish);\n        setSelectedFinishCondition(value);\n        setSelectedFinishConditionQty(card.qoh[value] || 0);\n        setQuantityToSell(0);\n    };\n\n    const handlePriceChange = (\n        e: SyntheticEvent,\n        { value }: { value: string }\n    ) => {\n        if (value === '') {\n            setPrice(null);\n            return;\n        }\n\n        let numVal = Number(value);\n\n        if (isNaN(numVal) || numVal < 0) {\n            numVal = 0;\n        }\n\n        setPrice(numVal);\n    };\n\n    const handleAddToSale = () => {\n        const { id } = card;\n\n        addToSaleList(\n            card,\n            selectedFinishCondition,\n            quantityToSell || 0,\n            price || 0\n        );\n\n        // Reset state\n        setSelectedFinishCondition('');\n        setSelectedFinishConditionQty(0);\n        setQuantityToSell(0);\n        setPrice(0);\n        setConditionOptions(createConditionOptions(card.qoh, id));\n        setSelectedFinish(createInitialSelectedFinish(card.qoh));\n\n        // Highlight the input after successful card add\n        $('#searchBar').focus().select();\n    };\n\n    return (\n        <Segment>\n            <Item.Group divided>\n                <Item>\n                    <Item.Image size=\"tiny\">\n                        <CardImage image={card.cardImage} />\n                    </Item.Image>\n                    <Item.Content>\n                        <CardHeader\n                            card={card}\n                            selectedFinish={selectedFinish}\n                            showMid\n                            round\n                        />\n                        <Item.Description>\n                            <Form>\n                                <Form.Group>\n                                    <Form.Field\n                                        className=\"finish-condition\"\n                                        control={Dropdown}\n                                        selection\n                                        placeholder=\"Select inventory\"\n                                        options={conditionOptions}\n                                        value={selectedFinishCondition}\n                                        label=\"Select finish/condition\"\n                                        onChange={handleSelectedFinishCondition}\n                                    />\n                                    <Form.Field\n                                        className=\"sale-qty\"\n                                        control={Input}\n                                        type=\"number\"\n                                        label=\"Quantity to sell\"\n                                        value={quantityToSell}\n                                        onChange={handleQuantityChange}\n                                        disabled={!selectedFinishConditionQty}\n                                        onFocus={(\n                                            e: ChangeEvent<HTMLInputElement>\n                                        ) => e.target.select()}\n                                    />\n                                    <Form.Field\n                                        className=\"sale-price\"\n                                        control={Input}\n                                        type=\"number\"\n                                        label=\"Price\"\n                                        value={price}\n                                        onChange={handlePriceChange}\n                                        disabled={!selectedFinishConditionQty}\n                                        onFocus={(\n                                            e: ChangeEvent<HTMLInputElement>\n                                        ) => e.target.select()}\n                                        step={0.5}\n                                    />\n                                    <Form.Button\n                                        className=\"add-to-sale\"\n                                        label=\"Add to sale?\"\n                                        control={Button}\n                                        primary\n                                        onClick={handleAddToSale}\n                                        disabled={\n                                            !quantityToSell ||\n                                            quantityToSell <= 0\n                                        }\n                                    >\n                                        Sell\n                                    </Form.Button>\n                                </Form.Group>\n                            </Form>\n                        </Item.Description>\n                    </Item.Content>\n                </Item>\n            </Item.Group>\n        </Segment>\n    );\n};\n\nexport default BrowseCardItem;\n","import React, { FC } from 'react';\nimport BrowseCardItem from './BrowseCardItem';\nimport { Segment, Header, Icon } from 'semantic-ui-react';\nimport { ScryfallCard } from '../utils/ScryfallCard';\n\ninterface Props {\n    term: string;\n    cards: ScryfallCard[];\n}\n\nconst BrowseCardList: FC<Props> = ({ term, cards }) => {\n    // Creates text to notify the user of zero-result searches\n    const searchNotification = () => {\n        if (term && !cards.length) {\n            // Check to make sure the user has searched and no results\n            return (\n                <p>\n                    Zero results for <em>{term}</em>\n                </p>\n            );\n        }\n        return (\n            <p>\n                <em>\"Don't give the people what they want\"</em>\n            </p>\n        );\n    };\n\n    if (cards.length === 0) {\n        return (\n            <Segment placeholder>\n                <Header icon>\n                    <Icon name=\"search\" />\n                    <span>{searchNotification()}</span>\n                </Header>\n            </Segment>\n        );\n    }\n\n    return (\n        <>\n            {cards.map((card) => {\n                return <BrowseCardItem key={card.id} card={card} />;\n            })}\n        </>\n    );\n};\n\nexport default BrowseCardList;\n","export type Price = number | string | null;\n\nexport function price(val: Price) {\n    if (val === null) return '$0.00';\n    let price: number = typeof val === 'string' ? Number(val) : val;\n    if (isNaN(price)) return '$0.00';\n    return `$${price.toFixed(2)}`;\n}\n","import React, { FC } from 'react';\nimport { Price, price } from '../utils/price';\n\ninterface Props {\n    num: Price;\n}\n\nexport function getPrice(val: Price) {\n    if (val === null) return '$0.00';\n    let price: number = typeof val === 'string' ? Number(val) : val;\n    if (isNaN(price)) return '$0.00';\n    return `$${price.toFixed(2)}`;\n}\n\nconst DisplayPrice: FC<Props> = ({ num }) => <span>{price(num)}</span>;\n\nexport default DisplayPrice;\n","import { makeStyles, Tooltip } from '@material-ui/core';\nimport { FC } from 'react';\nimport { Image } from 'semantic-ui-react';\n\ninterface Props {\n    cardImage: string;\n}\n\nconst useStyles = makeStyles({\n    transparentBackground: {\n        backgroundColor: 'transparent',\n    },\n    borderRounded: {\n        borderRadius: '7px 7px 7px 7px',\n    },\n});\n\nconst CardImageTooltip: FC<Props> = ({ cardImage, children }) => {\n    const { transparentBackground, borderRounded } = useStyles();\n\n    return (\n        <Tooltip\n            placement=\"bottom-start\"\n            title={\n                <Image className={borderRounded} size=\"small\" src={cardImage} />\n            }\n            classes={{\n                tooltip: transparentBackground,\n            }}\n        >\n            <span>{children}</span>\n        </Tooltip>\n    );\n};\n\nexport default CardImageTooltip;\n","import React, { useState, useContext, FC } from 'react';\nimport { Button, Grid, Header, Label, Segment } from 'semantic-ui-react';\nimport { SaleContext, SaleListCard } from '../context/SaleContext';\nimport Price from '../common/Price';\nimport SetIcon from '../ui/SetIcon';\nimport CardImageTooltip from '../ui/CardImageTooltip';\n\ninterface Props {\n    card: SaleListCard;\n}\n\nconst SaleLineItem: FC<Props> = ({\n    card: {\n        display_name,\n        set,\n        finishCondition,\n        qtyToSell,\n        price,\n        rarity,\n        id,\n        cardImage,\n    },\n}) => {\n    const [hovered, setHovered] = useState(false);\n    const { removeFromSaleList } = useContext(SaleContext);\n\n    return (\n        <Segment>\n            <Grid verticalAlign=\"middle\">\n                <Grid.Column tablet={16} computer={11}>\n                    <div>\n                        <CardImageTooltip cardImage={cardImage}>\n                            <Header as=\"h4\" style={{ cursor: 'help' }}>\n                                {display_name}\n                            </Header>\n                        </CardImageTooltip>\n                    </div>\n                    <SetIcon set={set} rarity={rarity} />\n                    <Label color=\"grey\">{set.toUpperCase()}</Label>\n                    <div className=\"line-item-price\">\n                        {qtyToSell}x @ <Price num={price} />\n                        {' • '}\n                        {finishCondition && (\n                            <span>\n                                {finishCondition.split('_')[1]} {' | '}\n                                {finishCondition.split('_')[0]}\n                            </span>\n                        )}\n                    </div>\n                </Grid.Column>\n                <Grid.Column tablet={16} computer={5} textAlign=\"right\">\n                    <Button\n                        compact\n                        icon=\"cancel\"\n                        circular\n                        onClick={() => removeFromSaleList(id, finishCondition)}\n                        onMouseOver={() => setHovered(true)}\n                        onMouseOut={() => setHovered(false)}\n                        color={hovered ? 'red' : undefined}\n                    />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    );\n};\n\nexport default SaleLineItem;\n","/**\n * Sums numbers up\n */\nexport default function sum(nums: number[]): number {\n    return nums.reduce((acc, curr) => acc + curr, 0);\n}\n","import React, { FC } from 'react';\nimport Price from '../common/Price';\nimport { SaleListCard } from '../context/SaleContext';\nimport sum from '../utils/sum';\n\ninterface Props {\n    saleList: SaleListCard[];\n}\n\nconst SalePriceTotal: FC<Props> = ({ saleList }) => {\n    const total = sum(saleList.map((c) => c.qtyToSell * Number(c.price)));\n\n    return (\n        <div id=\"sale-price-total\">\n            <Price num={total} />\n        </div>\n    );\n};\n\nexport default SalePriceTotal;\n","import React, { useState, useContext, FC } from 'react';\nimport { Modal, Button, Header, Icon } from 'semantic-ui-react';\nimport { SaleContext } from '../context/SaleContext';\n\ninterface Props {}\n\nconst FinishSale: FC<Props> = () => {\n    const [submit, setSubmit] = useState({ loading: false, disabled: false });\n    const [showModal, setShowModal] = useState(false);\n    const { finalizeSale } = useContext(SaleContext);\n\n    const handleFinalizeSale = async () => {\n        setSubmit({ loading: true, disabled: true });\n        await finalizeSale();\n    };\n\n    const modalTrigger = (\n        <Button floated=\"right\" primary onClick={() => setShowModal(true)}>\n            Finalize sale\n        </Button>\n    );\n\n    return (\n        <Modal basic open={showModal} trigger={modalTrigger}>\n            <Modal.Content>\n                <Header inverted as=\"h2\">\n                    Finalize this sale?\n                </Header>\n                <p>\n                    Click 'Yes' to create a sale in Lightspeed. Ensure that you\n                    have all cards pulled and double-checked the customer list.\n                    Undoing this action will require manual data entry!\n                </p>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button\n                    basic\n                    color=\"red\"\n                    inverted\n                    onClick={() => setShowModal(false)}\n                >\n                    <Icon name=\"remove\" /> No\n                </Button>\n                <Button\n                    color=\"green\"\n                    inverted\n                    onClick={handleFinalizeSale}\n                    loading={submit.loading}\n                    disabled={submit.disabled}\n                >\n                    <Icon name=\"checkmark\" /> Yes\n                </Button>\n            </Modal.Actions>\n        </Modal>\n    );\n};\n\nexport default FinishSale;\n","import React, { FC } from 'react';\nimport SaleLineItem from './SaleLineItem';\nimport { Segment, Header, Icon } from 'semantic-ui-react';\nimport SalePriceTotal from './SalePriceTotal';\nimport FinishSale from './FinishSale';\nimport { SaleListCard } from '../context/SaleContext';\n\ninterface Props {\n    saleList: SaleListCard[];\n}\n\nconst CustomerSaleList: FC<Props> = ({ saleList }) => {\n    if (saleList.length === 0) {\n        return (\n            <Segment placeholder>\n                <Header icon>\n                    <Icon name=\"plus\" />\n                    <em>\"Give them what they need\"</em>\n                </Header>\n            </Segment>\n        );\n    }\n\n    return (\n        <>\n            <Segment.Group>\n                {saleList.map((card) => (\n                    <SaleLineItem\n                        key={`${card.id}${card.finishCondition}${card.qtyToSell}`}\n                        card={card}\n                    />\n                ))}\n            </Segment.Group>\n            <Segment clearing>\n                <Header floated=\"left\">\n                    <Header sub>Subtotal</Header>\n                    <SalePriceTotal saleList={saleList} />\n                </Header>\n                <FinishSale />\n            </Segment>\n        </>\n    );\n};\n\nexport default CustomerSaleList;\n","import React, { FC, useRef } from 'react';\nimport { useReactToPrint } from 'react-to-print';\nimport { Button, Icon } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport Price from '../common/Price';\nimport { SaleListCard } from '../context/SaleContext';\nimport SalePriceTotal from './SalePriceTotal';\n\ninterface Props {\n    saleListCards: SaleListCard[];\n}\n\nconst PrintWrapper = styled.div`\n    @media print {\n        background-color: white;\n        margin: 0;\n        padding: 0;\n        font-size: 30px;\n        line-height: 40px;\n        z-index: 5000;\n        overflow: hidden;\n    }\n    @media screen {\n        display: none !important;\n    }\n`;\n\nconst PrintList: FC<Props> = ({ saleListCards }) => {\n    const componentRef = useRef<HTMLDivElement>(null);\n\n    const handlePrint = useReactToPrint({\n        content: () => componentRef.current,\n    });\n\n    return (\n        <>\n            <div>\n                <Button size=\"tiny\" onClick={handlePrint} icon>\n                    <Icon name=\"print\" />\n                </Button>\n            </div>\n            <PrintWrapper ref={componentRef}>\n                <ul>\n                    {saleListCards.map((slc) => {\n                        return (\n                            <li key={slc.id}>\n                                <b>\n                                    {slc.display_name} | x{slc.qtyToSell} |{' '}\n                                    {slc.finishCondition} | {slc.set_name} |{' '}\n                                    <Price num={slc.price} />\n                                </b>\n                            </li>\n                        );\n                    })}\n                </ul>\n                <span>\n                    <b>\n                        Subtotal: <SalePriceTotal saleList={saleListCards} />\n                    </b>\n                </span>\n            </PrintWrapper>\n        </>\n    );\n};\n\nexport default PrintList;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { SUSPEND_SALE } from '../utils/api_resources';\nimport { SuspendedSale } from '../context/getSuspendedSaleQuery';\n\nconst getSuspendedSalesQuery = async () => {\n    try {\n        const { data } = await axios.get<SuspendedSale[]>(SUSPEND_SALE, {\n            headers: makeAuthHeader(),\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default getSuspendedSalesQuery;\n","import React, { useState, useEffect, FC } from 'react';\nimport {\n    Modal,\n    Button,\n    Grid,\n    Form,\n    Message,\n    TextAreaProps,\n    DropdownProps,\n} from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { SaleContext } from '../context/SaleContext';\nimport { SuspendedSale } from '../context/getSuspendedSaleQuery';\nimport getSuspendedSalesQuery from './getSuspendedSalesQuery';\n\ninterface Props {\n    id: string;\n    saleListLength: number;\n    restoreSale: SaleContext['restoreSale'];\n    deleteSuspendedSale: SaleContext['deleteSuspendedSale'];\n    suspendSale: SaleContext['suspendSale'];\n}\n\ninterface SuspendButtonState {\n    suspendBtn: boolean;\n    restoreBtn: boolean;\n    deleteBtn: boolean;\n}\n\nconst Divider = styled.div`\n    border-left: 1px solid rgba(0, 0, 0, 0.2);\n    height: 100%;\n`;\n\nconst ClearMargin = styled.div`\n    margin-top: 0px;\n    margin-bottom: 0px;\n`;\n\nconst CharLimit = styled.p`\n    font-size: 12px;\n    color: rgba(0, 0, 0, 0.2);\n    float: right;\n`;\n\nconst SuspendSales: FC<Props> = ({\n    restoreSale,\n    deleteSuspendedSale,\n    saleListLength,\n    suspendSale,\n    id,\n}) => {\n    const [sales, setSales] = useState<SuspendedSale[]>([]);\n    const [saleID, setSaleID] = useState<string>('');\n    const [modalOpen, setModalOpen] = useState<boolean>(false);\n    const [customerName, setCustomerName] = useState<string>('');\n    const [notes, setNotes] = useState<string>('');\n    const [disabled, setDisabled] = useState<boolean>(false);\n    const [loadingBtn, setLoadingBtn] = useState<SuspendButtonState>({\n        suspendBtn: false,\n        restoreBtn: false,\n        deleteBtn: false,\n    });\n\n    const getSales = async () => {\n        const suspendedSales = await getSuspendedSalesQuery();\n\n        setSales(suspendedSales);\n    };\n\n    const clearFields = () => {\n        setCustomerName('');\n        setNotes('');\n        setSaleID('');\n    };\n\n    // Get the previously suspended sales on mount and parent state (_id) change\n    useEffect(() => {\n        getSales();\n    }, [id]); // If the parent-level suspended-sale _id changes, we fetch again\n\n    const modalTrigger = (\n        <div>\n            <Button\n                size=\"tiny\"\n                id=\"suspend-sale-btn\"\n                onClick={() => setModalOpen(true)}\n                icon=\"ellipsis horizontal\"\n            />\n        </div>\n    );\n\n    const submitSuspendSale = async () => {\n        setDisabled(true);\n        setLoadingBtn({ ...loadingBtn, suspendBtn: true });\n        await suspendSale({ customerName, notes });\n        setModalOpen(false); // Close the modal to avoid \"flicker\" when state re-renders\n        await getSales(); // Parent _id does not change, re-fetch sales\n        clearFields();\n        setDisabled(false);\n        setLoadingBtn({ ...loadingBtn, suspendBtn: false });\n    };\n\n    const submitRestoreSale = async () => {\n        setDisabled(true);\n        setLoadingBtn({ ...loadingBtn, restoreBtn: true });\n        await restoreSale(saleID);\n        setModalOpen(false);\n        clearFields();\n        setDisabled(false);\n        setLoadingBtn({ ...loadingBtn, restoreBtn: false });\n    };\n\n    const submitDeleteSale = async () => {\n        setDisabled(true);\n        setLoadingBtn({ ...loadingBtn, deleteBtn: true });\n        await deleteSuspendedSale();\n        setModalOpen(false);\n        clearFields();\n        setDisabled(false);\n        setLoadingBtn({ ...loadingBtn, deleteBtn: false });\n    };\n\n    return (\n        <React.Fragment>\n            <Modal trigger={modalTrigger} open={modalOpen}>\n                <Modal.Header>Sales menu</Modal.Header>\n                <Modal.Content>\n                    <Grid columns={2} stackable relaxed=\"very\">\n                        {saleListLength > 0 && (\n                            <React.Fragment>\n                                <Grid.Column width=\"7\">\n                                    <h3>Suspend Sale</h3>\n                                    <Form>\n                                        <ClearMargin>\n                                            <Form.Input\n                                                id=\"suspend-sale-name\"\n                                                label=\"Customer Name\"\n                                                placeholder=\"Jace, the Mind Sculptor\"\n                                                value={customerName}\n                                                onChange={(e, { value }) =>\n                                                    setCustomerName(\n                                                        value.substring(0, 50)\n                                                    )\n                                                }\n                                            />\n                                        </ClearMargin>\n                                        <ClearMargin>\n                                            <CharLimit>\n                                                {customerName.length}/50\n                                            </CharLimit>\n                                        </ClearMargin>\n                                        <ClearMargin>\n                                            <Form.TextArea\n                                                label=\"Notes\"\n                                                placeholder=\"Sometimes, I forget things...\"\n                                                value={notes}\n                                                onChange={(\n                                                    e,\n                                                    { value }: TextAreaProps\n                                                ) => {\n                                                    if (\n                                                        typeof value ===\n                                                        'string'\n                                                    ) {\n                                                        setNotes(\n                                                            value.substring(\n                                                                0,\n                                                                150\n                                                            )\n                                                        );\n                                                    }\n                                                }}\n                                            />\n                                        </ClearMargin>\n                                        <ClearMargin>\n                                            <CharLimit>\n                                                {notes.length}/150\n                                            </CharLimit>\n                                        </ClearMargin>\n                                        <Form.Button\n                                            id=\"suspend-sale-submit\"\n                                            primary\n                                            disabled={disabled || !customerName}\n                                            loading={loadingBtn.suspendBtn}\n                                            onClick={submitSuspendSale}\n                                        >\n                                            Suspend Sale\n                                        </Form.Button>\n                                    </Form>\n                                </Grid.Column>\n                                <Grid.Column width=\"1\">\n                                    <Divider />\n                                </Grid.Column>\n                            </React.Fragment>\n                        )}\n                        <Grid.Column width=\"7\">\n                            <h3>Restore Sale</h3>\n                            {sales.length > 0 && (\n                                <React.Fragment>\n                                    <Form>\n                                        <Form.Select\n                                            fluid\n                                            label=\"Previously suspended sales\"\n                                            options={sales.map((s) => {\n                                                return {\n                                                    key: s._id,\n                                                    text: s.name,\n                                                    value: s._id,\n                                                };\n                                            })}\n                                            placeholder=\"Select a sale\"\n                                            onChange={(\n                                                e,\n                                                { value }: DropdownProps\n                                            ) => {\n                                                if (typeof value === 'string') {\n                                                    setSaleID(value);\n                                                }\n                                            }}\n                                        />\n                                        <Form.Button\n                                            primary\n                                            disabled={disabled || !saleID}\n                                            loading={loadingBtn.restoreBtn}\n                                            onClick={submitRestoreSale}\n                                        >\n                                            Restore Sale\n                                        </Form.Button>\n                                    </Form>\n                                </React.Fragment>\n                            )}\n                            {sales.length === 0 && (\n                                <Message info>\n                                    <Message.Header>No sales</Message.Header>\n                                    Suspend a sale first\n                                </Message>\n                            )}\n                        </Grid.Column>\n                    </Grid>\n                </Modal.Content>\n                <Modal.Actions>\n                    {!!id && (\n                        <Button\n                            color=\"red\"\n                            disabled={disabled}\n                            loading={loadingBtn.deleteBtn}\n                            onClick={submitDeleteSale}\n                        >\n                            Delete current Sale\n                        </Button>\n                    )}\n                    <Button\n                        primary\n                        disabled={disabled}\n                        onClick={() => setModalOpen(false)}\n                    >\n                        Cancel\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nexport default SuspendSales;\n","export default function pluralize(quantity: number, word: string) {\n    return `${word}${quantity === 1 ? '' : 's'}`;\n}\n","import React, { FC } from 'react';\nimport { Label } from 'semantic-ui-react';\nimport pluralize from '../utils/pluralize';\n\ninterface Props {\n    listLength: number;\n}\n\nconst TotalCardsLabel: FC<Props> = ({ listLength }) => {\n    if (listLength === 0) return null;\n\n    return (\n        <Label color=\"grey\">\n            {listLength} {pluralize(listLength, 'card')}\n        </Label>\n    );\n};\n\nexport default TotalCardsLabel;\n","import React, { useState, useContext, FC } from 'react';\nimport $ from 'jquery';\nimport { Grid, Header, Divider } from 'semantic-ui-react';\nimport SearchBar from '../common/SearchBar';\nimport BrowseCardList from './BrowseCardList';\nimport CustomerSaleList from './CustomerSaleList';\nimport PrintList from './PrintList';\nimport SuspendSales from './SuspendedSale';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport { SaleContext } from '../context/SaleContext';\nimport TotalCardsLabel from '../common/TotalCardsLabel';\nimport AllLocationInventory from '../ManageInventory/AllLocationInventory';\nimport styled from 'styled-components';\nimport sum from '../utils/sum';\nimport cardSearchQuery from '../context/cardSearchQuery';\n\ninterface Props {}\n\nconst HeaderContainer = styled('div')({\n    display: 'flex',\n    justifyContent: 'space-between',\n});\n\nconst ButtonContainer = styled('div')({\n    display: 'flex',\n    '& > *': {\n        marginLeft: '10px',\n    },\n});\n\nconst Sale: FC<Props> = () => {\n    const {\n        saleListCards,\n        suspendedSale,\n        restoreSale,\n        deleteSuspendedSale,\n        suspendSale,\n    } = useContext(SaleContext);\n\n    const [searchResults, setSearchResults] = useState<ScryfallCard[]>([]);\n    const [searchTerm, setSearchTerm] = useState<string>('');\n\n    const handleResultSelect = async (term: string) => {\n        const cards = await cardSearchQuery({\n            cardName: term,\n            inStockOnly: true,\n        });\n\n        setSearchResults(cards);\n        setSearchTerm(term);\n\n        if (cards.length === 0) {\n            $('#searchBar').focus().select();\n        }\n    };\n\n    return (\n        <>\n            <SearchBar handleSearchSelect={handleResultSelect} />\n            <br />\n            <Grid stackable={true}>\n                <Grid.Row>\n                    <Grid.Column width=\"11\">\n                        <HeaderContainer>\n                            <Header as=\"h2\">Inventory</Header>\n                            {searchResults.length > 0 && (\n                                <AllLocationInventory\n                                    searchResults={searchResults}\n                                    title={searchResults[0].name}\n                                />\n                            )}\n                        </HeaderContainer>\n\n                        <Divider />\n\n                        <BrowseCardList\n                            term={searchTerm}\n                            cards={searchResults}\n                        />\n                    </Grid.Column>\n                    <Grid.Column width=\"5\">\n                        <HeaderContainer>\n                            <Header as=\"h2\" id=\"sale-header\">\n                                {suspendedSale.name === ''\n                                    ? 'Sale Items'\n                                    : `${suspendedSale.name}'s Items`}\n                                <TotalCardsLabel\n                                    listLength={sum(\n                                        saleListCards.map((c) => c.qtyToSell)\n                                    )}\n                                />\n                            </Header>\n                            <ButtonContainer>\n                                <SuspendSales\n                                    restoreSale={restoreSale}\n                                    suspendSale={suspendSale}\n                                    saleListLength={saleListCards.length}\n                                    deleteSuspendedSale={deleteSuspendedSale}\n                                    id={suspendedSale._id}\n                                />\n                                {saleListCards.length > 0 && (\n                                    <PrintList saleListCards={saleListCards} />\n                                )}\n                            </ButtonContainer>\n                        </HeaderContainer>\n\n                        <Divider />\n\n                        <CustomerSaleList saleList={saleListCards} />\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </>\n    );\n};\n\nexport default Sale;\n","import moment from 'moment';\n\nfunction formatDate(date: string) {\n    return moment(date).format('MM/DD/YYYY - h:mm A');\n}\n\nexport default formatDate;\n","import React, { FC } from 'react';\nimport { Table } from 'semantic-ui-react';\nimport sum from '../utils/sum';\nimport { Sale } from './browseSalesQuery';\nimport formatDate from '../utils/formatDate';\n\ninterface Props {\n    sale: Sale;\n}\n\nconst SalesListItem: FC<Props> = ({ sale }) => {\n    const { card_list, sale_data } = sale;\n\n    const quantitySold = sum(card_list.map((c) => Number(c.qtyToSell)));\n\n    return (\n        <Table.Row>\n            <Table.Cell>{sale_data.saleID}</Table.Cell>\n            <Table.Cell>{formatDate(sale_data.createTime)}</Table.Cell>\n            <Table.Cell>{quantitySold}</Table.Cell>\n        </Table.Row>\n    );\n};\n\nexport default SalesListItem;\n","import React, { FC } from 'react';\nimport SalesListItem from './SalesListItem';\nimport { Table } from 'semantic-ui-react';\nimport { Sale } from './browseSalesQuery';\n\ninterface Props {\n    list: Sale[];\n}\n\nconst SalesList: FC<Props> = ({ list }) => {\n    return (\n        <Table celled unstackable compact>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Sale ID</Table.HeaderCell>\n                    <Table.HeaderCell>Date of Sale</Table.HeaderCell>\n                    <Table.HeaderCell>Quantity Sold</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n                {list.map((sale) => (\n                    <SalesListItem sale={sale} />\n                ))}\n            </Table.Body>\n        </Table>\n    );\n};\n\nexport default SalesList;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { GET_SALES_BY_TITLE } from '../utils/api_resources';\nimport { SaleListCard } from '../context/SaleContext';\n\ninterface SaleData {\n    total: string;\n    saleID: string;\n    timeStamp: string;\n    createTime: string;\n}\n\nexport interface Sale {\n    _id: string;\n    sale_data: SaleData;\n    card_list: SaleListCard[];\n}\n\ninterface Payload {\n    cardName: string;\n}\n\nconst browseSalesQuery = async ({ cardName }: Payload) => {\n    try {\n        const { data } = await axios.get<Sale[]>(GET_SALES_BY_TITLE, {\n            params: { cardName: cardName },\n            headers: makeAuthHeader(),\n        });\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default browseSalesQuery;\n","import React, { FC, useState } from 'react';\nimport SearchBar from '../common/SearchBar';\nimport SalesList from './SalesList';\nimport { Header, Divider } from 'semantic-ui-react';\nimport browseSalesQuery, { Sale } from './browseSalesQuery';\n\nconst BrowseSales: FC = () => {\n    const [salesList, setSalesList] = useState<Sale[]>([]);\n    const [cardName, setCardName] = useState<string>('');\n\n    const handleSearchSelect = async (cardName: string) => {\n        const sales = await browseSalesQuery({ cardName });\n\n        setSalesList(sales);\n        setCardName(cardName);\n    };\n\n    return (\n        <div>\n            <SearchBar handleSearchSelect={handleSearchSelect} />\n\n            <Header as=\"h2\">Browse Sales</Header>\n            <Divider />\n\n            <span>\n                <em>\n                    {cardName !== '' && (\n                        <h4>\n                            {salesList.length} results for {cardName}\n                        </h4>\n                    )}\n                </em>\n            </span>\n            <SalesList list={salesList} />\n        </div>\n    );\n};\n\nexport default BrowseSales;\n","import React, { FC } from 'react';\nimport { Image as SurImage, Label } from 'semantic-ui-react';\nimport MarketPrice from '../common/MarketPrice';\nimport styled from 'styled-components';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport parseQoh from '../utils/parseQoh';\n\ninterface Props {\n    card: ScryfallCard;\n}\n\n// These numbers were the originally calculated px values\nconst cardImageRatio = 418.3 / 300;\nconst cardImageWidth = 275;\nconst cardImageHeight = cardImageRatio * cardImageWidth;\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: ${cardImageWidth}px;\n`;\n\nconst InventoryWrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    justify-content: space-between;\n    padding: 5px;\n    background-color: rgba(0, 0, 0, 0.9);\n    border-radius: 10px 10px 10px 10px;\n    box-shadow: 2px 2px 5px 0 rgba(0, 0, 0, 0.25);\n`;\n\nconst InventoryRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    margin: 5px;\n`;\n\nconst ImageWrapper = styled.div`\n    width: ${cardImageWidth}px;\n    height: ${cardImageHeight}px;\n    box-shadow: 2px 2px 5px 0 rgba(0, 0, 0, 0.25);\n    background: repeating-linear-gradient(\n        45deg,\n        #bfbfbf,\n        #bfbfbf 10px,\n        #b0b0b0 10px,\n        #b0b0b0 20px\n    );\n    border-radius: 15px;\n`;\n\nconst Image = styled(SurImage)({\n    borderRadius: '15px',\n});\n\nconst PublicCardItem: FC<Props> = ({ card }) => {\n    const { id, cardImage } = card;\n    const [foilQty, nonfoilQty] = parseQoh(card.qoh);\n\n    return (\n        <Wrapper>\n            <ImageWrapper>\n                <Image src={cardImage} size=\"medium\" />\n            </ImageWrapper>\n            <InventoryWrapper>\n                {foilQty > 0 && (\n                    <InventoryRow>\n                        <Label color=\"blue\" image>\n                            Foil<Label.Detail>{foilQty}</Label.Detail>\n                        </Label>\n                        <MarketPrice\n                            id={id}\n                            finish=\"FOIL\"\n                            round\n                            showMid={false}\n                        />\n                    </InventoryRow>\n                )}\n                {nonfoilQty > 0 && (\n                    <InventoryRow>\n                        <Label color=\"blue\" image>\n                            Nonfoil<Label.Detail>{nonfoilQty}</Label.Detail>\n                        </Label>\n                        <MarketPrice\n                            id={id}\n                            finish=\"NONFOIL\"\n                            round\n                            showMid={false}\n                        />\n                    </InventoryRow>\n                )}\n            </InventoryWrapper>\n        </Wrapper>\n    );\n};\n\nexport default PublicCardItem;\n","import axios from 'axios';\nimport { ScryfallCard, ScryfallApiCard } from '../utils/ScryfallCard';\nimport { GET_CARDS_WITH_INFO_PUBLIC } from '../utils/api_resources';\nimport { ClubhouseLocation } from '../context/AuthProvider';\n\ninterface Params {\n    title: string;\n    matchInStock: boolean;\n    location: ClubhouseLocation;\n}\n\n/**\n * Fetches cards from the DB by title when a user selects a title after querying.\n * This function merges the data (inventory quantity and card objects) from two endpoints into one array.\n */\nconst publicCardSearchQuery = async (params: Params) => {\n    try {\n        const { data } = await axios.get<ScryfallApiCard[]>(\n            GET_CARDS_WITH_INFO_PUBLIC,\n            {\n                params,\n            }\n        );\n\n        return data.map((d) => new ScryfallCard(d));\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default publicCardSearchQuery;\n","import React, { FC, SyntheticEvent, useState } from 'react';\nimport { Grid, Segment, Header, Icon, Form, Select } from 'semantic-ui-react';\nimport SearchBar from '../common/SearchBar';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport { Formik } from 'formik';\nimport { ClubhouseLocation } from '../context/AuthProvider';\nimport styled from 'styled-components';\nimport PublicCardItem from './PublicCardItem';\nimport publicCardSearchQuery from './publicCardSearchQuery';\n\ninterface State {\n    searchResults: ScryfallCard[];\n    searchTerm: string;\n    selectedLocation: ClubhouseLocation;\n}\n\ninterface FormValues {\n    searchTerm: string;\n    selectedLocation: ClubhouseLocation;\n}\n\nconst GridContainer = styled('div')({\n    display: 'grid',\n    gridGap: '20px',\n    gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))',\n    justifyItems: 'center',\n});\n\nconst StyledFormGroup = styled(Form.Group)({\n    alignItems: 'flex-end',\n});\n\nconst initialState: State = {\n    searchResults: [],\n    searchTerm: '',\n    selectedLocation: 'ch1',\n};\n\nconst initialFormState: FormValues = {\n    searchTerm: '',\n    selectedLocation: 'ch1',\n};\n\nconst locationOptions = [\n    { key: 'beaverton', text: 'CH Beaverton', value: 'ch1' },\n    { key: 'hillsboro', text: 'CH Hillsboro', value: 'ch2' },\n];\n\nconst PublicInventory: FC = () => {\n    const [state, setState] = useState<State>(initialState);\n    const [formSubmitted, setFormSubmitted] = useState<boolean>(false);\n\n    const fetchCards = async ({\n        title,\n        location,\n    }: {\n        title: string;\n        location: ClubhouseLocation;\n    }) => {\n        try {\n            const cards = await publicCardSearchQuery({\n                title,\n                location,\n                matchInStock: true,\n            });\n\n            setState({\n                ...state,\n                searchResults: cards,\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    return (\n        <>\n            <Formik\n                onSubmit={async ({\n                    searchTerm,\n                    selectedLocation,\n                }: FormValues) => {\n                    await fetchCards({\n                        title: searchTerm,\n                        location: selectedLocation,\n                    });\n\n                    setFormSubmitted(true);\n                }}\n                initialValues={initialFormState}\n            >\n                {({ values, handleSubmit, setFieldValue, isSubmitting }) => (\n                    <Form>\n                        <StyledFormGroup widths=\"5\">\n                            <Form.Field>\n                                <label>Card search</label>\n                                <SearchBar\n                                    handleSearchSelect={(value) =>\n                                        setFieldValue('searchTerm', value)\n                                    }\n                                />\n                            </Form.Field>\n                            <Form.Field\n                                label=\"Store location\"\n                                control={Select}\n                                value={values.selectedLocation}\n                                options={locationOptions}\n                                onChange={(\n                                    _: SyntheticEvent,\n                                    { value }: { value: ClubhouseLocation }\n                                ) => setFieldValue('selectedLocation', value)}\n                            />\n                            <Form.Button\n                                type=\"submit\"\n                                primary\n                                disabled={!values.searchTerm}\n                                loading={isSubmitting}\n                                onClick={() => handleSubmit()}\n                            >\n                                Search\n                            </Form.Button>\n                        </StyledFormGroup>\n                    </Form>\n                )}\n            </Formik>\n            <br />\n            <Grid stackable={true}>\n                <Grid.Column>\n                    <Header as=\"h2\">\n                        Inventory Search\n                        <Header.Subheader>\n                            <em>\n                                Card prices subject to change. Consult a\n                                Clubhouse employee for final estimates\n                            </em>\n                        </Header.Subheader>\n                    </Header>\n                    {state.searchResults.length > 0 ? (\n                        <GridContainer>\n                            {state.searchResults.map((c) => (\n                                <PublicCardItem key={c.id} card={c} />\n                            ))}\n                        </GridContainer>\n                    ) : (\n                        <Segment placeholder>\n                            <Header icon>\n                                <Icon name=\"search\" />\n                                {formSubmitted ? (\n                                    <span>No cards found in stock</span>\n                                ) : (\n                                    <span>Search for a card</span>\n                                )}\n                            </Header>\n                        </Segment>\n                    )}\n                </Grid.Column>\n            </Grid>\n        </>\n    );\n};\n\nexport default PublicInventory;\n","import { Form, Select, FormFieldProps } from 'semantic-ui-react';\nimport { FieldConfig, FormikProps } from 'formik';\n\ntype FormikFieldProps<T, O> = {\n    field: FieldConfig;\n    form: FormikProps<T>;\n    label: string;\n    options: O[];\n} & Omit<FormFieldProps, 'label' | 'name' | 'options'>;\n\n/**\n * This is meant to be wrapped by a <Field /> component.\n *\n * The generics are inferred by passed prop values.\n */\nfunction FormikSelectField<T, O>({\n    label,\n    options,\n    /** Injected by <Field /> */\n    field,\n    /** Injected by <Field /> */\n    form,\n    ...props\n}: FormikFieldProps<T, O>) {\n    return (\n        <Form.Field\n            control={Select}\n            label={label}\n            placeholder={label}\n            options={options}\n            name={field.name}\n            onChange={(_: any, { value }: { value: string }) => {\n                form.setFieldValue(field.name, value);\n            }}\n            {...props}\n        />\n    );\n}\n\nexport default FormikSelectField;\n","import { FormFieldProps, Dropdown } from 'semantic-ui-react';\nimport { FieldConfig, FormikProps } from 'formik';\nimport { SyntheticEvent } from 'react';\n\ntype FormikFieldProps<T, O> = {\n    field: FieldConfig;\n    form: FormikProps<T>;\n    label: string;\n    options: O[];\n} & Omit<FormFieldProps, 'label' | 'name' | 'options'>;\n\n/**\n * This is meant to be wrapped by a <Field /> component.\n *\n * The generics are inferred by passed prop values.\n */\nfunction FormikDropdown<T, O>({\n    options,\n    /** Injected by <Field /> */\n    field,\n    /** Injected by <Field /> */\n    form,\n    ...props\n}: FormikFieldProps<T, O>) {\n    return (\n        <Dropdown\n            options={options}\n            name={field.name}\n            onChange={(_: SyntheticEvent, data) => {\n                form.setFieldValue(field.name, data.value);\n            }}\n            {...props}\n        />\n    );\n}\n\nexport default FormikDropdown;\n","import React, { useState, createContext, FC } from 'react';\nimport { sortBy } from 'lodash';\nimport { v4 as uuid } from 'uuid';\nimport createToast from '../common/createToast';\nimport receivingQuery from './receivingQuery';\nimport cardSearchQuery from './cardSearchQuery';\nimport { ScryfallCard } from '../utils/ScryfallCard';\n\ninterface Props {}\n\nexport enum Trade {\n    Cash = 'CASH',\n    Credit = 'CREDIT',\n}\n\n// Customers can only receive cash or credit for their assets\nconst TRADE_TYPES = { CASH: Trade.Cash, CREDIT: Trade.Credit };\n\nexport type ReceivingCard = ScryfallCard & {\n    uuid_key: string;\n    finishCondition: string;\n    cashPrice: number | null;\n    marketPrice: number | null;\n    creditPrice: number | null;\n    tradeType: Trade;\n};\n\ninterface Context {\n    searchResults: ScryfallCard[];\n    receivingList: ReceivingCard[];\n    handleSearchSelect: (term: string) => void;\n    addToList: (\n        quantity: number,\n        card: ScryfallCard,\n        meta: AddToListMeta\n    ) => void;\n    removeFromList: (uuid: string) => void;\n    activeTradeType: (uuid: string, tradeType: Trade) => void;\n    selectAll: (trade: Trade) => void;\n    commitToInventory: (\n        customerName: string,\n        customerContact: string | null\n    ) => void;\n    resetSearchResults: () => void;\n}\n\nconst defaultContext: Context = {\n    searchResults: [],\n    receivingList: [],\n    handleSearchSelect: () => null,\n    addToList: () => null,\n    removeFromList: () => null,\n    activeTradeType: () => null,\n    selectAll: () => null,\n    commitToInventory: () => null,\n    resetSearchResults: () => null,\n};\n\ninterface AddToListMeta {\n    cashPrice: number | null;\n    marketPrice: number | null;\n    creditPrice: number | null;\n    finishCondition: string;\n}\n\nexport const ReceivingContext = createContext<Context>(defaultContext);\n\nconst ReceivingProvider: FC<Props> = ({ children }) => {\n    const [searchResults, setSearchResults] = useState<ScryfallCard[]>([]);\n    const [receivingList, setReceivingList] = useState<ReceivingCard[]>([]);\n\n    const handleSearchSelect = async (term: string) => {\n        const cards = await cardSearchQuery({\n            cardName: term,\n            inStockOnly: false,\n        });\n\n        setSearchResults(cards);\n    };\n\n    /**\n     * Adds a card to the receiving list, with a unique uuid\n     */\n    const addToList = (\n        quantity: number,\n        card: ScryfallCard,\n        { cashPrice, marketPrice, creditPrice, finishCondition }: AddToListMeta\n    ) => {\n        const previousState = [...receivingList];\n\n        // Each line-item represents one card\n        const cardsToAdd: ReceivingCard[] = [...new Array(quantity)].map(() => {\n            const newCard: ReceivingCard = {\n                ...card,\n                cashPrice,\n                marketPrice,\n                creditPrice,\n                finishCondition,\n                // Set to cash if customer doesn't want credit\n                tradeType: creditPrice === 0 ? Trade.Cash : Trade.Credit,\n                uuid_key: uuid(),\n            };\n\n            return newCard;\n        });\n\n        setReceivingList(sortBy([...previousState, ...cardsToAdd], 'name'));\n    };\n\n    /**\n     * Removes a card from the receiving list using the uuid\n     */\n    const removeFromList = (uuid_key: string) => {\n        const copiedState = [...receivingList];\n        setReceivingList(copiedState.filter((e) => e.uuid_key !== uuid_key));\n    };\n\n    /**\n     * Determines whether line-items use cash or credit.\n     * Assigns a new trade type.\n     */\n    const activeTradeType = (uuid_key: string, tradeType: Trade) => {\n        setReceivingList(\n            [...receivingList].map((card) => {\n                if (card.uuid_key === uuid_key) {\n                    card.tradeType = TRADE_TYPES[tradeType];\n                }\n                return card;\n            })\n        );\n    };\n\n    /**\n     * Sets all items to a tradeType, if possible\n     */\n    const selectAll = (selectType: Trade) => {\n        const { CASH, CREDIT } = TRADE_TYPES;\n\n        const newState = [...receivingList].map((card) => {\n            if (\n                selectType === CASH &&\n                card.cashPrice !== null &&\n                card.cashPrice > 0\n            )\n                card.tradeType = selectType;\n            else if (\n                selectType === CREDIT &&\n                card.creditPrice !== null &&\n                card.creditPrice > 0\n            )\n                card.tradeType = selectType;\n\n            return card;\n        });\n\n        setReceivingList(newState);\n    };\n\n    /**\n     * Persists all passed cards to inventory\n     */\n    const commitToInventory = async (\n        customerName: string,\n        customerContact: string | null\n    ) => {\n        try {\n            const cardsToCommit = receivingList.map((card) => ({\n                quantity: 1, // Only committing one per line-item\n                id: card.id,\n                name: card.name,\n                set_name: card.set_name,\n                finishCondition: card.finishCondition,\n                set: card.set,\n                creditPrice: card.creditPrice,\n                cashPrice: card.cashPrice,\n                marketPrice: card.marketPrice,\n                tradeType: card.tradeType,\n            }));\n\n            await receivingQuery({\n                cards: cardsToCommit,\n                customerName,\n                customerContact,\n            });\n\n            setSearchResults([]);\n            setReceivingList([]);\n\n            createToast({\n                color: 'green',\n                header: `${receivingList.length} cards were added to inventory!`,\n                duration: 2000,\n            });\n        } catch (e) {\n            console.log(e);\n            createToast({\n                color: 'red',\n                header: 'Error',\n                message: e.response.data || 'Error receiving cards',\n                duration: 2000,\n            });\n        }\n    };\n\n    const resetSearchResults = () => setSearchResults([]);\n\n    return (\n        <ReceivingContext.Provider\n            value={{\n                searchResults,\n                receivingList,\n                handleSearchSelect,\n                addToList,\n                removeFromList,\n                activeTradeType,\n                selectAll,\n                commitToInventory,\n                resetSearchResults,\n            }}\n        >\n            {children}\n        </ReceivingContext.Provider>\n    );\n};\n\nexport default ReceivingProvider;\n","import axios from 'axios';\nimport { GET_SET_NAMES } from '../utils/api_resources';\nimport makeAuthHeader from '../utils/makeAuthHeader';\n\nconst setNameQuery = async () => {\n    try {\n        const { data } = await axios.get<string[]>(GET_SET_NAMES, {\n            headers: makeAuthHeader(),\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default setNameQuery;\n","import React, { FC, SyntheticEvent, useEffect, useState } from 'react';\nimport SearchBar from '../common/SearchBar';\nimport { Form, Input, Segment } from 'semantic-ui-react';\nimport { Formik, FormikHelpers, Form as FormikForm, Field } from 'formik';\nimport FormikSelectField from '../ui/FormikSelectField';\nimport FormikDropdown from '../ui/FormikDropdown';\nimport setNameQuery from './setNameQuery';\nimport { Filters } from './filteredCardsQuery';\n\nconst formatDropdownOptions: DropdownOption[] = [\n    { key: 'qw', value: '', text: 'None' },\n    { key: 'we', value: 'standard', text: 'Standard' },\n    { key: 'er', value: 'future', text: 'Future' },\n    { key: 'rt', value: 'historic', text: 'Historic' },\n    { key: 'ty', value: 'pioneer', text: 'Pioneer' },\n    { key: 'yu', value: 'modern', text: 'Modern' },\n    { key: 'ui', value: 'legacy', text: 'Legacy' },\n    { key: 'io', value: 'pauper', text: 'Pauper' },\n    { key: 'op', value: 'vintage', text: 'Vintage' },\n    { key: 'as', value: 'penny', text: 'Penny' },\n    { key: 'sd', value: 'commander', text: 'Commander' },\n    { key: 'df', value: 'brawl', text: 'Brawl' },\n    { key: 'fg', value: 'duel', text: 'Duel' },\n    { key: 'gh', value: 'oldschool', text: 'Oldschool' },\n];\n\nconst priceOperatorDropdownOptions: DropdownOption[] = [\n    { key: 'gte', value: 'gte', text: '>=' },\n    { key: 'lte', value: 'lte', text: '<=' },\n    { key: 'gtx', value: 'gt', text: '>' },\n    { key: 'ltx', value: 'lt', text: '<' },\n];\n\nconst finishDropdownOptions: DropdownOption[] = [\n    { key: 'nonfoil_foil', value: '', text: 'None' },\n    { key: 'nonfoil', value: 'NONFOIL', text: 'Nonfoil' },\n    { key: 'foil', value: 'FOIL', text: 'Foil' },\n];\n\nconst sortByDropdownOptions: DropdownOption[] = [\n    { key: 'pricesort', value: 'price', text: 'Price' },\n    { key: 'alphasort', value: 'name', text: 'Card Name' },\n];\n\nconst sortByDirectionDropdownOptions: DropdownOption[] = [\n    { key: 'descdirsort', value: 1, text: 'Ascending' },\n    { key: 'ascdirsort', value: -1, text: 'Descending' },\n];\n\nconst sortByColorDropdownOptions: DropdownOption[] = [\n    { key: 'w', value: 'W', text: 'White' },\n    { key: 'u', value: 'U', text: 'Blue' },\n    { key: 'b', value: 'B', text: 'Black' },\n    { key: 'r', value: 'R', text: 'Red' },\n    { key: 'g', value: 'G', text: 'Green' },\n];\n\nconst colorSpecificityDropdownOptions: DropdownOption[] = [\n    { key: 'all', value: '', text: 'None' },\n    { key: 'colorless', value: 'colorless', text: 'Colorless only' },\n    { key: 'mono', value: 'mono', text: 'Monocolor only' },\n    { key: 'multi', value: 'multi', text: 'Multicolor only' },\n];\n\nconst typeLineOptions: DropdownOption[] = [\n    { key: 'na', value: '', text: 'None' },\n    { key: 'artifact', value: 'Artifact', text: 'Artifact' },\n    { key: 'creature', value: 'Creature', text: 'Creature' },\n    { key: 'enchantment', value: 'Enchantment', text: 'Enchantment' },\n    { key: 'instant', value: 'Instant', text: 'Instant' },\n    { key: 'land', value: 'Land', text: 'Land' },\n    { key: 'planeswalker', value: 'Planeswalker', text: 'Planeswalker' },\n    { key: 'sorcery', value: 'Sorcery', text: 'Sorcery' },\n    { key: 'tribal', value: 'Tribal', text: 'Tribal' },\n];\n\nconst frameOptions: DropdownOption[] = [\n    { key: 'na', value: '', text: 'None' },\n    { key: 'borderless', value: 'borderless', text: 'Borderless' },\n    { key: 'extendedArt', value: 'extendedArt', text: 'Extended Art' },\n    { key: 'showcase', value: 'showcase', text: 'Showcase' },\n];\n\ninterface DropdownOption {\n    key: string;\n    value: string | number;\n    text: string;\n}\n\ninterface FormValues {\n    title: string;\n    setName: string;\n    format: string;\n    price: number;\n    finish: string;\n    colorsArray: string[];\n    colorSpecificity: string;\n    typeLine: string;\n    frame: string;\n    sortByDirection: number;\n    priceOperator: string;\n    sortBy: string;\n}\n\nexport const initialFilters: FormValues = {\n    title: '',\n    setName: '',\n    format: '',\n    price: 0,\n    priceOperator: 'gte',\n    finish: '',\n    sortBy: 'price',\n    colorsArray: [],\n    sortByDirection: -1,\n    colorSpecificity: '',\n    typeLine: '',\n    frame: '',\n};\n\ninterface Props {\n    doSubmit: (v: Filters, page: number) => Promise<void>;\n}\n\nconst DeckboxCloneForm: FC<Props> = ({ doSubmit }) => {\n    const [editionDropdownOptions, setEditionDropdownOptions] = useState<\n        DropdownOption[]\n    >([]);\n\n    const onSubmit = async (\n        values: FormValues,\n        {}: FormikHelpers<FormValues>\n    ) => {\n        try {\n            await doSubmit(\n                {\n                    title: values.title || undefined,\n                    setName: values.setName || undefined,\n                    format: values.format || undefined,\n                    price: Number(values.price) || undefined,\n                    finish: values.finish || undefined,\n                    colors:\n                        values.colorsArray.length > 0\n                            ? values.colorsArray.sort().join('')\n                            : undefined,\n                    colorSpecificity: values.colorSpecificity || undefined,\n                    type: values.typeLine || undefined,\n                    frame: values.frame || undefined,\n                    sortByDirection: values.sortByDirection,\n                    priceOperator: values.priceOperator,\n                    sortBy: values.sortBy,\n                },\n                // Always start at page 1 after filtering\n                1\n            );\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    useEffect(() => {\n        (async () => {\n            const names = await setNameQuery();\n\n            const setNameOptions = names.map((name, idx) => ({\n                key: `set${idx}`,\n                value: name,\n                text: name,\n            }));\n\n            const concatWithBlankOption = [\n                { key: 'snull', value: '', text: 'None' },\n                ...setNameOptions,\n            ];\n\n            setEditionDropdownOptions(concatWithBlankOption);\n        })();\n    }, []);\n\n    return (\n        <Segment>\n            <h3>Filters</h3>\n            <Formik initialValues={initialFilters} onSubmit={onSubmit}>\n                {({ handleChange, setFieldValue }) => (\n                    <FormikForm>\n                        <Form>\n                            <Form.Group widths=\"4\">\n                                <Form.Field>\n                                    <label>Card Name</label>\n                                    <SearchBar\n                                        handleSearchSelect={(value) => {\n                                            setFieldValue('title', value);\n                                        }}\n                                        // Reset form state after user blurs title\n                                        onBlur={(\n                                            event: SyntheticEvent<\n                                                Element,\n                                                Event\n                                            >\n                                        ) => {\n                                            const element = event.target as HTMLInputElement;\n                                            setFieldValue(\n                                                'title',\n                                                element.value\n                                            );\n                                        }}\n                                    />\n                                </Form.Field>\n                                <Field\n                                    name=\"format\"\n                                    label=\"Format\"\n                                    options={formatDropdownOptions}\n                                    component={FormikSelectField}\n                                />\n                                <Field\n                                    name=\"setName\"\n                                    label=\"Edition\"\n                                    options={editionDropdownOptions}\n                                    component={FormikSelectField}\n                                    search\n                                />\n                                <Field\n                                    name=\"finish\"\n                                    label=\"Finish\"\n                                    options={finishDropdownOptions}\n                                    component={FormikSelectField}\n                                />\n                            </Form.Group>\n                            <Form.Group widths=\"4\">\n                                <Field\n                                    name=\"colorsArray\"\n                                    label=\"Colors\"\n                                    options={sortByColorDropdownOptions}\n                                    component={FormikSelectField}\n                                    multiple\n                                />\n                                <Field\n                                    name=\"colorSpecificity\"\n                                    label=\"Color specificity\"\n                                    options={colorSpecificityDropdownOptions}\n                                    component={FormikSelectField}\n                                />\n                                <Field\n                                    name=\"typeLine\"\n                                    label=\"Type Line\"\n                                    options={typeLineOptions}\n                                    component={FormikSelectField}\n                                />\n                                <Field\n                                    name=\"frame\"\n                                    label=\"Frame Effects\"\n                                    options={frameOptions}\n                                    component={FormikSelectField}\n                                />\n                                <Form.Field>\n                                    <label>Price Filter</label>\n                                    <Input\n                                        label={\n                                            <Field\n                                                name=\"priceOperator\"\n                                                options={\n                                                    priceOperatorDropdownOptions\n                                                }\n                                                component={FormikDropdown}\n                                                defaultValue=\"gte\"\n                                            />\n                                        }\n                                        placeholder=\"Enter a price\"\n                                        labelPosition=\"left\"\n                                        name=\"price\"\n                                        type=\"number\"\n                                        onChange={handleChange}\n                                    />\n                                </Form.Field>\n                            </Form.Group>\n                            <h3>{'Sort & Order'}</h3>\n                            <Form.Group>\n                                <Field\n                                    name=\"sortBy\"\n                                    label=\"Sort by\"\n                                    options={sortByDropdownOptions}\n                                    component={FormikSelectField}\n                                    defaultValue={initialFilters.price}\n                                />\n                                <Field\n                                    name=\"sortByDirection\"\n                                    label=\"Order\"\n                                    options={sortByDirectionDropdownOptions}\n                                    component={FormikSelectField}\n                                    defaultValue={\n                                        initialFilters.sortByDirection\n                                    }\n                                />\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Button type=\"submit\" primary>\n                                    Submit\n                                </Form.Button>\n                            </Form.Group>\n                        </Form>\n                    </FormikForm>\n                )}\n            </Formik>\n        </Segment>\n    );\n};\n\nexport default DeckboxCloneForm;\n","import React, { FC } from 'react';\nimport { Table, Icon } from 'semantic-ui-react';\nimport Price from '../common/Price';\nimport CardImageTooltip from '../ui/CardImageTooltip';\nimport SetIcon from '../ui/SetIcon';\nimport { ResponseCard } from './filteredCardsQuery';\n\nconst conditionMap = {\n    NM: 'Near Mint',\n    LP: 'Light Play',\n    MP: 'Moderate Play',\n    HP: 'Heavy Play',\n};\n\ntype Condition = keyof typeof conditionMap;\n\ninterface Props {\n    card: ResponseCard;\n}\n\nconst DeckboxCloneRow: FC<Props> = ({\n    card: {\n        finishCondition,\n        quantityInStock,\n        name,\n        set_name,\n        price,\n        set,\n        rarity,\n        image_uri,\n    },\n}) => {\n    const finish = finishCondition.split('_')[0];\n    const condition = finishCondition.split('_')[1] as Condition;\n\n    return (\n        <Table.Row>\n            <Table.Cell>\n                <CardImageTooltip cardImage={image_uri}>\n                    <span style={{ cursor: 'help' }}>{name} </span>\n                </CardImageTooltip>\n                {finish === 'FOIL' && <Icon name=\"star\" color=\"blue\" />}\n            </Table.Cell>\n            <Table.Cell>\n                <SetIcon set={set} rarity={rarity} />\n                {set_name}\n            </Table.Cell>\n            <Table.Cell>{conditionMap[condition]}</Table.Cell>\n            <Table.Cell>{quantityInStock}</Table.Cell>\n            <Table.Cell>\n                <Price num={price} />\n            </Table.Cell>\n        </Table.Row>\n    );\n};\n\nexport default DeckboxCloneRow;\n","import axios from 'axios';\nimport { GET_CARDS_BY_FILTER } from '../utils/api_resources';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { FinishCondition } from '../utils/ScryfallCard';\n\nexport interface Filters {\n    title?: string;\n    setName?: string;\n    format?: string;\n    price?: number;\n    finish?: string;\n    colors?: string;\n    colorSpecificity?: string;\n    type?: string;\n    frame?: string;\n    sortByDirection: number;\n    priceOperator: string;\n    sortBy: string;\n}\n\ntype Params = Filters & { page: number };\n\nexport interface ResponseCard {\n    _id: string;\n    image_uri: string;\n    name: string;\n    price: number;\n    rarity: string;\n    set: string;\n    set_name: string;\n    finishCondition: FinishCondition;\n    quantityInStock: number;\n}\n\ninterface ResponseData {\n    cards: ResponseCard[];\n    total: number;\n}\n\nconst filteredCardsQuery = async (filters: Filters, page: number) => {\n    const params: Params = { ...filters, page };\n\n    const { data } = await axios.get<ResponseData>(GET_CARDS_BY_FILTER, {\n        params,\n        headers: makeAuthHeader(),\n    });\n\n    return data;\n};\n\nexport default filteredCardsQuery;\n","import React, { FC, useState } from 'react';\nimport DeckboxCloneForm, { initialFilters } from './DeckboxCloneForm';\nimport DeckboxCloneRow from './DeckboxCloneRow';\nimport {\n    Table,\n    Menu,\n    Icon,\n    Dimmer,\n    Loader,\n    Segment,\n    Header,\n    Container,\n} from 'semantic-ui-react';\nimport _ from 'lodash';\nimport filteredCardsQuery, {\n    Filters,\n    ResponseCard,\n} from './filteredCardsQuery';\nconst LIMIT = 100; // Matching the backend for now\n\ninterface State {\n    cards: ResponseCard[];\n    count: number;\n    currentPage: number;\n    numPages: number;\n    isLoading: boolean;\n    cachedFilters: Filters;\n    showPages: any[];\n    searchTouched: boolean;\n}\n\nconst DeckboxClone: FC = () => {\n    const [state, setState] = useState<State>({\n        cards: [],\n        count: 0,\n        currentPage: 0,\n        numPages: 0,\n        isLoading: false,\n        cachedFilters: initialFilters,\n        showPages: [],\n        searchTouched: false, // Tracks whether the user has initially searched for the 'no results' message\n    });\n\n    const fetchData = async (filters: Filters, page: number) => {\n        try {\n            setState({ ...state, isLoading: true });\n\n            const { cards, total } = await filteredCardsQuery(filters, page);\n\n            const numPages = Math.ceil(total / LIMIT);\n            const pages = _.range(1, numPages + 1);\n            let showPages;\n\n            // Logic that controls the visibility of page number links\n            // Default max number pages to display is 5\n            if (page <= 3) {\n                showPages = pages.slice(0, 5);\n            } else if (page >= numPages - 2) {\n                showPages = pages.slice(numPages - 5, numPages);\n            } else {\n                showPages = pages.slice(page - 2, page + 3);\n            }\n\n            setState({\n                ...state,\n                cards: cards,\n                count: total,\n                isLoading: false,\n                numPages: numPages,\n                currentPage: page,\n                showPages: showPages,\n                searchTouched: true,\n                // Set the filters for pagination requests later\n                cachedFilters: filters,\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const {\n        cards,\n        isLoading,\n        currentPage,\n        numPages,\n        showPages,\n        count,\n        cachedFilters,\n    } = state;\n    const showLeftPageButtons = !(currentPage === 1);\n    const showRightPageButtons = !(currentPage === numPages);\n\n    return (\n        <Container>\n            <Dimmer\n                active={isLoading}\n                inverted\n                page\n                style={{ marginTop: '52.63px' }}\n            >\n                <Loader size=\"large\">Loading</Loader>\n            </Dimmer>\n            <Segment secondary>\n                <Icon name=\"exclamation triangle\" color=\"blue\" />\n                Prices from this table are updated weekly and are subject to\n                fluctuations. Consult 'New Sale' or 'Manage Inventory' for\n                up-to-date values\n            </Segment>\n            <DeckboxCloneForm doSubmit={fetchData} />\n            {!!cards.length && (\n                <Table celled striped compact>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell colSpan=\"5\">\n                                <Menu floated>\n                                    <Menu.Item>\n                                        Viewing page {currentPage} of {numPages}\n                                    </Menu.Item>\n                                </Menu>\n                                <Menu floated=\"right\">\n                                    {showLeftPageButtons && (\n                                        <Menu.Item\n                                            as=\"a\"\n                                            icon\n                                            onClick={() =>\n                                                fetchData(\n                                                    cachedFilters,\n                                                    currentPage - 1\n                                                )\n                                            }\n                                        >\n                                            <Icon name=\"chevron left\" />\n                                        </Menu.Item>\n                                    )}\n                                    <React.Fragment>\n                                        {showPages.map((p) => {\n                                            return (\n                                                <Menu.Item\n                                                    key={`page-${p}`}\n                                                    onClick={() =>\n                                                        fetchData(\n                                                            cachedFilters,\n                                                            p\n                                                        )\n                                                    }\n                                                    active={currentPage === p}\n                                                    disabled={currentPage === p}\n                                                    as=\"a\"\n                                                >\n                                                    {p}\n                                                </Menu.Item>\n                                            );\n                                        })}\n                                    </React.Fragment>\n                                    {showRightPageButtons && (\n                                        <Menu.Item\n                                            as=\"a\"\n                                            icon\n                                            onClick={() =>\n                                                fetchData(\n                                                    cachedFilters,\n                                                    currentPage + 1\n                                                )\n                                            }\n                                        >\n                                            <Icon name=\"chevron right\" />\n                                        </Menu.Item>\n                                    )}\n                                </Menu>\n                            </Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Name</Table.HeaderCell>\n                            <Table.HeaderCell>Edition</Table.HeaderCell>\n                            <Table.HeaderCell>Condition</Table.HeaderCell>\n                            <Table.HeaderCell>Qty</Table.HeaderCell>\n                            <Table.HeaderCell>Price</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {cards.map((card) => (\n                            <DeckboxCloneRow\n                                key={`${card._id}-${card.finishCondition}`}\n                                card={card}\n                            />\n                        ))}\n                    </Table.Body>\n                    <Table.Footer>\n                        <Table.Row>\n                            <Table.HeaderCell colSpan=\"5\">\n                                <Menu floated>\n                                    <Menu.Item>\n                                        Total results: {count}\n                                    </Menu.Item>\n                                </Menu>\n                                <Menu floated=\"right\">\n                                    {showLeftPageButtons && (\n                                        <Menu.Item\n                                            as=\"a\"\n                                            icon\n                                            onClick={() =>\n                                                fetchData(\n                                                    cachedFilters,\n                                                    currentPage - 1\n                                                )\n                                            }\n                                        >\n                                            <Icon name=\"chevron left\" />\n                                        </Menu.Item>\n                                    )}\n                                    <React.Fragment>\n                                        {showPages.map((p) => {\n                                            return (\n                                                <Menu.Item\n                                                    key={`page-${p}`}\n                                                    onClick={() =>\n                                                        fetchData(\n                                                            cachedFilters,\n                                                            p\n                                                        )\n                                                    }\n                                                    active={currentPage === p}\n                                                    disabled={currentPage === p}\n                                                    as=\"a\"\n                                                >\n                                                    {p}\n                                                </Menu.Item>\n                                            );\n                                        })}\n                                    </React.Fragment>\n                                    {showRightPageButtons && (\n                                        <Menu.Item\n                                            as=\"a\"\n                                            icon\n                                            onClick={() =>\n                                                fetchData(\n                                                    cachedFilters,\n                                                    currentPage + 1\n                                                )\n                                            }\n                                        >\n                                            <Icon name=\"chevron right\" />\n                                        </Menu.Item>\n                                    )}\n                                </Menu>\n                            </Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Footer>\n                </Table>\n            )}\n            {!cards.length && (\n                <Segment placeholder>\n                    <Header icon>\n                        <Icon name=\"search\" />\n                        {state.searchTouched\n                            ? 'No results found'\n                            : 'Use the filters to browse inventory'}\n                    </Header>\n                </Segment>\n            )}\n        </Container>\n    );\n};\n\nexport default DeckboxClone;\n","import React, { SyntheticEvent } from 'react';\nimport createToast from '../common/createToast';\nimport { Form, Button, Segment, Select } from 'semantic-ui-react';\nimport { Redirect } from 'react-router-dom';\nimport { ClubhouseLocation, useAuthContext } from '../context/AuthProvider';\nimport styled from 'styled-components';\nimport { Formik } from 'formik';\n\ninterface FormValues {\n    username: string;\n    password: string;\n    location: ClubhouseLocation;\n}\n\nconst LoginContainer = styled.div`\n    margin-top: 15px;\n    display: flex;\n    justify-content: center;\n`;\n\nconst FormContainer = styled(Segment)`\n    width: 400px;\n    padding: 25px 25px 25px 25px !important;\n`;\n\nconst initialFormValues: FormValues = {\n    username: '',\n    password: '',\n    location: 'ch1',\n};\n\nconst Login = () => {\n    const { loggedIn, handleLogin } = useAuthContext();\n\n    const onSubmit = async ({ username, password, location }: FormValues) => {\n        const data = await handleLogin(username, password, location);\n\n        if (data.token) {\n            createToast({\n                color: 'green',\n                header: 'Success',\n                message: `Enjoy your time here!`,\n            });\n        } else {\n            createToast({\n                color: 'red',\n                header: 'Error',\n                message: data,\n            });\n        }\n    };\n\n    if (loggedIn) return <Redirect to=\"/manage-inventory\" />;\n\n    return (\n        <LoginContainer>\n            <Formik initialValues={initialFormValues} onSubmit={onSubmit}>\n                {({ values, handleSubmit, setFieldValue, isSubmitting }) => (\n                    <FormContainer raised loading={isSubmitting}>\n                        <Form>\n                            <Form.Field>\n                                <Form.Input\n                                    className=\"username-input\"\n                                    placeholder=\"Username\"\n                                    label=\"Username\"\n                                    value={values.username}\n                                    onChange={(_, { value }) =>\n                                        setFieldValue('username', value)\n                                    }\n                                />\n                            </Form.Field>\n                            <Form.Field>\n                                <Form.Input\n                                    className=\"password-input\"\n                                    placeholder=\"Password\"\n                                    type=\"password\"\n                                    label=\"Password\"\n                                    value={values.password}\n                                    onChange={(_, { value }) =>\n                                        setFieldValue('password', value)\n                                    }\n                                />\n                            </Form.Field>\n                            <Form.Field\n                                label=\"Location\"\n                                control={Select}\n                                value={values.location}\n                                placeholder=\"Select location\"\n                                options={[\n                                    {\n                                        key: 'beaverton',\n                                        text: 'Beaverton (The OG)',\n                                        value: 'ch1',\n                                    },\n                                    {\n                                        key: 'hillsboro',\n                                        text: 'Hillsboro',\n                                        value: 'ch2',\n                                    },\n                                ]}\n                                onChange={(\n                                    _: SyntheticEvent,\n                                    { value }: { value: ClubhouseLocation }\n                                ) => {\n                                    setFieldValue('location', value);\n                                }}\n                            />\n                            <Button\n                                primary\n                                fluid\n                                floated=\"right\"\n                                type=\"submit\"\n                                onClick={() => handleSubmit()}\n                                className=\"login-btn\"\n                                disabled={\n                                    !values.username ||\n                                    !values.password ||\n                                    !values.location\n                                }\n                            >\n                                Submit\n                            </Button>\n                        </Form>\n                    </FormContainer>\n                )}\n            </Formik>\n        </LoginContainer>\n    );\n};\n\nexport default Login;\n","import React, { FC } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useAuthContext } from '../context/AuthProvider';\n\nconst Logout: FC = () => {\n    const { handleLogout } = useAuthContext();\n    handleLogout();\n    return <Redirect to=\"/login\" />;\n};\n\nexport default Logout;\n","import axios from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { RECEIVE_CARDS } from '../utils/api_resources';\nimport { Trade } from './ReceivingContext';\n\ninterface ReceivingQueryCard {\n    quantity: number;\n    finishCondition: string;\n    id: string;\n    name: string;\n    set_name: string;\n    set: string;\n    marketPrice: number | null;\n    cashPrice: number | null;\n    creditPrice: number | null;\n    tradeType: Trade;\n}\n\ninterface Payload {\n    cards: ReceivingQueryCard[];\n    customerName: string;\n    customerContact: string | null;\n}\n\nconst receivingQuery = async ({\n    cards,\n    customerName,\n    customerContact,\n}: Payload) => {\n    try {\n        // We do not expect to use the return type, so we designate it `void`\n        const { data } = await axios.post<void>(\n            RECEIVE_CARDS,\n            { cards, customerName, customerContact },\n            { headers: makeAuthHeader() }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default receivingQuery;\n","import React, { useState, useContext, FC, ChangeEvent } from 'react';\nimport $ from 'jquery';\nimport { Segment, Input, Button, Form, Select, Item } from 'semantic-ui-react';\nimport CardImage from '../common/CardImage';\nimport createToast from '../common/createToast';\nimport { ReceivingContext } from '../context/ReceivingContext';\nimport { finishes, cardConditions } from '../utils/dropdownOptions';\nimport checkCardFinish, { Finish } from '../utils/checkCardFinish';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport CardHeader from '../ui/CardHeader';\n\ninterface Props {\n    card: ScryfallCard;\n}\n\nconst ReceivingSearchItem: FC<Props> = ({ card }) => {\n    const [quantity, setQuantity] = useState<number | null>(1);\n    const [cashPrice, setCashPrice] = useState<number | null>(0);\n    const [creditPrice, setCreditPrice] = useState<number | null>(0);\n    const [selectedCondition, setSelectedCondition] = useState<string>('NM');\n    const [marketPrice, setMarketPrice] = useState<number | null>(0);\n    const [selectedFinish, setSelectedFinish] = useState<Finish>(\n        checkCardFinish(card.nonfoil, card.foil).selectedFinish // seed state from props\n    );\n\n    // Determines whether the select finish dropdown is permanently disabled, seeded from props\n    const finishDisabled = checkCardFinish(card.nonfoil, card.foil)\n        .finishDisabled;\n\n    const { addToList } = useContext(ReceivingContext);\n\n    const handleFinishChange = (\n        e: ChangeEvent<HTMLInputElement>,\n        { value }: { value: Finish }\n    ) => setSelectedFinish(value);\n\n    const handleConditionChange = (\n        e: ChangeEvent<HTMLInputElement>,\n        { value }: { value: string }\n    ) => setSelectedCondition(value);\n\n    // Validates/sanitizes user inputs by tracking the `name` attribute of the input element\n    const handlePriceChange = (\n        e: ChangeEvent<HTMLInputElement>,\n        { value }: { value: string }\n    ) => {\n        let val: number | null = Number(value) || 0;\n        if (val < 0) val = 0;\n        if (value === '') val = null;\n\n        switch (e.target.name) {\n            case 'cashInput':\n                setCashPrice(val);\n                break;\n            case 'marketPriceInput':\n                setMarketPrice(val);\n                break;\n            case 'creditInput':\n                setCreditPrice(val);\n                break;\n            default:\n                break;\n        }\n    };\n\n    const handleQuantityChange = (\n        e: ChangeEvent<HTMLInputElement>,\n        { value }: { value: string }\n    ) => {\n        let val = parseInt(value, 10) || 0;\n        if (val < 0) val = 0; // cannot receive less than 0\n        if (val > 50) val = 50; // set max to 50 cards per single transaction\n        setQuantity(val);\n    };\n\n    const handleFocus = (e: ChangeEvent<HTMLInputElement>) => e.target.select();\n\n    const handleInventoryAdd = () => {\n        if (quantity) {\n            addToList(quantity, card, {\n                cashPrice,\n                marketPrice,\n                creditPrice,\n                finishCondition: `${selectedFinish}_${selectedCondition}`, // ex. NONFOIL_NM\n            });\n\n            setQuantity(1);\n            setCashPrice(0);\n            setMarketPrice(0);\n            setCreditPrice(0);\n            setSelectedCondition('NM');\n            setSelectedFinish(\n                checkCardFinish(card.nonfoil, card.foil).selectedFinish\n            );\n\n            createToast({\n                color: 'green',\n                header: `${quantity}x ${card.name} added to buylist!`,\n                duration: 2000,\n            });\n        }\n\n        // Highlight the input after successful card add\n        $('#searchBar').focus().select();\n    };\n\n    /**\n     * Determines whether the `Add` button should be disabled\n     */\n    const submitDisabled = () => {\n        const validateQty = !quantity;\n        const validateTradeTypes = !(cashPrice || creditPrice);\n        const validateMarketPrice = !marketPrice;\n\n        if (!!cashPrice) {\n            return validateQty || validateTradeTypes || validateMarketPrice;\n        }\n\n        return validateQty || validateTradeTypes;\n    };\n\n    const { image_uris, card_faces, cardImage } = card;\n\n    return (\n        <Segment>\n            <Item.Group divided>\n                <Item>\n                    <Item.Image size=\"small\">\n                        <CardImage image={cardImage} />\n                    </Item.Image>\n                    <Item.Content>\n                        <CardHeader\n                            card={card}\n                            selectedFinish={selectedFinish}\n                            showMid\n                        />\n                        <Item.Description>\n                            <Form>\n                                <Form.Group widths=\"12\">\n                                    <Form.Field\n                                        control={Input}\n                                        type=\"number\"\n                                        label=\"Quantity\"\n                                        value={quantity}\n                                        onChange={handleQuantityChange}\n                                        onFocus={(\n                                            e: ChangeEvent<HTMLInputElement>\n                                        ) => e.target.select()}\n                                        className=\"receiving-quantity\"\n                                    />\n                                    <Form.Field\n                                        label=\"Credit Price\"\n                                        name=\"creditInput\"\n                                        control={Input}\n                                        type=\"number\"\n                                        value={creditPrice}\n                                        onChange={handlePriceChange}\n                                        onFocus={handleFocus}\n                                        step=\"0.25\"\n                                        className=\"receiving-credit\"\n                                    />\n                                    <Form.Field\n                                        label=\"Cash Price\"\n                                        name=\"cashInput\"\n                                        control={Input}\n                                        type=\"number\"\n                                        value={cashPrice}\n                                        onChange={handlePriceChange}\n                                        onFocus={handleFocus}\n                                        step=\"0.25\"\n                                        className=\"receiving-cash\"\n                                    />\n                                    <Form.Field\n                                        label=\"Market Price\"\n                                        name=\"marketPriceInput\"\n                                        control={Input}\n                                        type=\"number\"\n                                        value={marketPrice}\n                                        onChange={handlePriceChange}\n                                        onFocus={handleFocus}\n                                        step=\"0.25\"\n                                        disabled={cashPrice === 0}\n                                        className=\"receiving-market\"\n                                    />\n                                </Form.Group>\n                                <Form.Group widths=\"12\">\n                                    <Form.Field\n                                        label=\"Finish\"\n                                        control={Select}\n                                        value={selectedFinish}\n                                        options={finishes}\n                                        disabled={finishDisabled}\n                                        onChange={handleFinishChange}\n                                    />\n                                    <Form.Field\n                                        label=\"Condition\"\n                                        control={Select}\n                                        value={selectedCondition}\n                                        options={cardConditions}\n                                        onChange={handleConditionChange}\n                                    />\n                                    <Form.Button\n                                        label=\"Add to List?\"\n                                        control={Button}\n                                        primary\n                                        disabled={submitDisabled()}\n                                        onClick={handleInventoryAdd}\n                                    >\n                                        Add\n                                    </Form.Button>\n                                </Form.Group>\n                            </Form>\n                        </Item.Description>\n                    </Item.Content>\n                </Item>\n            </Item.Group>\n        </Segment>\n    );\n};\n\nexport default ReceivingSearchItem;\n","import React, { FC } from 'react';\nimport { Segment, Header, Icon } from 'semantic-ui-react';\n\ninterface Props {\n    active: boolean;\n}\n\nconst DefaultPlaceholder: FC<Props> = ({ active, children }) => {\n    return (\n        <>\n            {active && (\n                <Segment placeholder>\n                    <Header icon>\n                        <Icon name=\"search\" />\n                        <em>{children}</em>\n                    </Header>\n                </Segment>\n            )}\n        </>\n    );\n};\n\nexport default DefaultPlaceholder;\n","import React, { useState, useContext, FC } from 'react';\nimport { Button, Label, Icon, Grid, Segment, Header } from 'semantic-ui-react';\nimport Price from '../common/Price';\nimport {\n    ReceivingCard,\n    ReceivingContext,\n    Trade,\n} from '../context/ReceivingContext';\nimport SetIcon from '../ui/SetIcon';\nimport CardImageTooltip from '../ui/CardImageTooltip';\n\ninterface Props {\n    card: ReceivingCard;\n}\n\n// Defines whether it uses cash or credit for trade types\nconst TRADE_TYPE = { CASH: 'CASH', CREDIT: 'CREDIT' };\n\nconst ReceivingListItem: FC<Props> = ({\n    card: {\n        display_name,\n        set,\n        rarity,\n        cashPrice,\n        creditPrice,\n        finishCondition,\n        uuid_key,\n        tradeType,\n        cardImage,\n    },\n}) => {\n    const { CASH, CREDIT } = TRADE_TYPE;\n    const [hovered, setHovered] = useState(false);\n    const { removeFromList, activeTradeType } = useContext(ReceivingContext);\n\n    return (\n        <Segment>\n            <Grid verticalAlign=\"middle\">\n                <Grid.Column tablet={16} computer={11}>\n                    <div>\n                        <CardImageTooltip cardImage={cardImage}>\n                            <Header as=\"h4\" style={{ cursor: 'help' }}>\n                                {display_name}\n                            </Header>\n                        </CardImageTooltip>\n                    </div>\n                    <SetIcon set={set} rarity={rarity} />\n                    <Label color=\"grey\">{set.toUpperCase()}</Label>\n                    {finishCondition && (\n                        <span>\n                            {finishCondition.split('_')[1]} {' | '}\n                            {finishCondition.split('_')[0]}\n                        </span>\n                    )}\n                    <div>\n                        <span style={{ whiteSpace: 'nowrap' }}>\n                            Cash:{' '}\n                            <b>\n                                <Price num={cashPrice || 0} />\n                            </b>\n                        </span>\n                        {' • '}\n                        <span style={{ whiteSpace: 'nowrap' }}>\n                            Credit:{' '}\n                            <b>\n                                <Price num={creditPrice || 0} />\n                            </b>\n                        </span>\n                    </div>\n                </Grid.Column>\n                <Grid.Column tablet={16} computer={5} textAlign=\"right\">\n                    <Button\n                        compact\n                        active={tradeType === CASH}\n                        color={tradeType === CASH ? 'blue' : undefined}\n                        onClick={() => activeTradeType(uuid_key, Trade.Cash)}\n                        disabled={cashPrice === 0}\n                        icon\n                    >\n                        <Icon name=\"dollar sign\"></Icon>\n                    </Button>\n                    <Button\n                        compact\n                        active={tradeType === CREDIT}\n                        color={tradeType === CREDIT ? 'blue' : undefined}\n                        onClick={() => activeTradeType(uuid_key, Trade.Credit)}\n                        disabled={creditPrice === 0}\n                        icon\n                    >\n                        <Icon name=\"credit card outline\"></Icon>\n                    </Button>\n                    <Button\n                        compact\n                        icon=\"cancel\"\n                        circular\n                        onClick={() => removeFromList(uuid_key)}\n                        onMouseOver={() => setHovered(true)}\n                        onMouseOut={() => setHovered(false)}\n                        color={hovered ? 'red' : undefined}\n                    />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    );\n};\n\nexport default ReceivingListItem;\n","import React, { FC } from 'react';\nimport _ from 'lodash';\nimport Price from '../common/Price';\nimport { Table } from 'semantic-ui-react';\nimport { ReceivingCard } from '../context/ReceivingContext';\n\ninterface Props {\n    receivingList: ReceivingCard[];\n}\n\n// Am I crazy or is this logic really convoluted?\n// Perhaps look at this down the line for improvement...\nconst CashReport: FC<Props> = ({ receivingList }) => {\n    // If id, cashPrice and marketPrice are the same, goes in one bucket\n    const countByPriceAndID = _.chain(receivingList)\n        .filter((c) => c.tradeType === 'CASH')\n        .map((c) => {\n            // Note: We're creating a unique uuid-esque comparator string based on:\n            // `id`, `cashPrice`, `marketPrice`, and `finishCondition`\n            return {\n                ...c,\n                temp_uuid: `${c.id}-${c.cashPrice}-${c.marketPrice}-${c.finishCondition}`,\n            };\n        })\n        .groupBy('temp_uuid')\n        .mapValues((val) => val.length)\n        .value();\n\n    const uniqLineItems = _.chain(receivingList)\n        .filter((c) => c.tradeType === 'CASH')\n        .map((c) => {\n            return {\n                ...c,\n                temp_uuid: `${c.id}-${c.cashPrice}-${c.marketPrice}-${c.finishCondition}`,\n            };\n        })\n        .uniqBy('temp_uuid')\n        .value();\n\n    const mergedWithQty = uniqLineItems.map((c) => {\n        return { ...c, tradeQty: countByPriceAndID[c.temp_uuid] }; // Add a trade quantity referencing the previous count\n    });\n\n    const totalCashOut = _.chain(receivingList)\n        .filter((c) => c.tradeType === 'CASH')\n        .sumBy((c) => c.cashPrice || 0)\n        .value();\n\n    return (\n        <React.Fragment>\n            <div id=\"cash-report\">\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell colSpan={6}>\n                                Employee Name:\n                            </Table.HeaderCell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.HeaderCell>Card Name</Table.HeaderCell>\n                            <Table.HeaderCell>Market Value</Table.HeaderCell>\n                            <Table.HeaderCell>Condition</Table.HeaderCell>\n                            <Table.HeaderCell>Quantity</Table.HeaderCell>\n                            <Table.HeaderCell>Cash Offer</Table.HeaderCell>\n                            <Table.HeaderCell>Cash Out</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {mergedWithQty.map((c) => {\n                            return (\n                                <Table.Row key={c.temp_uuid}>\n                                    <Table.Cell>{c.name}</Table.Cell>\n                                    <Table.Cell>\n                                        <Price num={c.marketPrice} />\n                                    </Table.Cell>\n                                    <Table.Cell>{c.finishCondition}</Table.Cell>\n                                    <Table.Cell>{c.tradeQty}</Table.Cell>\n                                    <Table.Cell>\n                                        <Price num={c.cashPrice} />\n                                    </Table.Cell>\n                                    <Table.Cell>\n                                        <Price\n                                            num={\n                                                c.tradeQty * (c.cashPrice || 0)\n                                            }\n                                        />\n                                    </Table.Cell>\n                                </Table.Row>\n                            );\n                        })}\n                    </Table.Body>\n                    <Table.Footer>\n                        <Table.HeaderCell colSpan={6}>\n                            Total: <Price num={totalCashOut} />\n                        </Table.HeaderCell>\n                    </Table.Footer>\n                </Table>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default CashReport;\n","import React, { useState, useContext, FC } from 'react';\nimport { Modal, Button, Form, List, Header } from 'semantic-ui-react';\nimport { ReceivingContext, Trade } from '../context/ReceivingContext';\nimport Price from '../common/Price';\nimport { useFormik } from 'formik';\nimport sum from '../utils/sum';\n\ninterface Props {}\n\ninterface FormValues {\n    customerName: string;\n    customerContact: string;\n}\n\nconst initialFormValues: FormValues = {\n    customerName: '',\n    customerContact: '',\n};\n\n// TODO: Extract and generalize this\nconst validate = ({ customerName, customerContact }: FormValues) => {\n    const errors: Partial<Record<keyof FormValues, string>> = {};\n\n    if (!customerName) {\n        errors.customerName = 'Required';\n    }\n\n    if (customerName.length < 3) {\n        errors.customerName = 'Min 3 characters';\n    }\n\n    if (customerName.length > 50) {\n        errors.customerName = 'Max 50 characters';\n    }\n\n    if (customerContact.length > 50) {\n        errors.customerContact = 'Max 50 characters';\n    }\n\n    return errors;\n};\n\nconst ReceivingListModal: FC<Props> = () => {\n    const [loading, setLoading] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n\n    const { receivingList, commitToInventory } = useContext(ReceivingContext);\n\n    const onSubmit = async ({ customerName, customerContact }: FormValues) => {\n        setLoading(true);\n        await commitToInventory(\n            customerName,\n            customerContact ? customerContact : null\n        );\n        setLoading(false);\n    };\n\n    const { handleChange, handleSubmit, errors } = useFormik({\n        initialValues: initialFormValues,\n        validate,\n        onSubmit,\n    });\n\n    const cashTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Trade.Cash)\n            .map((c) => c.cashPrice || 0)\n    );\n\n    const creditTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Trade.Credit)\n            .map((c) => c.creditPrice || 0)\n    );\n\n    return (\n        <>\n            <Button\n                color=\"blue\"\n                disabled={receivingList.length === 0}\n                onClick={() => setShowModal(true)}\n            >\n                Commit to inventory\n            </Button>\n            {setShowModal && (\n                <Modal\n                    closeOnDimmerClick={false}\n                    open={showModal}\n                    onClose={() => setShowModal(false)}\n                >\n                    <Modal.Header>Receiving confirmation</Modal.Header>\n                    <Modal.Content scrolling>\n                        <Header as=\"h5\">\n                            Committing the following cards to inventory:\n                        </Header>\n                        <List>\n                            {receivingList.map((c) => {\n                                return (\n                                    <List.Item key={c.uuid_key}>\n                                        {`● ${c.name} | ${c.set_name} (\n                                        ${c.set.toUpperCase()})`}\n                                    </List.Item>\n                                );\n                            })}\n                        </List>\n                        <Header as=\"h5\">The customer is owed:</Header>\n                        <List>\n                            {cashTotal > 0 ? (\n                                <List.Item>\n                                    ● <Price num={cashTotal} /> in cold, hard\n                                    cash\n                                </List.Item>\n                            ) : null}\n                            {creditTotal > 0 ? (\n                                <List.Item>\n                                    ● <Price num={creditTotal} /> in store\n                                    credit\n                                </List.Item>\n                            ) : null}\n                        </List>\n                    </Modal.Content>\n                    <Modal.Content>\n                        <Form>\n                            <Form.Group widths=\"equal\">\n                                <Form.Field>\n                                    <label>Customer name</label>\n                                    <Form.Input\n                                        onChange={handleChange}\n                                        name=\"customerName\"\n                                        error={errors.customerName}\n                                    />\n                                </Form.Field>\n                                <Form.Field>\n                                    <label>Customer contact (optional)</label>\n                                    <Form.Input\n                                        onChange={handleChange}\n                                        name=\"customerContact\"\n                                        error={errors.customerContact}\n                                    />\n                                </Form.Field>\n                            </Form.Group>\n                        </Form>\n                    </Modal.Content>\n                    <Modal.Actions>\n                        <Button onClick={() => setShowModal(false)}>\n                            Cancel\n                        </Button>\n                        <Button\n                            color=\"blue\"\n                            type=\"submit\"\n                            loading={loading}\n                            disabled={loading}\n                            onClick={() => handleSubmit()}\n                        >\n                            Submit\n                        </Button>\n                    </Modal.Actions>\n                </Modal>\n            )}\n        </>\n    );\n};\n\nexport default ReceivingListModal;\n","import React, { useState, useContext, FC } from 'react';\nimport { Segment, Statistic, Button, Modal } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport Price from '../common/Price';\nimport CashReport from './CashReport';\nimport printCashReport from './printCashReport';\nimport ReceivingListModal from './ReceivingListModal';\nimport { ReceivingContext, Trade } from '../context/ReceivingContext';\nimport sum from '../utils/sum';\n\ninterface Props {}\n\nconst FlexRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nconst FlexCol = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n    min-height: 100px;\n`;\n\nconst StatisticColor = styled(Statistic.Label)`\n    color: gray !important;\n`;\n\nconst ReceivingListTotals: FC<Props> = () => {\n    const { Cash, Credit } = Trade;\n    const [showCashModal, setShowCashModal] = useState(false);\n    const { receivingList, selectAll } = useContext(ReceivingContext);\n\n    const openCashModal = () => setShowCashModal(true);\n    const closeCashModal = () => setShowCashModal(false);\n\n    const handlePrintCashReport = () => {\n        setShowCashModal(false); // Close the modal so users don't have to after printing in new tab\n        printCashReport();\n    };\n\n    const cashTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Cash)\n            .map((c) => c.cashPrice || 0)\n    );\n\n    const creditTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Credit)\n            .map((c) => c.creditPrice || 0)\n    );\n\n    return (\n        <Segment>\n            <FlexRow>\n                <FlexCol>\n                    <Button.Group>\n                        <Button\n                            id=\"select-all-cash\"\n                            onClick={() => selectAll(Trade.Cash)}\n                        >\n                            Select all cash\n                        </Button>\n                        <Button.Or />\n                        <Button\n                            id=\"select-all-credit\"\n                            onClick={() => selectAll(Trade.Credit)}\n                        >\n                            Select all credit\n                        </Button>\n                    </Button.Group>\n                    <Modal\n                        open={showCashModal}\n                        trigger={\n                            <Button\n                                color={cashTotal > 0 ? 'green' : undefined}\n                                disabled={cashTotal === 0}\n                                onClick={openCashModal}\n                            >\n                                Generate cash report\n                            </Button>\n                        }\n                    >\n                        <Modal.Content>\n                            <CashReport receivingList={receivingList} />\n                        </Modal.Content>\n                        <Modal.Actions>\n                            <Button\n                                onClick={handlePrintCashReport}\n                                color=\"blue\"\n                            >\n                                Print Report\n                            </Button>\n                            <Button onClick={closeCashModal}>Cancel</Button>\n                        </Modal.Actions>\n                    </Modal>\n                </FlexCol>\n                <FlexCol>\n                    <Segment>\n                        <div>\n                            <Statistic size=\"mini\">\n                                <StatisticColor>Cash Due</StatisticColor>\n                                <Statistic.Value id=\"cash-total\">\n                                    <Price num={cashTotal} />\n                                </Statistic.Value>\n                            </Statistic>\n                            <Statistic size=\"mini\">\n                                <StatisticColor>Credit Due</StatisticColor>\n                                <Statistic.Value id=\"credit-total\">\n                                    <Price num={creditTotal} />\n                                </Statistic.Value>\n                            </Statistic>\n                        </div>\n                        <ReceivingListModal />\n                    </Segment>\n                </FlexCol>\n            </FlexRow>\n        </Segment>\n    );\n};\n\nexport default ReceivingListTotals;\n","const printStyle = `\n    body {\n        font-family: 'helvetica neue', helvetica, arial, sans-serif;\n    }\n\n    table {\n        table-layout: fixed;\n        width: 100%;\n        border-collapse: collapse;\n        border: 1px solid gray;\n        text-align: left;\n    }\n\n    thead th:nth-child(1) {\n        width: 30%;\n    }\n\n    thead th:nth-child(2) {\n        width: 20%;\n    }\n\n    thead th:nth-child(3) {\n        width: 15%;\n    }\n\n    thead th:nth-child(4) {\n        width: 35%;\n    }\n\n    th, td {\n        border: 1px solid #ddd;\n        padding: 10px;\n    }\n\n    tfoot {\n        text-align: right !important;\n    }\n`;\n\n/**\n * We're creating a new tab here for the modal table and writing CSS to it - not the most elegant solution from a UX and\n * code standpoint, but time was of the essence for this release. Refactor down the road.\n *\n * The id cash-report is found on the cash report table\n */\nexport default function printCashReport() {\n    const divToPrint = document.getElementById('cash-report')!;\n    const popup = window.open('', '_blank');\n    if (popup) {\n        popup.document.open();\n        popup.document.write(`<html>`);\n        popup.document.write(`<head>`);\n        popup.document.write(`<title>Cash Report</title>`);\n        popup.document.write(`<style>${printStyle}</style>`);\n        popup.document.write(`</head>`);\n        popup.document.write(`<body onload=\"window.print()\">`);\n        popup.document.write(`${divToPrint.innerHTML}`);\n        popup.document.write(`</body>`);\n        popup.document.write(`</html>`);\n        popup.document.close();\n    }\n}\n","import React, { FC } from 'react';\nimport { Segment } from 'semantic-ui-react';\nimport { ReceivingCard } from '../context/ReceivingContext';\nimport ReceivingListItem from './ReceivingListItem';\nimport ReceivingListTotals from './ReceivingListTotals';\n\ninterface Props {\n    cards: ReceivingCard[];\n}\n\nconst ReceivingList: FC<Props> = ({ cards }) => {\n    return (\n        <>\n            {cards.length > 0 && (\n                <Segment.Group>\n                    {cards.map((card) => (\n                        <ReceivingListItem card={card} />\n                    ))}\n                </Segment.Group>\n            )}\n            {cards.length > 0 && <ReceivingListTotals />}\n        </>\n    );\n};\n\nexport default ReceivingList;\n","import React, { FC, useContext, useEffect } from 'react';\nimport SearchBar from '../common/SearchBar';\nimport ReceivingSearchItem from './ReceivingSearchItem';\nimport { Header, Grid, Divider } from 'semantic-ui-react';\nimport { ReceivingContext } from '../context/ReceivingContext';\nimport DefaultPlaceholder from './DefaultPlaceholder';\nimport ReceivingList from './ReceivingList';\nimport TotalCardsLabel from '../common/TotalCardsLabel';\nimport styled from 'styled-components';\nimport AllLocationInventory from '../ManageInventory/AllLocationInventory';\n\ninterface Props {}\n\nconst HeaderContainer = styled('div')({\n    display: 'flex',\n    justifyContent: 'space-between',\n});\n\nconst Receiving: FC<Props> = () => {\n    const {\n        searchResults,\n        receivingList,\n        handleSearchSelect,\n        resetSearchResults,\n    } = useContext(ReceivingContext);\n\n    // Reset the search results on componentDidUnmount to clear store\n    useEffect(() => {\n        return () => resetSearchResults();\n    }, []);\n\n    return (\n        <>\n            <SearchBar handleSearchSelect={handleSearchSelect} />\n            <br />\n            <Grid stackable={true}>\n                <Grid.Row>\n                    <Grid.Column width=\"10\">\n                        <HeaderContainer>\n                            <Header as=\"h2\">Card Search</Header>\n                            {searchResults.length > 0 && (\n                                <div>\n                                    <AllLocationInventory\n                                        searchResults={searchResults}\n                                        title={searchResults[0].name}\n                                    />\n                                </div>\n                            )}\n                        </HeaderContainer>\n\n                        <Divider />\n\n                        <DefaultPlaceholder active={!searchResults.length}>\n                            \"So many cards, so little time.\"\n                        </DefaultPlaceholder>\n\n                        {searchResults.map((card) => (\n                            <ReceivingSearchItem key={card.id} card={card} />\n                        ))}\n                    </Grid.Column>\n                    <Grid.Column width=\"6\">\n                        <Header as=\"h2\" style={{ display: 'inline-block' }}>\n                            Buylist\n                            <TotalCardsLabel\n                                listLength={receivingList.length}\n                            />\n                        </Header>\n\n                        <Divider />\n\n                        <DefaultPlaceholder active={!receivingList.length}>\n                            \"If you receive it, they will come.\"\n                        </DefaultPlaceholder>\n\n                        <ReceivingList cards={receivingList} />\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </>\n    );\n};\n\nexport default Receiving;\n","import React, { FC } from 'react';\nimport { Redirect, Route, RouteProps } from 'react-router';\nimport { useAuthContext } from './context/AuthProvider';\n\nconst AdminOnly: FC = ({ children }) => {\n    const { currentUser, currentLocation } = useAuthContext();\n\n    if (!currentUser || !currentLocation) {\n        return <Redirect to=\"/\" />;\n    }\n\n    return <>{children}</>;\n};\n\nconst AdminRoute: FC<RouteProps> = ({ children, ...props }) => {\n    return (\n        <Route {...props}>\n            <AdminOnly>{children}</AdminOnly>\n        </Route>\n    );\n};\n\nexport default AdminRoute;\n","export default __webpack_public_path__ + \"static/media/clubhouse_products.e622049f.png\";","export default __webpack_public_path__ + \"static/media/tables.451be904.jpg\";","export default __webpack_public_path__ + \"static/media/learn_to_play.91a17850.jpg\";","export default __webpack_public_path__ + \"static/media/ch2.f55f010a.jpg\";","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport clubhouse_products from './clubhouse_products.png';\nimport ch1 from './tables.jpg';\nimport learn_to_play from './learn_to_play.jpg';\nimport ch2 from './ch2.jpg';\n\nconst colors = {\n    primary: '#2185d0',\n    white: '#ffffff',\n    gray: {\n        light: '#99aab5',\n        main: '#2c2f33',\n        dark: '#23272a',\n    },\n};\n\nconst primaryRgb = '13, 49, 69,';\nconst bodyBackground = '#f8f5ef';\n\nconst desktopMediaQuery = `@media only screen and (min-width: 769px)`;\nconst tabletMediaQuery = `@media only screen and (max-width: 768px)`;\n\nconst headerHeight = 52;\nconst borderRadius = 7;\n\nconst HeroImageContainer = styled('div')({\n    width: '100%',\n    height: 500,\n});\n\nconst Container = styled('div')({\n    marginTop: headerHeight,\n});\n\ninterface ImageProps {\n    src: string;\n    rounded?: boolean;\n}\n\nconst Image = styled.div<ImageProps>`\n    background: url(${({ src }) => src});\n    background-size: cover;\n    height: 100%;\n    width: 100%;\n    border-radius: ${({ rounded }) => (rounded ? `${borderRadius}px` : '0px')};\n`;\n\nconst LocationImageContainer = styled('div')({\n    width: '100%',\n    height: 350,\n    borderRadius: borderRadius,\n});\n\nconst ImageGradient = styled('div')({\n    backgroundImage: `linear-gradient(\n        to top,\n        rgba(${primaryRgb} 0.9),\n        rgba(${primaryRgb} 0.85),\n        rgba(${primaryRgb} 0.70),\n        rgba(${primaryRgb} 0.60),\n        rgba(255, 255, 255, 0)\n    )`,\n    height: '100%',\n    width: '100%',\n});\n\nconst ImageGradient2 = styled('div')({\n    backgroundColor: `rgba(${primaryRgb} 0.85)`,\n    height: '100%',\n    width: '100%',\n    borderRadius: borderRadius,\n});\n\nconst HeroText = styled('h1')({\n    color: colors.white,\n    textAlign: 'center',\n    [tabletMediaQuery]: {\n        fontSize: 40,\n    },\n    [desktopMediaQuery]: {\n        fontSize: 50,\n    },\n});\n\ninterface HeaderTextProps {\n    inverted?: boolean;\n}\n\nconst HeaderText = styled.h1<HeaderTextProps>`\n    color: ${({ inverted }) => (inverted ? colors.white : colors.gray.main)};\n`;\n\nconst SectionText = styled('h2')({\n    color: colors.white,\n    textAlign: 'center',\n});\n\nconst SubheaderText = styled('div')({\n    color: colors.white,\n    fontSize: 18,\n});\n\nconst HeaderContainer = styled('div')({\n    display: 'flex',\n    height: 'inherit',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n});\n\nconst ServicesContainer = styled('div')({\n    display: 'grid',\n    gridGap: 60,\n    [tabletMediaQuery]: {\n        gridTemplateRows: '1fr 1fr 1fr',\n    },\n    [desktopMediaQuery]: {\n        gridTemplateColumns: '1fr 1fr 1fr',\n    },\n});\n\nconst LocationsContainer = styled('div')({\n    display: 'grid',\n    gridGap: 20,\n    [tabletMediaQuery]: {\n        gridTemplateRows: '1fr 1fr',\n    },\n    [desktopMediaQuery]: {\n        gridTemplateColumns: '1fr 1fr',\n    },\n});\n\nconst LocationContainer = styled('div')({\n    padding: 40,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    height: '100%',\n});\n\nconst Content = styled('div')({\n    padding: 20,\n});\n\ninterface DescriptionProps {\n    inverted?: boolean;\n}\n\nconst Description = styled.div<DescriptionProps>`\n    color: ${({ inverted }) => (inverted ? colors.white : colors.gray.main)};\n    font-size: 18px;\n`;\n\nconst TextWidth = styled('div')({\n    [tabletMediaQuery]: {\n        width: '100%',\n    },\n    [desktopMediaQuery]: {\n        width: '50%',\n    },\n});\n\nconst IconContainer = styled('div')({\n    padding: 40,\n    backgroundColor: colors.gray.main,\n    borderRadius: borderRadius,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n});\n\nconst SectionDivider = styled('div')({\n    width: '100%',\n    padding: 40,\n});\n\nconst Footer = styled('div')({\n    bottom: 0,\n    backgroundColor: colors.gray.dark,\n    [tabletMediaQuery]: {\n        padding: 20,\n    },\n    [desktopMediaQuery]: {\n        paddingLeft: 40,\n        paddingBottom: 20,\n        paddingRight: 40,\n        paddingTop: 40,\n    },\n});\n\ninterface FlexRowProps {\n    justify?: 'center' | 'space-between';\n}\n\nconst FlexRow = styled.div<FlexRowProps>`\n    display: flex;\n    justify-content: ${({ justify }) => justify || 'space-between'};\n    align-items: center;\n`;\n\nconst Home: FC = () => {\n    return (\n        <Container style={{ backgroundColor: bodyBackground }}>\n            <HeroImageContainer>\n                <Image src={learn_to_play}>\n                    <ImageGradient>\n                        <HeaderContainer>\n                            <HeroText>The Clubhouse is open 🎉</HeroText>\n                            <TextWidth>\n                                <SubheaderText>\n                                    <SectionText>\n                                        We are open all week for your tabletop\n                                        gaming needs!\n                                    </SectionText>\n                                </SubheaderText>\n                            </TextWidth>\n                            <br />\n                            <Link to=\"/public-inventory\">\n                                <Button size=\"huge\" primary>\n                                    Browse cards\n                                </Button>\n                            </Link>\n                        </HeaderContainer>\n                    </ImageGradient>\n                </Image>\n            </HeroImageContainer>\n            <SectionDivider />\n            <Content>\n                <HeaderText>Your local game store.</HeaderText>\n                <TextWidth>\n                    <Description>\n                        We take pride in our friendly community of players, and\n                        always ensure that our customers are well served.\n                    </Description>\n                </TextWidth>\n            </Content>\n            <Content>\n                <ServicesContainer>\n                    <div>\n                        <IconContainer>\n                            <Icon name=\"box\" size=\"huge\" inverted />\n                            <SectionText>Large product selection</SectionText>\n                        </IconContainer>\n                        <br />\n                        <Description>\n                            We stock an extensive selection of singles and CCG\n                            supplies just for you! When the deck-building itch\n                            strikes, turn to us\n                        </Description>\n                    </div>\n                    <div>\n                        <IconContainer>\n                            <Icon name=\"users\" size=\"huge\" inverted />\n                            <SectionText>Inclusive community</SectionText>\n                        </IconContainer>\n                        <br />\n                        <Description>\n                            Young or seasoned, beginner or advanced, we welcome\n                            all players!\n                        </Description>\n                    </div>\n                    <div>\n                        <IconContainer>\n                            <Icon name=\"dollar sign\" size=\"huge\" inverted />\n                            <SectionText>Cash or credit trade-ins</SectionText>\n                        </IconContainer>\n                        <br />\n                        <Description>\n                            Whether a whole collection or a single card, come on\n                            by and have one of our expert managers appraise it\n                            using competitive market rates\n                        </Description>\n                    </div>\n                </ServicesContainer>\n            </Content>\n            <SectionDivider />\n            <Content>\n                <HeaderText>Two convenient locations</HeaderText>\n                <LocationsContainer>\n                    <LocationImageContainer>\n                        <Image src={ch1} rounded>\n                            <ImageGradient2>\n                                <LocationContainer>\n                                    <HeaderText inverted>Beaverton</HeaderText>\n                                    <SectionDivider />\n                                    <div>\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"map marker alternate\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            13895 SW Farmington Rd, Beaverton,\n                                            OR 97005\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"clock\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            Mon - Fri 12pm to 7pm, Sat - Sun\n                                            11am to 7pm\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"phone\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            (503) 268-1449\n                                        </Description>\n                                    </div>\n                                </LocationContainer>\n                            </ImageGradient2>\n                        </Image>\n                    </LocationImageContainer>\n                    <LocationImageContainer>\n                        <Image src={ch2} rounded>\n                            <ImageGradient2>\n                                <LocationContainer>\n                                    <HeaderText inverted>Hillsboro</HeaderText>\n                                    <SectionDivider />\n                                    <div>\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"map marker alternate\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            1300 SW Oak St Suite B, Hillsboro,\n                                            OR 97123\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"clock\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            Mon - Fri 12pm to 7pm, Sat - Sun\n                                            11am to 7pm\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"phone\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            (971) 249-3096\n                                        </Description>\n                                    </div>\n                                </LocationContainer>\n                            </ImageGradient2>\n                        </Image>\n                    </LocationImageContainer>\n                </LocationsContainer>\n            </Content>\n            <SectionDivider />\n            <LocationImageContainer>\n                <Image src={clubhouse_products}>\n                    <ImageGradient>\n                        <HeaderContainer>\n                            <HeroText>We look forward to seeing you</HeroText>\n                            <TextWidth>\n                                <SubheaderText>\n                                    Follow us on Facebook or become a member of\n                                    our Discord community for up-to-date\n                                    announcements on store events, product\n                                    releases, pre-orders, and so much more!\n                                </SubheaderText>\n                            </TextWidth>\n                        </HeaderContainer>\n                    </ImageGradient>\n                </Image>\n            </LocationImageContainer>\n            <Footer>\n                <FlexRow>\n                    <Description inverted>© 2021 The Clubhouse</Description>\n                    <div>\n                        <a\n                            href=\"https://discord.gg/Wpej7dQ\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <Icon link name=\"discord\" size=\"huge\" inverted />\n                        </a>\n                        <a\n                            href=\"https://www.facebook.com/RGTClubhouse/\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <Icon link name=\"facebook\" size=\"huge\" inverted />\n                        </a>\n                    </div>\n                </FlexRow>\n                <FlexRow justify=\"center\">\n                    <Link to=\"/login\">\n                        <Button size=\"tiny\" color=\"black\">\n                            Staff login\n                        </Button>\n                    </Link>\n                </FlexRow>\n            </Footer>\n        </Container>\n    );\n};\n\nexport default Home;\n","import axios from 'axios';\nimport { FinishCondition } from '../utils/ScryfallCard';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { RECEIVING } from '../utils/api_resources';\nimport { Trade } from '../context/ReceivingContext';\nimport { ClubhouseLocation } from '../context/AuthProvider';\n\nexport interface ReceivedCard {\n    quantity: number;\n    marketPrice: number;\n    cashPrice: number;\n    creditPrice: number;\n    tradeType: Trade;\n    finishCondition: FinishCondition;\n    id: string;\n    name: string;\n    set_name: string;\n    set: string;\n}\n\ninterface ReceivedUser {\n    _id: string;\n    lightspeedEmployeeNumber: number;\n    locations: ClubhouseLocation[];\n    username: string;\n}\n\nexport interface Received {\n    _id: string;\n    created_at: string;\n    employee_number: string;\n    received_card_list: ReceivedCard[];\n    created_by: ReceivedUser;\n    customer_name: string | null;\n    customer_contact: string | null;\n}\n\ninterface Payload {\n    cardName: string | null;\n    startDate: string | null;\n    endDate: string | null;\n}\n\nconst browseReceivingQuery = async ({\n    cardName,\n    startDate,\n    endDate,\n}: Payload) => {\n    try {\n        const { data } = await axios.get<Received[]>(RECEIVING, {\n            params: { cardName, startDate, endDate },\n            headers: makeAuthHeader(),\n        });\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default browseReceivingQuery;\n","import { makeStyles } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nconst useStyles = makeStyles({\n    meta: {\n        '& > *:not(:last-of-type):after': {\n            content: '\" • \"',\n        },\n    },\n});\n\nconst MetaData: FC = ({ children }) => {\n    const { meta } = useStyles();\n    return <span className={meta}>{children}</span>;\n};\n\nexport default MetaData;\n","/**\n * Used for old entities did not have certain fields\n */\nconst displayEmpty = (str: string | null): string => {\n    return str ? str : '—';\n};\n\nexport default displayEmpty;\n","import axios from 'axios';\nimport { ClubhouseLocation } from '../context/AuthProvider';\nimport { Trade } from '../context/ReceivingContext';\nimport { RECEIVING } from '../utils/api_resources';\nimport makeAuthHeader from '../utils/makeAuthHeader';\nimport { FinishCondition, ScryfallApiCard } from '../utils/ScryfallCard';\n\ninterface ReceivedUser {\n    _id: string;\n    lightspeedEmployeeNumber: number;\n    locations: ClubhouseLocation[];\n    username: string;\n}\n\n/**\n * Individual receiving entities contain bulk card information\n * so users can view images, frames, etc.\n */\nexport interface ReceivedCard {\n    quantity: number;\n    marketPrice: number;\n    cashPrice: number;\n    creditPrice: number;\n    tradeType: Trade;\n    finishCondition: FinishCondition;\n    // TODO: this casing difference is mildly irritating...\n    bulk_card_data: ScryfallApiCard;\n}\n\nexport interface Received {\n    _id: string;\n    created_at: string;\n    employee_number: string;\n    received_cards: ReceivedCard[];\n    created_by: ReceivedUser;\n    customer_name: string | null;\n    customer_contact: string | null;\n}\n\nconst receivedByIdQuery = async (receivedId: string) => {\n    const { data } = await axios.get<Received>(`${RECEIVING}/${receivedId}`, {\n        headers: makeAuthHeader(),\n    });\n\n    // We still need to convert ScryfallApiCard to ScryfallCard downstream\n    return data;\n};\n\nexport default receivedByIdQuery;\n","import { Box, CircularProgress } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nconst Loading: FC = () => {\n    return (\n        <Box display=\"flex\" justifyContent=\"center\" width={1} py={3}>\n            <CircularProgress />\n        </Box>\n    );\n};\n\nexport default Loading;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Trade } from '../context/ReceivingContext';\nimport displayFinishCondition from '../utils/finishCondition';\nimport { price } from '../utils/price';\nimport {\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    DialogActions,\n    Button,\n    List,\n    ListItem,\n    ListItemText,\n    Typography,\n} from '@material-ui/core';\nimport MetaData from '../ui/MetaData';\nimport formatDate from '../utils/formatDate';\nimport displayEmpty from '../utils/displayEmpty';\nimport SetIcon from '../ui/SetIcon';\nimport receivedByIdQuery, { Received } from './receivedByIdQuery';\nimport Loading from '../ui/Loading';\nimport CardImageTooltip from '../ui/CardImageTooltip';\nimport { ScryfallCard } from '../utils/ScryfallCard';\n\ninterface Props {\n    receivedId: string;\n    onClose: () => void;\n}\n\nfunction alphaSort<T extends { bulk_card_data: { name: string } }>(arr: T[]) {\n    return [...arr].sort((a, b) =>\n        a.bulk_card_data.name.localeCompare(b.bulk_card_data.name)\n    );\n}\n\nfunction displayTrade(trade: Trade) {\n    if (trade === Trade.Credit) return 'Credit';\n    else if (trade === Trade.Cash) return 'Cash';\n}\n\nconst ReceivingListDialog: FC<Props> = ({ receivedId, onClose }) => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [data, setData] = useState<Received | null>(null);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                setLoading(true);\n                const data = await receivedByIdQuery(receivedId);\n                setData(data);\n                setLoading(false);\n            } catch (err) {\n                console.log(err);\n            }\n        })();\n    }, []);\n\n    if (!data || loading) {\n        return (\n            <Dialog open onClose={onClose} maxWidth=\"md\" fullWidth>\n                <DialogTitle>Received cards</DialogTitle>\n                <DialogContent>\n                    <Loading />\n                </DialogContent>\n            </Dialog>\n        );\n    }\n\n    const {\n        received_cards: receivingList,\n        created_at,\n        created_by,\n        customer_name,\n        customer_contact,\n    } = data;\n\n    return (\n        <Dialog open onClose={onClose} maxWidth=\"md\" fullWidth>\n            <DialogTitle>\n                Received cards\n                <Typography color=\"textSecondary\">\n                    <MetaData>\n                        <span>{formatDate(created_at)}</span>\n                        <span>Received by {created_by.username}</span>\n                        <span>Customer: {displayEmpty(customer_name)}</span>\n                        <span>\n                            Customer contact: {displayEmpty(customer_contact)}\n                        </span>\n                    </MetaData>\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <List>\n                    {alphaSort(receivingList).map((card) => {\n                        const {\n                            finishCondition,\n                            tradeType,\n                            creditPrice,\n                            cashPrice,\n                            marketPrice,\n                        } = card;\n\n                        const modeledCard = new ScryfallCard(\n                            card.bulk_card_data\n                        );\n\n                        const {\n                            name,\n                            cardImage,\n                            set,\n                            set_name,\n                            rarity,\n                        } = modeledCard;\n\n                        return (\n                            <ListItem>\n                                <ListItemText\n                                    primary={\n                                        <>\n                                            <CardImageTooltip\n                                                cardImage={cardImage}\n                                            >\n                                                <span\n                                                    style={{ cursor: 'help' }}\n                                                >\n                                                    {name}{' '}\n                                                </span>\n                                            </CardImageTooltip>\n                                            <SetIcon\n                                                set={set}\n                                                rarity={rarity}\n                                            />\n                                            <span>({set_name})</span>\n                                        </>\n                                    }\n                                    secondary={\n                                        <MetaData>\n                                            <span>\n                                                {displayFinishCondition(\n                                                    finishCondition\n                                                )}\n                                            </span>\n                                            <span>\n                                                {displayTrade(tradeType)}\n                                            </span>\n                                            {tradeType === Trade.Credit && (\n                                                <span>\n                                                    Credit price:{' '}\n                                                    {price(creditPrice)}\n                                                </span>\n                                            )}\n                                            {tradeType === Trade.Cash && (\n                                                <>\n                                                    <span>\n                                                        Cash price:{' '}\n                                                        {price(cashPrice)}\n                                                    </span>\n                                                    <span>\n                                                        Market price:{' '}\n                                                        {price(marketPrice)}\n                                                    </span>\n                                                </>\n                                            )}\n                                        </MetaData>\n                                    }\n                                />\n                            </ListItem>\n                        );\n                    })}\n                </List>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} variant=\"outlined\" color=\"primary\">\n                    Dismiss\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default ReceivingListDialog;\n","import React, { FC, useState } from 'react';\nimport { Label } from 'semantic-ui-react';\nimport { Received } from './browseReceivingQuery';\nimport pluralize from '../utils/pluralize';\nimport formatDate from '../utils/formatDate';\nimport {\n    Card,\n    CardActionArea,\n    CardContent,\n    Grid,\n    Typography,\n} from '@material-ui/core';\nimport ReceivingListDialog from './ReceivingListDialog';\nimport { sum } from 'lodash';\nimport { getPrice } from '../common/Price';\nimport MetaData from '../ui/MetaData';\nimport { Trade } from '../context/ReceivingContext';\nimport displayEmpty from '../utils/displayEmpty';\n\ninterface Props {\n    received: Received;\n}\n\nconst ReceivingListItem: FC<Props> = ({ received }) => {\n    const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n    const {\n        received_card_list,\n        created_at,\n        created_by,\n        customer_name,\n    } = received;\n\n    const cashPrice = sum(\n        received_card_list\n            .filter((r) => r.tradeType === Trade.Cash)\n            .map((r) => r.cashPrice)\n    );\n\n    const creditPrice = sum(\n        received_card_list\n            .filter((r) => r.tradeType === Trade.Credit)\n            .map((r) => r.creditPrice)\n    );\n\n    return (\n        <>\n            {dialogOpen && (\n                <ReceivingListDialog\n                    receivedId={received._id}\n                    onClose={() => setDialogOpen(false)}\n                />\n            )}\n            <Card variant=\"outlined\">\n                <CardActionArea\n                    disableRipple\n                    onClick={() => setDialogOpen(true)}\n                >\n                    <CardContent>\n                        <Grid\n                            container\n                            spacing={2}\n                            justify=\"space-between\"\n                            alignItems=\"center\"\n                        >\n                            <Grid item>\n                                <Typography variant=\"h6\">\n                                    {`${received_card_list.length} ${pluralize(\n                                        received_card_list.length,\n                                        'card'\n                                    )}`}\n                                </Typography>\n                                <Typography color=\"textSecondary\">\n                                    <MetaData>\n                                        <span>{formatDate(created_at)}</span>\n                                        <span>\n                                            Received by {created_by.username}\n                                        </span>\n                                        <span>\n                                            Customer:{' '}\n                                            {displayEmpty(customer_name)}\n                                        </span>\n                                    </MetaData>\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Label\n                                    color={cashPrice > 0 ? 'blue' : undefined}\n                                    image\n                                >\n                                    Cash:\n                                    <Label.Detail>\n                                        {getPrice(cashPrice)}\n                                    </Label.Detail>\n                                </Label>\n                                <Label\n                                    color={creditPrice > 0 ? 'blue' : undefined}\n                                    image\n                                >\n                                    Credit:\n                                    <Label.Detail>\n                                        {getPrice(creditPrice)}\n                                    </Label.Detail>\n                                </Label>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </CardActionArea>\n            </Card>\n        </>\n    );\n};\n\nexport default ReceivingListItem;\n","import { Form, FormFieldProps } from 'semantic-ui-react';\nimport { FieldConfig, FormikProps } from 'formik';\nimport SearchBar from '../common/SearchBar';\nimport { SyntheticEvent } from 'react';\n\ntype FormikFieldProps<T> = {\n    field: FieldConfig;\n    form: FormikProps<T>;\n    label: string;\n} & Omit<FormFieldProps, 'label' | 'name'>;\n\n/**\n * This is meant to be wrapped by a <Field /> component.\n *\n * The generics are inferred by passed prop values.\n */\nfunction FormikSearchBar<T>({\n    label,\n    /** Injected by <Field /> */\n    field,\n    /** Injected by <Field /> */\n    form,\n}: FormikFieldProps<T>) {\n    return (\n        <Form.Field>\n            <label>{label}</label>\n            <SearchBar\n                handleSearchSelect={(value) => {\n                    form.setFieldValue(field.name, value);\n                }}\n                // Reset form state after user blurs cardName\n                onBlur={(event: SyntheticEvent<Element, Event>) => {\n                    const element = event.target as HTMLInputElement;\n                    form.setFieldValue(field.name, element.value);\n                }}\n            />\n        </Form.Field>\n    );\n}\n\nexport default FormikSearchBar;\n","import { Form, FormFieldProps, Input } from 'semantic-ui-react';\nimport { FieldConfig, FormikProps } from 'formik';\n\ntype FormikFieldProps<T> = {\n    field: FieldConfig;\n    form: FormikProps<T>;\n    label: string;\n    defaultValue?: string;\n    min?: string;\n    max?: string;\n} & Omit<FormFieldProps, 'label' | 'name'>;\n\n/**\n * This is meant to be wrapped by a <Field /> component.\n *\n * The generics are inferred by passed prop values.\n */\nfunction FormikNativeDatePicker<T>({\n    label,\n    /** Injected by <Field /> */\n    field,\n    /** Injected by <Field /> */\n    form,\n    defaultValue,\n    min,\n    max,\n}: FormikFieldProps<T>) {\n    return (\n        <Form.Field>\n            <label>{label}</label>\n            <Input\n                id={field.name}\n                name={field.name}\n                type=\"date\"\n                onChange={form.handleChange}\n                defaultValue={defaultValue}\n                min={min}\n                max={max}\n            />\n        </Form.Field>\n    );\n}\n\nexport default FormikNativeDatePicker;\n","import React, { FC, useEffect, useState } from 'react';\nimport browseReceivingQuery, { Received } from './browseReceivingQuery';\nimport { Grid, Typography, Box } from '@material-ui/core';\nimport ReceivingListItem from './ReceivingListItem';\nimport moment from 'moment';\nimport { Formik, Form as FormikForm, Field } from 'formik';\nimport { Form } from 'semantic-ui-react';\nimport FormikSearchBar from '../ui/FormikSearchBar';\nimport FormikNativeDatePicker from '../ui/FormikNativeDatePicker';\nimport Loading from '../ui/Loading';\n\ninterface FormValues {\n    cardName: string;\n    startDate: string;\n    endDate: string;\n}\n\nconst initialFormValues: FormValues = {\n    cardName: '',\n    startDate: moment().subtract(30, 'days').format('YYYY-MM-DD'),\n    endDate: moment().format('YYYY-MM-DD'),\n};\n\nconst BrowseReceiving: FC = () => {\n    const [receivedList, setReceivedList] = useState<Received[]>([]);\n    const [loading, setLoading] = useState<boolean>(false);\n\n    const onSubmit = async ({ cardName, startDate, endDate }: FormValues) => {\n        setLoading(true);\n        const received = await browseReceivingQuery({\n            cardName: cardName ? cardName : null,\n            startDate,\n            endDate,\n        });\n        setLoading(false);\n        setReceivedList(received);\n    };\n\n    useEffect(() => {\n        (async () => {\n            await onSubmit(initialFormValues);\n        })();\n    }, []);\n\n    return (\n        <div>\n            <Box pb={2}>\n                <Typography variant=\"h5\">\n                    <strong>Browse Receiving</strong>\n                </Typography>\n            </Box>\n            <Box pb={2}>\n                <Formik initialValues={initialFormValues} onSubmit={onSubmit}>\n                    {({ values }) => (\n                        <FormikForm>\n                            <Form>\n                                <Form.Group widths=\"6\">\n                                    <Field\n                                        name=\"cardName\"\n                                        label=\"Card name\"\n                                        component={FormikSearchBar}\n                                    />\n                                    <Field\n                                        name=\"startDate\"\n                                        label=\"Start date\"\n                                        defaultValue={\n                                            initialFormValues.startDate\n                                        }\n                                        component={FormikNativeDatePicker}\n                                        max={values.endDate}\n                                    />\n                                    <Field\n                                        name=\"endDate\"\n                                        label=\"End date\"\n                                        defaultValue={initialFormValues.endDate}\n                                        component={FormikNativeDatePicker}\n                                        max={initialFormValues.endDate}\n                                    />\n                                </Form.Group>\n                                <Form.Button type=\"submit\" primary>\n                                    Search\n                                </Form.Button>\n                            </Form>\n                        </FormikForm>\n                    )}\n                </Formik>\n            </Box>\n            {loading ? (\n                <Loading />\n            ) : (\n                <Grid container direction=\"column\" spacing={2}>\n                    {receivedList.map((rl) => (\n                        <Grid item xs={12} md={6} key={rl._id}>\n                            <ReceivingListItem received={rl} />\n                        </Grid>\n                    ))}\n                </Grid>\n            )}\n        </div>\n    );\n};\n\nexport default BrowseReceiving;\n","import React, { FC } from 'react';\nimport Header from './Header/Header';\nimport AuthProvider from './context/AuthProvider';\nimport { Switch, Route } from 'react-router-dom';\nimport ManageInventory from './ManageInventory/ManageInventory';\nimport Sale from './NewSale/Sale';\nimport BrowseSales from './BrowseSales/BrowseSales';\nimport PublicInventory from './PublicInventory/PublicInventory';\nimport DeckboxClone from './DeckboxClone/DeckboxClone';\nimport Login from './Login/Login';\nimport Logout from './Logout/Logout';\nimport Receiving from './Receiving/Receiving';\nimport styled from 'styled-components';\nimport { SaleProvider } from './context/SaleContext';\nimport ReceivingProvider from './context/ReceivingContext';\nimport InventoryProvider from './context/InventoryContext';\nimport AdminRoute from './AuthenticatedRoute';\nimport Home from './LandingPage/Home';\nimport BrowseReceiving from './BrowseReceiving/BrowseReceiving';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\n\nconst ContentContainer = styled.div`\n    padding-top: 75px;\n    margin-left: 20px;\n    margin-right: 20px;\n`;\n\nconst BackgroundColor = styled.div`\n    background-color: #f9fafb;\n    min-height: 100vh;\n`;\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#2185d0',\n        },\n    },\n});\n\nconst App: FC = () => {\n    return (\n        <AuthProvider>\n            <ThemeProvider theme={theme}>\n                <Header />\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n                    <BackgroundColor>\n                        <ContentContainer id=\"content-container\">\n                            <AdminRoute exact path=\"/manage-inventory\">\n                                <InventoryProvider>\n                                    <ManageInventory />\n                                </InventoryProvider>\n                            </AdminRoute>\n                            <AdminRoute exact path=\"/new-sale\">\n                                <SaleProvider>\n                                    <Sale />\n                                </SaleProvider>\n                            </AdminRoute>\n                            <AdminRoute exact path=\"/receiving\">\n                                <ReceivingProvider>\n                                    <Receiving />\n                                </ReceivingProvider>\n                            </AdminRoute>\n                            <AdminRoute exact path=\"/browse-sales\">\n                                <BrowseSales />\n                            </AdminRoute>\n                            <AdminRoute exact path=\"/browse-inventory\">\n                                <DeckboxClone />\n                            </AdminRoute>\n                            <AdminRoute exact path=\"/browse-receiving\">\n                                <BrowseReceiving />\n                            </AdminRoute>\n                            <Route\n                                exact\n                                path=\"/public-inventory\"\n                                component={PublicInventory}\n                            />\n                            <Route exact path=\"/login\" component={Login} />\n                            <Route exact path=\"/logout\" component={Logout} />\n                        </ContentContainer>\n                    </BackgroundColor>\n                </Switch>\n            </ThemeProvider>\n        </AuthProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n    <HashRouter basename='/'>\n        <App />\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}