{"version":3,"sources":["common/useLocalStorage.ts","common/http.ts","utils/makeAuthHeader.ts","utils/endpoints.ts","context/loginQuery.ts","context/AuthProvider.tsx","AuthenticatedRoute.tsx","ui/Placeholder.tsx","ui/ToastContext.tsx","ui/Button.tsx","ui/ControlledDropdown.tsx","ui/ControlledMultiSelect.tsx","common/autocompleteQuery.ts","ui/SearchBar.tsx","ui/ControlledSearchBar.tsx","ui/Typography.tsx","BrowseInventory/setNameQuery.ts","BrowseInventory/BrowseInventoryForm.tsx","utils/price.ts","common/Price.tsx","context/ReceivingContext.tsx","ui/CardImageTooltip.tsx","ui/SetIcon.tsx","utils/displayFinishCondition.ts","BrowseInventory/BrowseInventoryRow.tsx","BrowseInventory/filteredCardsQuery.ts","BrowseInventory/BrowseInventory.tsx","ui/Loading.tsx","ui/FormikNativeDatePicker.tsx","BrowseReceiving/BrowseReceivingFilterDialog.tsx","common/Chip.tsx","context/cardSearchQuery.ts","context/receivingQuery.tsx","ui/MetaData.tsx","utils/displayEmpty.ts","utils/formatDate.ts","utils/pluralize.ts","BrowseReceiving/receivedByIdQuery.ts","BrowseReceiving/BrowseReceivingListDialog.tsx","BrowseReceiving/BrowseReceivingItem.tsx","BrowseReceiving/browseReceivingQuery.ts","BrowseReceiving/BrowseReceiving.tsx","utils/sum.ts","BrowseSales/BrowseSalesItem.tsx","BrowseSales/BrowseSalesList.tsx","BrowseSales/browseSalesQuery.ts","BrowseSales/BrowseSales.tsx","assets/placeholder.png","common/useHover.ts","common/useImageLoaded.ts","common/CardImage.tsx","ManageInventory/addCardToInventoryQuery.ts","ui/IntegerInput.tsx","utils/createFinishCondtition.ts","utils/dropdownOptions.ts","BulkInventory/bulkInventoryQuery.ts","BulkInventory/BulkSearchBar.tsx","BulkInventory/SubmittedCardsTable.tsx","BulkInventory/BulkInventory.tsx","context/InventoryContext.tsx","Sale/sortSaleList.ts","context/createSuspendedSaleQuery.ts","context/deleteSuspendedSaleQuery.ts","context/finishSaleQuery.tsx","context/getSuspendedSaleQuery.ts","context/SaleContext.tsx","LandingPage/ch2.jpg","LandingPage/clubhouse_products.png","LandingPage/DiscordIcon.tsx","LandingPage/learn_to_play.jpg","LandingPage/tables.jpg","LandingPage/Home.tsx","ui/TextField.tsx","Login/Login.tsx","common/marketPriceQuery.ts","common/MarketPrice.tsx","ui/InventoryChip.tsx","utils/parseQoh.ts","common/QohLabels.tsx","utils/Language.ts","ui/CardHeader.tsx","ui/CardRowContainer.tsx","ManageInventory/ManageInventoryCardForm.tsx","ManageInventory/ManageInventoryListItem.tsx","ManageInventory/allLocationInventoryQuery.ts","ManageInventory/TotalStoreInventory.tsx","ManageInventory/ManageInventory.tsx","NavBar/NavLinks.tsx","NavBar/NavBar.tsx","PublicInventory/PublicCard.tsx","PublicInventory/publicCardSearchQuery.ts","PublicInventory/PublicInventory.tsx","common/TotalCardsLabel.tsx","utils/useInterruptExit.ts","Receiving/ReceivingCartItem.tsx","Receiving/ReceivingCart.tsx","Receiving/CashReport.tsx","Receiving/ReceivingListModal.tsx","Reporting/Reporting.tsx","Receiving/ReceivingListTotals.tsx","Receiving/printCashReport.ts","Receiving/ReceivingSearchItemForm.tsx","Receiving/ReceivingSearchItem.tsx","Receiving/Receiving.tsx","Reporting/reportingQuery.ts","Sale/SaleCartPriceTotal.tsx","Sale/PrintList.tsx","Sale/FinishSale.tsx","Sale/SaleCartItem.tsx","Sale/SaleCartList.tsx","utils/roundPrice.ts","Sale/SaleSearchCardForm.tsx","Sale/SaleSearchCard.tsx","Sale/SaleSearchCardList.tsx","Sale/getSuspendedSalesQuery.ts","Sale/SuspendSaleButton.tsx","Sale/Sale.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","err","console","log","storedValue","setStoredValue","value","valueToStore","Function","removeItem","setItem","stringify","http","axios","create","interceptors","request","use","config","headers","Authorization","makeAuthHeader","publicEndpoint","s","authedEndpoint","LOGIN","AUTOCOMPLETE","GET_CARDS_WITH_INFO_PUBLIC","GET_CARD_FROM_ALL_LOCATIONS","GET_CARDS_BY_FILTER","GET_SET_NAMES","SUSPEND_SALE","GET_SALES_BY_TITLE","RECEIVING","GET_CARDS_WITH_INFO","GET_REPORT","GET_BULK_CARDS","FINISH_SALE","ADD_CARD_TO_INVENTORY","RECEIVE_CARDS","GET_LIVE_PRICE","loginQuery","username","password","currentLocation","a","post","toLowerCase","data","tokenKey","locationKey","userKey","AuthContext","React","createContext","authToken","currentUser","isLoggedIn","handleLogout","handleLogin","Promise","useAuthContext","useContext","AuthProvider","children","history","useHistory","setAuthToken","setCurrentLocation","setCurrentUser","useEffect","storageListener","e","newValue","addEventListener","removeEventListener","token","push","Provider","AdminOnly","to","AdminRoute","props","useStyles","makeStyles","typography","spacing","font","fontWeight","fontWeightBold","container","boxShadow","backgroundColor","flexContainer","minHeight","Placeholder","icon","Paper","variant","className","Box","display","flexDirection","justifyContent","alignItems","Typography","ToastContext","createToast","createErrorToast","useToastContext","ToastProvider","open","setOpen","severity","setSeverity","message","setMessage","response","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","onClose","Alert","Button","primary","color","disableElevation","ControlledDropdown","label","name","onChange","options","FormControl","size","fullWidth","InputLabel","Select","target","map","o","idx","MenuItem","text","FormHelperText","ControlledMultiSelect","multiple","renderValue","join","autocompleteQuery","cardName","get","params","title","popupIndicatorOpen","transform","SearchBar","classes","loading","setLoading","results","setResults","internalValue","setInternalValue","fetchResults","v","formattedResults","el","debouncedFetch","useCallback","_","debounce","handleSearchChange","val","length","handleResultSelect","reason","setTimeout","$","select","Autocomplete","id","autoHighlight","selectOnFocus","onInputChange","getOptionLabel","getOptionSelected","placeholder","closeIcon","popupIcon","noOptionsText","renderInput","ControlledSearchBar","HeaderText","SectionText","setNameQuery","formatDropdownOptions","finishDropdownOptions","sortByDropdownOptions","sortByDirectionDropdownOptions","sortByColorDropdownOptions","colorSpecificityDropdownOptions","typeLineOptions","frameOptions","initialFilters","setName","format","minPrice","maxPrice","finish","sortBy","colorsArray","sortByDirection","colorSpecificity","typeLine","frame","validate","FormContainer","withStyles","root","padding","BrowseInventoryForm","doSubmit","editionDropdownOptions","setEditionDropdownOptions","onSubmit","values","names","setNameOptions","concatWithBlankOption","useFormik","initialValues","handleChange","setFieldValue","handleSubmit","Grid","xs","sm","type","toString","onClick","price","Number","isNaN","toFixed","getPrice","Trade","DisplayPrice","num","transparentBackground","borderRounded","borderRadius","imageSize","width","height","CardImageTooltip","cardImage","Tooltip","placement","alt","clsx","src","tooltip","StyledIcon","styled","fontSize","SetIcon","set","rarity","rarityClass","displayFinishCondition","finishCondition","FOIL_NM","FOIL_LP","FOIL_MP","FOIL_HP","NONFOIL_NM","NONFOIL_LP","NONFOIL_MP","NONFOIL_HP","ETCHED_NM","ETCHED_LP","ETCHED_MP","ETCHED_HP","BrowseInventoryRow","card","quantityInStock","set_name","image_uri","split","TableRow","TableCell","style","cursor","verticalAlign","Price","filteredCardsQuery","filters","page","InvertedLoader","palette","common","white","CircularProgress","BrowseInventory","cards","count","currentPage","numPages","isLoading","cachedFilters","searchTouched","state","setState","fetchData","queryFilters","undefined","colors","c","White","Blue","Black","Red","Green","total","Math","ceil","Container","Modal","pb","TableContainer","component","p","Pagination","Table","TableHead","TableBody","_id","Loading","py","FormikNativeDatePicker","defaultValue","min","max","InputProps","inputProps","BrowseReceivingFilterDialog","dialogOpen","setDialogOpen","onDialogClose","enableReinitialize","Dialog","maxWidth","DialogTitle","DialogContent","startDate","endDate","DialogActions","foilContainer","backgroundImage","border","Chip","foil","cardSearchQuery","inStockOnly","matchInStock","receivingQuery","customerName","customerContact","TRADE_TYPES","CASH","Cash","CREDIT","Credit","defaultContext","searchResults","receivingList","handleSearchSelect","addToList","removeFromList","activeTradeType","selectAll","commitToInventory","resetSearchResults","ReceivingContext","useReceivingContext","ReceivingProvider","setSearchResults","setReceivingList","term","cardsToCommit","quantity","creditPrice","cashPrice","marketPrice","tradeType","previousState","cardsToAdd","Array","uuid_key","uuid","filter","currentCard","selectType","newState","meta","content","MetaData","displayEmpty","str","formatDate","date","moment","pluralize","word","receivedByIdQuery","receivedId","BrowseReceivingListDialog","setData","arr","received_cards","created_at","created_by","customer_name","customer_contact","List","sort","b","bulk_card_data","localeCompare","trade","ListItem","ListItemText","secondary","BrowseReceivingItem","received","received_card_list","sum","r","Card","CardActionArea","disableRipple","CardContent","justify","browseReceivingQuery","subtract","BrowseReceiving","obj1","obj2","setFilters","receivedList","setReceivedList","formValues","md","lg","rl","nums","reduce","acc","curr","BrowseSalesItem","sale","card_list","sale_data","quantitySold","qtyToSell","saleID","createTime","BrowseSalesList","list","browseSalesQuery","BrowseSales","setTerm","salesList","setSalesList","sales","Divider","useHover","hovered","setHovered","useImageLoaded","loaded","setLoaded","ref","useRef","onLoad","current","complete","imageStyle","zIndex","appBar","transition","maxHeight","hoveredStyle","CardImage","source","hover","onMouseOver","onMouseOut","addCardToInventoryQuery","payload","IntegerInput","onBlur","transformed","parseInt","createFinishCondition","condition","finishDropdownDisabled","finishes","createDropdownFinishOptions","output","includes","cardConditions","bulkInventoryQuery","BulkSearchBar","onHighlight","setOptions","focus","display_name","filterOptions","scryfall_id","onHighlightChange","renderOption","set_abbreviation","SubmittedCardsTable","onRemove","onRemoveLoading","setOnRemoveLoading","doRemove","bulkCard","align","disabled","random","BulkInventory","currentCardImage","setCurrentCardImage","submittedCards","setSubmittedCards","cardInfo","resetForm","isSubmitting","dropdownFinishOptions","image","d","InventoryContext","changeCardQuantity","useInventoryContext","InventoryProvider","qoh","copiedState","targetIndex","findIndex","ORDER","helpSort","cardFace","card_faces","keywords","color_identity","type_line","createSuspendedSaleQuery","deleteSuspendedSaleQuery","saleId","delete","finishSaleQuery","getSuspendedSaleQuery","defaultSuspendedSale","notes","SaleContext","saleListCards","searchTerm","suspendedSale","addToSaleList","removeFromSaleList","restoreSale","suspendSale","deleteSuspendedSale","finalizeSale","resetSaleState","SaleProvider","setSaleListCards","setSearchTerm","setSuspendedSale","modeledData","saleList","ops","Sale","oldState","newCard","splice","indexOf","useSaleContext","DiscordIcon","SvgIcon","viewBox","version","xmlns","preserveAspectRatio","light","main","dark","primaryRgb","desktopMediaQuery","tabletMediaQuery","HeroImageContainer","marginTop","CenterIcon","HeroIcon","Image","div","rounded","LocationImageContainer","ImageGradient","ImageGradient2","HeroText","textAlign","h1","inverted","SubheaderText","HeaderContainer","ServicesContainer","gridGap","gridTemplateRows","gridTemplateColumns","LocationsContainer","LocationContainer","Content","Description","TextWidth","IconContainer","SectionDivider","Footer","bottom","paddingLeft","paddingBottom","paddingRight","paddingTop","FlexRow","Home","learn_to_play","ch1","ch2","clubhouse_products","href","rel","TextField","initialFormValues","location","formGap","locationDropdownOptions","errors","Login","validateOnChange","marketPriceQuery","scryfallId","Axios","marketPrices","medianPrices","displayPrice","MarketPrice","round","showMid","market","setMarket","median","setMedian","isFoil","_isMounted","normal","n","loader","chip","leftChip","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","rightChip","InventoryChip","forwardRef","quantityColor","parseQoh","createInventoryLineItems","inventoryQty","matchStrings","matches","m","LabelWithPopup","popupLineItems","arrow","QohLabels","foilQuantity","nonfoilQuantity","etchedQuantity","foilLineItems","nonfoilLineItems","etchedLineItems","LANG_CODES","en","es","fr","de","it","pt","ja","ko","ru","zhs","zht","he","la","grc","ar","sa","px","language","languageCode","TcgPriceButton","tcgId","tcgUrl","Link","underline","SubheaderContainer","marginRight","CardHeader","selectedFinish","lang","tcgplayer_id","toUpperCase","headerContainer","CardRowContainer","header","isInteger","ManageInventoryCardForm","onFinishSelect","cardFinishes","dropdownFinishes","initialFinish","selectedCondition","validateOnMount","isValid","onFocus","ManageInventoryListItem","setSelectedFinish","allLocationInventoryQuery","labelContainer","marginLeft","chipContainer","TotalStoreInventory","foilQty","nonfoilQty","etchedQty","quantities","setQuantities","ManageInventory","NavLinks","pathname","useLocation","button","RouterLink","selected","replace","ListItemIcon","flexGrow","menuLinkText","menuButton","NavBar","drawerOpen","setDrawerOpen","AppBar","Toolbar","IconButton","edge","Drawer","anchor","direction","cardImageWidth","imageWrapper","cardImageRatio","background","inventoryRow","margin","inventoryWrapper","wrapper","PublicCard","publicCardSearchQuery","gridContainer","justifyItems","initialState","selectedLocation","initialFormState","locationOptions","PublicInventory","formSubmitted","setFormSubmitted","fetchCards","TotalCardsLabel","listLength","onInterrupt","preventDefault","returnValue","initBeforeUnload","showPrompt","useInterruptExit","initial","setShowPrompt","TRADE_TYPE","ReceivingCartItem","whiteSpace","ReceivingCart","CashReport","countByPriceAndID","chain","temp_uuid","groupBy","mapValues","mergedWithQty","uniqBy","tradeQty","totalCashOut","sumBy","Fragment","colSpan","TableFooter","RangeName","ReceivingListModal","showModal","setShowModal","cashTotal","creditTotal","ReceivingListTotals","showCashModal","setShowCashModal","ButtonGroup","divToPrint","document","getElementById","popup","write","innerHTML","close","printCashReport","ReceivingSearchItemForm","noValidate","castVal","step","ReceivingSearchItem","Error","Receiving","when","reportingQuery","allTimeDates","year","toISOString","add","lastMonthDates","Reporting","report","setReport","ALL_TIME","searchName","setSearchName","searchDates","setSearchDates","LAST_MONTH","countByCardName","quantity_sold","card_title","countByPrinting","card_metadata","finish_condition","estimated_price","quantity_on_hand","SaleCartPriceTotal","PrintWrapper","PrintList","componentRef","handlePrint","useReactToPrint","slc","FinishSale","submit","setSubmit","handleFinalizeSale","SaleCartItem","SaleCartList","roundPrice","getFinish","fc","SaleSearchCardForm","cardId","cardQoh","conditionSelectOptions","removeZeroedQuantites","pickBy","Object","entries","conditionFinish","qty","createConditionOptions","selectedFinishCondition","quantityToSell","SaleSearchCard","f","roundedPrice","BrowseCardList","getSuspendedSalesQuery","CharLimit","limit","charLimit","float","SuspendSaleButton","saleListLength","setSales","setSaleID","modalOpen","setModalOpen","setCustomerName","setNotes","setDisabled","suspendBtn","restoreBtn","deleteBtn","loadingBtn","setLoadingBtn","getSales","suspendedSales","clearFields","submitSuspendSale","submitRestoreSale","submitDeleteSale","substring","multiline","minRows","AlertTitle","contentContainer","theme","createTheme","overrides","MuiCssBaseline","textDecoration","App","ThemeProvider","CssBaseline","exact","path","Boolean","hostname","match","ReactDOM","render","basename","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cee3804b.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst useLocalStorage = <T>(key: string, initialValue: T) => {\n    const [storedValue, setStoredValue] = useState<T>(() => {\n        try {\n            const item = window.localStorage.getItem(key);\n\n            if (item) {\n                try {\n                    const parsed = JSON.parse(item);\n                    return parsed;\n                } catch (error) {\n                    return initialValue;\n                }\n            } else {\n                return initialValue;\n            }\n        } catch (err) {\n            console.log(err);\n            return initialValue;\n        }\n    });\n\n    const setValue = (value: T | null) => {\n        try {\n            const valueToStore =\n                value instanceof Function ? value(storedValue) : value;\n\n            setStoredValue(valueToStore);\n\n            if (valueToStore === null) {\n                window.localStorage.removeItem(key);\n            } else {\n                window.localStorage.setItem(key, JSON.stringify(valueToStore));\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    return [storedValue, setValue] as const;\n};\n\nexport default useLocalStorage;\n","import axios, { AxiosRequestConfig } from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\n\nconst http = axios.create();\n\n/**\n * This is essentially Axios middleware that sets the header prior to\n * continuing the request pipeline\n */\nhttp.interceptors.request.use((config: AxiosRequestConfig) => {\n    config.headers = makeAuthHeader();\n    return config;\n});\n\nexport default http;\n","/**\n * This function is a helper for Axios, it yields an object for Axios params\n */\nexport default function makeAuthHeader() {\n    const item = localStorage.getItem('clubhouse_JWT');\n\n    if (!item) return null;\n\n    return { Authorization: `Bearer ${JSON.parse(item)}` };\n}\n","// CRA Exposes this as 'development' internally for `npm start`, and 'production' in built code\nexport const isProd = () => process.env.NODE_ENV === 'production';\n\n/**\n * Asserts the env and returns the proper path prefix for resources\n */\nexport const getPrefix = () => {\n    if (isProd()) {\n        return 'https://clubhouse-collection.appspot.com';\n    } else {\n        return 'http://localhost:7331';\n    }\n};\n\n/**\n * Asserts the env and returns the proper path postfix for GCF functions\n */\nexport const testEndpoint = () => {\n    if (!isProd()) {\n        return '_test';\n    }\n    return '';\n};\n\ntype UrlCreator = (s: string) => string;\n\nexport const publicEndpoint: UrlCreator = (s) => `${getPrefix()}/${s}`;\nexport const authedEndpoint: UrlCreator = (s) => `${getPrefix()}/auth/${s}`;\nexport const gcfEndpoint: UrlCreator = (s) => `${s}${testEndpoint()}`;\n\n// Public endpoints\nexport const LOGIN = publicEndpoint('jwt');\nexport const AUTOCOMPLETE = publicEndpoint('autocomplete');\nexport const GET_CARDS_WITH_INFO_PUBLIC = publicEndpoint('getCardsWithInfo');\nexport const GET_CARD_FROM_ALL_LOCATIONS = publicEndpoint(\n    'getCardFromAllLocations'\n);\n\n// Private endpoints\nexport const GET_CARDS_BY_FILTER = authedEndpoint('getCardsByFilter');\nexport const GET_SET_NAMES = authedEndpoint('getDistinctSetNames');\nexport const SUSPEND_SALE = authedEndpoint('suspendSale');\nexport const GET_SALES_BY_TITLE = authedEndpoint('getSaleByTitle');\nexport const RECEIVING = authedEndpoint('getReceivedCards');\nexport const GET_CARDS_WITH_INFO = authedEndpoint('getCardsWithInfo');\nexport const GET_REPORT = authedEndpoint('getSalesReport');\nexport const GET_BULK_CARDS = authedEndpoint('bulkSearch');\nexport const FINISH_SALE = authedEndpoint('finishSale');\nexport const ADD_CARD_TO_INVENTORY = authedEndpoint('addCardToInventory');\nexport const RECEIVE_CARDS = authedEndpoint('receiveCards');\n\n// GCF endpoint\nexport const GET_LIVE_PRICE = gcfEndpoint(\n    `https://us-central1-clubhouse-collection.cloudfunctions.net/getPriceFromTcg`\n);\n","import http from '../common/http';\nimport { LOGIN } from '../utils/endpoints';\n\ntype ClubhouseLocation = 'ch1' | 'ch2';\n\ninterface ResponseData {\n    token: string;\n}\n\nconst loginQuery = async (\n    username: string,\n    password: string,\n    currentLocation: ClubhouseLocation\n) => {\n    try {\n        const { data } = await http.post<ResponseData>(LOGIN, {\n            username: username.toLowerCase(),\n            password,\n            currentLocation,\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default loginQuery;\n","import React, { FC, useContext, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport useLocalStorage from '../common/useLocalStorage';\nimport loginQuery from './loginQuery';\n\ninterface Props {}\n\nexport type ClubhouseLocation = 'ch1' | 'ch2';\n\nconst tokenKey = 'clubhouse_JWT';\nconst locationKey = 'currentLocation';\nconst userKey = 'currentUser';\n\ninterface Context {\n    handleLogin: (\n        username: string,\n        password: string,\n        currentLocation: ClubhouseLocation\n    ) => Promise<any>;\n    handleLogout: () => void;\n    isLoggedIn: () => boolean;\n    authToken: string | null;\n    currentLocation: ClubhouseLocation | null;\n    currentUser: string | null;\n}\n\nexport const AuthContext = React.createContext<Context>({\n    authToken: null,\n    currentLocation: null,\n    currentUser: null,\n    isLoggedIn: () => false,\n    handleLogout: () => null,\n    handleLogin: () => new Promise(() => null),\n});\n\nexport const useAuthContext = () => useContext(AuthContext);\n\nconst AuthProvider: FC<Props> = ({ children }) => {\n    const history = useHistory();\n    const [authToken, setAuthToken] = useLocalStorage(\n        tokenKey,\n        localStorage.getItem(tokenKey)\n    );\n\n    const [\n        currentLocation,\n        setCurrentLocation,\n    ] = useLocalStorage<ClubhouseLocation | null>(\n        locationKey,\n        localStorage.getItem(locationKey) as ClubhouseLocation\n    );\n\n    const [currentUser, setCurrentUser] = useLocalStorage<string | null>(\n        userKey,\n        localStorage.getItem(userKey)\n    );\n\n    /**\n     * Handles multi-tab logouts.\n     *\n     * If the token is cleared and the new value is `null`,\n     * we issue a logout to all other tabs\n     */\n    useEffect(() => {\n        const storageListener = (e: StorageEvent) => {\n            if (e.key === tokenKey && e.newValue === null) {\n                handleLogout();\n            }\n        };\n\n        window.addEventListener('storage', storageListener);\n\n        return () => window.removeEventListener('storage', storageListener);\n    }, []);\n\n    const handleLogin = async (\n        username: string,\n        password: string,\n        currentLocation: ClubhouseLocation\n    ) => {\n        try {\n            const data = await loginQuery(username, password, currentLocation);\n\n            if (data.token) {\n                setAuthToken(data.token);\n                setCurrentLocation(currentLocation);\n                setCurrentUser(username);\n            }\n\n            return data;\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const handleLogout = () => {\n        setAuthToken(null);\n        setCurrentLocation(null);\n        setCurrentUser(null);\n\n        history.push('/login');\n    };\n\n    const isLoggedIn = () => !!authToken;\n\n    return (\n        <AuthContext.Provider\n            value={{\n                authToken,\n                currentLocation,\n                currentUser,\n                handleLogin,\n                handleLogout,\n                isLoggedIn,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport default AuthProvider;\n","import React, { FC } from 'react';\nimport { Redirect, Route, RouteProps } from 'react-router';\nimport { useAuthContext } from './context/AuthProvider';\n\nconst AdminOnly: FC = ({ children }) => {\n    const { currentUser, currentLocation, authToken } = useAuthContext();\n\n    if (!currentUser || !currentLocation || !authToken) {\n        return <Redirect to=\"/\" />;\n    }\n\n    return <>{children}</>;\n};\n\nconst AdminRoute: FC<RouteProps> = ({ children, ...props }) => {\n    return (\n        <Route {...props}>\n            <AdminOnly>{children}</AdminOnly>\n        </Route>\n    );\n};\n\nexport default AdminRoute;\n","import { Box, makeStyles, Paper, Typography } from '@material-ui/core';\nimport React, { FC, ReactNode } from 'react';\n\nconst useStyles = makeStyles(({ typography, spacing }) => ({\n    font: {\n        fontWeight: typography.fontWeightBold,\n    },\n    container: {\n        boxShadow: '0 2px 25px 0 rgb(34 36 38 / 5%) inset',\n        backgroundColor: 'transparent',\n    },\n    flexContainer: {\n        minHeight: spacing(25),\n    },\n}));\n\ninterface Props {\n    icon?: ReactNode;\n}\n\nconst Placeholder: FC<Props> = ({ icon, children }) => {\n    const { font, container, flexContainer } = useStyles();\n\n    return (\n        <Paper variant=\"outlined\" className={container}>\n            <Box\n                display=\"flex\"\n                flexDirection=\"column\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                className={flexContainer}\n            >\n                {icon && icon}\n                <Typography variant=\"h6\" className={font}>\n                    {children}\n                </Typography>\n            </Box>\n        </Paper>\n    );\n};\n\nexport default Placeholder;\n","import { Snackbar } from '@material-ui/core';\nimport { Alert, AlertProps } from '@material-ui/lab';\nimport React, { createContext, FC, useContext, useState } from 'react';\n\ntype Severity = AlertProps['severity'];\n\ninterface ToastArgs {\n    severity: Severity;\n    message: string;\n}\n\ninterface IToastContext {\n    createToast: ({ severity, message }: ToastArgs) => void;\n    createErrorToast: (err: any) => void;\n}\n\nconst ToastContext = createContext<IToastContext>({\n    createToast: () => null,\n    createErrorToast: () => null,\n});\n\nconst ToastProvider: FC = ({ children }) => {\n    const [open, setOpen] = useState<boolean>(false);\n    const [severity, setSeverity] = useState<Severity>('success');\n    const [message, setMessage] = useState<string>('');\n    const handleClose = () => setOpen(false);\n\n    const createToast = ({ severity, message }: ToastArgs) => {\n        setSeverity(severity);\n        setMessage(message);\n        setOpen(true);\n    };\n\n    /**\n     * We can't make any assumptions about error objects when caught at runtime,\n     * so here we create a toast and stringify the object for convenience\n     */\n    const createErrorToast = (err: any) => {\n        let message: string;\n\n        if (err?.response?.data?.message) {\n            message = err.response.data.message;\n        } else {\n            message = JSON.stringify(err, null, 2);\n        }\n\n        createToast({\n            severity: 'error',\n            message,\n        });\n    };\n\n    return (\n        <ToastContext.Provider value={{ createToast, createErrorToast }}>\n            <Snackbar\n                open={open}\n                autoHideDuration={3000}\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                onClose={handleClose}\n            >\n                <Alert severity={severity}>{message}</Alert>\n            </Snackbar>\n            {children}\n        </ToastContext.Provider>\n    );\n};\n\nexport const useToastContext = () => useContext(ToastContext);\n\nexport default ToastProvider;\n","import { Button as MUIButton, ButtonProps } from '@material-ui/core';\nimport React, { FC } from 'react';\n\ntype Props = Omit<ButtonProps, 'variant' | 'color' | 'disableElevation'> & {\n    primary?: boolean;\n};\n\nconst Button: FC<Props> = ({ primary, children, ...props }) => {\n    return (\n        <MUIButton\n            color=\"primary\"\n            disableElevation\n            variant={primary ? 'contained' : 'outlined'}\n            {...props}\n        >\n            {children}\n        </MUIButton>\n    );\n};\n\nexport default Button;\n","import {\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    MenuItem,\n    Select,\n    SelectProps,\n} from '@material-ui/core';\nimport { ChangeEvent } from 'react';\n\nexport interface DropdownOption {\n    key: string;\n    value: string | number;\n    text: string;\n}\n\ntype ControlledDropdownProps = {\n    name: string;\n    value: string;\n    onChange: (value: string) => void;\n    options: DropdownOption[];\n    error?: string;\n} & Omit<SelectProps, 'name' | 'multiple' | 'value' | 'onChange' | 'error'>;\n\nfunction ControlledDropdown({\n    label,\n    name,\n    value,\n    onChange,\n    options,\n    error,\n    ...props\n}: ControlledDropdownProps) {\n    return (\n        <FormControl variant=\"outlined\" size=\"small\" fullWidth>\n            <InputLabel>{label}</InputLabel>\n            <Select\n                error={!!error}\n                label={label}\n                name={name}\n                value={value}\n                onChange={(e: ChangeEvent<{ value: unknown }>) => {\n                    onChange(e.target.value as string);\n                }}\n                {...props}\n            >\n                {options.map((o, idx) => (\n                    <MenuItem key={`${o.value}-${idx}`} value={o.value}>\n                        {o.text}\n                    </MenuItem>\n                ))}\n            </Select>\n            {error && <FormHelperText error>{error}</FormHelperText>}\n        </FormControl>\n    );\n}\n\nexport default ControlledDropdown;\n","import {\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select,\n    SelectProps,\n} from '@material-ui/core';\nimport { ChangeEvent } from 'react';\n\nexport interface DropdownOption {\n    key: string;\n    value: string | number;\n    text: string;\n}\n\ntype ControlledMultiSelectProps = {\n    name: string;\n    value: string[];\n    onChange: (value: string[]) => void;\n    options: DropdownOption[];\n} & Omit<SelectProps, 'name' | 'multiple' | 'value' | 'onChange'>;\n\nfunction ControlledMultiSelect({\n    label,\n    name,\n    value,\n    onChange,\n    options,\n    ...props\n}: ControlledMultiSelectProps) {\n    return (\n        <FormControl variant=\"outlined\" size=\"small\" fullWidth>\n            <InputLabel>{label}</InputLabel>\n            <Select\n                label={label}\n                name={name}\n                multiple\n                renderValue={(s) => (s as string[]).join(', ')}\n                value={value}\n                onChange={(e: ChangeEvent<{ value: unknown }>) => {\n                    onChange(e.target.value as string[]);\n                }}\n                {...props}\n            >\n                {options.map((o, idx) => (\n                    <MenuItem key={`${o.value}-${idx}`} value={o.value}>\n                        {o.text}\n                    </MenuItem>\n                ))}\n            </Select>\n        </FormControl>\n    );\n}\n\nexport default ControlledMultiSelect;\n","import axios from 'axios';\nimport { AUTOCOMPLETE } from '../utils/endpoints';\n\nconst autocompleteQuery = async (cardName: string) => {\n    try {\n        const { data } = await axios.get<string[]>(AUTOCOMPLETE, {\n            params: {\n                title: cardName,\n            },\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default autocompleteQuery;\n","import { makeStyles, TextField } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Autocomplete, {\n    AutocompleteChangeReason,\n} from '@material-ui/lab/Autocomplete';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport React, { ChangeEvent, FC, useCallback, useState } from 'react';\nimport autocompleteQuery from '../common/autocompleteQuery';\n\nexport type Option = { title: string };\n\nconst useStyles = makeStyles({\n    /*\n     * Prevents the option-list icon from rotating 180 degrees to preserve orientation of custom icon\n     */\n    popupIndicatorOpen: {\n        transform: 'rotate(0deg)',\n    },\n});\n\ninterface Props {\n    value: Option | null;\n    onChange: (result: Option | null) => void;\n}\n\nconst SearchBar: FC<Props> = ({ value, onChange }) => {\n    const classes = useStyles();\n    const [loading, setLoading] = useState<boolean>(false);\n    const [results, setResults] = useState<Option[]>([]);\n    const [internalValue, setInternalValue] = useState<Option | null>(value);\n\n    const fetchResults = async (v: string) => {\n        setLoading(true);\n        const data = await autocompleteQuery(v);\n        const formattedResults = data.map((el) => ({ title: el }));\n        setResults(formattedResults);\n        setLoading(false);\n    };\n\n    // Cache so it doesn't create a new instance each render\n    const debouncedFetch = useCallback(_.debounce(fetchResults, 500), []);\n\n    // `value` is the search input string\n    const handleSearchChange = async (_: ChangeEvent<{}>, val: string) => {\n        setInternalValue({ title: val });\n\n        // Skip undefined and short internalValues\n        if (!val || val.length < 3) {\n            setResults([]);\n            return;\n        }\n\n        await debouncedFetch(val);\n    };\n\n    const handleResultSelect = async (\n        _: ChangeEvent<{}>,\n        value: Option | null,\n        reason: AutocompleteChangeReason\n    ) => {\n        // If the user clears the input, then we need to reset the state\n        if (reason === 'clear') {\n            onChange(null);\n            return;\n        }\n\n        // This line is a hacky way to get around the fact that if we just select(), then\n        // when the user manually clicks the first (or any) result in the resultlist, it does not select,\n        // presumably because there is some collision between selecting the resultList element and focusing the input\n        setTimeout(() => $('#searchBar').select(), 10);\n\n        try {\n            setLoading(true);\n            setInternalValue(value);\n            await onChange(value);\n            setLoading(false);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    return (\n        <Autocomplete\n            id=\"searchBar\"\n            autoHighlight\n            selectOnFocus\n            value={internalValue}\n            onInputChange={handleSearchChange}\n            onChange={handleResultSelect}\n            loading={loading}\n            options={results}\n            getOptionLabel={(o) => o.title}\n            getOptionSelected={(o, v) => o.title === v.title}\n            placeholder=\"Enter a card title\"\n            closeIcon={null}\n            popupIcon={<SearchIcon />}\n            noOptionsText=\"No results found\"\n            classes={{\n                popupIndicatorOpen: classes.popupIndicatorOpen,\n            }}\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    label=\"Enter a card title\"\n                    variant=\"outlined\"\n                    size=\"small\"\n                />\n            )}\n        />\n    );\n};\n\nexport default SearchBar;\n","import { FC } from 'react';\nimport SearchBar from './SearchBar';\n\ninterface ControlledSearchBarProps {\n    value: string;\n    onChange: (value: string) => void;\n}\n\nexport const ControlledSearchBar: FC<ControlledSearchBarProps> = ({\n    value,\n    onChange,\n}) => {\n    return (\n        <SearchBar\n            value={value ? { title: value } : null}\n            onChange={(v) => (v ? onChange(v.title) : onChange(''))}\n        />\n    );\n};\n\nexport default ControlledSearchBar;\n","import { Typography } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nexport const HeaderText: FC = ({ children }) => {\n    return <Typography variant=\"h4\">{children}</Typography>;\n};\n\nexport const SectionText: FC = ({ children }) => {\n    return (\n        <Typography variant=\"h6\">\n            <b>{children}</b>\n        </Typography>\n    );\n};\n","import http from '../common/http';\nimport { GET_SET_NAMES } from '../utils/endpoints';\n\nconst setNameQuery = async () => {\n    try {\n        const { data } = await http.get<string[]>(GET_SET_NAMES);\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default setNameQuery;\n","import {\n    FormControl,\n    Grid,\n    Paper,\n    TextField,\n    withStyles,\n} from '@material-ui/core';\nimport { useFormik } from 'formik';\nimport React, { FC, useEffect, useState } from 'react';\nimport Button from '../ui/Button';\nimport ControlledDropdown, { DropdownOption } from '../ui/ControlledDropdown';\nimport ControlledMultiSelect from '../ui/ControlledMultiSelect';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport { useToastContext } from '../ui/ToastContext';\nimport { SectionText } from '../ui/Typography';\nimport setNameQuery from './setNameQuery';\n\nconst formatDropdownOptions: DropdownOption[] = [\n    { key: 'qw', value: '', text: 'None' },\n    { key: 'we', value: 'standard', text: 'Standard' },\n    { key: 'er', value: 'future', text: 'Future' },\n    { key: 'rt', value: 'historic', text: 'Historic' },\n    { key: 'ty', value: 'pioneer', text: 'Pioneer' },\n    { key: 'yu', value: 'modern', text: 'Modern' },\n    { key: 'ui', value: 'legacy', text: 'Legacy' },\n    { key: 'io', value: 'pauper', text: 'Pauper' },\n    { key: 'op', value: 'vintage', text: 'Vintage' },\n    { key: 'as', value: 'penny', text: 'Penny' },\n    { key: 'sd', value: 'commander', text: 'Commander' },\n    { key: 'df', value: 'brawl', text: 'Brawl' },\n    { key: 'fg', value: 'duel', text: 'Duel' },\n    { key: 'gh', value: 'oldschool', text: 'Oldschool' },\n];\n\nconst finishDropdownOptions: DropdownOption[] = [\n    { key: 'nonfoil_foil', value: '', text: 'None' },\n    { key: 'nonfoil', value: 'NONFOIL', text: 'Nonfoil' },\n    { key: 'foil', value: 'FOIL', text: 'Foil' },\n    { key: 'etched', value: 'ETCHED', text: 'Etched' },\n];\n\nconst sortByDropdownOptions: DropdownOption[] = [\n    { key: 'pricesort', value: 'price', text: 'Price' },\n    { key: 'alphasort', value: 'name', text: 'Card Name' },\n    { key: 'quantitySort', value: 'quantityInStock', text: 'Quantity' },\n];\n\nconst sortByDirectionDropdownOptions: DropdownOption[] = [\n    { key: 'descdirsort', value: 1, text: 'Ascending' },\n    { key: 'ascdirsort', value: -1, text: 'Descending' },\n];\n\nconst sortByColorDropdownOptions: DropdownOption[] = [\n    { key: 'w', value: 'White', text: 'White' },\n    { key: 'u', value: 'Blue', text: 'Blue' },\n    { key: 'b', value: 'Black', text: 'Black' },\n    { key: 'r', value: 'Red', text: 'Red' },\n    { key: 'g', value: 'Green', text: 'Green' },\n];\n\nconst colorSpecificityDropdownOptions: DropdownOption[] = [\n    { key: 'all', value: '', text: 'None' },\n    { key: 'colorless', value: 'colorless', text: 'Colorless only' },\n    { key: 'mono', value: 'mono', text: 'Monocolor only' },\n    { key: 'multi', value: 'multi', text: 'Multicolor only' },\n];\n\nconst typeLineOptions: DropdownOption[] = [\n    { key: 'na', value: '', text: 'None' },\n    { key: 'artifact', value: 'Artifact', text: 'Artifact' },\n    { key: 'creature', value: 'Creature', text: 'Creature' },\n    { key: 'enchantment', value: 'Enchantment', text: 'Enchantment' },\n    { key: 'instant', value: 'Instant', text: 'Instant' },\n    { key: 'land', value: 'Land', text: 'Land' },\n    { key: 'planeswalker', value: 'Planeswalker', text: 'Planeswalker' },\n    { key: 'sorcery', value: 'Sorcery', text: 'Sorcery' },\n    { key: 'tribal', value: 'Tribal', text: 'Tribal' },\n];\n\nconst frameOptions: DropdownOption[] = [\n    { key: 'na', value: '', text: 'None' },\n    { key: 'borderless', value: 'borderless', text: 'Borderless' },\n    { key: 'extendedArt', value: 'extendedArt', text: 'Extended Art' },\n    { key: 'showcase', value: 'showcase', text: 'Showcase' },\n    { key: 'retro', value: 'retro', text: 'Retro' },\n];\n\nexport interface FormValues {\n    title: string;\n    setName: string;\n    format: string;\n    minPrice: string;\n    maxPrice: string;\n    finish: string;\n    colorsArray: string[];\n    colorSpecificity: string;\n    typeLine: string;\n    frame: string;\n    sortByDirection: number;\n    sortBy: string;\n}\n\nexport const initialFilters: FormValues = {\n    title: '',\n    setName: '',\n    format: '',\n    minPrice: '',\n    maxPrice: '',\n    finish: '',\n    sortBy: 'price',\n    colorsArray: [],\n    sortByDirection: -1,\n    colorSpecificity: '',\n    typeLine: '',\n    frame: '',\n};\n\n// No validations needed for now\nconst validate = () => {\n    return {};\n};\n\ninterface Props {\n    doSubmit: (v: FormValues, page: number) => Promise<void>;\n}\n\nconst FormContainer = withStyles(({ spacing }) => ({\n    root: {\n        padding: spacing(2),\n    },\n}))(Paper);\n\nconst BrowseInventoryForm: FC<Props> = ({ doSubmit }) => {\n    const { createErrorToast } = useToastContext();\n    const [editionDropdownOptions, setEditionDropdownOptions] = useState<\n        DropdownOption[]\n    >([]);\n\n    const onSubmit = async (values: FormValues) => {\n        try {\n            await doSubmit(\n                values,\n                // Always start at page 1 after filtering\n                1\n            );\n        } catch (err) {\n            console.log(err);\n            createErrorToast(err);\n        }\n    };\n\n    useEffect(() => {\n        (async () => {\n            const names = await setNameQuery();\n\n            const setNameOptions = names.map((name, idx) => ({\n                key: `set${idx}`,\n                value: name,\n                text: name,\n            }));\n\n            const concatWithBlankOption = [\n                { key: 'snull', value: '', text: 'None' },\n                ...setNameOptions,\n            ];\n\n            setEditionDropdownOptions(concatWithBlankOption);\n        })();\n    }, []);\n\n    const { handleChange, setFieldValue, handleSubmit, values } = useFormik({\n        initialValues: initialFilters,\n        validate,\n        onSubmit,\n    });\n\n    return (\n        <FormContainer variant=\"outlined\">\n            <SectionText>Filters</SectionText>\n            <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                    <ControlledSearchBar\n                        value={values.title}\n                        onChange={(v) => setFieldValue('title', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"format\"\n                        label=\"Format\"\n                        options={formatDropdownOptions}\n                        value={values.format}\n                        onChange={(v) => setFieldValue('format', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"setName\"\n                        label=\"Edition\"\n                        options={editionDropdownOptions}\n                        value={values.setName}\n                        onChange={(v) => setFieldValue('setName', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"finish\"\n                        label=\"Finish\"\n                        options={finishDropdownOptions}\n                        value={values.finish}\n                        onChange={(v) => setFieldValue('finish', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledMultiSelect\n                        name=\"colorsArray\"\n                        label=\"Colors\"\n                        options={sortByColorDropdownOptions}\n                        value={values.colorsArray}\n                        onChange={(v) => setFieldValue('colorsArray', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"colorSpecificity\"\n                        label=\"Color specificity\"\n                        options={colorSpecificityDropdownOptions}\n                        value={values.colorSpecificity}\n                        onChange={(v) => setFieldValue('colorSpecificity', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"typeLine\"\n                        label=\"Type Line\"\n                        options={typeLineOptions}\n                        value={values.typeLine}\n                        onChange={(v) => setFieldValue('typeLine', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"frame\"\n                        label=\"Frame Effects\"\n                        options={frameOptions}\n                        value={values.frame}\n                        onChange={(v) => setFieldValue('frame', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <FormControl fullWidth>\n                        <TextField\n                            label=\"Minimum price\"\n                            variant=\"outlined\"\n                            size=\"small\"\n                            placeholder=\"Enter a price\"\n                            name=\"minPrice\"\n                            type=\"number\"\n                            onChange={handleChange}\n                        />\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <FormControl fullWidth>\n                        <TextField\n                            label=\"Maximum price\"\n                            variant=\"outlined\"\n                            size=\"small\"\n                            placeholder=\"Enter a price\"\n                            name=\"maxPrice\"\n                            type=\"number\"\n                            onChange={handleChange}\n                        />\n                    </FormControl>\n                </Grid>\n            </Grid>\n            <br />\n            <SectionText>{'Sort & Order'}</SectionText>\n            <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"sortBy\"\n                        label=\"Sort by\"\n                        options={sortByDropdownOptions}\n                        value={values.sortBy}\n                        onChange={(v) => setFieldValue('sortBy', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"sortByDirection\"\n                        label=\"Order\"\n                        options={sortByDirectionDropdownOptions}\n                        value={values.sortByDirection.toString()}\n                        onChange={(v) => setFieldValue('sortByDirection', v)}\n                    />\n                </Grid>\n            </Grid>\n            <br />\n            <Button type=\"submit\" onClick={() => handleSubmit()} primary>\n                Submit\n            </Button>\n        </FormContainer>\n    );\n};\n\nexport default BrowseInventoryForm;\n","export type Price = number | string | null;\n\nexport function price(val: Price) {\n    if (val === null) return '$0.00';\n    let price: number = typeof val === 'string' ? Number(val) : val;\n    if (isNaN(price)) return '$0.00';\n    return `$${price.toFixed(2)}`;\n}\n","import React, { FC } from 'react';\nimport { Price, price } from '../utils/price';\n\ninterface Props {\n    num: Price;\n}\n\nexport function getPrice(val: Price) {\n    if (val === null) return '$0.00';\n    let price: number = typeof val === 'string' ? Number(val) : val;\n    if (isNaN(price)) return '$0.00';\n    return `$${price.toFixed(2)}`;\n}\n\nconst DisplayPrice: FC<Props> = ({ num }) => <span>{price(num)}</span>;\n\nexport default DisplayPrice;\n","import { sortBy } from 'lodash';\nimport React, { createContext, FC, useContext, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { useToastContext } from '../ui/ToastContext';\nimport { ClientCard, FinishCondition } from '../utils/ClientCard';\nimport cardSearchQuery from './cardSearchQuery';\nimport receivingQuery from './receivingQuery';\n\ninterface Props {}\n\nexport enum Trade {\n    Cash = 'CASH',\n    Credit = 'CREDIT',\n}\n\n// Customers can only receive cash or credit for their assets\nconst TRADE_TYPES = { CASH: Trade.Cash, CREDIT: Trade.Credit };\n\nexport type ReceivingCard = ClientCard & {\n    uuid_key: string;\n    finishCondition: FinishCondition;\n    cashPrice: number | null;\n    marketPrice: number | null;\n    creditPrice: number | null;\n    tradeType: Trade;\n};\n\ninterface Context {\n    searchResults: ClientCard[];\n    receivingList: ReceivingCard[];\n    handleSearchSelect: (term: string) => void;\n    addToList: (\n        quantity: number,\n        card: ClientCard,\n        meta: AddToListMeta\n    ) => void;\n    removeFromList: (card: ReceivingCard) => void;\n    activeTradeType: (card: ReceivingCard, tradeType: Trade) => void;\n    selectAll: (trade: Trade) => void;\n    commitToInventory: (\n        customerName: string,\n        customerContact: string | null\n    ) => void;\n    resetSearchResults: () => void;\n}\n\nconst defaultContext: Context = {\n    searchResults: [],\n    receivingList: [],\n    handleSearchSelect: () => null,\n    addToList: () => null,\n    removeFromList: () => null,\n    activeTradeType: () => null,\n    selectAll: () => null,\n    commitToInventory: () => null,\n    resetSearchResults: () => null,\n};\n\ninterface AddToListMeta {\n    cashPrice: number | null;\n    marketPrice: number | null;\n    creditPrice: number | null;\n    finishCondition: FinishCondition;\n}\n\nconst ReceivingContext = createContext<Context>(defaultContext);\n\nconst ReceivingProvider: FC<Props> = ({ children }) => {\n    const { createToast, createErrorToast } = useToastContext();\n    const [searchResults, setSearchResults] = useState<ClientCard[]>([]);\n    const [receivingList, setReceivingList] = useState<ReceivingCard[]>([]);\n\n    const handleSearchSelect = async (term: string) => {\n        const cards = await cardSearchQuery({\n            cardName: term,\n            inStockOnly: false,\n        });\n\n        setSearchResults(cards);\n    };\n\n    /**\n     * Adds a card to the receiving list, with a unique uuid\n     */\n    const addToList = (\n        quantity: number,\n        card: ClientCard,\n        { cashPrice, marketPrice, creditPrice, finishCondition }: AddToListMeta\n    ) => {\n        const previousState = [...receivingList];\n\n        // Each line-item represents one card\n        const cardsToAdd: ReceivingCard[] = [...new Array(quantity)].map(() => {\n            const newCard: ReceivingCard = {\n                ...card,\n                cashPrice,\n                marketPrice,\n                creditPrice,\n                finishCondition,\n                // Set to cash if customer doesn't want credit\n                tradeType: creditPrice === 0 ? Trade.Cash : Trade.Credit,\n                uuid_key: uuid(),\n            };\n\n            return newCard;\n        });\n\n        setReceivingList(sortBy([...previousState, ...cardsToAdd], 'name'));\n    };\n\n    /**\n     * Removes a card from the receiving list using the uuid\n     */\n    const removeFromList = (card: ReceivingCard) => {\n        setReceivingList(\n            [...receivingList].filter((e) => e.uuid_key !== card.uuid_key)\n        );\n    };\n\n    /**\n     * Determines whether line-items use cash or credit.\n     * Assigns a new trade type.\n     */\n    const activeTradeType = (currentCard: ReceivingCard, tradeType: Trade) => {\n        setReceivingList(\n            [...receivingList].map((card) => {\n                if (card.uuid_key === currentCard.uuid_key) {\n                    card.tradeType = TRADE_TYPES[tradeType];\n                }\n                return card;\n            })\n        );\n    };\n\n    /**\n     * Sets all items to a tradeType, if possible\n     */\n    const selectAll = (selectType: Trade) => {\n        const { CASH, CREDIT } = TRADE_TYPES;\n\n        const newState = [...receivingList].map((card) => {\n            if (\n                selectType === CASH &&\n                card.cashPrice !== null &&\n                card.cashPrice > 0\n            )\n                card.tradeType = selectType;\n            else if (\n                selectType === CREDIT &&\n                card.creditPrice !== null &&\n                card.creditPrice > 0\n            )\n                card.tradeType = selectType;\n\n            return card;\n        });\n\n        setReceivingList(newState);\n    };\n\n    /**\n     * Persists all passed cards to inventory\n     */\n    const commitToInventory = async (\n        customerName: string,\n        customerContact: string | null\n    ) => {\n        try {\n            const cardsToCommit = receivingList.map((card) => ({\n                quantity: 1, // Only committing one per line-item\n                id: card.id,\n                name: card.name,\n                set_name: card.set_name,\n                finishCondition: card.finishCondition,\n                set: card.set,\n                creditPrice: card.creditPrice,\n                cashPrice: card.cashPrice,\n                marketPrice: card.marketPrice,\n                tradeType: card.tradeType,\n            }));\n\n            await receivingQuery({\n                cards: cardsToCommit,\n                customerName,\n                customerContact,\n            });\n\n            setSearchResults([]);\n            setReceivingList([]);\n\n            createToast({\n                severity: 'success',\n                message: `${receivingList.length} cards were added to inventory!`,\n            });\n        } catch (err) {\n            console.log(err);\n            createErrorToast(err);\n        }\n    };\n\n    const resetSearchResults = () => setSearchResults([]);\n\n    return (\n        <ReceivingContext.Provider\n            value={{\n                searchResults,\n                receivingList,\n                handleSearchSelect,\n                addToList,\n                removeFromList,\n                activeTradeType,\n                selectAll,\n                commitToInventory,\n                resetSearchResults,\n            }}\n        >\n            {children}\n        </ReceivingContext.Provider>\n    );\n};\n\nexport const useReceivingContext = () => useContext(ReceivingContext);\nexport default ReceivingProvider;\n","import { makeStyles, Tooltip } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { FC } from 'react';\n\ninterface Props {\n    cardImage: string;\n}\n\nconst useStyles = makeStyles({\n    transparentBackground: {\n        backgroundColor: 'transparent',\n    },\n    borderRounded: {\n        borderRadius: '7px 7px 7px 7px',\n    },\n    imageSize: {\n        width: 155,\n        height: 'auto',\n    },\n});\n\nconst CardImageTooltip: FC<Props> = ({ cardImage, children }) => {\n    const { transparentBackground, borderRounded, imageSize } = useStyles();\n\n    return (\n        <Tooltip\n            placement=\"bottom-start\"\n            title={\n                <img\n                    alt=\"card-surface\"\n                    className={clsx(borderRounded, imageSize)}\n                    src={cardImage}\n                />\n            }\n            classes={{\n                tooltip: transparentBackground,\n            }}\n        >\n            <span>{children}</span>\n        </Tooltip>\n    );\n};\n\nexport default CardImageTooltip;\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\n\ninterface Props {\n    set: string;\n    rarity?: string;\n}\n\nconst StyledIcon = styled('i')({\n    fontSize: '20px',\n});\n\nconst SetIcon: FC<Props> = ({ set, rarity }) => {\n    const rarityClass = rarity ? `ss-${rarity}` : '';\n    return <StyledIcon className={`ss ss-fw ss-${set} ${rarityClass}`} />;\n};\n\nexport default SetIcon;\n","import { QOH } from './ClientCard';\n\ntype FinishConditionLabels = Record<keyof QOH, string>;\n\nconst displayFinishCondition = (finishCondition: keyof QOH) => {\n    const finishConditionLabels: FinishConditionLabels = {\n        FOIL_NM: 'Foil (NM)',\n        FOIL_LP: 'Foil (LP)',\n        FOIL_MP: 'Foil (MP)',\n        FOIL_HP: 'Foil (HP)',\n        NONFOIL_NM: 'Nonfoil (NM)',\n        NONFOIL_LP: 'Nonfoil (LP)',\n        NONFOIL_MP: 'Nonfoil (MP)',\n        NONFOIL_HP: 'Nonfoil (HP)',\n        ETCHED_NM: 'Etched (NM)',\n        ETCHED_LP: 'Etched (LP)',\n        ETCHED_MP: 'Etched (MP)',\n        ETCHED_HP: 'Etched (HP)',\n    };\n\n    return finishConditionLabels[finishCondition];\n};\n\nexport default displayFinishCondition;\n","import { TableCell, TableRow } from '@material-ui/core';\nimport StarIcon from '@material-ui/icons/Star';\nimport React, { FC } from 'react';\nimport Price from '../common/Price';\nimport CardImageTooltip from '../ui/CardImageTooltip';\nimport SetIcon from '../ui/SetIcon';\nimport { Finish } from '../utils/ClientCard';\nimport displayFinishCondition from '../utils/displayFinishCondition';\nimport { ResponseCard } from './filteredCardsQuery';\n\ninterface Props {\n    card: ResponseCard;\n}\n\nconst BrowseInventoryRow: FC<Props> = ({\n    card: {\n        finishCondition,\n        quantityInStock,\n        name,\n        set_name,\n        price,\n        set,\n        rarity,\n        image_uri,\n    },\n}) => {\n    const finish = finishCondition.split('_')[0] as Finish;\n\n    return (\n        <TableRow>\n            <TableCell>\n                <CardImageTooltip cardImage={image_uri}>\n                    <span style={{ cursor: 'help' }}>{name} </span>\n                </CardImageTooltip>\n                {finish === 'FOIL' && (\n                    // TODO: Pull out this inline styling into a custom component\n                    <StarIcon\n                        fontSize=\"small\"\n                        color=\"primary\"\n                        style={{ verticalAlign: 'middle' }}\n                    />\n                )}\n            </TableCell>\n            <TableCell>\n                <SetIcon set={set} rarity={rarity} />\n                {set_name}\n            </TableCell>\n            <TableCell>{displayFinishCondition(finishCondition)}</TableCell>\n            <TableCell>{quantityInStock}</TableCell>\n            <TableCell>\n                <Price num={price} />\n            </TableCell>\n        </TableRow>\n    );\n};\n\nexport default BrowseInventoryRow;\n","import http from '../common/http';\nimport { FinishCondition } from '../utils/ClientCard';\nimport { GET_CARDS_BY_FILTER } from '../utils/endpoints';\n\nexport interface Filters {\n    title?: string;\n    setName?: string;\n    format?: string;\n    minPrice?: number;\n    maxPrice?: number;\n    finish?: string;\n    colors?: string[];\n    colorSpecificity?: string;\n    type?: string;\n    frame?: string;\n    sortByDirection: number;\n    sortBy: string;\n}\n\ntype Params = Filters & { page: number };\n\nexport interface ResponseCard {\n    _id: string;\n    image_uri: string;\n    name: string;\n    price: number;\n    rarity: string;\n    set: string;\n    set_name: string;\n    finishCondition: FinishCondition;\n    quantityInStock: number;\n}\n\ninterface ResponseData {\n    cards: ResponseCard[];\n    total: number;\n}\n\nconst filteredCardsQuery = async (filters: Filters, page: number) => {\n    const params: Params = { ...filters, page };\n\n    const { data } = await http.get<ResponseData>(GET_CARDS_BY_FILTER, {\n        params,\n    });\n\n    return data;\n};\n\nexport default filteredCardsQuery;\n","import {\n    Box,\n    CircularProgress,\n    Container,\n    Modal,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Typography,\n    withStyles,\n} from '@material-ui/core';\nimport ReportProblemIcon from '@material-ui/icons/ReportProblem';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Pagination from '@material-ui/lab/Pagination';\nimport React, { FC, useState } from 'react';\nimport Placeholder from '../ui/Placeholder';\nimport { useToastContext } from '../ui/ToastContext';\nimport BrowseInventoryForm, {\n    FormValues,\n    initialFilters,\n} from './BrowseInventoryForm';\nimport BrowseInventoryRow from './BrowseInventoryRow';\nimport filteredCardsQuery, {\n    Filters,\n    ResponseCard,\n} from './filteredCardsQuery';\n\nconst LIMIT = 100; // Matching the backend for now\n\nexport const InvertedLoader = withStyles(({ palette }) => ({\n    root: {\n        color: palette.common.white,\n    },\n}))(CircularProgress);\n\ninterface State {\n    cards: ResponseCard[];\n    count: number;\n    currentPage: number;\n    numPages: number;\n    isLoading: boolean;\n    cachedFilters: FormValues;\n    searchTouched: boolean;\n}\n\nconst BrowseInventory: FC = () => {\n    const { createErrorToast } = useToastContext();\n    const [state, setState] = useState<State>({\n        cards: [],\n        count: 0,\n        currentPage: 0,\n        numPages: 0,\n        isLoading: false,\n        cachedFilters: initialFilters,\n        searchTouched: false, // Tracks whether the user has initially searched for the 'no results' message\n    });\n\n    const fetchData = async (filters: FormValues, page: number) => {\n        try {\n            setState({ ...state, isLoading: true });\n\n            // Translates form types to the necessary types the query requires\n            const queryFilters: Filters = {\n                title: filters.title || undefined,\n                setName: filters.setName || undefined,\n                format: filters.format || undefined,\n                minPrice: filters.minPrice\n                    ? Number(filters.minPrice)\n                    : undefined,\n                maxPrice: filters.maxPrice\n                    ? Number(filters.maxPrice)\n                    : undefined,\n                finish: filters.finish || undefined,\n                colors:\n                    filters.colorsArray.length > 0\n                        ? filters.colorsArray.map((c) => {\n                              const colorsMap: Record<string, string> = {\n                                  White: 'W',\n                                  Blue: 'U',\n                                  Black: 'B',\n                                  Red: 'R',\n                                  Green: 'G',\n                              };\n\n                              return colorsMap[c];\n                          })\n                        : undefined,\n                colorSpecificity: filters.colorSpecificity || undefined,\n                type: filters.typeLine || undefined,\n                frame: filters.frame || undefined,\n                sortByDirection: filters.sortByDirection,\n                sortBy: filters.sortBy,\n            };\n\n            const { cards, total } = await filteredCardsQuery(\n                queryFilters,\n                page\n            );\n\n            const numPages = Math.ceil(total / LIMIT);\n\n            setState({\n                ...state,\n                cards: cards,\n                count: total,\n                isLoading: false,\n                numPages: numPages,\n                currentPage: page,\n                searchTouched: true,\n                // Set the filters for pagination requests later\n                cachedFilters: filters,\n            });\n        } catch (err) {\n            console.log(err);\n            createErrorToast(err);\n        }\n    };\n\n    const { cards, isLoading, currentPage, numPages, count, cachedFilters } =\n        state;\n\n    return (\n        <Container>\n            <Modal open={isLoading}>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                    height={1}\n                >\n                    <InvertedLoader />\n                </Box>\n            </Modal>\n            <Box pb={2}>\n                <Typography>\n                    <ReportProblemIcon\n                        fontSize=\"small\"\n                        color=\"primary\"\n                        style={{ verticalAlign: 'middle' }}\n                    />\n                    Prices from this table are updated weekly and are subject to\n                    fluctuations. Consult 'New Sale' or 'Manage Inventory' for\n                    up-to-date values\n                </Typography>\n            </Box>\n            <BrowseInventoryForm doSubmit={fetchData} />\n            <br />\n            {!!cards.length && (\n                <TableContainer component={Paper} variant=\"outlined\">\n                    <Box p={2} display=\"flex\" justifyContent=\"space-between\">\n                        <Pagination\n                            count={numPages}\n                            page={currentPage}\n                            onChange={(_, page) =>\n                                fetchData(cachedFilters, page)\n                            }\n                            color=\"primary\"\n                        />\n                        <Typography>Total results: {count}</Typography>\n                    </Box>\n                    <Table size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Name</TableCell>\n                                <TableCell>Edition</TableCell>\n                                <TableCell>Finish (Condition)</TableCell>\n                                <TableCell>Quantity</TableCell>\n                                <TableCell>Estimated Price</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {cards.map((card) => (\n                                <BrowseInventoryRow\n                                    key={`${card._id}-${card.finishCondition}`}\n                                    card={card}\n                                />\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            )}\n            {!cards.length && (\n                <Placeholder icon={<SearchIcon style={{ fontSize: 80 }} />}>\n                    {state.searchTouched\n                        ? 'No results found'\n                        : 'Use the filters to browse inventory'}\n                </Placeholder>\n            )}\n        </Container>\n    );\n};\n\nexport default BrowseInventory;\n","import { Box, CircularProgress } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nconst Loading: FC = () => {\n    return (\n        <Box display=\"flex\" justifyContent=\"center\" width={1} py={3}>\n            <CircularProgress />\n        </Box>\n    );\n};\n\nexport default Loading;\n","import { FormControl, TextField } from '@material-ui/core';\nimport { ChangeEvent, FC } from 'react';\n\ninterface FormikNativeDatePickerProps {\n    label: string;\n    name: string;\n    defaultValue: string;\n    handleChange: (e: ChangeEvent) => void;\n    min?: string;\n    max?: string;\n}\n\nexport const FormikNativeDatePicker: FC<FormikNativeDatePickerProps> = ({\n    label,\n    name,\n    defaultValue,\n    handleChange,\n    min,\n    max,\n}) => {\n    return (\n        <FormControl fullWidth>\n            <TextField\n                id={name}\n                label={label}\n                name={name}\n                size=\"small\"\n                variant=\"outlined\"\n                type=\"date\"\n                onChange={handleChange}\n                defaultValue={defaultValue}\n                InputProps={{\n                    inputProps: {\n                        min,\n                        max,\n                    },\n                }}\n            />\n        </FormControl>\n    );\n};\n\nexport default FormikNativeDatePicker;\n","import {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Grid,\n} from '@material-ui/core';\nimport { useFormik } from 'formik';\nimport React, { FC, useState } from 'react';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport FormikNativeDatePicker from '../ui/FormikNativeDatePicker';\n\nexport interface FormValues {\n    cardName: string;\n    startDate: string;\n    endDate: string;\n}\n\ninterface Props {\n    onSubmit: (v: FormValues) => void;\n    filters: FormValues;\n}\n\n// No validations needed for now\nconst validate = () => {\n    return {};\n};\n\nconst BrowseReceivingFilterDialog: FC<Props> = ({ onSubmit, filters }) => {\n    const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n\n    const onDialogOpen = () => setDialogOpen(true);\n    const onDialogClose = () => setDialogOpen(false);\n\n    const { handleChange, values, setFieldValue, handleSubmit } = useFormik({\n        initialValues: filters,\n        validate,\n        onSubmit: async (v: FormValues) => {\n            await onSubmit(v);\n            onDialogClose();\n        },\n        /**\n         * Formik will not update `initialValues` from externally-controlled sources (ie. props) if changed,\n         * even if the component is unmounted. We have to flip this switch to initialize with updated prop values\n         */\n        enableReinitialize: true,\n    });\n\n    return (\n        <>\n            <Button\n                disableElevation\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={onDialogOpen}\n            >\n                Filter\n            </Button>\n            {dialogOpen && (\n                <Dialog open onClose={onDialogClose} maxWidth=\"sm\" fullWidth>\n                    <DialogTitle>Receiving search</DialogTitle>\n                    <DialogContent>\n                        <form>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12}>\n                                    <ControlledSearchBar\n                                        value={values.cardName}\n                                        onChange={(v) =>\n                                            setFieldValue('cardName', v)\n                                        }\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <FormikNativeDatePicker\n                                        label=\"Start date\"\n                                        name=\"startDate\"\n                                        defaultValue={filters.startDate}\n                                        handleChange={handleChange}\n                                        max={values.endDate}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <FormikNativeDatePicker\n                                        label=\"End date\"\n                                        name=\"endDate\"\n                                        defaultValue={filters.endDate}\n                                        handleChange={handleChange}\n                                        max={filters.endDate}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </form>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button variant=\"outlined\" onClick={onDialogClose}>\n                            Cancel\n                        </Button>\n                        <Button\n                            disableElevation\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => handleSubmit()}\n                        >\n                            Search\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            )}\n        </>\n    );\n};\n\nexport default BrowseReceivingFilterDialog;\n","import { Chip as MUIChip, ChipProps, makeStyles } from '@material-ui/core';\nimport clsx from 'clsx';\nimport React, { FC } from 'react';\n\ntype Props = ChipProps & { foil?: boolean };\n\nconst useStyles = makeStyles({\n    foilContainer: {\n        backgroundColor: '#ffcfdf !important',\n        backgroundImage:\n            'linear-gradient(90deg, #ffcfdf 0%, #b0f3f1 74%) !important',\n    },\n    border: {\n        borderRadius: 5,\n    },\n});\n\nconst Chip: FC<Props> = ({ foil, ...props }) => {\n    const { foilContainer, border } = useStyles();\n\n    if (foil) {\n        return <MUIChip {...props} className={clsx(foilContainer, border)} />;\n    }\n\n    return <MUIChip {...props} className={border} />;\n};\n\nexport default Chip;\n","import http from '../common/http';\nimport { ClientCard } from '../utils/ClientCard';\nimport { GET_CARDS_WITH_INFO } from '../utils/endpoints';\n\ninterface Params {\n    cardName: string;\n    inStockOnly: boolean;\n}\n\n/**\n * Fetches cards from the DB by title when a user selects a title after querying.\n * This function merges the data (inventory quantity and card objects) from two endpoints into one array.\n */\nconst cardSearchQuery = async ({ cardName, inStockOnly }: Params) => {\n    try {\n        const { data } = await http.get<ClientCard[]>(GET_CARDS_WITH_INFO, {\n            params: {\n                title: cardName,\n                matchInStock: inStockOnly,\n            },\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default cardSearchQuery;\n","import http from '../common/http';\nimport { RECEIVE_CARDS } from '../utils/endpoints';\nimport { Trade } from './ReceivingContext';\n\ninterface ReceivingQueryCard {\n    quantity: number;\n    finishCondition: string;\n    id: string;\n    name: string;\n    set_name: string;\n    set: string;\n    marketPrice: number | null;\n    cashPrice: number | null;\n    creditPrice: number | null;\n    tradeType: Trade;\n}\n\ninterface Payload {\n    cards: ReceivingQueryCard[];\n    customerName: string;\n    customerContact: string | null;\n}\n\nconst receivingQuery = async ({\n    cards,\n    customerName,\n    customerContact,\n}: Payload) => {\n    try {\n        // We do not expect to use the return type, so we designate it `void`\n        const { data } = await http.post<void>(RECEIVE_CARDS, {\n            cards,\n            customerName,\n            customerContact,\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default receivingQuery;\n","import { makeStyles } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nconst useStyles = makeStyles({\n    meta: {\n        '& > *:not(:last-of-type):after': {\n            content: '\" • \"',\n        },\n    },\n});\n\nconst MetaData: FC = ({ children }) => {\n    const { meta } = useStyles();\n    return <span className={meta}>{children}</span>;\n};\n\nexport default MetaData;\n","/**\n * Used for old entities did not have certain fields\n */\nconst displayEmpty = (str: string | null): string => {\n    return str ? str : '—';\n};\n\nexport default displayEmpty;\n","import moment from 'moment';\n\nfunction formatDate(date: string) {\n    return moment(date).format('MM/DD/YYYY - h:mm A');\n}\n\nexport default formatDate;\n","export default function pluralize(quantity: number, word: string) {\n    return `${word}${quantity === 1 ? '' : 's'}`;\n}\n","import http from '../common/http';\nimport { ClubhouseLocation } from '../context/AuthProvider';\nimport { Trade } from '../context/ReceivingContext';\nimport { ClientCard, FinishCondition } from '../utils/ClientCard';\nimport { RECEIVING } from '../utils/endpoints';\n\ninterface ReceivedUser {\n    _id: string;\n    lightspeedEmployeeNumber: number;\n    locations: ClubhouseLocation[];\n    username: string;\n}\n\n/**\n * Individual receiving entities contain bulk card information\n * so users can view images, frames, etc.\n */\nexport interface ReceivedCard {\n    quantity: number;\n    marketPrice: number;\n    cashPrice: number;\n    creditPrice: number;\n    tradeType: Trade;\n    finishCondition: FinishCondition;\n    // TODO: this casing difference is mildly irritating...\n    bulk_card_data: ClientCard;\n}\n\nexport interface Received {\n    _id: string;\n    created_at: string;\n    employee_number: string;\n    received_cards: ReceivedCard[];\n    created_by: ReceivedUser;\n    customer_name: string | null;\n    customer_contact: string | null;\n}\n\nconst receivedByIdQuery = async (receivedId: string) => {\n    const { data } = await http.get<Received>(`${RECEIVING}/${receivedId}`);\n\n    return data;\n};\n\nexport default receivedByIdQuery;\n","import {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    List,\n    ListItem,\n    ListItemText,\n    Typography,\n} from '@material-ui/core';\nimport React, { FC, useEffect, useState } from 'react';\nimport { Trade } from '../context/ReceivingContext';\nimport CardImageTooltip from '../ui/CardImageTooltip';\nimport Loading from '../ui/Loading';\nimport MetaData from '../ui/MetaData';\nimport SetIcon from '../ui/SetIcon';\nimport { useToastContext } from '../ui/ToastContext';\nimport displayEmpty from '../utils/displayEmpty';\nimport displayFinishCondition from '../utils/displayFinishCondition';\nimport formatDate from '../utils/formatDate';\nimport { price } from '../utils/price';\nimport receivedByIdQuery, { Received } from './receivedByIdQuery';\n\ninterface Props {\n    receivedId: string;\n    onClose: () => void;\n}\n\nfunction alphaSort<T extends { bulk_card_data: { name: string } }>(arr: T[]) {\n    return [...arr].sort((a, b) =>\n        a.bulk_card_data.name.localeCompare(b.bulk_card_data.name)\n    );\n}\n\nfunction displayTrade(trade: Trade) {\n    if (trade === Trade.Credit) return 'Credit';\n    else if (trade === Trade.Cash) return 'Cash';\n}\n\nconst BrowseReceivingListDialog: FC<Props> = ({ receivedId, onClose }) => {\n    const { createErrorToast } = useToastContext();\n    const [loading, setLoading] = useState<boolean>(false);\n    const [data, setData] = useState<Received | null>(null);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                setLoading(true);\n                const data = await receivedByIdQuery(receivedId);\n                setData(data);\n                setLoading(false);\n            } catch (err) {\n                console.log(err);\n                createErrorToast(err);\n            }\n        })();\n    }, []);\n\n    if (!data || loading) {\n        return (\n            <Dialog open onClose={onClose} maxWidth=\"md\" fullWidth>\n                <DialogTitle>Received cards</DialogTitle>\n                <DialogContent>\n                    <Loading />\n                </DialogContent>\n            </Dialog>\n        );\n    }\n\n    const {\n        received_cards: receivingList,\n        created_at,\n        created_by,\n        customer_name,\n        customer_contact,\n    } = data;\n\n    return (\n        <Dialog open onClose={onClose} maxWidth=\"md\" fullWidth>\n            <DialogTitle>\n                Received cards\n                <Typography color=\"textSecondary\">\n                    <MetaData>\n                        <span>{formatDate(created_at)}</span>\n                        <span>Received by {created_by.username}</span>\n                        <span>Customer: {displayEmpty(customer_name)}</span>\n                        <span>\n                            Customer contact: {displayEmpty(customer_contact)}\n                        </span>\n                    </MetaData>\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <List>\n                    {alphaSort(receivingList).map((card) => {\n                        const {\n                            finishCondition,\n                            tradeType,\n                            creditPrice,\n                            cashPrice,\n                            marketPrice,\n                        } = card;\n\n                        const { name, cardImage, set, set_name, rarity } =\n                            card.bulk_card_data;\n\n                        return (\n                            <ListItem>\n                                <ListItemText\n                                    primary={\n                                        <>\n                                            <CardImageTooltip\n                                                cardImage={cardImage}\n                                            >\n                                                <span\n                                                    style={{ cursor: 'help' }}\n                                                >\n                                                    {name}{' '}\n                                                </span>\n                                            </CardImageTooltip>\n                                            <SetIcon\n                                                set={set}\n                                                rarity={rarity}\n                                            />\n                                            <span>({set_name})</span>\n                                        </>\n                                    }\n                                    secondary={\n                                        <MetaData>\n                                            <span>\n                                                {displayFinishCondition(\n                                                    finishCondition\n                                                )}\n                                            </span>\n                                            <span>\n                                                {displayTrade(tradeType)}\n                                            </span>\n                                            {tradeType === Trade.Credit && (\n                                                <span>\n                                                    Credit price:{' '}\n                                                    {price(creditPrice)}\n                                                </span>\n                                            )}\n                                            {tradeType === Trade.Cash && (\n                                                <>\n                                                    <span>\n                                                        Cash price:{' '}\n                                                        {price(cashPrice)}\n                                                    </span>\n                                                    <span>\n                                                        Market price:{' '}\n                                                        {price(marketPrice)}\n                                                    </span>\n                                                </>\n                                            )}\n                                        </MetaData>\n                                    }\n                                />\n                            </ListItem>\n                        );\n                    })}\n                </List>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} variant=\"outlined\" color=\"primary\">\n                    Dismiss\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default BrowseReceivingListDialog;\n","import {\n    Card,\n    CardActionArea,\n    CardContent,\n    Grid,\n    Typography,\n} from '@material-ui/core';\nimport { sum } from 'lodash';\nimport React, { FC, useState } from 'react';\nimport Chip from '../common/Chip';\nimport { getPrice } from '../common/Price';\nimport { Trade } from '../context/ReceivingContext';\nimport MetaData from '../ui/MetaData';\nimport displayEmpty from '../utils/displayEmpty';\nimport formatDate from '../utils/formatDate';\nimport pluralize from '../utils/pluralize';\nimport BrowseReceivingListDialog from './BrowseReceivingListDialog';\nimport { Received } from './browseReceivingQuery';\n\ninterface Props {\n    received: Received;\n}\n\nconst BrowseReceivingItem: FC<Props> = ({ received }) => {\n    const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n    const {\n        received_card_list,\n        created_at,\n        created_by,\n        customer_name,\n    } = received;\n\n    const cashPrice = sum(\n        received_card_list\n            .filter((r) => r.tradeType === Trade.Cash)\n            .map((r) => r.cashPrice)\n    );\n\n    const creditPrice = sum(\n        received_card_list\n            .filter((r) => r.tradeType === Trade.Credit)\n            .map((r) => r.creditPrice)\n    );\n\n    return (\n        <>\n            {dialogOpen && (\n                <BrowseReceivingListDialog\n                    receivedId={received._id}\n                    onClose={() => setDialogOpen(false)}\n                />\n            )}\n            <Card variant=\"outlined\">\n                <CardActionArea\n                    disableRipple\n                    onClick={() => setDialogOpen(true)}\n                >\n                    <CardContent>\n                        <Grid\n                            container\n                            spacing={2}\n                            justify=\"space-between\"\n                            alignItems=\"center\"\n                        >\n                            <Grid item>\n                                <Typography variant=\"h6\">\n                                    {`${received_card_list.length} ${pluralize(\n                                        received_card_list.length,\n                                        'card'\n                                    )}`}\n                                </Typography>\n                                <Typography color=\"textSecondary\">\n                                    <MetaData>\n                                        <span>{formatDate(created_at)}</span>\n                                        <span>\n                                            Received by {created_by.username}\n                                        </span>\n                                        <span>\n                                            Customer:{' '}\n                                            {displayEmpty(customer_name)}\n                                        </span>\n                                    </MetaData>\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Chip\n                                    size=\"small\"\n                                    label={`Cash: ${getPrice(cashPrice)}`}\n                                    color={\n                                        cashPrice > 0 ? 'primary' : undefined\n                                    }\n                                />\n                                <Chip\n                                    size=\"small\"\n                                    label={`Credit: ${getPrice(creditPrice)}`}\n                                    color={\n                                        creditPrice > 0 ? 'primary' : undefined\n                                    }\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </CardActionArea>\n            </Card>\n        </>\n    );\n};\n\nexport default BrowseReceivingItem;\n","import http from '../common/http';\nimport { ClubhouseLocation } from '../context/AuthProvider';\nimport { Trade } from '../context/ReceivingContext';\nimport { FinishCondition } from '../utils/ClientCard';\nimport { RECEIVING } from '../utils/endpoints';\n\nexport interface ReceivedCard {\n    quantity: number;\n    marketPrice: number;\n    cashPrice: number;\n    creditPrice: number;\n    tradeType: Trade;\n    finishCondition: FinishCondition;\n    id: string;\n    name: string;\n    set_name: string;\n    set: string;\n}\n\ninterface ReceivedUser {\n    _id: string;\n    lightspeedEmployeeNumber: number;\n    locations: ClubhouseLocation[];\n    username: string;\n}\n\nexport interface Received {\n    _id: string;\n    created_at: string;\n    employee_number: string;\n    received_card_list: ReceivedCard[];\n    created_by: ReceivedUser;\n    customer_name: string | null;\n    customer_contact: string | null;\n}\n\ninterface Payload {\n    cardName: string | null;\n    startDate: string | null;\n    endDate: string | null;\n}\n\nconst browseReceivingQuery = async ({\n    cardName,\n    startDate,\n    endDate,\n}: Payload) => {\n    try {\n        const { data } = await http.get<Received[]>(RECEIVING, {\n            params: { cardName, startDate, endDate },\n        });\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default browseReceivingQuery;\n","import { Box, Button, Container, Grid, Typography } from '@material-ui/core';\nimport moment from 'moment';\nimport React, { FC, useEffect, useState } from 'react';\nimport Loading from '../ui/Loading';\nimport Placeholder from '../ui/Placeholder';\nimport { HeaderText, SectionText } from '../ui/Typography';\nimport BrowseReceivingFilterDialog, {\n    FormValues,\n} from './BrowseReceivingFilterDialog';\nimport BrowseReceivingItem from './BrowseReceivingItem';\nimport browseReceivingQuery, { Received } from './browseReceivingQuery';\n\ninterface Filters {\n    cardName: string;\n    startDate: string;\n    endDate: string;\n}\n\nconst initialFilters: Filters = {\n    cardName: '',\n    startDate: moment().subtract(30, 'days').format('YYYY-MM-DD'),\n    endDate: moment().format('YYYY-MM-DD'),\n};\n\nfunction shallowCompare(obj1: Filters, obj2: Filters) {\n    return JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\nconst BrowseReceiving: FC = () => {\n    const [filters, setFilters] = useState<Filters>(initialFilters);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [receivedList, setReceivedList] = useState<Received[]>([]);\n\n    const onSubmit = async (formValues: FormValues) => {\n        /**\n         * If the types of `Filters` changes, we can convert them here\n         * from the submitted form values.\n         */\n        setFilters({ ...filters, ...formValues }); // preserves order when using JSON.stringify to diff\n    };\n\n    const onClearFilters = () => setFilters(initialFilters);\n\n    useEffect(() => {\n        (async () => {\n            const { cardName, startDate, endDate } = filters;\n\n            setLoading(true);\n            const received = await browseReceivingQuery({\n                cardName: cardName ? cardName : null,\n                startDate,\n                endDate,\n            });\n            setLoading(false);\n            setReceivedList(received);\n        })();\n    }, [filters]);\n\n    return (\n        <Container>\n            <Box pb={2}>\n                <HeaderText>Browse Receiving</HeaderText>\n            </Box>\n            <Box>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"space-between\"\n                    alignItems=\"center\"\n                >\n                    <div>\n                        <SectionText>Results</SectionText>\n                        <Typography color=\"textSecondary\">\n                            {`Searching ${\n                                filters.cardName || 'all cards'\n                            } from ${filters.startDate} to ${filters.endDate}`}\n                        </Typography>\n                    </div>\n                    <div>\n                        {!shallowCompare(initialFilters, filters) && (\n                            <Button color=\"primary\" onClick={onClearFilters}>\n                                Clear filters\n                            </Button>\n                        )}\n                        <BrowseReceivingFilterDialog\n                            filters={filters}\n                            onSubmit={onSubmit}\n                        />\n                    </div>\n                </Box>\n            </Box>\n            <Grid container justify=\"space-between\" spacing={2}>\n                <Grid item alignItems=\"center\" md={12} lg={6}></Grid>\n                {loading ? (\n                    <Loading />\n                ) : receivedList.length === 0 ? (\n                    <Grid item xs={12}>\n                        <Placeholder>No results</Placeholder>\n                    </Grid>\n                ) : (\n                    receivedList.map((rl) => (\n                        <Grid item xs={12} key={rl._id}>\n                            <BrowseReceivingItem received={rl} />\n                        </Grid>\n                    ))\n                )}\n            </Grid>\n        </Container>\n    );\n};\n\nexport default BrowseReceiving;\n","/**\n * Sums numbers up\n */\nexport default function sum(nums: number[]): number {\n    return nums.reduce((acc, curr) => acc + curr, 0);\n}\n","import { TableCell, TableRow } from '@material-ui/core';\nimport React, { FC } from 'react';\nimport formatDate from '../utils/formatDate';\nimport sum from '../utils/sum';\nimport { Sale } from './browseSalesQuery';\n\ninterface Props {\n    sale: Sale;\n}\n\nconst BrowseSalesItem: FC<Props> = ({ sale }) => {\n    const { card_list, sale_data } = sale;\n\n    const quantitySold = sum(card_list.map((c) => Number(c.qtyToSell)));\n\n    return (\n        <TableRow>\n            <TableCell>{sale_data.saleID}</TableCell>\n            <TableCell>{formatDate(sale_data.createTime)}</TableCell>\n            <TableCell>{quantitySold}</TableCell>\n        </TableRow>\n    );\n};\n\nexport default BrowseSalesItem;\n","import {\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n} from '@material-ui/core';\nimport React, { FC } from 'react';\nimport BrowseSalesItem from './BrowseSalesItem';\nimport { Sale } from './browseSalesQuery';\n\ninterface Props {\n    list: Sale[];\n}\n\nconst BrowseSalesList: FC<Props> = ({ list }) => {\n    return (\n        <TableContainer component={Paper} variant=\"outlined\">\n            <Table size=\"small\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Sale ID</TableCell>\n                        <TableCell>Date of Sale</TableCell>\n                        <TableCell>Quantity Sold</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {list.map((sale) => (\n                        <BrowseSalesItem sale={sale} />\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nexport default BrowseSalesList;\n","import http from '../common/http';\nimport { SaleListCard } from '../context/SaleContext';\nimport { GET_SALES_BY_TITLE } from '../utils/endpoints';\n\ninterface SaleData {\n    total: string;\n    saleID: string;\n    timeStamp: string;\n    createTime: string;\n}\n\nexport interface Sale {\n    _id: string;\n    sale_data: SaleData;\n    card_list: SaleListCard[];\n}\n\ninterface Payload {\n    cardName: string;\n}\n\nconst browseSalesQuery = async ({ cardName }: Payload) => {\n    try {\n        const { data } = await http.get<Sale[]>(GET_SALES_BY_TITLE, {\n            params: { cardName: cardName },\n        });\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default browseSalesQuery;\n","import { Box, Divider, Grid, Typography } from '@material-ui/core';\nimport React, { FC, useEffect, useState } from 'react';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport Loading from '../ui/Loading';\nimport { HeaderText } from '../ui/Typography';\nimport BrowseSalesList from './BrowseSalesList';\nimport browseSalesQuery, { Sale } from './browseSalesQuery';\n\nconst BrowseSales: FC = () => {\n    const [term, setTerm] = useState<string>('');\n    const [loading, setLoading] = useState<boolean>(false);\n    const [salesList, setSalesList] = useState<Sale[]>([]);\n\n    const handleSearchSelect = async (cardName: string) => {\n        const sales = await browseSalesQuery({ cardName });\n        setSalesList(sales);\n    };\n\n    useEffect(() => {\n        if (term) {\n            (async () => {\n                setLoading(true);\n                await handleSearchSelect(term);\n                setLoading(false);\n            })();\n        }\n    }, [term]);\n\n    return (\n        <div>\n            <Grid container>\n                <Grid item xs={12} md={4}>\n                    <ControlledSearchBar\n                        value={term}\n                        onChange={(v) => setTerm(v)}\n                    />\n                </Grid>\n            </Grid>\n            <br />\n            <HeaderText>Browse Sales</HeaderText>\n            <Divider />\n\n            {loading ? (\n                <Loading />\n            ) : (\n                <>\n                    <Box py={2}>\n                        {term !== '' && (\n                            <Typography>\n                                {salesList.length} results for <em>{term}</em>\n                            </Typography>\n                        )}\n                    </Box>\n                    <BrowseSalesList list={salesList} />\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default BrowseSales;\n","export default __webpack_public_path__ + \"static/media/placeholder.a6077e02.png\";","import { useState } from 'react';\n\nconst useHover = () => {\n    const [hovered, setHovered] = useState<boolean>(false);\n\n    const onMouseOver = () => setHovered(true);\n    const onMouseOut = () => setHovered(false);\n\n    return [hovered, onMouseOver, onMouseOut] as const;\n};\n\nexport default useHover;\n","import { useEffect, useRef, useState } from 'react';\n\n/**\n * This custom hook exposes a ref that we attach to an `img` tag, in order to\n * examine its `complete` attribute so we know that an image is loaded.\n *\n * We use `loaded` to maintain the view\n */\nconst useImageLoaded = () => {\n    const [loaded, setLoaded] = useState<boolean>(false);\n    const ref = useRef<HTMLImageElement | null>(null);\n\n    const onLoad = () => {\n        setLoaded(true);\n    };\n\n    useEffect(() => {\n        if (ref.current && ref.current.complete) {\n            onLoad();\n        }\n    });\n\n    return [ref, loaded, onLoad] as const;\n};\n\nexport default useImageLoaded;\n","import { Box, makeStyles } from '@material-ui/core';\nimport clsx from 'clsx';\nimport React, { FC } from 'react';\nimport placeholder from '../assets/placeholder.png';\nimport useHover from './useHover';\nimport useImageLoaded from './useImageLoaded';\n\ninterface Props {\n    source: string;\n    width: number;\n    hover?: boolean;\n}\n\nconst useStyles = makeStyles(({ zIndex }) => ({\n    imageStyle: {\n        boxShadow: '2px 2px 5px 0 rgba(0,0,0,.25)',\n        zIndex: zIndex.appBar,\n        transition: 'all .2s ease-in-out',\n        maxWidth: '100%',\n        maxHeight: '100%',\n        borderRadius: 10,\n    },\n    hoveredStyle: {\n        transform: 'scale(1.75)',\n    },\n}));\n\nconst CardImage: FC<Props> = ({ source, hover, width }) => {\n    const { imageStyle, hoveredStyle } = useStyles();\n    const [ref, loaded, onLoad] = useImageLoaded();\n    const [hovered, onMouseOver, onMouseOut] = useHover();\n\n    if (!source) {\n        return (\n            <Box width={width}>\n                <img\n                    alt=\"card-not-loaded\"\n                    src={placeholder}\n                    className={imageStyle}\n                />\n            </Box>\n        );\n    }\n\n    return (\n        <Box width={width}>\n            {!loaded && (\n                <img\n                    alt=\"card-surface\"\n                    src={placeholder}\n                    className={imageStyle}\n                />\n            )}\n            <img\n                style={{ display: loaded ? 'inline' : 'none' }}\n                ref={ref}\n                onLoad={onLoad}\n                alt=\"card-surface\"\n                src={source}\n                className={clsx(imageStyle, {\n                    [hoveredStyle]: hovered,\n                })}\n                onMouseOver={() => hover && onMouseOver()}\n                onMouseOut={() => hover && onMouseOut()}\n            />\n        </Box>\n    );\n};\n\nexport default CardImage;\n","import http from '../common/http';\nimport { FinishCondition, QOH } from '../utils/ClientCard';\nimport { ADD_CARD_TO_INVENTORY } from '../utils/endpoints';\n\ninterface CardInfo {\n    id: string;\n    name: string;\n    set_name: string;\n    set: string;\n}\n\ninterface Payload {\n    quantity: number;\n    finishCondition: FinishCondition;\n    cardInfo: CardInfo;\n}\n\ninterface ResponseData {\n    _id: string;\n    name: string;\n    set: string;\n    qoh: QOH;\n}\n\nconst addCardToInventoryQuery = async (payload: Payload) => {\n    try {\n        const { data } = await http.post<ResponseData>(\n            ADD_CARD_TO_INVENTORY,\n            payload\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default addCardToInventoryQuery;\n","import { TextField, TextFieldProps } from '@material-ui/core';\nimport React, { FC } from 'react';\n\ntype Props = Omit<TextFieldProps, 'value' | 'onChange' | 'label' | 'name'> & {\n    value: string;\n    onChange: (v: string) => void;\n    label: string;\n    name: string;\n};\n\nconst IntegerInput: FC<Props> = ({\n    value,\n    onChange,\n    label,\n    name,\n    ...props\n}) => {\n    return (\n        <TextField\n            fullWidth\n            type=\"number\"\n            size=\"small\"\n            variant=\"outlined\"\n            label={label}\n            name={name}\n            value={value}\n            InputProps={{\n                inputProps: {\n                    min: 1,\n                },\n            }}\n            onBlur={(e) => {\n                const value = e.target.value;\n                const transformed = parseInt(value);\n                if (isNaN(transformed) || transformed < 1) {\n                    return onChange('1');\n                } else {\n                    onChange(transformed.toString());\n                }\n            }}\n            onChange={(e) => {\n                onChange(e.target.value);\n            }}\n            {...props}\n        />\n    );\n};\n\nexport default IntegerInput;\n","import { Condition, Finish, FinishCondition } from './ClientCard';\n\nconst createFinishCondition = (\n    finish: Finish,\n    condition: Condition\n): FinishCondition => {\n    return `${finish}_${condition}` as FinishCondition;\n};\n\nexport default createFinishCondition;\n","import { Finish, Finishes } from './ClientCard';\n\ninterface DropdownOption {\n    key: string;\n    text: string;\n    value: Finish;\n}\n\nexport const dropdownFinishes: DropdownOption[] = [\n    { key: 'NONFOIL', text: 'Nonfoil', value: 'NONFOIL' },\n    { key: 'FOIL', text: 'Foil', value: 'FOIL' },\n    { key: 'ETCHED', text: 'Etched', value: 'ETCHED' },\n];\n\nexport const finishDropdownDisabled = (finishes: Finishes) => {\n    return finishes.length === 1;\n};\n\nexport const createDropdownFinishOptions = (\n    finishes: Finishes\n): DropdownOption[] => {\n    const output = [];\n\n    if (finishes.includes('nonfoil')) {\n        output.push({\n            key: 'NONFOIL',\n            text: 'Nonfoil',\n            value: 'NONFOIL' as const,\n        });\n    }\n\n    if (finishes.includes('foil')) {\n        output.push({\n            key: 'FOIL',\n            text: 'Foil',\n            value: 'FOIL' as const,\n        });\n    }\n\n    if (finishes.includes('etched')) {\n        output.push({\n            key: 'ETCHED',\n            text: 'Etched',\n            value: 'ETCHED' as const,\n        });\n    }\n\n    return output;\n};\n\nexport const cardConditions = [\n    { key: 'NM', text: 'Near Mint', value: 'NM' },\n    { key: 'LP', text: 'Light Play', value: 'LP' },\n    { key: 'MP', text: 'Moderate Play', value: 'MP' },\n    { key: 'HP', text: 'Heavy Play', value: 'HP' },\n];\n","import http from '../common/http';\nimport { Finishes } from '../utils/ClientCard';\nimport { GET_BULK_CARDS } from '../utils/endpoints';\n\nexport interface BulkCard {\n    scryfall_id: string;\n    name: string;\n    display_name: string;\n    set_abbreviation: string;\n    set_name: string;\n    rarity: string;\n    finishes: Finishes;\n    frame: string;\n    image: string;\n}\n\nconst bulkInventoryQuery = async (cardName: string) => {\n    try {\n        const { data } = await http.get<BulkCard[]>(GET_BULK_CARDS, {\n            params: {\n                cardName,\n            },\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default bulkInventoryQuery;\n","import { makeStyles, TextField, Typography } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Autocomplete, {\n    AutocompleteChangeReason,\n} from '@material-ui/lab/Autocomplete';\nimport _ from 'lodash';\nimport React, {\n    ChangeEvent,\n    FC,\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport SetIcon from '../ui/SetIcon';\nimport { useToastContext } from '../ui/ToastContext';\nimport bulkInventoryQuery, { BulkCard } from './bulkInventoryQuery';\n\nexport type Option = BulkCard;\n\nconst useStyles = makeStyles({\n    /*\n     * Prevents the option-list icon from rotating 180 degrees to preserve orientation of custom icon\n     */\n    popupIndicatorOpen: {\n        transform: 'rotate(0deg)',\n    },\n});\n\ninterface Props {\n    value: Option | null;\n    onChange: (result: Option | null) => void;\n    onHighlight?: (o: Option | null) => void;\n}\n\nconst BulkSearchBar: FC<Props> = ({ value, onChange, onHighlight }) => {\n    const classes = useStyles();\n    const { createErrorToast } = useToastContext();\n    const [loading, setLoading] = useState<boolean>(false);\n    const [options, setOptions] = useState<Option[]>([]);\n    const [internalValue, setInternalValue] = useState<Option | null>(value);\n    const ref = useRef<HTMLInputElement>();\n\n    useEffect(() => {\n        // If `value` is `null` on prop change, set the internal value to `null` as well\n        if (!value) {\n            setInternalValue(null);\n        }\n        // Focus the input when it is cleared\n        if (ref && ref.current) {\n            ref.current.focus();\n        }\n    }, [value]);\n\n    const fetchResults = async (v: string) => {\n        setLoading(true);\n        const data = await bulkInventoryQuery(v);\n        await setOptions(data);\n        setLoading(false);\n    };\n\n    // Cache so it doesn't create a new instance each render\n    const debouncedFetch = useCallback(_.debounce(fetchResults, 750), []);\n\n    const handleSearchChange = async (_: ChangeEvent<{}>, val: string) => {\n        // Skip undefined and short internalValues\n        if (!val || val.length < 3) {\n            setOptions([]);\n            return;\n        }\n\n        await debouncedFetch(val);\n    };\n\n    const handleResultSelect = async (\n        _: ChangeEvent<{}>,\n        value: Option | null,\n        reason: AutocompleteChangeReason\n    ) => {\n        // If the user clears the input, then we need to reset the state\n        if (reason === 'clear') {\n            onChange(null);\n            setInternalValue(null);\n            return;\n        }\n\n        try {\n            setLoading(true);\n            setInternalValue(value);\n            await onChange(value);\n            setLoading(false);\n        } catch (err) {\n            console.log(err);\n            createErrorToast(err);\n        }\n    };\n\n    return (\n        <>\n            <Autocomplete\n                id=\"searchBar\"\n                autoHighlight\n                selectOnFocus\n                value={internalValue}\n                onInputChange={handleSearchChange}\n                onChange={handleResultSelect}\n                loading={loading}\n                options={options}\n                getOptionLabel={(o) => o.display_name}\n                // We do not want to filter options based on user input\n                // This overrides the default behavior\n                filterOptions={(o) => o}\n                getOptionSelected={(o, v) => o.scryfall_id === v.scryfall_id}\n                onHighlightChange={(_, o) => {\n                    if (onHighlight) {\n                        onHighlight(o);\n                    }\n                }}\n                renderOption={(o) => {\n                    return (\n                        <div>\n                            <Typography component=\"span\">\n                                {o.display_name}\n                            </Typography>\n                            <SetIcon\n                                set={o.set_abbreviation}\n                                rarity={o.rarity}\n                            />\n                        </div>\n                    );\n                }}\n                placeholder=\"Enter a card title\"\n                closeIcon={null}\n                popupIcon={<SearchIcon />}\n                noOptionsText=\"No results found\"\n                classes={{\n                    popupIndicatorOpen: classes.popupIndicatorOpen,\n                }}\n                renderInput={(params) => (\n                    <div ref={params.InputProps.ref}>\n                        <TextField\n                            inputProps={{ ref }}\n                            {...params.inputProps}\n                            fullWidth\n                            label=\"Enter a card title\"\n                            variant=\"outlined\"\n                            size=\"small\"\n                        />\n                    </div>\n                )}\n            />\n        </>\n    );\n};\n\nexport default BulkSearchBar;\n","import {\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n} from '@material-ui/core';\nimport React, { FC, useState } from 'react';\nimport Button from '../ui/Button';\nimport { useToastContext } from '../ui/ToastContext';\nimport createFinishCondition from '../utils/createFinishCondtition';\nimport displayFinishCondition from '../utils/displayFinishCondition';\nimport { AddedCard } from './BulkInventory';\n\ninterface Props {\n    cards: AddedCard[];\n    onRemove: (values: AddedCard) => void;\n}\n\nconst SubmittedCardsTable: FC<Props> = ({ cards, onRemove }) => {\n    const { createErrorToast } = useToastContext();\n    const [onRemoveLoading, setOnRemoveLoading] = useState<boolean>(false);\n\n    const doRemove = async (card: AddedCard) => {\n        try {\n            setOnRemoveLoading(true);\n            await onRemove(card);\n        } catch (err) {\n            console.log(err);\n            createErrorToast(err);\n        } finally {\n            setOnRemoveLoading(false);\n        }\n    };\n\n    return (\n        <TableContainer component={Paper} variant=\"outlined\">\n            <Table size=\"small\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>\n                            <b>Name</b>\n                        </TableCell>\n                        <TableCell>\n                            <b>Quantity</b>\n                        </TableCell>\n                        <TableCell>\n                            <b>Finish (Condition)</b>\n                        </TableCell>\n                        <TableCell />\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {cards\n                        .filter((c) => !!c.bulkCard)\n                        .map((c) => {\n                            if (c.bulkCard) {\n                                const {\n                                    bulkCard,\n                                    quantity,\n                                    finish,\n                                    condition,\n                                } = c;\n\n                                return (\n                                    <TableRow\n                                        key={`${\n                                            c.bulkCard.scryfall_id\n                                        }-${Math.random()}`}\n                                    >\n                                        <TableCell>\n                                            {bulkCard.display_name}\n                                        </TableCell>\n                                        <TableCell>{quantity}</TableCell>\n                                        <TableCell>\n                                            {displayFinishCondition(\n                                                createFinishCondition(\n                                                    finish,\n                                                    condition\n                                                )\n                                            )}\n                                        </TableCell>\n                                        <TableCell align=\"right\">\n                                            <Button\n                                                onClick={() => doRemove(c)}\n                                                disabled={onRemoveLoading}\n                                            >\n                                                Remove\n                                            </Button>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            } else return null;\n                        })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nexport default SubmittedCardsTable;\n","import {\n    Container,\n    FormControl,\n    Grid,\n    InputLabel,\n    MenuItem,\n    Select,\n} from '@material-ui/core';\nimport { useFormik } from 'formik';\nimport React, { FC, useEffect, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport CardImage from '../common/CardImage';\nimport addCardToInventoryQuery from '../ManageInventory/addCardToInventoryQuery';\nimport Button from '../ui/Button';\nimport ControlledDropdown from '../ui/ControlledDropdown';\nimport IntegerInput from '../ui/IntegerInput';\nimport { useToastContext } from '../ui/ToastContext';\nimport { SectionText } from '../ui/Typography';\nimport { Condition, Finish } from '../utils/ClientCard';\nimport createFinishCondition from '../utils/createFinishCondtition';\nimport {\n    cardConditions,\n    createDropdownFinishOptions,\n} from '../utils/dropdownOptions';\nimport { BulkCard } from './bulkInventoryQuery';\nimport BulkSearchBar from './BulkSearchBar';\nimport SubmittedCardsTable from './SubmittedCardsTable';\n\ninterface FormValues {\n    bulkCard: BulkCard | null;\n    finish: Finish;\n    quantity: string;\n    condition: Condition;\n}\n\nexport type AddedCard = FormValues & { uuid: string };\n\nconst BulkInventory: FC = () => {\n    const [currentCardImage, setCurrentCardImage] = useState<string>('');\n    const [submittedCards, setSubmittedCards] = useState<AddedCard[]>([]);\n    const { createToast, createErrorToast } = useToastContext();\n\n    /**\n     * Adds a card to inventory\n     */\n    const onSubmit = async (values: FormValues) => {\n        try {\n            if (values.bulkCard) {\n                await addCardToInventoryQuery({\n                    quantity: Number(values.quantity),\n                    finishCondition: createFinishCondition(\n                        values.finish,\n                        values.condition\n                    ),\n                    cardInfo: {\n                        id: values.bulkCard.scryfall_id,\n                        name: values.bulkCard.name,\n                        set_name: values.bulkCard.set_name,\n                        set: values.bulkCard.set_abbreviation,\n                    },\n                });\n\n                createToast({\n                    message: `Added ${values.quantity}x ${values.bulkCard.name} to inventory`,\n                    severity: 'success',\n                });\n            }\n            setSubmittedCards([{ ...values, uuid: uuid() }, ...submittedCards]);\n            resetForm();\n        } catch (err) {\n            console.log(err);\n            createErrorToast(err);\n        }\n    };\n\n    /**\n     * Removes a card from inventory as well as the array of added cards\n     */\n    const onRemove = async (values: AddedCard) => {\n        try {\n            if (values.bulkCard) {\n                await addCardToInventoryQuery({\n                    quantity: -Number(values.quantity),\n                    finishCondition: createFinishCondition(\n                        values.finish,\n                        values.condition\n                    ),\n                    cardInfo: {\n                        id: values.bulkCard.scryfall_id,\n                        name: values.bulkCard.name,\n                        set_name: values.bulkCard.set_name,\n                        set: values.bulkCard.set_abbreviation,\n                    },\n                });\n\n                createToast({\n                    message: `Removed ${values.quantity}x ${values.bulkCard.name} from inventory`,\n                    severity: 'success',\n                });\n            }\n\n            setSubmittedCards(\n                submittedCards.filter((c) => c.uuid !== values.uuid)\n            );\n        } catch (err) {\n            console.log(err);\n            createErrorToast(err);\n        }\n    };\n\n    const { values, setFieldValue, handleSubmit, resetForm, isSubmitting } =\n        useFormik<FormValues>({\n            initialValues: {\n                bulkCard: null,\n                finish: 'NONFOIL',\n                quantity: '1',\n                condition: 'NM',\n            },\n            onSubmit,\n        });\n\n    // Create the list of valid dropdown selections for finishes from card metadata\n    const dropdownFinishOptions = values.bulkCard\n        ? createDropdownFinishOptions(values.bulkCard.finishes)\n        : [];\n\n    useEffect(() => {\n        if (values.bulkCard) {\n            // Reset condtion when cards change\n            setFieldValue('condition', 'NM');\n\n            // Reset quantity when cards change\n            setFieldValue('quantity', '1');\n\n            // Reset the currently selected finish to the first valid element\n            setFieldValue('finish', dropdownFinishOptions[0].value);\n        }\n    }, [values.bulkCard]);\n\n    return (\n        <Container maxWidth=\"md\">\n            <Grid container spacing={3}>\n                <Grid item xs={8}>\n                    <form>\n                        <Grid container spacing={3} xs={12}>\n                            <Grid item xs={12}>\n                                <SectionText>Card search</SectionText>\n                                <br />\n                                <BulkSearchBar\n                                    value={values.bulkCard}\n                                    onChange={(v) =>\n                                        setFieldValue('bulkCard', v)\n                                    }\n                                    onHighlight={(o) =>\n                                        setCurrentCardImage(o?.image || '')\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={4}>\n                                <FormControl\n                                    variant=\"outlined\"\n                                    size=\"small\"\n                                    fullWidth\n                                    disabled={!values.bulkCard}\n                                >\n                                    <InputLabel>Finish</InputLabel>\n                                    <Select\n                                        label=\"Finish\"\n                                        value={values.finish}\n                                        onChange={(e) =>\n                                            setFieldValue(\n                                                'finish',\n                                                e.target.value as string\n                                            )\n                                        }\n                                    >\n                                        {dropdownFinishOptions.map((d) => (\n                                            <MenuItem\n                                                key={d.key}\n                                                value={d.value}\n                                            >\n                                                {d.text}\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <ControlledDropdown\n                                    disabled={!values.bulkCard}\n                                    name=\"condition\"\n                                    label=\"Condition\"\n                                    options={cardConditions}\n                                    value={values.condition}\n                                    onChange={(v) =>\n                                        setFieldValue('condition', v)\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={4}>\n                                <IntegerInput\n                                    label=\"Quantity\"\n                                    name=\"quantity\"\n                                    value={values.quantity}\n                                    onChange={(v) =>\n                                        setFieldValue('quantity', v)\n                                    }\n                                    disabled={!values.bulkCard}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button\n                                    fullWidth\n                                    type=\"submit\"\n                                    primary\n                                    onClick={() => handleSubmit()}\n                                    disabled={!values.bulkCard || isSubmitting}\n                                >\n                                    Add to inventory\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </Grid>\n                <Grid item xs={4}>\n                    <SectionText>Card preview</SectionText>\n                    <br />\n                    <CardImage source={currentCardImage} width={200} />\n                </Grid>\n            </Grid>\n            {submittedCards.length > 0 && (\n                <div>\n                    <SectionText>Recently added cards</SectionText>\n                    <SubmittedCardsTable\n                        cards={submittedCards}\n                        onRemove={onRemove}\n                    />\n                </div>\n            )}\n        </Container>\n    );\n};\n\nexport default BulkInventory;\n","import React, { createContext, FC, useContext, useState } from 'react';\nimport { useToastContext } from '../ui/ToastContext';\nimport { ClientCard, QOH } from '../utils/ClientCard';\nimport cardSearchQuery from './cardSearchQuery';\n\ninterface Props {}\n\ninterface Context {\n    searchResults: ClientCard[];\n    changeCardQuantity: (id: string, qoh: QOH) => void;\n    handleSearchSelect: (term: string) => void;\n}\n\nconst InventoryContext = createContext<Context>({\n    searchResults: [],\n    changeCardQuantity: () => null,\n    handleSearchSelect: () => null,\n});\n\nconst InventoryProvider: FC<Props> = ({ children }) => {\n    const [searchResults, setSearchResults] = useState<ClientCard[]>([]);\n    const { createErrorToast } = useToastContext();\n\n    const handleSearchSelect = async (term: string) => {\n        try {\n            const cards = await cardSearchQuery({\n                cardName: term,\n                inStockOnly: false,\n            });\n\n            setSearchResults(cards);\n        } catch (err) {\n            console.log(err);\n            createErrorToast(err);\n        }\n    };\n\n    const changeCardQuantity = (id: string, qoh: QOH) => {\n        const copiedState = [...searchResults];\n        const targetIndex = copiedState.findIndex((e) => e.id === id);\n        copiedState[targetIndex].qoh = qoh;\n        setSearchResults(copiedState);\n    };\n\n    return (\n        <InventoryContext.Provider\n            value={{ searchResults, changeCardQuantity, handleSearchSelect }}\n        >\n            {children}\n        </InventoryContext.Provider>\n    );\n};\n\nexport const useInventoryContext = () => useContext(InventoryContext);\n\nexport default InventoryProvider;\n","import { ClientCard } from '../utils/ClientCard';\n\nconst ORDER = ['W', 'U', 'B', 'R', 'G', 'MULTI', 'COLORLESS', 'LAND'] as const;\n\ntype Order = typeof ORDER[number];\n\n/**\n * Main helper function that manages sort order\n * @param {Object} card\n */\nfunction helpSort(card: ClientCard): Order {\n    let cardFace = null;\n\n    // First, get correct card face\n    if (\n        card.card_faces &&\n        card.card_faces.length > 1 &&\n        card.card_faces[0].colors // Adventure cards do not have a `colors` property on their faces\n    ) {\n        cardFace = card.card_faces[0];\n    } else {\n        cardFace = card;\n    }\n\n    /**\n     * Devoid cards are an edge-case.\n     *\n     * If we know a card has no color and is devoid, we default to its color identity as a pip descriptor\n     */\n    if (card.keywords.includes('Devoid')) {\n        if (cardFace.color_identity.length > 1) {\n            return 'MULTI';\n        } else {\n            return cardFace.color_identity[0];\n        }\n    }\n\n    if (cardFace.colors.length > 1) {\n        return 'MULTI';\n    }\n\n    if (cardFace.colors.length === 0) {\n        if (cardFace.type_line.includes('Land')) {\n            return 'LAND';\n        } else {\n            return 'COLORLESS';\n        }\n    }\n\n    return cardFace.colors[0];\n}\n\n/**\n * Takes in an unordered group of cards and sorts them according to The Clubhouse's specs:\n * WUBRG, then multicolor, then colorless, then land, alphabetically within each color/category\n */\nexport default function sortSaleList<T extends ClientCard>(cards: T[]) {\n    const alphaSort = cards.sort((a, b) => a.name.localeCompare(b.name));\n\n    return alphaSort.sort((a, b) => {\n        return ORDER.indexOf(helpSort(a)) - ORDER.indexOf(helpSort(b));\n    });\n}\n","import http from '../common/http';\nimport { FinishCondition } from '../utils/ClientCard';\nimport { SUSPEND_SALE } from '../utils/endpoints';\n\ninterface FinishSaleCard {\n    id: string;\n    price: number;\n    qtyToSell: number;\n    finishCondition: FinishCondition;\n    name: string;\n    set_name: string;\n}\n\ninterface Payload {\n    customerName: string;\n    notes: string;\n    saleList: FinishSaleCard[];\n}\n\ninterface ResponseData {\n    ops: [{ name: string }];\n}\n\nconst createSuspendedSaleQuery = async (payload: Payload) => {\n    try {\n        const { data } = await http.post<ResponseData>(SUSPEND_SALE, payload);\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default createSuspendedSaleQuery;\n","import http from '../common/http';\nimport { SUSPEND_SALE } from '../utils/endpoints';\n\nconst deleteSuspendedSaleQuery = async (saleId: string) => {\n    try {\n        const { data } = await http.delete<void>(`${SUSPEND_SALE}/${saleId}`);\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default deleteSuspendedSaleQuery;\n","import http from '../common/http';\nimport { FINISH_SALE } from '../utils/endpoints';\nimport { SaleListCard } from './SaleContext';\n\ninterface Payload {\n    cards: SaleListCard[];\n}\n\ninterface ResponseData {\n    sale_data: {\n        Sale: {\n            saleID: string;\n        };\n    };\n}\n\nconst finishSaleQuery = async (payload: Payload) => {\n    try {\n        const { data } = await http.post<ResponseData>(FINISH_SALE, payload);\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default finishSaleQuery;\n","import http from '../common/http';\nimport { SUSPEND_SALE } from '../utils/endpoints';\nimport { SaleListCard } from './SaleContext';\n\nexport interface SuspendedSale {\n    _id: string;\n    name: string;\n    notes: string;\n    list: SaleListCard[];\n}\n\nconst getSuspendedSaleQuery = async (saleId: string) => {\n    try {\n        const { data } = await http.get<SuspendedSale>(\n            `${SUSPEND_SALE}/${saleId}`\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default getSuspendedSaleQuery;\n","import $ from 'jquery';\nimport React, { createContext, FC, useContext, useState } from 'react';\nimport sortSaleList from '../Sale/sortSaleList';\nimport { useToastContext } from '../ui/ToastContext';\nimport { ClientCard, FinishCondition } from '../utils/ClientCard';\nimport cardSearchQuery from './cardSearchQuery';\nimport createSuspendedSaleQuery from './createSuspendedSaleQuery';\nimport deleteSuspendedSaleQuery from './deleteSuspendedSaleQuery';\nimport finishSaleQuery from './finishSaleQuery';\nimport getSuspendedSaleQuery, { SuspendedSale } from './getSuspendedSaleQuery';\n\ninterface Props {}\n\ninterface SuspendSaleArgs {\n    customerName: string;\n    notes: string;\n}\n\nexport type SaleListCard = ClientCard & {\n    finishCondition: FinishCondition;\n    qtyToSell: number;\n    price: number;\n};\n\nexport interface Context {\n    saleListCards: SaleListCard[];\n    searchResults: ClientCard[];\n    searchTerm: string;\n    suspendedSale: SuspendedSale;\n    handleResultSelect: (term: string) => void;\n    addToSaleList: (\n        card: ClientCard,\n        finishCondition: FinishCondition,\n        qtyToSell: number,\n        price: number\n    ) => void;\n    removeFromSaleList: (id: string, finishCondition: string) => void;\n    restoreSale: (saleId: string) => void;\n    suspendSale: (args: SuspendSaleArgs) => void;\n    deleteSuspendedSale: () => void;\n    finalizeSale: () => void;\n    resetSaleState: () => void;\n}\n\nconst defaultSuspendedSale: SuspendedSale = {\n    _id: '',\n    name: '',\n    notes: '',\n    list: [],\n};\n\nconst SaleContext = createContext<Context>({\n    saleListCards: [],\n    searchResults: [],\n    searchTerm: '',\n    suspendedSale: defaultSuspendedSale,\n    handleResultSelect: () => null,\n    addToSaleList: () => null,\n    removeFromSaleList: () => null,\n    restoreSale: () => null,\n    suspendSale: () => null,\n    deleteSuspendedSale: () => null,\n    finalizeSale: () => null,\n    resetSaleState: () => null,\n});\n\nexport const SaleProvider: FC<Props> = ({ children }) => {\n    const { createToast, createErrorToast } = useToastContext();\n    const [saleListCards, setSaleListCards] = useState<SaleListCard[]>([]);\n    const [searchTerm, setSearchTerm] = useState<string>('');\n    const [searchResults, setSearchResults] = useState<ClientCard[]>([]);\n    const [suspendedSale, setSuspendedSale] =\n        useState<SuspendedSale>(defaultSuspendedSale);\n\n    /**\n     * Executes after a user selects an autocompleted suggestion\n     */\n    const handleResultSelect = async (term: string) => {\n        const cards = await cardSearchQuery({\n            cardName: term,\n            inStockOnly: true,\n        });\n\n        setSearchResults(cards);\n        setSearchTerm(term);\n\n        if (cards.length === 0) {\n            $('#searchBar').focus().select();\n        }\n    };\n\n    /**\n     * Adds product to the sale list\n     */\n    const addToSaleList = (\n        card: ClientCard,\n        finishCondition: FinishCondition,\n        qtyToSell: number,\n        price: number\n    ) => {\n        const oldState = [...saleListCards];\n\n        const newCard: SaleListCard = {\n            ...card,\n            finishCondition,\n            qtyToSell,\n            price,\n        };\n\n        // Need to make sure same ID's with differing conditions are separate line-items\n        const idx = oldState.findIndex((el) => {\n            return (\n                el.id === newCard.id && el.finishCondition === finishCondition\n            );\n        });\n\n        if (idx !== -1) {\n            oldState.splice(idx, 1, newCard);\n        } else {\n            oldState.push(newCard);\n        }\n\n        setSaleListCards(sortSaleList(oldState));\n    };\n\n    /**\n     * Removes product from the sale list\n     */\n    const removeFromSaleList = (id: string, finishCondition: string) => {\n        const newState = [...saleListCards].filter((c) => {\n            return !(c.id === id && c.finishCondition === finishCondition);\n        });\n\n        setSaleListCards(newState);\n    };\n\n    /**\n     * Restores a sale (assigns a saleList to state) from a suspended sale from the db\n     */\n    const restoreSale = async (id: string) => {\n        try {\n            const sale = await getSuspendedSaleQuery(id);\n\n            const modeledData = sale.list.map((c) => c);\n\n            setSaleListCards(modeledData);\n            setSuspendedSale(sale);\n\n            createToast({\n                severity: 'success',\n                message: `You are viewing ${sale.name}'s sale`,\n            });\n        } catch (err) {\n            console.log(err);\n            createErrorToast(err);\n        }\n    };\n\n    /**\n     * Suspends a sale (persists it to mongo) via the SuspendedSale component and API\n     */\n    const suspendSale = async ({\n        customerName,\n        notes,\n    }: {\n        customerName: string;\n        notes: string;\n    }) => {\n        const { _id } = suspendedSale;\n\n        try {\n            if (!!_id)\n                // If we're suspended, delete the previous to replace\n                await deleteSuspendedSaleQuery(_id);\n\n            const data = await createSuspendedSaleQuery({\n                customerName: customerName,\n                notes: notes,\n                saleList: saleListCards.map(\n                    ({\n                        id,\n                        price,\n                        qtyToSell,\n                        finishCondition,\n                        name,\n                        set_name,\n                    }) => ({\n                        id,\n                        price,\n                        qtyToSell,\n                        finishCondition,\n                        name,\n                        set_name,\n                    })\n                ),\n            });\n\n            resetSaleState();\n\n            createToast({\n                severity: 'success',\n                message: `${data.ops[0].name}'s sale was suspended`,\n            });\n        } catch (err) {\n            console.log(err);\n            createErrorToast(err);\n        }\n    };\n\n    const deleteSuspendedSale = async () => {\n        try {\n            const { _id, name } = suspendedSale;\n            await deleteSuspendedSaleQuery(_id);\n\n            resetSaleState();\n\n            createToast({\n                severity: 'success',\n                message: `${name}'s sale was deleted`,\n            });\n        } catch (err) {\n            console.log(err);\n            createErrorToast(err);\n        }\n    };\n\n    /**\n     * Extracts the saleList state and uses it to complete sale\n     */\n    const finalizeSale = async () => {\n        const { _id } = suspendedSale;\n\n        try {\n            // Must delete currently suspended sale to faithfully restore inventory prior to sale\n            if (!!_id) await deleteSuspendedSaleQuery(_id);\n\n            const { sale_data } = await finishSaleQuery({\n                cards: saleListCards,\n            });\n\n            createToast({\n                severity: 'success',\n                message: `Sale created: ID #${sale_data.Sale.saleID}`,\n            });\n\n            resetSaleState();\n        } catch (err) {\n            createErrorToast(err);\n            throw err;\n        }\n    };\n\n    const resetSaleState = () => {\n        setSaleListCards([]);\n        setSearchResults([]);\n        setSearchTerm('');\n        setSuspendedSale(defaultSuspendedSale);\n    };\n\n    return (\n        <SaleContext.Provider\n            value={{\n                saleListCards,\n                searchTerm,\n                searchResults,\n                suspendedSale,\n                handleResultSelect,\n                addToSaleList,\n                removeFromSaleList,\n                restoreSale,\n                suspendSale,\n                deleteSuspendedSale,\n                finalizeSale,\n                resetSaleState,\n            }}\n        >\n            {children}\n        </SaleContext.Provider>\n    );\n};\n\nexport const useSaleContext = () => useContext(SaleContext);\n","export default __webpack_public_path__ + \"static/media/ch2.f55f010a.jpg\";","export default __webpack_public_path__ + \"static/media/clubhouse_products.e622049f.png\";","import { SvgIcon } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nconst DiscordIcon: FC = () => {\n    return (\n        <SvgIcon\n            viewBox=\"0 0 256 293\"\n            version=\"1.1\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            preserveAspectRatio=\"xMidYMid\"\n        >\n            <g>\n                <path d=\"M226.011429,0 L29.9885714,0 C13.4582857,0 0,13.4582857 0,30.1348571 L0,227.913143 C0,244.589714 13.4582857,258.048 29.9885714,258.048 L195.876571,258.048 L188.123429,230.985143 L206.848,248.393143 L224.548571,264.777143 L256,292.571429 L256,30.1348571 C256,13.4582857 242.541714,0 226.011429,0 Z M169.545143,191.049143 C169.545143,191.049143 164.278857,184.758857 159.890286,179.2 C179.053714,173.787429 186.368,161.792 186.368,161.792 C180.370286,165.741714 174.665143,168.521143 169.545143,170.422857 C162.230857,173.494857 155.209143,175.542857 148.333714,176.713143 C134.290286,179.346286 121.417143,178.614857 110.445714,176.566857 C102.107429,174.957714 94.9394286,172.617143 88.9417143,170.276571 C85.5771429,168.96 81.92,167.350857 78.2628571,165.302857 C77.824,165.010286 77.3851429,164.864 76.9462857,164.571429 C76.6537143,164.425143 76.5074286,164.278857 76.3611429,164.132571 C73.728,162.669714 72.2651429,161.645714 72.2651429,161.645714 C72.2651429,161.645714 79.2868571,173.348571 97.8651429,178.907429 C93.4765714,184.466286 88.064,191.049143 88.064,191.049143 C55.7348571,190.025143 43.4468571,168.813714 43.4468571,168.813714 C43.4468571,121.709714 64.512,83.5291429 64.512,83.5291429 C85.5771429,67.7302857 105.618286,68.1691429 105.618286,68.1691429 L107.081143,69.9245714 C80.7497143,77.5314286 68.608,89.088 68.608,89.088 C68.608,89.088 71.8262857,87.3325714 77.2388571,84.8457143 C92.8914286,77.9702857 105.325714,76.0685714 110.445714,75.6297143 C111.323429,75.4834286 112.054857,75.3371429 112.932571,75.3371429 C121.856,74.1668571 131.949714,73.8742857 142.482286,75.0445714 C156.379429,76.6537143 171.300571,80.7497143 186.514286,89.088 C186.514286,89.088 174.957714,78.1165714 150.089143,70.5097143 L152.137143,68.1691429 C152.137143,68.1691429 172.178286,67.7302857 193.243429,83.5291429 C193.243429,83.5291429 214.308571,121.709714 214.308571,168.813714 C214.308571,168.813714 201.874286,190.025143 169.545143,191.049143 Z M101.522286,122.733714 C93.184,122.733714 86.6011429,130.048 86.6011429,138.971429 C86.6011429,147.894857 93.3302857,155.209143 101.522286,155.209143 C109.860571,155.209143 116.443429,147.894857 116.443429,138.971429 C116.589714,130.048 109.860571,122.733714 101.522286,122.733714 M154.916571,122.733714 C146.578286,122.733714 139.995429,130.048 139.995429,138.971429 C139.995429,147.894857 146.724571,155.209143 154.916571,155.209143 C163.254857,155.209143 169.837714,147.894857 169.837714,138.971429 C169.837714,130.048 163.254857,122.733714 154.916571,122.733714\"></path>\n            </g>\n        </SvgIcon>\n    );\n};\n\nexport default DiscordIcon;\n","export default __webpack_public_path__ + \"static/media/learn_to_play.91a17850.jpg\";","export default __webpack_public_path__ + \"static/media/tables.451be904.jpg\";","import { Box, Button, withStyles } from '@material-ui/core';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport FacebookIcon from '@material-ui/icons/Facebook';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport PeopleIcon from '@material-ui/icons/People';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport RoomIcon from '@material-ui/icons/Room';\nimport WatchLaterIcon from '@material-ui/icons/WatchLater';\nimport React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport ch2 from './ch2.jpg';\nimport clubhouse_products from './clubhouse_products.png';\nimport DiscordIcon from './DiscordIcon';\nimport learn_to_play from './learn_to_play.jpg';\nimport ch1 from './tables.jpg';\n\nconst colors = {\n    primary: '#2185d0',\n    white: '#ffffff',\n    gray: {\n        light: '#99aab5',\n        main: '#2c2f33',\n        dark: '#23272a',\n    },\n};\n\nconst primaryRgb = '13, 49, 69,';\nconst bodyBackground = '#f8f5ef';\n\nconst desktopMediaQuery = `@media only screen and (min-width: 769px)`;\nconst tabletMediaQuery = `@media only screen and (max-width: 768px)`;\n\nconst headerHeight = 52;\nconst borderRadius = 7;\n\nconst HeroImageContainer = styled('div')({\n    width: '100%',\n    height: 500,\n});\n\nconst Container = styled('div')({\n    marginTop: headerHeight,\n});\n\ninterface ImageProps {\n    src: string;\n    rounded?: boolean;\n}\n\nconst CenterIcon = withStyles({\n    root: {\n        verticalAlign: 'middle',\n        display: 'inline',\n    },\n})(Box);\n\nconst HeroIcon = withStyles({\n    root: {\n        '& > *': {\n            fontSize: 80,\n            color: '#ffffff',\n        },\n        display: 'inline',\n    },\n})(Box);\n\nconst Image = styled.div<ImageProps>`\n    background: url(${({ src }) => src});\n    background-size: cover;\n    height: 100%;\n    width: 100%;\n    border-radius: ${({ rounded }) => (rounded ? `${borderRadius}px` : '0px')};\n`;\n\nconst LocationImageContainer = styled('div')({\n    width: '100%',\n    height: 350,\n    borderRadius: borderRadius,\n});\n\nconst ImageGradient = styled('div')({\n    backgroundImage: `linear-gradient(\n        to top,\n        rgba(${primaryRgb} 0.9),\n        rgba(${primaryRgb} 0.85),\n        rgba(${primaryRgb} 0.70),\n        rgba(${primaryRgb} 0.60),\n        rgba(255, 255, 255, 0)\n    )`,\n    height: '100%',\n    width: '100%',\n});\n\nconst ImageGradient2 = styled('div')({\n    backgroundColor: `rgba(${primaryRgb} 0.85)`,\n    height: '100%',\n    width: '100%',\n    borderRadius: borderRadius,\n});\n\nconst HeroText = styled('h1')({\n    color: colors.white,\n    textAlign: 'center',\n    [tabletMediaQuery]: {\n        fontSize: 40,\n    },\n    [desktopMediaQuery]: {\n        fontSize: 50,\n    },\n});\n\ninterface HeaderTextProps {\n    inverted?: boolean;\n}\n\nconst HeaderText = styled.h1<HeaderTextProps>`\n    color: ${({ inverted }) => (inverted ? colors.white : colors.gray.main)};\n`;\n\nconst SectionText = styled('h2')({\n    color: colors.white,\n    textAlign: 'center',\n});\n\nconst SubheaderText = styled('div')({\n    color: colors.white,\n    fontSize: 18,\n});\n\nconst HeaderContainer = styled('div')({\n    display: 'flex',\n    height: 'inherit',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n});\n\nconst ServicesContainer = styled('div')({\n    display: 'grid',\n    gridGap: 60,\n    [tabletMediaQuery]: {\n        gridTemplateRows: '1fr 1fr 1fr',\n    },\n    [desktopMediaQuery]: {\n        gridTemplateColumns: '1fr 1fr 1fr',\n    },\n});\n\nconst LocationsContainer = styled('div')({\n    display: 'grid',\n    gridGap: 20,\n    [tabletMediaQuery]: {\n        gridTemplateRows: '1fr 1fr',\n    },\n    [desktopMediaQuery]: {\n        gridTemplateColumns: '1fr 1fr',\n    },\n});\n\nconst LocationContainer = styled('div')({\n    padding: 40,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    height: '100%',\n});\n\nconst Content = styled('div')({\n    padding: 20,\n});\n\ninterface DescriptionProps {\n    inverted?: boolean;\n}\n\nconst Description = styled.div<DescriptionProps>`\n    color: ${({ inverted }) => (inverted ? colors.white : colors.gray.main)};\n    font-size: 18px;\n`;\n\nconst TextWidth = styled('div')({\n    [tabletMediaQuery]: {\n        width: '100%',\n    },\n    [desktopMediaQuery]: {\n        width: '50%',\n    },\n});\n\nconst IconContainer = styled('div')({\n    padding: 40,\n    backgroundColor: colors.gray.main,\n    borderRadius: borderRadius,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n});\n\nconst SectionDivider = styled('div')({\n    width: '100%',\n    padding: 40,\n});\n\nconst Footer = styled('div')({\n    bottom: 0,\n    backgroundColor: colors.gray.dark,\n    [tabletMediaQuery]: {\n        padding: 20,\n    },\n    [desktopMediaQuery]: {\n        paddingLeft: 40,\n        paddingBottom: 20,\n        paddingRight: 40,\n        paddingTop: 40,\n    },\n});\n\ninterface FlexRowProps {\n    justify?: 'center' | 'space-between';\n}\n\nconst FlexRow = styled.div<FlexRowProps>`\n    display: flex;\n    justify-content: ${({ justify }) => justify || 'space-between'};\n    align-items: center;\n`;\n\nconst Home: FC = () => {\n    return (\n        <Container style={{ backgroundColor: bodyBackground }}>\n            <HeroImageContainer>\n                <Image src={learn_to_play}>\n                    <ImageGradient>\n                        <HeaderContainer>\n                            <HeroText>The Clubhouse is open 🎉</HeroText>\n                            <TextWidth>\n                                <SubheaderText>\n                                    <SectionText>\n                                        We are open all week for your tabletop\n                                        gaming needs!\n                                    </SectionText>\n                                </SubheaderText>\n                            </TextWidth>\n                            <br />\n                            <Link to=\"/public-inventory\">\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    size=\"large\"\n                                >\n                                    Browse cards\n                                </Button>\n                            </Link>\n                        </HeaderContainer>\n                    </ImageGradient>\n                </Image>\n            </HeroImageContainer>\n            <SectionDivider />\n            <Content>\n                <HeaderText>Your local game store.</HeaderText>\n                <TextWidth>\n                    <Description>\n                        We take pride in our friendly community of players, and\n                        always ensure that our customers are well served.\n                    </Description>\n                </TextWidth>\n            </Content>\n            <Content>\n                <ServicesContainer>\n                    <div>\n                        <IconContainer>\n                            <HeroIcon>\n                                <LocalOfferIcon />\n                            </HeroIcon>\n                            <SectionText>Large product selection</SectionText>\n                        </IconContainer>\n                        <br />\n                        <Description>\n                            We stock an extensive selection of singles and CCG\n                            supplies just for you! When the deck-building itch\n                            strikes, turn to us\n                        </Description>\n                    </div>\n                    <div>\n                        <IconContainer>\n                            <HeroIcon>\n                                <PeopleIcon />\n                            </HeroIcon>\n                            <SectionText>Inclusive community</SectionText>\n                        </IconContainer>\n                        <br />\n                        <Description>\n                            Young or seasoned, beginner or advanced, we welcome\n                            all players!\n                        </Description>\n                    </div>\n                    <div>\n                        <IconContainer>\n                            <HeroIcon>\n                                <AttachMoneyIcon />\n                            </HeroIcon>\n                            <SectionText>Cash or credit trade-ins</SectionText>\n                        </IconContainer>\n                        <br />\n                        <Description>\n                            Whether a whole collection or a single card, come on\n                            by and have one of our expert managers appraise it\n                            using competitive market rates\n                        </Description>\n                    </div>\n                </ServicesContainer>\n            </Content>\n            <SectionDivider />\n            <Content>\n                <HeaderText>Two convenient locations</HeaderText>\n                <LocationsContainer>\n                    <LocationImageContainer>\n                        <Image src={ch1} rounded>\n                            <ImageGradient2>\n                                <LocationContainer>\n                                    <HeaderText inverted>Beaverton</HeaderText>\n                                    <SectionDivider />\n                                    <div>\n                                        <Description inverted>\n                                            <CenterIcon>\n                                                <RoomIcon fontSize=\"large\" />\n                                            </CenterIcon>\n                                            13895 SW Farmington Rd, Beaverton,\n                                            OR 97005\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <CenterIcon>\n                                                <WatchLaterIcon fontSize=\"large\" />\n                                            </CenterIcon>\n                                            Mon - Fri 12pm to 7pm, Sat - Sun\n                                            11am to 7pm\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <CenterIcon>\n                                                <PhoneIcon fontSize=\"large\" />\n                                            </CenterIcon>\n                                            (503) 268-1449\n                                        </Description>\n                                    </div>\n                                </LocationContainer>\n                            </ImageGradient2>\n                        </Image>\n                    </LocationImageContainer>\n                    <LocationImageContainer>\n                        <Image src={ch2} rounded>\n                            <ImageGradient2>\n                                <LocationContainer>\n                                    <HeaderText inverted>Hillsboro</HeaderText>\n                                    <SectionDivider />\n                                    <div>\n                                        <Description inverted>\n                                            <CenterIcon>\n                                                <RoomIcon fontSize=\"large\" />\n                                            </CenterIcon>\n                                            1300 SW Oak St Suite B, Hillsboro,\n                                            OR 97123\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <CenterIcon>\n                                                <WatchLaterIcon fontSize=\"large\" />\n                                            </CenterIcon>\n                                            Mon - Fri 12pm to 7pm, Sat - Sun\n                                            11am to 7pm\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <CenterIcon>\n                                                <PhoneIcon fontSize=\"large\" />\n                                            </CenterIcon>\n                                            (971) 249-3096\n                                        </Description>\n                                    </div>\n                                </LocationContainer>\n                            </ImageGradient2>\n                        </Image>\n                    </LocationImageContainer>\n                </LocationsContainer>\n            </Content>\n            <SectionDivider />\n            <LocationImageContainer>\n                <Image src={clubhouse_products}>\n                    <ImageGradient>\n                        <HeaderContainer>\n                            <HeroText>We look forward to seeing you</HeroText>\n                            <TextWidth>\n                                <SubheaderText>\n                                    Follow us on Facebook or become a member of\n                                    our Discord community for up-to-date\n                                    announcements on store events, product\n                                    releases, pre-orders, and so much more!\n                                </SubheaderText>\n                            </TextWidth>\n                        </HeaderContainer>\n                    </ImageGradient>\n                </Image>\n            </LocationImageContainer>\n            <Footer>\n                <FlexRow>\n                    <Description inverted>© 2021 The Clubhouse</Description>\n                    <div>\n                        <a\n                            href=\"https://discord.gg/Wpej7dQ\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <HeroIcon>\n                                <DiscordIcon />\n                            </HeroIcon>\n                        </a>\n                        <a\n                            href=\"https://www.facebook.com/RGTClubhouse/\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <HeroIcon>\n                                <FacebookIcon />\n                            </HeroIcon>\n                        </a>\n                    </div>\n                </FlexRow>\n                <FlexRow justify=\"center\">\n                    <Link to=\"/login\">\n                        <Button color=\"primary\">Staff login</Button>\n                    </Link>\n                </FlexRow>\n            </Footer>\n        </Container>\n    );\n};\n\nexport default Home;\n","import {\n    FormHelperText,\n    TextField as MUITextField,\n    TextFieldProps,\n} from '@material-ui/core';\nimport { FC } from 'react';\n\ntype Props = {\n    error?: string;\n    label: string;\n} & Omit<TextFieldProps, 'error' | 'variant' | 'size' | 'label'>;\n\nconst TextField: FC<Props> = ({ error, label, ...props }) => {\n    return (\n        <>\n            <MUITextField\n                id={label}\n                label={label}\n                variant=\"outlined\"\n                size=\"small\"\n                error={!!error}\n                {...props}\n            />\n            {error && <FormHelperText error>{error}</FormHelperText>}\n        </>\n    );\n};\n\nexport default TextField;\n","import { Box, Container, makeStyles, Paper } from '@material-ui/core';\nimport { FormikErrors, useFormik } from 'formik';\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { ClubhouseLocation, useAuthContext } from '../context/AuthProvider';\nimport Button from '../ui/Button';\nimport ControlledDropdown from '../ui/ControlledDropdown';\nimport TextField from '../ui/TextField';\nimport { useToastContext } from '../ui/ToastContext';\n\ninterface FormValues {\n    username: string;\n    password: string;\n    location: ClubhouseLocation | null;\n}\n\nconst initialFormValues: FormValues = {\n    username: '',\n    password: '',\n    location: null,\n};\n\nconst useStyles = makeStyles(({ spacing }) => ({\n    formGap: {\n        '& > *:not(:last-child)': {\n            paddingBottom: spacing(2),\n        },\n    },\n}));\n\nconst locationDropdownOptions = [\n    {\n        key: 'beaverton',\n        text: 'Beaverton',\n        value: 'ch1',\n    },\n    {\n        key: 'hillsboro',\n        text: 'Hillsboro',\n        value: 'ch2',\n    },\n];\n\nconst validate = ({ username, password, location }: FormValues) => {\n    const errors: FormikErrors<FormValues> = {};\n\n    if (!username) {\n        errors.username = 'Required';\n    }\n\n    if (!password) {\n        errors.password = 'Required';\n    }\n\n    if (!location) {\n        errors.location = 'Please select a location';\n    }\n\n    return errors;\n};\n\nconst Login = () => {\n    const { formGap } = useStyles();\n    const { isLoggedIn, handleLogin } = useAuthContext();\n    const { createToast } = useToastContext();\n\n    const onSubmit = async ({ username, password, location }: FormValues) => {\n        if (!location) return;\n\n        const data = await handleLogin(username, password, location);\n\n        if (data.token) {\n            createToast({\n                severity: 'success',\n                message: `Enjoy your time here!`,\n            });\n        } else {\n            createToast({\n                severity: 'error',\n                message: data,\n            });\n        }\n    };\n\n    const {\n        values,\n        handleChange,\n        handleSubmit,\n        setFieldValue,\n        errors,\n        isSubmitting,\n    } = useFormik({\n        initialValues: initialFormValues,\n        validate,\n        onSubmit,\n        validateOnChange: false,\n    });\n\n    if (isLoggedIn()) return <Redirect to=\"/manage-inventory\" />;\n\n    return (\n        <Container maxWidth=\"xs\">\n            <Paper variant=\"outlined\">\n                <Box p={3}>\n                    <form className={formGap}>\n                        <div>\n                            <TextField\n                                error={errors.username}\n                                name=\"username\"\n                                label=\"Username\"\n                                fullWidth\n                                onChange={handleChange}\n                            />\n                        </div>\n                        <div>\n                            <TextField\n                                error={errors.password}\n                                name=\"password\"\n                                type=\"password\"\n                                label=\"Password\"\n                                fullWidth\n                                onChange={handleChange}\n                            />\n                        </div>\n                        <ControlledDropdown\n                            error={errors.location}\n                            value={values.location || ''}\n                            label=\"Location\"\n                            name=\"location\"\n                            options={locationDropdownOptions}\n                            onChange={(v) => {\n                                setFieldValue('location', v);\n                            }}\n                        />\n                        <Button\n                            fullWidth\n                            primary\n                            onClick={() => handleSubmit()}\n                            disabled={isSubmitting}\n                        >\n                            Submit\n                        </Button>\n                    </form>\n                </Box>\n            </Paper>\n        </Container>\n    );\n};\n\nexport default Login;\n","import Axios from 'axios';\nimport { GET_LIVE_PRICE } from '../utils/endpoints';\n\ninterface ResponseData {\n    marketPrices: { foil: number; normal: number };\n    medianPrices: { foil: number; normal: number };\n}\n\ninterface Payload {\n    scryfallId: string;\n}\n\nconst marketPriceQuery = async ({ scryfallId }: Payload) => {\n    try {\n        const { data } = await Axios.get<ResponseData>(GET_LIVE_PRICE, {\n            params: { scryfallId },\n        });\n\n        const { marketPrices, medianPrices } = data;\n\n        return {\n            marketPrices,\n            medianPrices,\n        };\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default marketPriceQuery;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Finish } from '../utils/ClientCard';\nimport Chip from './Chip';\nimport marketPriceQuery from './marketPriceQuery';\n\ninterface Props {\n    id: string;\n    finish: Finish;\n    round: boolean;\n    showMid: boolean;\n}\n\n// Rounds the passed number to the nearest fifty cents\nconst roundNearestStep = (n: number) => Math.ceil(n * 2) / 2;\n\nconst displayPrice = (price: number | null) =>\n    !!price ? `$${price.toFixed(2)}` : 'N/A';\n\nconst MarketPrice: FC<Props> = ({ id, finish, round, showMid = true }) => {\n    const [market, setMarket] = useState<number | null>(null);\n    const [median, setMedian] = useState<number | null>(null);\n    const [loading, setLoading] = useState<boolean>(false);\n    const isFoil = finish === 'FOIL';\n\n    useEffect(() => {\n        (async function fetchData() {\n            let _isMounted = true;\n            setLoading(true);\n\n            const { marketPrices, medianPrices } = await marketPriceQuery({\n                scryfallId: id,\n            });\n\n            if (_isMounted) {\n                if (isFoil) {\n                    setMarket(Number(marketPrices.foil));\n                    setMedian(Number(medianPrices.foil));\n                } else {\n                    setMarket(Number(marketPrices.normal));\n                    setMedian(Number(medianPrices.normal));\n                }\n\n                setLoading(false);\n            }\n\n            return () => (_isMounted = false);\n        })();\n    }, [id, finish]);\n\n    const loader = <span>Loading...</span>;\n\n    /**\n     * TODO: Remove this once we support etched pricing, and integrate properly\n     */\n    if (finish === 'ETCHED') {\n        return (\n            <Chip\n                size=\"small\"\n                label={loading ? loader : <span>Mkt. N/A</span>}\n            />\n        );\n    }\n\n    return (\n        <>\n            <Chip\n                size=\"small\"\n                foil={isFoil}\n                label={\n                    loading ? (\n                        loader\n                    ) : (\n                        <span>\n                            Mkt.{' '}\n                            {round\n                                ? displayPrice(\n                                      market ? roundNearestStep(market) : null\n                                  )\n                                : displayPrice(market)}\n                        </span>\n                    )\n                }\n            />\n            {showMid && (\n                <Chip\n                    size=\"small\"\n                    foil={isFoil}\n                    label={\n                        loading ? (\n                            loader\n                        ) : (\n                            <span>Mid. {displayPrice(median)}</span>\n                        )\n                    }\n                />\n            )}\n        </>\n    );\n};\n\nexport default MarketPrice;\n","import { Chip, makeStyles } from '@material-ui/core';\nimport React, { FC, forwardRef } from 'react';\n\nconst useStyles = makeStyles({\n    container: {\n        display: 'inline-block',\n        borderRadius: 5,\n    },\n    chip: {\n        borderRadius: 5,\n    },\n    leftChip: {\n        borderTopRightRadius: 0,\n        borderBottomRightRadius: 0,\n        borderTopLeftRadius: 5,\n        borderBottomLeftRadius: 5,\n    },\n    rightChip: {\n        borderTopLeftRadius: 0,\n        borderBottomLeftRadius: 0,\n        borderTopRightRadius: 5,\n        borderBottomRightRadius: 5,\n    },\n});\n\ninterface Props {\n    label: string;\n    quantity: number;\n}\n\n/**\n * We need to forward the refs from possible tooltip implementations to this custom\n * component so `Tooltip` can access and modify the underlying children\n */\nconst InventoryChip: FC<Props> = forwardRef<HTMLDivElement, Props>(\n    (props, ref) => {\n        const { quantity, label } = props;\n        const { container, leftChip, rightChip } = useStyles();\n        const quantityColor = quantity > 0 ? 'primary' : undefined;\n\n        return (\n            <div {...props} ref={ref} className={container}>\n                <Chip\n                    color={quantityColor}\n                    className={leftChip}\n                    size=\"small\"\n                    label={label}\n                />\n                <Chip\n                    color={quantityColor}\n                    className={rightChip}\n                    size=\"small\"\n                    label={quantity}\n                />\n            </div>\n        );\n    }\n);\n\nexport default InventoryChip;\n","import { QOH } from './ClientCard';\n\nexport default function parseQoh(qoh: QOH) {\n    const foilQty =\n        (qoh?.FOIL_NM || 0) +\n        (qoh?.FOIL_LP || 0) +\n        (qoh?.FOIL_MP || 0) +\n        (qoh?.FOIL_HP || 0);\n\n    const nonfoilQty =\n        (qoh?.NONFOIL_NM || 0) +\n        (qoh?.NONFOIL_LP || 0) +\n        (qoh?.NONFOIL_MP || 0) +\n        (qoh?.NONFOIL_HP || 0);\n\n    const etchedQty =\n        (qoh?.ETCHED_NM || 0) +\n        (qoh?.ETCHED_LP || 0) +\n        (qoh?.ETCHED_MP || 0) +\n        (qoh?.ETCHED_HP || 0);\n\n    return [foilQty, nonfoilQty, etchedQty] as const;\n}\n","import { Tooltip, Typography } from '@material-ui/core';\nimport React, { FC } from 'react';\nimport InventoryChip from '../ui/InventoryChip';\nimport { QOH } from '../utils/ClientCard';\nimport displayFinishCondition from '../utils/displayFinishCondition';\nimport parseQoh from '../utils/parseQoh';\n\nexport const createInventoryLineItems = (\n    inventoryQty: QOH,\n    matchStrings: (keyof QOH)[]\n): string[] => {\n    const matches = matchStrings\n        .map((finishCondition) => {\n            const quantity = inventoryQty[finishCondition];\n            if (quantity && quantity > 0) {\n                return `${displayFinishCondition(\n                    finishCondition\n                )}: ${quantity}`;\n            } else {\n                return null;\n            }\n        })\n        .filter((m): m is string => !!m);\n\n    if (matches.length === 0) return ['None in stock'];\n    return matches;\n};\n\ninterface Props {\n    inventoryQty: QOH;\n}\n\ninterface LabelWithPopupProps {\n    quantity: number;\n    label: string;\n    popupLineItems: string[];\n}\n\nconst LabelWithPopup: FC<LabelWithPopupProps> = ({\n    quantity,\n    label,\n    popupLineItems,\n}) => (\n    <Tooltip\n        title={popupLineItems.map((item) => (\n            <Typography key={Math.random()} variant=\"body2\">\n                {item}\n            </Typography>\n        ))}\n        arrow\n        placement=\"top\"\n    >\n        <InventoryChip quantity={quantity} label={label} />\n    </Tooltip>\n);\n\n// This component parses the `qoh` object from mongo into something more presentable\nconst QohLabels: FC<Props> = ({ inventoryQty }) => {\n    const [foilQuantity, nonfoilQuantity, etchedQuantity] =\n        parseQoh(inventoryQty);\n\n    const foilLineItems = createInventoryLineItems(inventoryQty, [\n        'FOIL_NM',\n        'FOIL_LP',\n        'FOIL_MP',\n        'FOIL_HP',\n    ]);\n\n    const nonfoilLineItems = createInventoryLineItems(inventoryQty, [\n        'NONFOIL_NM',\n        'NONFOIL_LP',\n        'NONFOIL_MP',\n        'NONFOIL_HP',\n    ]);\n\n    const etchedLineItems = createInventoryLineItems(inventoryQty, [\n        'ETCHED_NM',\n        'ETCHED_LP',\n        'ETCHED_MP',\n        'ETCHED_HP',\n    ]);\n\n    return (\n        <>\n            <LabelWithPopup\n                label=\"Foil\"\n                quantity={foilQuantity}\n                popupLineItems={foilLineItems}\n            />\n            <LabelWithPopup\n                label=\"Nonfoil\"\n                quantity={nonfoilQuantity}\n                popupLineItems={nonfoilLineItems}\n            />\n            {etchedQuantity > 0 && (\n                <LabelWithPopup\n                    label=\"Etched\"\n                    quantity={etchedQuantity}\n                    popupLineItems={etchedLineItems}\n                />\n            )}\n        </>\n    );\n};\n\nexport default QohLabels;\n","import { LanguageCode } from './ClientCard';\n\nconst LANG_CODES: Record<LanguageCode, string> = {\n    en: 'English',\n    es: 'Spanish',\n    fr: 'French',\n    de: 'German',\n    it: 'Italian',\n    pt: 'Portuguese',\n    ja: 'Japanese',\n    ko: 'Korean',\n    ru: 'Russian',\n    zhs: 'Simplified Chinese',\n    zht: 'Traditional Chinese',\n    he: 'Hebrew',\n    la: 'Latin',\n    grc: 'Ancient Greek',\n    ar: 'Arabic',\n    sa: 'Sanskrit',\n    px: 'Phyrexian',\n};\n\nfunction language(languageCode: LanguageCode): string {\n    return LANG_CODES[languageCode];\n}\n\nexport default language;\n","import { Box, Link, Typography, withStyles } from '@material-ui/core';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport React, { FC } from 'react';\nimport MarketPrice from '../common/MarketPrice';\nimport QohLabels from '../common/QohLabels';\nimport { ClientCard, Finish } from '../utils/ClientCard';\nimport language from '../utils/Language';\nimport Button from './Button';\nimport SetIcon from './SetIcon';\n\ninterface Props {\n    card: ClientCard;\n    selectedFinish: Finish;\n    showMid?: boolean;\n    round?: boolean;\n}\n\n// TODO: remove this shim after TCG api approval and integration\nconst TcgPriceButton: FC<{ tcgId: number | null }> = ({ tcgId }) => {\n    const tcgUrl = `https://www.tcgplayer.com/product/${tcgId}`;\n\n    if (!tcgId) {\n        return (\n            <Button disabled size=\"small\">\n                TCG Link unavailable\n            </Button>\n        );\n    }\n\n    return (\n        <Link href={tcgUrl} target=\"_blank\" underline=\"none\">\n            <Button size=\"small\">\n                View on TCG <OpenInNewIcon fontSize=\"small\" />\n            </Button>\n        </Link>\n    );\n};\n\nconst SubheaderContainer = withStyles(({ spacing }) => ({\n    root: {\n        '& > div': {\n            marginRight: spacing(1),\n        },\n    },\n}))(Box);\n\nconst CardHeader: FC<Props> = ({\n    card,\n    selectedFinish,\n    showMid = false,\n    round = false,\n}) => {\n    const { id, display_name, set, rarity, set_name, qoh, lang, tcgplayer_id } =\n        card;\n\n    return (\n        <Box>\n            <Box display=\"flex\" alignItems=\"center\">\n                <Typography variant=\"h6\">\n                    <b>{display_name}</b>\n                </Typography>\n                <SetIcon set={set} rarity={rarity} />\n            </Box>\n            <SubheaderContainer>\n                <Typography variant=\"body2\">\n                    {set_name} ({set.toUpperCase()}) - {language(lang)}\n                </Typography>\n                <QohLabels inventoryQty={qoh} />\n                <MarketPrice\n                    id={id}\n                    finish={selectedFinish}\n                    showMid={showMid}\n                    round={round}\n                />\n                <TcgPriceButton tcgId={tcgplayer_id} />\n            </SubheaderContainer>\n        </Box>\n    );\n};\n\nexport default CardHeader;\n","import { Box, Grid, makeStyles, Paper } from '@material-ui/core';\nimport React, { FC, ReactNode } from 'react';\n\ninterface Props {\n    image: ReactNode;\n    header: ReactNode;\n}\n\nconst useStyles = makeStyles(({ spacing }) => ({\n    headerContainer: {\n        paddingBottom: spacing(3),\n    },\n}));\n\nconst CardRowContainer: FC<Props> = ({ image, header, children }) => {\n    const { headerContainer } = useStyles();\n\n    return (\n        <Paper variant=\"outlined\">\n            <Box p={2}>\n                <Grid container spacing={2}>\n                    <Grid item>{image}</Grid>\n                    <Grid item xs={10}>\n                        <div className={headerContainer}>{header}</div>\n                        <div>{children}</div>\n                    </Grid>\n                </Grid>\n            </Box>\n        </Paper>\n    );\n};\n\nexport default CardRowContainer;\n","import { Grid } from '@material-ui/core';\nimport { FormikErrors, FormikHelpers, useFormik } from 'formik';\nimport React, { ChangeEvent, FC, useEffect } from 'react';\nimport Button from '../ui/Button';\nimport ControlledDropdown from '../ui/ControlledDropdown';\nimport TextField from '../ui/TextField';\nimport { Condition, Finish, Finishes } from '../utils/ClientCard';\nimport {\n    cardConditions,\n    createDropdownFinishOptions,\n    finishDropdownDisabled,\n} from '../utils/dropdownOptions';\n\nexport interface FormValues {\n    selectedFinish: Finish;\n    selectedCondition: Condition;\n    quantity: string;\n}\n\ninterface Props {\n    onSubmit: (values: FormValues) => void;\n    onFinishSelect: (finish: Finish) => void;\n    cardFinishes: Finishes;\n}\n\nconst validate = ({ quantity }: FormValues) => {\n    let errors: FormikErrors<FormValues> = {};\n\n    if (!Number(quantity) || !Number.isInteger(+quantity) || +quantity > 100) {\n        errors.quantity = 'error';\n    }\n\n    return errors;\n};\n\nconst ManageInventoryCardForm: FC<Props> = ({\n    onSubmit,\n    onFinishSelect,\n    cardFinishes,\n}) => {\n    const dropdownFinishes = createDropdownFinishOptions(cardFinishes);\n    const initialFinish = dropdownFinishes[0].value;\n\n    const initialFormValues: FormValues = {\n        selectedFinish: initialFinish,\n        selectedCondition: 'NM',\n        quantity: '0',\n    };\n\n    const doSubmit = async (\n        values: FormValues,\n        { resetForm }: FormikHelpers<FormValues>\n    ) => {\n        await onSubmit(values);\n        resetForm(); // Imperatively reset the form after submission\n    };\n\n    const { values, handleSubmit, setFieldValue, isSubmitting, isValid } =\n        useFormik({\n            initialValues: initialFormValues,\n            validate,\n            onSubmit: doSubmit,\n            validateOnMount: true,\n        });\n\n    /**\n     * On mount, we determine the initial finish and call this so\n     * the parent doesn't have to maintain initial state\n     */\n    useEffect(() => {\n        onFinishSelect(initialFinish);\n    }, []);\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <Grid container alignItems=\"center\" spacing={2}>\n                <Grid item>\n                    <TextField\n                        type=\"number\"\n                        label=\"Quantity\"\n                        value={values.quantity}\n                        onChange={(e: ChangeEvent<HTMLInputElement>) =>\n                            setFieldValue('quantity', e.target.value)\n                        }\n                        onFocus={() => {\n                            if (+values.quantity === 0) {\n                                setFieldValue('quantity', '');\n                            }\n                        }}\n                    />\n                </Grid>\n                <Grid item>\n                    <ControlledDropdown\n                        name=\"finish\"\n                        label=\"Finish\"\n                        value={values.selectedFinish}\n                        options={dropdownFinishes}\n                        disabled={finishDropdownDisabled(cardFinishes)}\n                        onChange={(value) => {\n                            onFinishSelect(value as Finish);\n                            setFieldValue('selectedFinish', value);\n                        }}\n                    />\n                </Grid>\n                <Grid item>\n                    <ControlledDropdown\n                        name=\"condition\"\n                        label=\"Condition\"\n                        value={values.selectedCondition}\n                        options={cardConditions}\n                        onChange={(value) => {\n                            setFieldValue('selectedCondition', value);\n                        }}\n                    />\n                </Grid>\n                <Grid item>\n                    <Button\n                        type=\"submit\"\n                        primary\n                        disabled={!isValid || isSubmitting}\n                    >\n                        Add to inventory\n                    </Button>\n                </Grid>\n            </Grid>\n        </form>\n    );\n};\n\nexport default ManageInventoryCardForm;\n","import $ from 'jquery';\nimport React, { FC, useState } from 'react';\nimport CardImage from '../common/CardImage';\nimport { useInventoryContext } from '../context/InventoryContext';\nimport CardHeader from '../ui/CardHeader';\nimport CardRowContainer from '../ui/CardRowContainer';\nimport { useToastContext } from '../ui/ToastContext';\nimport { ClientCard, Finish } from '../utils/ClientCard';\nimport createFinishCondition from '../utils/createFinishCondtition';\nimport addCardToInventoryQuery from './addCardToInventoryQuery';\nimport ManageInventoryCardForm, { FormValues } from './ManageInventoryCardForm';\n\ninterface Props {\n    card: ClientCard;\n}\n\nconst ManageInventoryListItem: FC<Props> = ({ card }) => {\n    const { createToast, createErrorToast } = useToastContext();\n    const { finishes, name, set_name, set, id, cardImage } = card;\n\n    // Defaults to 'NONFOIL', but the form component will manage this for us\n    const [selectedFinish, setSelectedFinish] = useState<Finish>('NONFOIL');\n\n    const { changeCardQuantity } = useInventoryContext();\n\n    const onSubmit = async ({\n        quantity,\n        selectedFinish,\n        selectedCondition,\n    }: FormValues) => {\n        try {\n            const { qoh } = await addCardToInventoryQuery({\n                quantity: parseInt(quantity, 10),\n                finishCondition: createFinishCondition(\n                    selectedFinish,\n                    selectedCondition\n                ),\n                cardInfo: { id, name, set_name, set },\n            });\n\n            changeCardQuantity(id, qoh);\n\n            createToast({\n                severity: 'success',\n                message: `${quantity}x ${name} ${\n                    parseInt(quantity, 10) > 0 ? 'added' : 'removed'\n                }!`,\n            });\n\n            // Highlight the input after successful card add\n            $('#searchBar').focus().select();\n        } catch (err) {\n            console.log(err);\n            createErrorToast(err);\n        }\n    };\n\n    return (\n        <CardRowContainer\n            image={<CardImage source={cardImage} width={125} hover />}\n            header={\n                <CardHeader card={card} selectedFinish={selectedFinish} round />\n            }\n        >\n            <ManageInventoryCardForm\n                onSubmit={onSubmit}\n                onFinishSelect={(finish) => setSelectedFinish(finish)}\n                cardFinishes={finishes}\n            />\n        </CardRowContainer>\n    );\n};\n\nexport default ManageInventoryListItem;\n","import axios from 'axios';\nimport { GET_CARD_FROM_ALL_LOCATIONS } from '../utils/endpoints';\n\ninterface Quantities {\n    foilQty: number;\n    nonfoilQty: number;\n    etchedQty: number;\n}\n\nexport interface ResponseData {\n    ch1: Quantities;\n    ch2: Quantities;\n}\n\ninterface Payload {\n    title: string;\n}\n\n/**\n * Fetches total inventory for the given card name across all store locations\n */\nconst allLocationInventoryQuery = async ({ title }: Payload) => {\n    try {\n        const { data } = await axios.get<ResponseData>(\n            GET_CARD_FROM_ALL_LOCATIONS,\n            {\n                params: { title },\n            }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default allLocationInventoryQuery;\n","import { Box, makeStyles, Typography } from '@material-ui/core';\nimport React, { FC, useEffect, useState } from 'react';\nimport InventoryChip from '../ui/InventoryChip';\nimport { useToastContext } from '../ui/ToastContext';\nimport { ClientCard } from '../utils/ClientCard';\nimport allLocationInventoryQuery, {\n    ResponseData,\n} from './allLocationInventoryQuery';\n\nconst useStyles = makeStyles(({ spacing }) => ({\n    labelContainer: {\n        display: 'flex',\n        alignItems: 'center',\n        '& > *': {\n            marginLeft: spacing(2),\n        },\n    },\n    chipContainer: {\n        display: 'inline',\n        '& > *': {\n            display: 'inline',\n        },\n        '& > *:not(:last-child)': {\n            paddingRight: spacing(1),\n        },\n    },\n}));\n\ninterface Props {\n    title: string;\n    searchResults: ClientCard[];\n}\n\nconst TotalStoreInventory: FC<Props> = ({ title, searchResults }) => {\n    const { createErrorToast } = useToastContext();\n    const { labelContainer, chipContainer } = useStyles();\n    const [quantities, setQuantities] = useState<ResponseData>({\n        ch1: { foilQty: 0, nonfoilQty: 0, etchedQty: 0 },\n        ch2: { foilQty: 0, nonfoilQty: 0, etchedQty: 0 },\n    });\n\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                setLoading(true);\n                const data = await allLocationInventoryQuery({ title });\n                setQuantities(data);\n                setLoading(false);\n            } catch (err) {\n                console.log(err);\n                createErrorToast(err);\n            }\n        })();\n    }, [title, searchResults]);\n\n    if (loading) {\n        return (\n            <div className={labelContainer}>\n                <div>\n                    <Typography>Beaverton totals:</Typography>\n                    <Typography>Loading...</Typography>\n                </div>\n                <div>\n                    <Typography>Hillsboro totals:</Typography>\n                    <Typography>Loading...</Typography>\n                </div>\n            </div>\n        );\n    }\n\n    const { ch1, ch2 } = quantities;\n\n    return (\n        <div className={labelContainer}>\n            <div>\n                <Typography>Beaverton totals:</Typography>\n                <Box className={chipContainer}>\n                    <InventoryChip label=\"Foil\" quantity={ch1.foilQty} />\n                    <InventoryChip label=\"Nonfoil\" quantity={ch1.nonfoilQty} />\n                    {ch1.etchedQty > 0 && (\n                        <InventoryChip\n                            label=\"Etched\"\n                            quantity={ch1.etchedQty}\n                        />\n                    )}\n                </Box>\n            </div>\n            <div>\n                <Typography>Hillsboro totals:</Typography>\n                <Box className={chipContainer}>\n                    <InventoryChip label=\"Foil\" quantity={ch2.foilQty} />\n                    <InventoryChip label=\"Nonfoil\" quantity={ch2.nonfoilQty} />\n                    {ch2.etchedQty > 0 && (\n                        <InventoryChip\n                            label=\"Etched\"\n                            quantity={ch2.etchedQty}\n                        />\n                    )}\n                </Box>\n            </div>\n        </div>\n    );\n};\n\nexport default TotalStoreInventory;\n","import { Grid } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport React, { useEffect, useState } from 'react';\nimport { useInventoryContext } from '../context/InventoryContext';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport Loading from '../ui/Loading';\nimport Placeholder from '../ui/Placeholder';\nimport { HeaderText } from '../ui/Typography';\nimport ManageInventoryListItem from './ManageInventoryListItem';\nimport TotalStoreInventory from './TotalStoreInventory';\n\nexport default function ManageInventory() {\n    const [term, setTerm] = useState<string>('');\n    const [loading, setLoading] = useState<boolean>(false);\n    const { searchResults, handleSearchSelect } = useInventoryContext();\n\n    useEffect(() => {\n        if (term) {\n            (async () => {\n                setLoading(true);\n                await handleSearchSelect(term);\n                setLoading(false);\n            })();\n        }\n    }, [term]);\n\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={12} md={4}>\n                    <ControlledSearchBar\n                        value={term}\n                        onChange={(v) => setTerm(v)}\n                    />\n                </Grid>\n            </Grid>\n            <br />\n            <Grid container justify=\"space-between\">\n                <HeaderText>Manage Inventory</HeaderText>\n                {searchResults.length > 0 && (\n                    <TotalStoreInventory\n                        searchResults={searchResults}\n                        title={searchResults[0].name}\n                    />\n                )}\n            </Grid>\n            <br />\n            {loading ? (\n                <Loading />\n            ) : (\n                <>\n                    {!searchResults.length && (\n                        <Placeholder\n                            icon={<SearchIcon style={{ fontSize: 80 }} />}\n                        >\n                            <em>\n                                \"For the first time in his life, Grakk felt a\n                                little warm and fuzzy inside.\"\n                            </em>\n                        </Placeholder>\n                    )}\n                    <Grid container spacing={2}>\n                        {searchResults.map((card) => (\n                            <Grid item xs={12} key={card.id}>\n                                <ManageInventoryListItem card={card} />\n                            </Grid>\n                        ))}\n                    </Grid>\n                </>\n            )}\n        </>\n    );\n}\n","import { Divider, List, ListItem, ListItemIcon } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter';\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport ListAltIcon from '@material-ui/icons/ListAlt';\nimport QueueIcon from '@material-ui/icons/Queue';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport React, { FC } from 'react';\nimport { Link as RouterLink, useLocation } from 'react-router-dom';\nimport { useAuthContext } from '../context/AuthProvider';\n\nconst NavLinks: FC<{}> = () => {\n    const { pathname } = useLocation();\n    const { handleLogout } = useAuthContext();\n\n    return (\n        <List>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/manage-inventory\"\n                selected={pathname === '/manage-inventory'}\n                replace\n            >\n                <ListItemIcon>\n                    <AddIcon color=\"primary\" />\n                </ListItemIcon>\n                Manage Inventory\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/bulk-add\"\n                selected={pathname === '/bulk-add'}\n                replace\n            >\n                <ListItemIcon>\n                    <QueueIcon color=\"primary\" />\n                </ListItemIcon>\n                Bulk Entry\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/new-sale\"\n                selected={pathname === '/new-sale'}\n                replace\n            >\n                <ListItemIcon>\n                    <AttachMoneyIcon color=\"primary\" />\n                </ListItemIcon>\n                New Sale\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/receiving\"\n                selected={pathname === '/receiving'}\n                replace\n            >\n                <ListItemIcon>\n                    <ListAltIcon color=\"primary\" />\n                </ListItemIcon>\n                Receiving\n            </ListItem>\n            <Divider />\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/browse-inventory\"\n                selected={pathname === '/browse-inventory'}\n                replace\n            >\n                <ListItemIcon>\n                    <BusinessCenterIcon color=\"primary\" />\n                </ListItemIcon>\n                Browse Inventory\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/browse-sales\"\n                selected={pathname === '/browse-sales'}\n                replace\n            >\n                <ListItemIcon>\n                    <VisibilityIcon color=\"primary\" />\n                </ListItemIcon>\n                Browse Sales\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/browse-receiving\"\n                selected={pathname === '/browse-receiving'}\n                replace\n            >\n                <ListItemIcon>\n                    <ViewListIcon color=\"primary\" />\n                </ListItemIcon>\n                Browse Receiving\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/reporting\"\n                selected={pathname === '/reporting'}\n                replace\n            >\n                <ListItemIcon>\n                    <EqualizerIcon color=\"primary\" />\n                </ListItemIcon>\n                Reporting (Beta)\n            </ListItem>\n            <Divider />\n            <ListItem button onClick={() => handleLogout()}>\n                <ListItemIcon>\n                    <ExitToAppIcon color=\"primary\" />\n                </ListItemIcon>\n                Log Out\n            </ListItem>\n        </List>\n    );\n};\n\nexport default NavLinks;\n","import {\n    AppBar,\n    Box,\n    Drawer,\n    Grid,\n    IconButton,\n    makeStyles,\n    Toolbar,\n    Typography,\n} from '@material-ui/core';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport React, { FC, useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { version } from '../../package.json';\nimport { ClubhouseLocation, useAuthContext } from '../context/AuthProvider';\nimport NavLinks from './NavLinks';\n\nconst useStyles = makeStyles(({ spacing, typography, palette }) => ({\n    title: {\n        flexGrow: 1,\n    },\n    menuLinkText: {\n        fontWeight: typography.fontWeightBold,\n        '&:hover': {\n            color: palette.common.white,\n        },\n    },\n    list: {\n        width: 250,\n    },\n    menuButton: {\n        marginRight: spacing(2),\n    },\n}));\n\n// TODO: This information needs to be populated on the backend via a collection of shop entities\nconst getClubhouseLocationName = (location: ClubhouseLocation | null) => {\n    if (location === 'ch1') return 'Beaverton';\n    if (location === 'ch2') return 'Hillsboro';\n    return '';\n};\n\nconst NavBar: FC<{}> = () => {\n    const { isLoggedIn, currentLocation, currentUser } = useAuthContext();\n    const [drawerOpen, setDrawerOpen] = useState<boolean>(false);\n    const { title, list, menuButton, menuLinkText } = useStyles();\n\n    return (\n        <AppBar>\n            <Toolbar>\n                {isLoggedIn() && (\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        className={menuButton}\n                        onClick={() => setDrawerOpen(true)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                )}\n                <div className={title}>\n                    <Typography\n                        color=\"inherit\"\n                        className={menuLinkText}\n                        component={RouterLink}\n                        variant=\"h6\"\n                        to=\"/\"\n                    >\n                        Clubhouse Collection\n                    </Typography>\n                </div>\n                <Typography\n                    color=\"inherit\"\n                    className={menuLinkText}\n                    component={RouterLink}\n                    variant=\"button\"\n                    to=\"/public-inventory\"\n                >\n                    Search cards\n                </Typography>\n                <Drawer\n                    anchor=\"left\"\n                    open={drawerOpen}\n                    onClose={() => setDrawerOpen(false)}\n                >\n                    <Box\n                        py={2}\n                        display=\"flex\"\n                        flexDirection=\"column\"\n                        justifyContent=\"space-between\"\n                        height={1}\n                    >\n                        <div>\n                            <Grid\n                                container\n                                direction=\"row\"\n                                alignItems=\"center\"\n                                justify=\"center\"\n                            >\n                                <LocationOnIcon color=\"primary\" />\n                                <Typography color=\"primary\" variant=\"h6\">\n                                    {getClubhouseLocationName(currentLocation)}\n                                </Typography>\n                            </Grid>\n                            <Typography color=\"textSecondary\" align=\"center\">\n                                Logged in as {currentUser}\n                            </Typography>\n                            <div\n                                className={list}\n                                onClick={() => setDrawerOpen(false)}\n                            >\n                                <NavLinks />\n                            </div>\n                        </div>\n                        <Typography color=\"textSecondary\" align=\"center\">\n                            Version {version}\n                        </Typography>\n                    </Box>\n                </Drawer>\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nexport default NavBar;\n","import { makeStyles } from '@material-ui/core';\nimport React, { FC } from 'react';\nimport CardImage from '../common/CardImage';\nimport MarketPrice from '../common/MarketPrice';\nimport InventoryChip from '../ui/InventoryChip';\nimport { ClientCard } from '../utils/ClientCard';\nimport parseQoh from '../utils/parseQoh';\n\ninterface Props {\n    card: ClientCard;\n}\n\n// These numbers were the originally calculated px values\nconst cardImageRatio = 418.3 / 300;\nconst cardImageWidth = 275;\nconst cardImageHeight = cardImageRatio * cardImageWidth;\n\nconst useStyles = makeStyles(() => ({\n    imageWrapper: {\n        width: `${cardImageWidth}px`,\n        height: `${cardImageHeight}px`,\n        boxShadow: `2px 2px 5px 0 rgba(0, 0, 0, 0.25)`,\n        background: `repeating-linear-gradient(\n            45deg,\n            #bfbfbf,\n            #bfbfbf 10px,\n            #b0b0b0 10px,\n            #b0b0b0 20px\n        )`,\n        borderRadius: `15px`,\n        '& > img': {\n            borderRadius: '15px',\n        },\n    },\n    inventoryRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        margin: '5px',\n    },\n    inventoryWrapper: {\n        display: 'flex',\n        width: '100%',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        padding: ' 5px',\n        backgroundColor: 'rgba(0, 0, 0, 0.9)',\n        borderRadius: '10px 10px 10px 10px',\n        boxShadow: '2px 2px 5px 0 rgba(0, 0, 0, 0.25)',\n    },\n    wrapper: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        width: `${cardImageWidth}px`,\n    },\n}));\n\nconst PublicCard: FC<Props> = ({ card }) => {\n    const { imageWrapper, inventoryRow, inventoryWrapper, wrapper } =\n        useStyles();\n    const { id, cardImage } = card;\n    const [foilQty, nonfoilQty, etchedQty] = parseQoh(card.qoh);\n\n    return (\n        <div className={wrapper}>\n            <div className={imageWrapper}>\n                <CardImage source={cardImage} width={cardImageWidth} />\n            </div>\n            <div className={inventoryWrapper}>\n                {foilQty > 0 && (\n                    <div className={inventoryRow}>\n                        <InventoryChip quantity={foilQty} label=\"Foil\" />\n                        <MarketPrice\n                            id={id}\n                            finish=\"FOIL\"\n                            round\n                            showMid={false}\n                        />\n                    </div>\n                )}\n                {nonfoilQty > 0 && (\n                    <div className={inventoryRow}>\n                        <InventoryChip quantity={nonfoilQty} label=\"Nonfoil\" />\n                        <MarketPrice\n                            id={id}\n                            finish=\"NONFOIL\"\n                            round\n                            showMid={false}\n                        />\n                    </div>\n                )}\n                {etchedQty > 0 && (\n                    <div className={inventoryRow}>\n                        <InventoryChip quantity={etchedQty} label=\"Etched\" />\n                        <MarketPrice\n                            id={id}\n                            finish=\"ETCHED\"\n                            round\n                            showMid={false}\n                        />\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default PublicCard;\n","import axios from 'axios';\nimport { ClubhouseLocation } from '../context/AuthProvider';\nimport { ClientCard } from '../utils/ClientCard';\nimport { GET_CARDS_WITH_INFO_PUBLIC } from '../utils/endpoints';\n\ninterface Params {\n    title: string;\n    matchInStock: boolean;\n    location: ClubhouseLocation;\n}\n\n/**\n * Fetches cards from the DB by title when a user selects a title after querying.\n * This function merges the data (inventory quantity and card objects) from two endpoints into one array.\n */\nconst publicCardSearchQuery = async (params: Params) => {\n    try {\n        const { data } = await axios.get<ClientCard[]>(\n            GET_CARDS_WITH_INFO_PUBLIC,\n            {\n                params,\n            }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default publicCardSearchQuery;\n","import { Grid, makeStyles, Typography } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { FormikErrors, useFormik } from 'formik';\nimport React, { FC, useState } from 'react';\nimport { ClubhouseLocation } from '../context/AuthProvider';\nimport Button from '../ui/Button';\nimport ControlledDropdown from '../ui/ControlledDropdown';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport Placeholder from '../ui/Placeholder';\nimport { HeaderText } from '../ui/Typography';\nimport { ClientCard } from '../utils/ClientCard';\nimport PublicCard from './PublicCard';\nimport publicCardSearchQuery from './publicCardSearchQuery';\n\ninterface State {\n    searchResults: ClientCard[];\n    searchTerm: string;\n    selectedLocation: ClubhouseLocation;\n}\n\ninterface FormValues {\n    searchTerm: string;\n    selectedLocation: ClubhouseLocation;\n}\n\nconst useStyles = makeStyles({\n    gridContainer: {\n        display: 'grid',\n        gridGap: '20px',\n        gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))',\n        justifyItems: 'center',\n    },\n});\n\nconst initialState: State = {\n    searchResults: [],\n    searchTerm: '',\n    selectedLocation: 'ch1',\n};\n\nconst initialFormState: FormValues = {\n    searchTerm: '',\n    selectedLocation: 'ch1',\n};\n\nconst locationOptions = [\n    { key: 'beaverton', text: 'CH Beaverton', value: 'ch1' },\n    { key: 'hillsboro', text: 'CH Hillsboro', value: 'ch2' },\n];\n\nconst validate = ({ searchTerm }: FormValues) => {\n    let errors: FormikErrors<FormValues> = {};\n\n    if (!searchTerm) {\n        errors.searchTerm = 'error';\n    }\n\n    return errors;\n};\n\nconst PublicInventory: FC = () => {\n    const { gridContainer } = useStyles();\n    const [state, setState] = useState<State>(initialState);\n    const [formSubmitted, setFormSubmitted] = useState<boolean>(false);\n\n    const fetchCards = async ({\n        title,\n        location,\n    }: {\n        title: string;\n        location: ClubhouseLocation;\n    }) => {\n        try {\n            const cards = await publicCardSearchQuery({\n                title,\n                location,\n                matchInStock: true,\n            });\n\n            setState({\n                ...state,\n                searchResults: cards,\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const onSubmit = async ({ searchTerm, selectedLocation }: FormValues) => {\n        await fetchCards({\n            title: searchTerm,\n            location: selectedLocation,\n        });\n\n        setFormSubmitted(true);\n    };\n\n    const { values, handleSubmit, setFieldValue, isSubmitting } = useFormik({\n        initialValues: initialFormState,\n        validate,\n        onSubmit,\n    });\n\n    return (\n        <>\n            <HeaderText>Inventory Search</HeaderText>\n            <Typography>\n                Card prices subject to change. Consult a Clubhouse employee for\n                final estimates\n            </Typography>\n            <br />\n            <form onSubmit={handleSubmit}>\n                <Grid container spacing={2} alignItems=\"center\">\n                    <Grid item xs={12} md={4}>\n                        <ControlledSearchBar\n                            value={values.searchTerm}\n                            onChange={(v) => setFieldValue('searchTerm', v)}\n                        />\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                        <ControlledDropdown\n                            name=\"storeLocation\"\n                            value={values.selectedLocation}\n                            options={locationOptions}\n                            onChange={(v) =>\n                                setFieldValue('selectedLocation', v)\n                            }\n                        />\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                        <Button\n                            type=\"submit\"\n                            primary\n                            disabled={!values.searchTerm || isSubmitting}\n                        >\n                            Search\n                        </Button>\n                    </Grid>\n                </Grid>\n            </form>\n            <br />\n            {state.searchResults.length > 0 ? (\n                <div className={gridContainer}>\n                    {state.searchResults.map((c) => (\n                        <PublicCard key={c.id} card={c} />\n                    ))}\n                </div>\n            ) : (\n                <Placeholder icon={<SearchIcon style={{ fontSize: 80 }} />}>\n                    {formSubmitted ? (\n                        <span>No cards found in stock</span>\n                    ) : (\n                        <span>Search for a card</span>\n                    )}\n                </Placeholder>\n            )}\n        </>\n    );\n};\n\nexport default PublicInventory;\n","import React, { FC } from 'react';\nimport pluralize from '../utils/pluralize';\nimport Chip from './Chip';\n\ninterface Props {\n    listLength: number;\n}\n\nconst TotalCardsLabel: FC<Props> = ({ listLength }) => {\n    if (listLength === 0) return null;\n\n    return (\n        <Chip\n            label={`${listLength} ${pluralize(listLength, 'card')}`}\n            size=\"small\"\n        />\n    );\n};\n\nexport default TotalCardsLabel;\n","import { useEffect, useState } from 'react';\n\n/**\n * The browser emits a \"beforeunload\" event right before the user closes a tab or refreshes\n * to indicate freeing resources. We interrupt this process and render a confirmation dialog.\n */\nconst onInterrupt = (e: BeforeUnloadEvent) => {\n    e.preventDefault();\n    e.returnValue = '';\n};\n\nconst initBeforeUnload = (showPrompt: boolean) => {\n    if (showPrompt) {\n        window.addEventListener('beforeunload', onInterrupt);\n    } else {\n        window.removeEventListener('beforeunload', onInterrupt);\n    }\n};\n\n/**\n * Custom hook that tracks whether or not we add the listener event,\n * based on an initial value.\n */\nconst useInterruptExit = (initial: boolean) => {\n    const [showPrompt, setShowPrompt] = useState<boolean>(initial);\n\n    initBeforeUnload(showPrompt);\n\n    useEffect(() => {\n        initBeforeUnload(showPrompt);\n\n        // Remember to remove the listener on unmount!\n        return () => {\n            window.removeEventListener('beforeunload', onInterrupt);\n        };\n    }, [showPrompt]);\n\n    return { showPrompt, setShowPrompt };\n};\n\nexport default useInterruptExit;\n","import { Box, Grid, IconButton, ListItem, Typography } from '@material-ui/core';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport CloseIcon from '@material-ui/icons/Close';\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\nimport React, { FC } from 'react';\nimport Chip from '../common/Chip';\nimport Price from '../common/Price';\nimport {\n    ReceivingCard,\n    Trade,\n    useReceivingContext,\n} from '../context/ReceivingContext';\nimport CardImageTooltip from '../ui/CardImageTooltip';\nimport SetIcon from '../ui/SetIcon';\nimport displayFinishCondition from '../utils/displayFinishCondition';\n\ninterface Props {\n    card: ReceivingCard;\n}\n\n// Defines whether it uses cash or credit for trade types\nconst TRADE_TYPE = { CASH: 'CASH', CREDIT: 'CREDIT' };\n\nconst ReceivingCartItem: FC<Props> = ({ card }) => {\n    const {\n        display_name,\n        set,\n        rarity,\n        cashPrice,\n        creditPrice,\n        finishCondition,\n        tradeType,\n        cardImage,\n    } = card;\n    const { CASH, CREDIT } = TRADE_TYPE;\n    const { removeFromList, activeTradeType } = useReceivingContext();\n\n    return (\n        <ListItem>\n            <Grid container alignItems=\"center\" justify=\"space-between\">\n                <Grid item>\n                    <CardImageTooltip cardImage={cardImage}>\n                        <Box display=\"flex\" alignItems=\"center\">\n                            <Typography variant=\"h6\" style={{ cursor: 'help' }}>\n                                {display_name}\n                            </Typography>\n                            <SetIcon set={set} rarity={rarity} />\n                            <Chip size=\"small\" label={set.toUpperCase()} />\n                        </Box>\n                    </CardImageTooltip>\n                    <span>{displayFinishCondition(finishCondition)}</span>\n                    <div>\n                        <span style={{ whiteSpace: 'nowrap' }}>\n                            Cash:{' '}\n                            <b>\n                                <Price num={cashPrice || 0} />\n                            </b>\n                        </span>\n                        {' • '}\n                        <span style={{ whiteSpace: 'nowrap' }}>\n                            Credit:{' '}\n                            <b>\n                                <Price num={creditPrice || 0} />\n                            </b>\n                        </span>\n                    </div>\n                </Grid>\n                <Grid item>\n                    <IconButton\n                        color={tradeType === CASH ? 'primary' : undefined}\n                        onClick={() => activeTradeType(card, Trade.Cash)}\n                        disabled={cashPrice === 0}\n                    >\n                        <AttachMoneyIcon />\n                    </IconButton>\n                    <IconButton\n                        color={tradeType === CREDIT ? 'primary' : undefined}\n                        onClick={() => activeTradeType(card, Trade.Credit)}\n                        disabled={creditPrice === 0}\n                    >\n                        <CreditCardIcon />\n                    </IconButton>\n                    <IconButton\n                        onClick={() => removeFromList(card)}\n                        color=\"secondary\"\n                    >\n                        <CloseIcon />\n                    </IconButton>\n                </Grid>\n            </Grid>\n        </ListItem>\n    );\n};\n\nexport default ReceivingCartItem;\n","import { Divider, List, Paper } from '@material-ui/core';\nimport React, { FC, Fragment } from 'react';\nimport { ReceivingCard } from '../context/ReceivingContext';\nimport ReceivingCartItem from './ReceivingCartItem';\n\ninterface Props {\n    cards: ReceivingCard[];\n}\n\nconst ReceivingCart: FC<Props> = ({ cards }) => {\n    return (\n        <>\n            {cards.length > 0 && (\n                <List component={Paper} variant=\"outlined\">\n                    {cards.map((card, idx, arr) => (\n                        <Fragment key={`${card.id}-${idx}`}>\n                            <ReceivingCartItem card={card} />\n                            {idx !== arr.length - 1 && <Divider />}\n                        </Fragment>\n                    ))}\n                </List>\n            )}\n        </>\n    );\n};\n\nexport default ReceivingCart;\n","import {\n    Table,\n    TableBody,\n    TableCell,\n    TableFooter,\n    TableHead,\n    TableRow,\n} from '@material-ui/core';\nimport _ from 'lodash';\nimport React, { FC } from 'react';\nimport Price from '../common/Price';\nimport { ReceivingCard } from '../context/ReceivingContext';\nimport displayFinishCondition from '../utils/displayFinishCondition';\n\ninterface Props {\n    receivingList: ReceivingCard[];\n}\n\n// Am I crazy or is this logic really convoluted?\n// Perhaps look at this down the line for improvement...\nconst CashReport: FC<Props> = ({ receivingList }) => {\n    // If id, cashPrice and marketPrice are the same, goes in one bucket\n    const countByPriceAndID = _.chain(receivingList)\n        .filter((c) => c.tradeType === 'CASH')\n        .map((c) => {\n            // Note: We're creating a unique uuid-esque comparator string based on:\n            // `id`, `cashPrice`, `marketPrice`, and `finishCondition`\n            return {\n                ...c,\n                temp_uuid: `${c.id}-${c.cashPrice}-${c.marketPrice}-${c.finishCondition}`,\n            };\n        })\n        .groupBy('temp_uuid')\n        .mapValues((val) => val.length)\n        .value();\n\n    const uniqLineItems = _.chain(receivingList)\n        .filter((c) => c.tradeType === 'CASH')\n        .map((c) => {\n            return {\n                ...c,\n                temp_uuid: `${c.id}-${c.cashPrice}-${c.marketPrice}-${c.finishCondition}`,\n            };\n        })\n        .uniqBy('temp_uuid')\n        .value();\n\n    const mergedWithQty = uniqLineItems.map((c) => {\n        return { ...c, tradeQty: countByPriceAndID[c.temp_uuid] }; // Add a trade quantity referencing the previous count\n    });\n\n    const totalCashOut = _.chain(receivingList)\n        .filter((c) => c.tradeType === 'CASH')\n        .sumBy((c) => c.cashPrice || 0)\n        .value();\n\n    return (\n        <React.Fragment>\n            <div id=\"cash-report\">\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell colSpan={6}>Employee Name:</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>Card Name</TableCell>\n                            <TableCell>Market Value</TableCell>\n                            <TableCell>Finish (Condition)</TableCell>\n                            <TableCell>Quantity</TableCell>\n                            <TableCell>Cash Offer</TableCell>\n                            <TableCell>Cash Out</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {mergedWithQty.map((c) => {\n                            return (\n                                <TableRow key={c.temp_uuid}>\n                                    <TableCell>{c.name}</TableCell>\n                                    <TableCell>\n                                        <Price num={c.marketPrice} />\n                                    </TableCell>\n                                    <TableCell>\n                                        {displayFinishCondition(\n                                            c.finishCondition\n                                        )}\n                                    </TableCell>\n                                    <TableCell>{c.tradeQty}</TableCell>\n                                    <TableCell>\n                                        <Price num={c.cashPrice} />\n                                    </TableCell>\n                                    <TableCell>\n                                        <Price\n                                            num={\n                                                c.tradeQty * (c.cashPrice || 0)\n                                            }\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                    <TableFooter>\n                        <TableCell colSpan={6}>\n                            Total: <Price num={totalCashOut} />\n                        </TableCell>\n                    </TableFooter>\n                </Table>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default CashReport;\n","import {\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Grid,\n    Typography,\n} from '@material-ui/core';\nimport { FormikErrors, useFormik } from 'formik';\nimport React, { FC, useState } from 'react';\nimport Price from '../common/Price';\nimport { Trade, useReceivingContext } from '../context/ReceivingContext';\nimport Button from '../ui/Button';\nimport TextField from '../ui/TextField';\nimport sum from '../utils/sum';\n\ninterface Props {}\n\ninterface FormValues {\n    customerName: string;\n    customerContact: string;\n}\n\nconst initialFormValues: FormValues = {\n    customerName: '',\n    customerContact: '',\n};\n\n// TODO: Extract and generalize this\nconst validate = ({ customerName, customerContact }: FormValues) => {\n    const errors: FormikErrors<FormValues> = {};\n\n    if (!customerName) {\n        errors.customerName = 'Required';\n    }\n\n    if (customerName.length < 3) {\n        errors.customerName = 'Min 3 characters';\n    }\n\n    if (customerName.length > 50) {\n        errors.customerName = 'Max 50 characters';\n    }\n\n    if (customerContact.length > 50) {\n        errors.customerContact = 'Max 50 characters';\n    }\n\n    return errors;\n};\n\nconst ReceivingListModal: FC<Props> = () => {\n    const [loading, setLoading] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n\n    const { receivingList, commitToInventory } = useReceivingContext();\n\n    const onSubmit = async ({ customerName, customerContact }: FormValues) => {\n        setLoading(true);\n        await commitToInventory(\n            customerName,\n            customerContact ? customerContact : null\n        );\n        setLoading(false);\n    };\n\n    const { handleChange, handleSubmit, errors, resetForm } = useFormik({\n        initialValues: initialFormValues,\n        validate,\n        onSubmit,\n    });\n\n    const cashTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Trade.Cash)\n            .map((c) => c.cashPrice || 0)\n    );\n\n    const creditTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Trade.Credit)\n            .map((c) => c.creditPrice || 0)\n    );\n\n    return (\n        <>\n            <Button\n                primary\n                fullWidth\n                disabled={receivingList.length === 0}\n                onClick={() => setShowModal(true)}\n            >\n                Commit to inventory\n            </Button>\n            {showModal && (\n                <Dialog\n                    maxWidth=\"md\"\n                    fullWidth\n                    open\n                    onClose={() => setShowModal(false)}\n                >\n                    <DialogTitle>Receiving confirmation</DialogTitle>\n                    <DialogContent>\n                        <Typography variant=\"h6\">\n                            Committing the following cards to inventory:\n                        </Typography>\n                        <ul>\n                            {receivingList.map((c) => {\n                                return (\n                                    <li key={c.uuid_key}>\n                                        {`${c.name} | ${\n                                            c.set_name\n                                        } (${c.set.toUpperCase()})`}\n                                    </li>\n                                );\n                            })}\n                        </ul>\n                        <Typography variant=\"h6\">\n                            The customer is owed:\n                        </Typography>\n                        <ul>\n                            {cashTotal > 0 ? (\n                                <li>\n                                    <Price num={cashTotal} /> in cold, hard cash\n                                </li>\n                            ) : null}\n                            {creditTotal > 0 ? (\n                                <li>\n                                    <Price num={creditTotal} /> in store credit\n                                </li>\n                            ) : null}\n                        </ul>\n                        <Grid container spacing={2}>\n                            <Grid item xs={6}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Customer name\"\n                                    name=\"customerName\"\n                                    onChange={handleChange}\n                                    error={errors.customerName}\n                                />\n                            </Grid>\n                            <Grid item xs={6}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Customer contact (optional)\"\n                                    name=\"customerContact\"\n                                    onChange={handleChange}\n                                />\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            onClick={() => {\n                                resetForm();\n                                setShowModal(false);\n                            }}\n                        >\n                            Cancel\n                        </Button>\n                        <Button\n                            primary\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => handleSubmit()}\n                        >\n                            Submit\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            )}\n        </>\n    );\n};\n\nexport default ReceivingListModal;\n","import {\n    Box,\n    Grid,\n    MenuItem,\n    Paper,\n    Select,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n} from '@material-ui/core';\nimport moment from 'moment';\nimport React, { ChangeEvent, useEffect, useState } from 'react';\nimport Loading from '../ui/Loading';\nimport { HeaderText, SectionText } from '../ui/Typography';\nimport displayFinishCondition from '../utils/displayFinishCondition';\nimport { price } from '../utils/price';\nimport reportingQuery, { ResponseData } from './reportingQuery';\n\ninterface SearchDates {\n    startDate: string;\n    endDate: string;\n}\n\nenum RangeName {\n    ALL_TIME = 'All time',\n    LAST_MONTH = 'Last 30 days',\n}\n\nconst allTimeDates: SearchDates = {\n    startDate: moment().year(1999).toISOString(),\n    endDate: moment().add(1, 'days').toISOString(),\n};\n\nconst lastMonthDates: SearchDates = {\n    startDate: moment().subtract(30, 'days').toISOString(),\n    endDate: moment().add(1, 'days').toISOString(),\n};\n\nconst Reporting = () => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [report, setReport] = useState<ResponseData | null>(null);\n    const [searchName, setSearchName] = useState<RangeName>(RangeName.ALL_TIME);\n    const [searchDates, setSearchDates] = useState<SearchDates>(allTimeDates);\n\n    useEffect(() => {\n        (async () => {\n            setLoading(true);\n            const data = await reportingQuery(searchDates);\n            setLoading(false);\n            setReport(data);\n        })();\n    }, [searchName, searchDates]);\n\n    const onChange = (e: ChangeEvent<{ value: unknown }>) => {\n        if (e.target.value === RangeName.ALL_TIME) {\n            setSearchName(RangeName.ALL_TIME);\n            setSearchDates(allTimeDates);\n        } else if (e.target.value === RangeName.LAST_MONTH) {\n            setSearchName(RangeName.LAST_MONTH);\n            setSearchDates(lastMonthDates);\n        } else {\n            throw new Error('Range selection not found');\n        }\n    };\n\n    return (\n        <div>\n            <Box\n                pb={2}\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"space-between\"\n            >\n                <HeaderText>Reporting</HeaderText>\n                <Select value={searchName} onChange={onChange}>\n                    <MenuItem value={RangeName.ALL_TIME}>All time</MenuItem>\n                    <MenuItem value={RangeName.LAST_MONTH}>\n                        Last 30 days\n                    </MenuItem>\n                </Select>\n            </Box>\n            {loading || !report ? (\n                <Loading />\n            ) : (\n                <Grid container spacing={2}>\n                    <Grid item xs={12} md={4}>\n                        <SectionText>Top cards sold by name</SectionText>\n                        <TableContainer component={Paper} variant=\"outlined\">\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>\n                                            <b>Quantity sold</b>\n                                        </TableCell>\n                                        <TableCell>\n                                            <b>Card name</b>\n                                        </TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {report.countByCardName.map((c) => (\n                                        <TableRow key={c._id}>\n                                            <TableCell>\n                                                {c.quantity_sold}\n                                            </TableCell>\n                                            <TableCell>\n                                                {c.card_title}\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Grid>\n                    <Grid item xs={12} md={8}>\n                        <SectionText>\n                            Top cards sold by a single printing\n                        </SectionText>\n                        <TableContainer component={Paper} variant=\"outlined\">\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>\n                                            <b>Quantity sold</b>\n                                        </TableCell>\n                                        <TableCell>\n                                            <b>Card name</b>\n                                        </TableCell>\n                                        <TableCell>\n                                            <b>Edition</b>\n                                        </TableCell>\n                                        <TableCell>\n                                            <b>Finish (Condition)</b>\n                                        </TableCell>\n                                        <TableCell>\n                                            <b>Estimated market price</b>\n                                        </TableCell>\n                                        <TableCell>\n                                            <b>Quantity on hand</b>\n                                        </TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {report.countByPrinting.map((c) => (\n                                        <TableRow key={c._id}>\n                                            <TableCell>\n                                                {c.quantity_sold}\n                                            </TableCell>\n                                            <TableCell>\n                                                {c.card_title}\n                                            </TableCell>\n                                            <TableCell>\n                                                {c.card_metadata.set_name}\n                                            </TableCell>\n                                            <TableCell>\n                                                {displayFinishCondition(\n                                                    c.finish_condition\n                                                )}\n                                            </TableCell>\n                                            <TableCell>\n                                                {c.estimated_price !== null\n                                                    ? price(c.estimated_price)\n                                                    : '—'}\n                                            </TableCell>\n                                            <TableCell>\n                                                {c.quantity_on_hand}\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Grid>\n                </Grid>\n            )}\n        </div>\n    );\n};\n\nexport default Reporting;\n","import {\n    Box,\n    ButtonGroup,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    Grid,\n    Paper,\n    Typography,\n} from '@material-ui/core';\nimport React, { FC, useState } from 'react';\nimport Price from '../common/Price';\nimport { Trade, useReceivingContext } from '../context/ReceivingContext';\nimport Button from '../ui/Button';\nimport sum from '../utils/sum';\nimport CashReport from './CashReport';\nimport printCashReport from './printCashReport';\nimport ReceivingListModal from './ReceivingListModal';\n\ninterface Props {}\n\nconst ReceivingListTotals: FC<Props> = () => {\n    const { Cash, Credit } = Trade;\n    const [showCashModal, setShowCashModal] = useState(false);\n    const { receivingList, selectAll } = useReceivingContext();\n\n    const openCashModal = () => setShowCashModal(true);\n    const closeCashModal = () => setShowCashModal(false);\n\n    const handlePrintCashReport = () => {\n        setShowCashModal(false); // Close the modal so users don't have to after printing in new tab\n        printCashReport();\n    };\n\n    const cashTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Cash)\n            .map((c) => c.cashPrice || 0)\n    );\n\n    const creditTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Credit)\n            .map((c) => c.creditPrice || 0)\n    );\n\n    return (\n        <Paper variant=\"outlined\">\n            <Box p={2}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} justify=\"space-between\">\n                        <ButtonGroup fullWidth>\n                            <Button\n                                id=\"select-all-cash\"\n                                onClick={() => selectAll(Trade.Cash)}\n                            >\n                                Select all cash\n                            </Button>\n                            <Button\n                                id=\"select-all-credit\"\n                                onClick={() => selectAll(Trade.Credit)}\n                            >\n                                Select all credit\n                            </Button>\n                        </ButtonGroup>\n                    </Grid>\n                    <Grid item xs={12}>\n                        {cashTotal > 0 && (\n                            <Button fullWidth onClick={openCashModal}>\n                                Generate cash report\n                            </Button>\n                        )}\n                        {showCashModal && (\n                            <Dialog open maxWidth=\"md\" fullWidth>\n                                <DialogContent>\n                                    <CashReport receivingList={receivingList} />\n                                </DialogContent>\n                                <DialogActions>\n                                    <Button\n                                        primary\n                                        onClick={handlePrintCashReport}\n                                    >\n                                        Print Report\n                                    </Button>\n                                    <Button onClick={closeCashModal}>\n                                        Cancel\n                                    </Button>\n                                </DialogActions>\n                            </Dialog>\n                        )}\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Box\n                            display=\"flex\"\n                            justifyContent=\"space-between\"\n                            alignItems=\"center\"\n                        >\n                            <Typography>CASH DUE</Typography>\n\n                            <Typography variant=\"h6\">\n                                <b>\n                                    <Price num={cashTotal} />\n                                </b>\n                            </Typography>\n                        </Box>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Box\n                            display=\"flex\"\n                            justifyContent=\"space-between\"\n                            alignItems=\"center\"\n                        >\n                            <Typography>CREDIT DUE</Typography>\n\n                            <Typography variant=\"h6\">\n                                <b>\n                                    <Price num={creditTotal} />\n                                </b>\n                            </Typography>\n                        </Box>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <ReceivingListModal />\n                    </Grid>\n                </Grid>\n            </Box>\n        </Paper>\n    );\n};\n\nexport default ReceivingListTotals;\n","const printStyle = `\n    body {\n        font-family: 'helvetica neue', helvetica, arial, sans-serif;\n    }\n\n    table {\n        table-layout: fixed;\n        width: 100%;\n        border-collapse: collapse;\n        border: 1px solid gray;\n        text-align: left;\n    }\n\n    thead th:nth-child(1) {\n        width: 30%;\n    }\n\n    thead th:nth-child(2) {\n        width: 20%;\n    }\n\n    thead th:nth-child(3) {\n        width: 15%;\n    }\n\n    thead th:nth-child(4) {\n        width: 35%;\n    }\n\n    th, td {\n        border: 1px solid #ddd;\n        padding: 10px;\n    }\n\n    tfoot {\n        text-align: right !important;\n    }\n`;\n\n/**\n * We're creating a new tab here for the modal table and writing CSS to it - not the most elegant solution from a UX and\n * code standpoint, but time was of the essence for this release. Refactor down the road.\n *\n * The id cash-report is found on the cash report table\n */\nexport default function printCashReport() {\n    const divToPrint = document.getElementById('cash-report')!;\n    const popup = window.open('', '_blank');\n    if (popup) {\n        popup.document.open();\n        popup.document.write(`<html>`);\n        popup.document.write(`<head>`);\n        popup.document.write(`<title>Cash Report</title>`);\n        popup.document.write(`<style>${printStyle}</style>`);\n        popup.document.write(`</head>`);\n        popup.document.write(`<body onload=\"window.print()\">`);\n        popup.document.write(`${divToPrint.innerHTML}`);\n        popup.document.write(`</body>`);\n        popup.document.write(`</html>`);\n        popup.document.close();\n    }\n}\n","import { Grid } from '@material-ui/core';\nimport { FormikErrors, FormikHelpers, useFormik } from 'formik';\nimport { ChangeEvent, FC, useEffect } from 'react';\nimport Button from '../ui/Button';\nimport ControlledDropdown from '../ui/ControlledDropdown';\nimport TextField from '../ui/TextField';\nimport { Condition, Finish, Finishes } from '../utils/ClientCard';\nimport {\n    cardConditions,\n    createDropdownFinishOptions,\n    finishDropdownDisabled,\n} from '../utils/dropdownOptions';\n\ninterface Props {\n    onSubmit: (values: FormValues) => void;\n    onFinishSelect: (finish: Finish) => void;\n    cardFinishes: Finishes;\n}\n\nexport interface FormValues {\n    quantity: number;\n    cashPrice: number;\n    creditPrice: number;\n    marketPrice: number;\n    selectedCondition: Condition;\n    selectedFinish: Finish;\n}\n\nconst validate = ({\n    quantity,\n    cashPrice,\n    creditPrice,\n    marketPrice,\n    selectedFinish,\n    selectedCondition,\n}: FormValues) => {\n    const errors: FormikErrors<FormValues> = {};\n\n    if (!quantity) errors.quantity = 'error';\n\n    if (!cashPrice && !creditPrice) {\n        errors.cashPrice = 'error';\n        errors.creditPrice = 'error';\n    }\n\n    if (cashPrice) {\n        // Cards with cash prices must have market prices specified\n        if (!marketPrice) errors.marketPrice = 'error';\n    }\n\n    if (!selectedFinish) errors.selectedFinish = 'error';\n    if (!selectedCondition) errors.selectedCondition = 'error';\n\n    // Cash, credit, and market prices should not be negative\n    if (cashPrice < 0) errors.cashPrice = 'Cannot be negative';\n    if (creditPrice < 0) errors.creditPrice = 'Cannot be negative';\n    if (marketPrice < 0) errors.marketPrice = 'Cannot be negative';\n\n    return errors;\n};\n\nconst ReceivingSearchItemForm: FC<Props> = ({\n    onSubmit,\n    onFinishSelect,\n    cardFinishes,\n}) => {\n    const dropdownFinishes = createDropdownFinishOptions(cardFinishes);\n    const initialFinish = dropdownFinishes[0].value;\n\n    const initialValues: FormValues = {\n        quantity: 1,\n        cashPrice: 0,\n        creditPrice: 0,\n        marketPrice: 0,\n        selectedCondition: 'NM',\n        selectedFinish: initialFinish,\n    };\n\n    const doSubmit = async (\n        values: FormValues,\n        { resetForm }: FormikHelpers<FormValues>\n    ) => {\n        await onSubmit(values);\n        resetForm(); // Imperatively reset the form after submission\n    };\n\n    const { handleSubmit, setFieldValue, values, isValid, handleChange } =\n        useFormik({\n            initialValues,\n            validate,\n            onSubmit: doSubmit,\n            validateOnMount: true,\n        });\n\n    /**\n     * On mount, we determine the initial finish and call this so\n     * the parent doesn't have to maintain initial state\n     */\n    useEffect(() => {\n        onFinishSelect(initialFinish);\n    }, []);\n\n    return (\n        <form onSubmit={handleSubmit} noValidate>\n            <Grid container alignItems=\"center\" spacing={2}>\n                <Grid item>\n                    <TextField\n                        type=\"number\"\n                        label=\"Quantity\"\n                        value={values.quantity}\n                        onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                            const castVal = parseInt(e.target.value);\n                            setFieldValue(\n                                'quantity',\n                                Math.min(castVal < 0 ? 0 : castVal, 50)\n                            );\n                        }}\n                        onFocus={(e) => e.target.select()}\n                    />\n                </Grid>\n                <Grid item>\n                    <TextField\n                        label=\"Credit Price\"\n                        name=\"creditPrice\"\n                        type=\"number\"\n                        value={values.creditPrice}\n                        onChange={handleChange}\n                        onFocus={(e) => e.target.select()}\n                        inputProps={{\n                            step: 0.25,\n                        }}\n                    />\n                </Grid>\n                <Grid item>\n                    <TextField\n                        label=\"Cash Price\"\n                        name=\"cashPrice\"\n                        type=\"number\"\n                        value={values.cashPrice}\n                        onChange={handleChange}\n                        onFocus={(e) => e.target.select()}\n                        inputProps={{\n                            step: 0.25,\n                        }}\n                    />\n                </Grid>\n                <Grid item>\n                    <TextField\n                        label=\"Market Price\"\n                        name=\"marketPrice\"\n                        type=\"number\"\n                        value={values.marketPrice}\n                        onChange={handleChange}\n                        onFocus={(e) => e.target.select()}\n                        disabled={!values.cashPrice}\n                        inputProps={{\n                            step: 0.25,\n                        }}\n                    />\n                </Grid>\n            </Grid>\n            <Grid container alignItems=\"center\" spacing={2}>\n                <Grid item>\n                    <ControlledDropdown\n                        name=\"selectedFinish\"\n                        label=\"Finish\"\n                        options={dropdownFinishes}\n                        value={values.selectedFinish}\n                        onChange={(v) => {\n                            onFinishSelect(v as Finish);\n                            setFieldValue('selectedFinish', v);\n                        }}\n                        disabled={finishDropdownDisabled(cardFinishes)}\n                    />\n                </Grid>\n                <Grid item>\n                    <ControlledDropdown\n                        name=\"selectedCondition\"\n                        label=\"Condition\"\n                        options={cardConditions}\n                        value={values.selectedCondition}\n                        onChange={(v) => {\n                            setFieldValue('selectedCondition', v);\n                        }}\n                    />\n                </Grid>\n                <Grid item>\n                    <Button type=\"submit\" primary disabled={!isValid}>\n                        Add to list\n                    </Button>\n                </Grid>\n            </Grid>\n        </form>\n    );\n};\n\nexport default ReceivingSearchItemForm;\n","import $ from 'jquery';\nimport React, { FC, useState } from 'react';\nimport CardImage from '../common/CardImage';\nimport { useReceivingContext } from '../context/ReceivingContext';\nimport CardHeader from '../ui/CardHeader';\nimport CardRowContainer from '../ui/CardRowContainer';\nimport { useToastContext } from '../ui/ToastContext';\nimport { ClientCard, Finish } from '../utils/ClientCard';\nimport createFinishCondition from '../utils/createFinishCondtition';\nimport ReceivingSearchItemForm, { FormValues } from './ReceivingSearchItemForm';\n\ninterface Props {\n    card: ClientCard;\n}\n\nconst ReceivingSearchItem: FC<Props> = ({ card }) => {\n    const { createToast } = useToastContext();\n    const { addToList } = useReceivingContext();\n    const { cardImage, finishes, name } = card;\n    // Defaults to 'NONFOIL', but the form component will manage this for us\n    const [selectedFinish, setSelectedFinish] = useState<Finish>('NONFOIL');\n\n    const handleInventoryAdd = ({\n        quantity,\n        cashPrice,\n        creditPrice,\n        marketPrice,\n        selectedFinish,\n        selectedCondition,\n    }: FormValues) => {\n        if (!quantity) throw new Error('Quantity is missing');\n\n        addToList(quantity, card, {\n            cashPrice: cashPrice || 0,\n            marketPrice: marketPrice || 0,\n            creditPrice: creditPrice || 0,\n            finishCondition: createFinishCondition(\n                selectedFinish,\n                selectedCondition\n            ),\n        });\n\n        createToast({\n            severity: 'success',\n            message: `${quantity}x ${name} added to buylist!`,\n        });\n\n        // Highlight the input after successful card add\n        $('#searchBar').focus().select();\n    };\n\n    return (\n        <CardRowContainer\n            image={<CardImage source={cardImage} width={125} hover />}\n            header={\n                <CardHeader\n                    card={card}\n                    selectedFinish={selectedFinish}\n                    showMid\n                />\n            }\n        >\n            <ReceivingSearchItemForm\n                onSubmit={handleInventoryAdd}\n                onFinishSelect={(finish) => setSelectedFinish(finish)}\n                cardFinishes={finishes}\n            />\n        </CardRowContainer>\n    );\n};\n\nexport default ReceivingSearchItem;\n","import { Grid } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport React, { FC, useEffect, useState } from 'react';\nimport { Prompt } from 'react-router';\nimport TotalCardsLabel from '../common/TotalCardsLabel';\nimport { useReceivingContext } from '../context/ReceivingContext';\nimport TotalStoreInventory from '../ManageInventory/TotalStoreInventory';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport Loading from '../ui/Loading';\nimport Placeholder from '../ui/Placeholder';\nimport { HeaderText } from '../ui/Typography';\nimport useInterruptExit from '../utils/useInterruptExit';\nimport ReceivingCart from './ReceivingCart';\nimport ReceivingListTotals from './ReceivingListTotals';\nimport ReceivingSearchItem from './ReceivingSearchItem';\n\ninterface Props {}\n\nconst Receiving: FC<Props> = () => {\n    const { setShowPrompt } = useInterruptExit(false);\n    const [term, setTerm] = useState<string>('');\n    const [loading, setLoading] = useState<boolean>(false);\n    const {\n        searchResults,\n        receivingList,\n        handleSearchSelect,\n        resetSearchResults,\n    } = useReceivingContext();\n\n    /**\n     * Reset the search results on unmount to clear store\n     */\n    useEffect(() => {\n        return () => resetSearchResults();\n    }, []);\n\n    /**\n     * Maintains whether or not we show the exit prompt on tab close or refresh\n     */\n    useEffect(() => {\n        if (receivingList.length > 0) {\n            setShowPrompt(true);\n        } else {\n            setShowPrompt(false);\n        }\n    }, [receivingList]);\n\n    useEffect(() => {\n        if (term) {\n            (async () => {\n                setLoading(true);\n                await handleSearchSelect(term);\n                setLoading(false);\n            })();\n        }\n    }, [term]);\n\n    return (\n        <>\n            <Prompt\n                message=\"You have items in your list. Are you sure you wish to leave?\"\n                when={receivingList.length > 0}\n            />\n            <Grid container>\n                <Grid item xs={12} md={4}>\n                    <ControlledSearchBar\n                        value={term}\n                        onChange={(v) => setTerm(v)}\n                    />\n                </Grid>\n            </Grid>\n            <br />\n            <Grid container spacing={2}>\n                <Grid item xs={12} lg={8}>\n                    <Grid container justify=\"space-between\">\n                        <HeaderText>Card Search</HeaderText>\n                        {searchResults.length > 0 && (\n                            <TotalStoreInventory\n                                searchResults={searchResults}\n                                title={searchResults[0].name}\n                            />\n                        )}\n                    </Grid>\n                    <br />\n                    {!loading && !searchResults.length && (\n                        <Placeholder\n                            icon={<SearchIcon style={{ fontSize: 80 }} />}\n                        >\n                            <em>\"So many cards, so little time.\"</em>\n                        </Placeholder>\n                    )}\n                    {loading ? (\n                        <Loading />\n                    ) : (\n                        <Grid container spacing={2}>\n                            {searchResults.map((card) => (\n                                <Grid item xs={12} key={card.id}>\n                                    <ReceivingSearchItem card={card} />\n                                </Grid>\n                            ))}\n                        </Grid>\n                    )}\n                </Grid>\n                <Grid item xs={12} lg={4}>\n                    <Grid container justify=\"space-between\">\n                        <HeaderText>Buylist</HeaderText>\n                        <TotalCardsLabel listLength={receivingList.length} />\n                    </Grid>\n                    <br />\n                    {!receivingList.length && (\n                        <Placeholder\n                            icon={<SearchIcon style={{ fontSize: 80 }} />}\n                        >\n                            <em>\"If you receive it, they will come.\"</em>\n                        </Placeholder>\n                    )}\n                    <ReceivingCart cards={receivingList} />\n                    <br />\n                    {receivingList.length > 0 && <ReceivingListTotals />}\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default Receiving;\n","import http from '../common/http';\nimport { ClientCard, Finish, FinishCondition } from '../utils/ClientCard';\nimport { GET_REPORT } from '../utils/endpoints';\n\nexport interface ResponseData {\n    countByPrinting: Array<{\n        _id: string;\n        scryfall_id: string;\n        quantity_sold: number;\n        card_title: string;\n        card_metadata: ClientCard;\n        quantity_on_hand: number;\n        finish: Finish;\n        finish_condition: FinishCondition;\n        estimated_price: number;\n    }>;\n    countByCardName: Array<{\n        _id: string;\n        quantity_sold: number;\n        card_title: string;\n    }>;\n}\n\ninterface Args {\n    startDate: string;\n    endDate: string;\n}\n\nconst reportingQuery = async ({ startDate, endDate }: Args) => {\n    try {\n        const { data } = await http.get<ResponseData>(GET_REPORT, {\n            params: { startDate, endDate },\n        });\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default reportingQuery;\n","import React, { FC } from 'react';\nimport Price from '../common/Price';\nimport { SaleListCard } from '../context/SaleContext';\nimport sum from '../utils/sum';\n\ninterface Props {\n    saleList: SaleListCard[];\n}\n\nconst SaleCartPriceTotal: FC<Props> = ({ saleList }) => {\n    const total = sum(saleList.map((c) => c.qtyToSell * Number(c.price)));\n\n    return (\n        <div id=\"sale-price-total\">\n            <Price num={total} />\n        </div>\n    );\n};\n\nexport default SaleCartPriceTotal;\n","import { IconButton } from '@material-ui/core';\nimport PrintIcon from '@material-ui/icons/Print';\nimport React, { FC, useRef } from 'react';\nimport { useReactToPrint } from 'react-to-print';\nimport styled from 'styled-components';\nimport Price from '../common/Price';\nimport { SaleListCard } from '../context/SaleContext';\nimport displayFinishCondition from '../utils/displayFinishCondition';\nimport SaleCartPriceTotal from './SaleCartPriceTotal';\n\ninterface Props {\n    saleListCards: SaleListCard[];\n}\n\nconst PrintWrapper = styled.div`\n    @media print {\n        background-color: white;\n        margin: 0;\n        padding: 0;\n        font-size: 20px;\n        line-height: 40px;\n        z-index: 5000;\n        overflow: hidden;\n    }\n    @media screen {\n        display: none !important;\n    }\n`;\n\nconst PrintList: FC<Props> = ({ saleListCards }) => {\n    const componentRef = useRef<HTMLDivElement>(null);\n\n    const handlePrint = useReactToPrint({\n        content: () => componentRef.current,\n    });\n\n    return (\n        <>\n            <div>\n                <IconButton onClick={handlePrint} size=\"small\">\n                    <PrintIcon />\n                </IconButton>\n            </div>\n            <PrintWrapper ref={componentRef}>\n                <ul>\n                    {saleListCards.map((slc) => {\n                        const {\n                            id,\n                            display_name,\n                            qtyToSell,\n                            finishCondition,\n                            set_name,\n                            price,\n                        } = slc;\n                        return (\n                            <li key={id}>\n                                <b>\n                                    {display_name} | x{qtyToSell} |{' '}\n                                    {displayFinishCondition(finishCondition)} |{' '}\n                                    {set_name} | <Price num={price} />\n                                </b>\n                            </li>\n                        );\n                    })}\n                </ul>\n                <span>\n                    <b>\n                        Subtotal:{' '}\n                        <SaleCartPriceTotal saleList={saleListCards} />\n                    </b>\n                </span>\n            </PrintWrapper>\n        </>\n    );\n};\n\nexport default PrintList;\n","import {\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Typography,\n} from '@material-ui/core';\nimport React, { FC, useState } from 'react';\nimport { useSaleContext } from '../context/SaleContext';\nimport Button from '../ui/Button';\n\ninterface Props {}\n\nconst FinishSale: FC<Props> = () => {\n    const [submit, setSubmit] = useState({ loading: false, disabled: false });\n    const [showModal, setShowModal] = useState(false);\n    const { finalizeSale } = useSaleContext();\n\n    const handleFinalizeSale = async () => {\n        try {\n            setSubmit({ loading: true, disabled: true });\n            await finalizeSale();\n        } catch (err) {\n            setSubmit({ loading: false, disabled: false });\n        }\n    };\n\n    return (\n        <>\n            <Button fullWidth primary onClick={() => setShowModal(true)}>\n                Finalize sale\n            </Button>\n            {showModal && (\n                <Dialog open>\n                    <DialogTitle>Confirm sale</DialogTitle>\n                    <DialogContent>\n                        <Typography>\n                            Click 'Finish sale' to create a sale in Lightspeed.\n                        </Typography>\n                        <br />\n                        <Typography>\n                            Ensure that you have all cards pulled and\n                            double-checked the customer list. Undoing this\n                            action will require manual data entry!\n                        </Typography>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => setShowModal(false)}>\n                            Cancel\n                        </Button>\n                        <Button\n                            primary\n                            onClick={handleFinalizeSale}\n                            disabled={submit.disabled || submit.loading}\n                        >\n                            Finish sale\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            )}\n        </>\n    );\n};\n\nexport default FinishSale;\n","import { Box, Grid, IconButton, ListItem, Typography } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport React, { FC } from 'react';\nimport Chip from '../common/Chip';\nimport Price from '../common/Price';\nimport { SaleListCard, useSaleContext } from '../context/SaleContext';\nimport CardImageTooltip from '../ui/CardImageTooltip';\nimport SetIcon from '../ui/SetIcon';\nimport displayFinishCondition from '../utils/displayFinishCondition';\n\ninterface Props {\n    card: SaleListCard;\n}\n\nconst SaleCartItem: FC<Props> = ({\n    card: {\n        display_name,\n        set,\n        finishCondition,\n        qtyToSell,\n        price,\n        rarity,\n        id,\n        cardImage,\n    },\n}) => {\n    const { removeFromSaleList } = useSaleContext();\n\n    return (\n        <ListItem>\n            <Grid container alignItems=\"center\" justify=\"space-between\">\n                <Grid item>\n                    <CardImageTooltip cardImage={cardImage}>\n                        <Box display=\"flex\" alignItems=\"center\">\n                            <Typography variant=\"h6\" style={{ cursor: 'help' }}>\n                                {display_name}\n                            </Typography>\n                            <SetIcon set={set} rarity={rarity} />\n                            <Chip size=\"small\" label={set.toUpperCase()} />\n                        </Box>\n                    </CardImageTooltip>\n                    <div className=\"line-item-price\">\n                        {qtyToSell}x @ <Price num={price} />\n                        {' • '}\n                        <span>{displayFinishCondition(finishCondition)}</span>\n                    </div>\n                </Grid>\n                <Grid item>\n                    <IconButton\n                        onClick={() => removeFromSaleList(id, finishCondition)}\n                        color=\"secondary\"\n                    >\n                        <CloseIcon />\n                    </IconButton>\n                </Grid>\n            </Grid>\n        </ListItem>\n    );\n};\n\nexport default SaleCartItem;\n","import { Box, Divider, Grid, List, Paper, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport React, { FC, Fragment } from 'react';\nimport { SaleListCard } from '../context/SaleContext';\nimport Placeholder from '../ui/Placeholder';\nimport FinishSale from './FinishSale';\nimport SaleCartItem from './SaleCartItem';\nimport SaleCartPriceTotal from './SaleCartPriceTotal';\n\ninterface Props {\n    saleList: SaleListCard[];\n}\n\nconst SaleCartList: FC<Props> = ({ saleList }) => {\n    if (saleList.length === 0) {\n        return (\n            <Placeholder icon={<AddIcon style={{ fontSize: 80 }} />}>\n                <em>\"Give them what they need\"</em>\n            </Placeholder>\n        );\n    }\n\n    return (\n        <>\n            <List component={Paper} variant=\"outlined\">\n                {saleList.map((card, idx, arr) => (\n                    <Fragment\n                        key={`${card.id}${card.finishCondition}${card.qtyToSell}`}\n                    >\n                        <SaleCartItem card={card} />\n                        {idx !== arr.length - 1 && <Divider />}\n                    </Fragment>\n                ))}\n            </List>\n            <br />\n            <Paper variant=\"outlined\">\n                <Box p={2}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Box\n                                display=\"flex\"\n                                justifyContent=\"space-between\"\n                                alignItems=\"center\"\n                            >\n                                <Typography>SUBTOTAL</Typography>\n                                <Typography variant=\"h6\">\n                                    <b>\n                                        <SaleCartPriceTotal\n                                            saleList={saleList}\n                                        />\n                                    </b>\n                                </Typography>\n                            </Box>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <FinishSale />\n                        </Grid>\n                    </Grid>\n                </Box>\n            </Paper>\n        </>\n    );\n};\n\nexport default SaleCartList;\n","const roundPrice = (num: number) => {\n    return Math.round(num * 1e2) / 1e2;\n};\n\nexport default roundPrice;\n","import { Grid } from '@material-ui/core';\nimport { FormikErrors, useFormik } from 'formik';\nimport _ from 'lodash';\nimport React, { ChangeEvent, FC, useEffect } from 'react';\nimport Button from '../ui/Button';\nimport ControlledDropdown from '../ui/ControlledDropdown';\nimport TextField from '../ui/TextField';\nimport { Finish, FinishCondition, QOH } from '../utils/ClientCard';\n\ninterface ConditionOptions {\n    text: string;\n    value: keyof QOH;\n    key: string;\n}\n\n/**\n * Creates a list of conditions for the sales card dropdown menu from the `qoh`\n *\n * TODO: Note - is this not needed if we default select initially?\n */\nfunction createConditionOptions(qoh: QOH, id: string): ConditionOptions[] {\n    const removeZeroedQuantites = _.pickBy(qoh, (p) => p && p > 0); // Quantites of zero not included\n\n    return Object.entries(removeZeroedQuantites).map((d) => {\n        const [conditionFinish, qty] = d;\n\n        return {\n            text: `${conditionFinish.split('_').join(' | ')} | Qty: ${qty}`,\n            value: conditionFinish as keyof QOH,\n            key: `${id}${conditionFinish}`,\n        };\n    });\n}\n\nfunction getFinish(fc: FinishCondition) {\n    return fc.split('_')[0] as Finish;\n}\n\nexport interface FormValues {\n    quantityToSell: number;\n    price: number;\n    selectedFinishCondition: keyof QOH;\n}\n\ninterface Props {\n    onSubmit: (values: FormValues) => void;\n    onFinishSelect: (finish: Finish) => void;\n    cardId: string;\n    cardQoh: QOH;\n}\n\nconst SaleSearchCardForm: FC<Props> = ({\n    onSubmit,\n    onFinishSelect,\n    cardId,\n    cardQoh,\n}) => {\n    const conditionSelectOptions = createConditionOptions(cardQoh, cardId);\n\n    const initialFormValues = {\n        selectedFinishCondition: conditionSelectOptions[0].value,\n        price: 0,\n        quantityToSell: 0,\n    };\n\n    const validate = ({\n        quantityToSell,\n        price,\n        selectedFinishCondition: selectedFinish,\n    }: FormValues) => {\n        const errors: FormikErrors<FormValues> = {};\n\n        if (!quantityToSell) errors.quantityToSell = 'error';\n        if (!price) errors.price = 'error';\n\n        if (!selectedFinish) {\n            errors.selectedFinishCondition = 'error';\n        }\n\n        if (quantityToSell > cardQoh[selectedFinish]!) {\n            errors.quantityToSell = 'error';\n        }\n\n        if (price < 0) {\n            errors.price = 'error';\n        }\n\n        if (quantityToSell < 1) {\n            errors.quantityToSell = 'error';\n        }\n\n        return errors;\n    };\n\n    const { handleChange, handleSubmit, setFieldValue, values, isValid } =\n        useFormik({\n            initialValues: initialFormValues,\n            validate,\n            onSubmit,\n            validateOnMount: true,\n        });\n\n    /**\n     * On mount, we determine the initial finish and call this so\n     * the parent doesn't have to maintain initial state\n     */\n    useEffect(() => {\n        onFinishSelect(getFinish(initialFormValues.selectedFinishCondition));\n    }, []);\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <Grid container alignItems=\"center\" spacing={2}>\n                <Grid item>\n                    <ControlledDropdown\n                        name=\"selectedFinishCondition\"\n                        label=\"Select finish/condition\"\n                        options={conditionSelectOptions}\n                        value={values.selectedFinishCondition}\n                        onChange={(v) => {\n                            onFinishSelect(getFinish(v as FinishCondition));\n                            setFieldValue('selectedFinishCondition', v);\n                            setFieldValue('quantityToSell', 0);\n                        }}\n                    />\n                </Grid>\n                <Grid item>\n                    <TextField\n                        type=\"number\"\n                        label=\"Quantity to sell\"\n                        value={values.quantityToSell}\n                        onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                            const castVal = parseInt(e.target.value);\n\n                            if (\n                                castVal >\n                                cardQoh[values.selectedFinishCondition]!\n                            ) {\n                                return;\n                            }\n\n                            setFieldValue('quantityToSell', castVal);\n                        }}\n                        onFocus={(e) => e.target.select()}\n                    />\n                </Grid>\n                <Grid item>\n                    <TextField\n                        label=\"Price\"\n                        name=\"price\"\n                        type=\"number\"\n                        value={values.price}\n                        onChange={handleChange}\n                        onFocus={(e) => e.target.select()}\n                        inputProps={{\n                            step: 0.5,\n                        }}\n                    />\n                </Grid>\n                <Grid item>\n                    <Button type=\"submit\" primary disabled={!isValid}>\n                        Add to sale\n                    </Button>\n                </Grid>\n            </Grid>\n        </form>\n    );\n};\n\nexport default SaleSearchCardForm;\n","import $ from 'jquery';\nimport React, { FC, useState } from 'react';\nimport CardImage from '../common/CardImage';\nimport { useSaleContext } from '../context/SaleContext';\nimport CardHeader from '../ui/CardHeader';\nimport CardRowContainer from '../ui/CardRowContainer';\nimport { ClientCard, Finish } from '../utils/ClientCard';\nimport roundPrice from '../utils/roundPrice';\nimport SaleSearchCardForm, { FormValues } from './SaleSearchCardForm';\n\ninterface Props {\n    card: ClientCard;\n}\n\nconst SaleSearchCard: FC<Props> = ({ card }) => {\n    const { addToSaleList } = useSaleContext();\n    const { id, qoh, cardImage } = card;\n\n    // Defaults to 'NONFOIL', but the form component will manage this for us\n    const [selectedFinish, setSelectedFinish] = useState<Finish>('NONFOIL');\n\n    const onSubmit = ({\n        selectedFinishCondition,\n        quantityToSell,\n        price,\n    }: FormValues) => {\n        const roundedPrice = roundPrice(price);\n\n        addToSaleList(\n            card,\n            selectedFinishCondition,\n            quantityToSell,\n            roundedPrice\n        );\n\n        // Highlight the input after successful card add\n        $('#searchBar').focus().select();\n    };\n\n    return (\n        <CardRowContainer\n            image={<CardImage source={cardImage} width={125} hover />}\n            header={\n                <CardHeader\n                    card={card}\n                    showMid\n                    round\n                    selectedFinish={selectedFinish}\n                />\n            }\n        >\n            <SaleSearchCardForm\n                cardId={id}\n                cardQoh={qoh}\n                onFinishSelect={(f) => setSelectedFinish(f)}\n                onSubmit={onSubmit}\n            />\n        </CardRowContainer>\n    );\n};\n\nexport default SaleSearchCard;\n","import { Grid } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport React, { FC } from 'react';\nimport Loading from '../ui/Loading';\nimport Placeholder from '../ui/Placeholder';\nimport { ClientCard } from '../utils/ClientCard';\nimport SaleSearchCard from './SaleSearchCard';\n\ninterface Props {\n    loading: boolean;\n    term: string;\n    cards: ClientCard[];\n}\n\nconst BrowseCardList: FC<Props> = ({ loading, term, cards }) => {\n    // Creates text to notify the user of zero-result searches\n    const searchNotification = () => {\n        if (term && !cards.length) {\n            // Check to make sure the user has searched and no results\n            return (\n                <>\n                    Zero results for <em>{term}</em>\n                </>\n            );\n        }\n        return (\n            <>\n                <em>\"Don't give the people what they want\"</em>\n            </>\n        );\n    };\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    if (cards.length === 0) {\n        return (\n            <Placeholder icon={<SearchIcon style={{ fontSize: 80 }} />}>\n                <span>{searchNotification()}</span>\n            </Placeholder>\n        );\n    }\n\n    return (\n        <Grid container spacing={2}>\n            {cards.map((card) => {\n                return (\n                    <Grid item xs={12} key={card.id}>\n                        <SaleSearchCard card={card} />\n                    </Grid>\n                );\n            })}\n        </Grid>\n    );\n};\n\nexport default BrowseCardList;\n","import http from '../common/http';\nimport { SuspendedSale } from '../context/getSuspendedSaleQuery';\nimport { SUSPEND_SALE } from '../utils/endpoints';\n\nconst getSuspendedSalesQuery = async () => {\n    try {\n        const { data } = await http.get<SuspendedSale[]>(SUSPEND_SALE);\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default getSuspendedSalesQuery;\n","import {\n    Box,\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    Grid,\n    IconButton,\n    makeStyles,\n} from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport React, { FC, useEffect, useState } from 'react';\nimport { SuspendedSale } from '../context/getSuspendedSaleQuery';\nimport { Context } from '../context/SaleContext';\nimport Button from '../ui/Button';\nimport ControlledDropdown from '../ui/ControlledDropdown';\nimport TextField from '../ui/TextField';\nimport getSuspendedSalesQuery from './getSuspendedSalesQuery';\n\ninterface Props {\n    /** The suspended sale ID */\n    id: string;\n    saleListLength: number;\n    restoreSale: Context['restoreSale'];\n    deleteSuspendedSale: Context['deleteSuspendedSale'];\n    suspendSale: Context['suspendSale'];\n}\n\ninterface SuspendButtonState {\n    suspendBtn: boolean;\n    restoreBtn: boolean;\n    deleteBtn: boolean;\n}\n\nconst CharLimit: FC<{ text: string; limit: number }> = ({ text, limit }) => {\n    const { charLimit } = useStyles();\n\n    return (\n        <div className={charLimit}>\n            {text.length}/{limit}\n        </div>\n    );\n};\n\nconst useStyles = makeStyles({\n    charLimit: {\n        fontSize: '12px',\n        color: 'rgba(0, 0, 0, 0.4)',\n        float: 'right',\n    },\n});\n\nconst SuspendSaleButton: FC<Props> = ({\n    restoreSale,\n    deleteSuspendedSale,\n    saleListLength,\n    suspendSale,\n    id,\n}) => {\n    const [sales, setSales] = useState<SuspendedSale[]>([]);\n    const [saleID, setSaleID] = useState<string>('');\n    const [modalOpen, setModalOpen] = useState<boolean>(false);\n    const [customerName, setCustomerName] = useState<string>('');\n    const [notes, setNotes] = useState<string>('');\n    const [disabled, setDisabled] = useState<boolean>(false);\n    const [loadingBtn, setLoadingBtn] = useState<SuspendButtonState>({\n        suspendBtn: false,\n        restoreBtn: false,\n        deleteBtn: false,\n    });\n\n    const getSales = async () => {\n        const suspendedSales = await getSuspendedSalesQuery();\n\n        setSales(suspendedSales);\n    };\n\n    const clearFields = () => {\n        setCustomerName('');\n        setNotes('');\n        setSaleID('');\n    };\n\n    // Get the previously suspended sales on mount and parent state (_id) change\n    useEffect(() => {\n        getSales();\n    }, [id]); // If the parent-level suspended-sale _id changes, we fetch again\n\n    const submitSuspendSale = async () => {\n        setDisabled(true);\n        setLoadingBtn({ ...loadingBtn, suspendBtn: true });\n        await suspendSale({ customerName, notes });\n        setModalOpen(false); // Close the modal to avoid \"flicker\" when state re-renders\n        await getSales(); // Parent _id does not change, re-fetch sales\n        clearFields();\n        setDisabled(false);\n        setLoadingBtn({ ...loadingBtn, suspendBtn: false });\n    };\n\n    const submitRestoreSale = async () => {\n        setDisabled(true);\n        setLoadingBtn({ ...loadingBtn, restoreBtn: true });\n        await restoreSale(saleID);\n        setModalOpen(false);\n        clearFields();\n        setDisabled(false);\n        setLoadingBtn({ ...loadingBtn, restoreBtn: false });\n    };\n\n    const submitDeleteSale = async () => {\n        setDisabled(true);\n        setLoadingBtn({ ...loadingBtn, deleteBtn: true });\n        await deleteSuspendedSale();\n        setModalOpen(false);\n        clearFields();\n        setDisabled(false);\n        setLoadingBtn({ ...loadingBtn, deleteBtn: false });\n    };\n\n    return (\n        <>\n            <div>\n                <IconButton\n                    disabled={disabled}\n                    onClick={() => setModalOpen(true)}\n                    size=\"small\"\n                >\n                    <MoreHorizIcon />\n                </IconButton>\n            </div>\n            <Dialog open={modalOpen} maxWidth=\"md\" fullWidth>\n                <DialogTitle>\n                    <Box\n                        display=\"flex\"\n                        justifyContent=\"space-between\"\n                        alignItems=\"center\"\n                    >\n                        <h3>Sales menu</h3>\n                        <IconButton\n                            disabled={disabled}\n                            onClick={() => setModalOpen(false)}\n                        >\n                            <CloseIcon />\n                        </IconButton>\n                    </Box>\n                </DialogTitle>\n                <DialogContent>\n                    <Grid container spacing={2}>\n                        {saleListLength > 0 && (\n                            <Grid item xs={6}>\n                                <h4>Suspend sale</h4>\n                                <div>\n                                    <TextField\n                                        fullWidth\n                                        label=\"Customer Name\"\n                                        placeholder=\"Jace, the Mind Sculptor\"\n                                        value={customerName}\n                                        onChange={(e) => {\n                                            setCustomerName(\n                                                e.target.value.substring(0, 50)\n                                            );\n                                        }}\n                                    />\n                                </div>\n                                <CharLimit text={customerName} limit={50} />\n                                <div>\n                                    <TextField\n                                        multiline\n                                        minRows={3}\n                                        fullWidth\n                                        label=\"Notes\"\n                                        placeholder=\"Sometimes, I forget things...\"\n                                        value={notes}\n                                        onChange={(e) => {\n                                            setNotes(\n                                                e.target.value.substring(0, 150)\n                                            );\n                                        }}\n                                    />\n                                </div>\n                                <CharLimit text={notes} limit={150} />\n                                <br />\n                                <Button\n                                    fullWidth\n                                    primary\n                                    disabled={\n                                        disabled ||\n                                        !customerName ||\n                                        loadingBtn.suspendBtn\n                                    }\n                                    onClick={submitSuspendSale}\n                                >\n                                    Suspend Sale\n                                </Button>\n                            </Grid>\n                        )}\n                        <Grid item xs={6}>\n                            <h4>Restore suspended sale</h4>\n                            {sales.length > 0 && (\n                                <>\n                                    <div>\n                                        <ControlledDropdown\n                                            value={saleID}\n                                            name=\"suspendedsales\"\n                                            onChange={(val) => setSaleID(val)}\n                                            options={sales.map((s) => {\n                                                return {\n                                                    key: s._id,\n                                                    text: s.name,\n                                                    value: s._id,\n                                                };\n                                            })}\n                                        />\n                                    </div>\n                                    <br />\n                                    <div>\n                                        <Grid container spacing={2}>\n                                            <Grid item xs={6}>\n                                                <Button\n                                                    fullWidth\n                                                    primary\n                                                    disabled={\n                                                        disabled ||\n                                                        !saleID ||\n                                                        loadingBtn.restoreBtn\n                                                    }\n                                                    onClick={submitRestoreSale}\n                                                >\n                                                    Restore Sale\n                                                </Button>\n                                            </Grid>\n                                            {!!id && (\n                                                <Grid item xs={6}>\n                                                    <Button\n                                                        fullWidth\n                                                        disabled={\n                                                            disabled ||\n                                                            loadingBtn.deleteBtn\n                                                        }\n                                                        onClick={\n                                                            submitDeleteSale\n                                                        }\n                                                    >\n                                                        Delete current Sale\n                                                    </Button>\n                                                </Grid>\n                                            )}\n                                        </Grid>\n                                    </div>\n                                </>\n                            )}\n                            {sales.length === 0 && (\n                                <Alert severity=\"info\">\n                                    <AlertTitle>No sales</AlertTitle>\n                                    Suspend a sale first\n                                </Alert>\n                            )}\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n            </Dialog>\n        </>\n    );\n};\n\nexport default SuspendSaleButton;\n","import { Box, Grid } from '@material-ui/core';\nimport React, { FC, useEffect, useState } from 'react';\nimport { Prompt } from 'react-router';\nimport TotalCardsLabel from '../common/TotalCardsLabel';\nimport { useSaleContext } from '../context/SaleContext';\nimport TotalStoreInventory from '../ManageInventory/TotalStoreInventory';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport { HeaderText } from '../ui/Typography';\nimport sum from '../utils/sum';\nimport useInterruptExit from '../utils/useInterruptExit';\nimport PrintList from './PrintList';\nimport SaleCartList from './SaleCartList';\nimport BrowseCardList from './SaleSearchCardList';\nimport SuspendSaleButton from './SuspendSaleButton';\n\ninterface Props {}\n\nconst Sale: FC<Props> = () => {\n    const { setShowPrompt } = useInterruptExit(false);\n    const [term, setTerm] = useState<string>('');\n    const [loading, setLoading] = useState<boolean>(false);\n    const {\n        saleListCards,\n        searchTerm,\n        searchResults,\n        handleResultSelect,\n        suspendedSale,\n        restoreSale,\n        deleteSuspendedSale,\n        suspendSale,\n    } = useSaleContext();\n\n    /**\n     * Maintains whether or not we show the exit prompt on tab close or refresh\n     */\n    useEffect(() => {\n        if (saleListCards.length > 0) {\n            setShowPrompt(true);\n        } else {\n            setShowPrompt(false);\n        }\n    }, [saleListCards]);\n\n    useEffect(() => {\n        if (term) {\n            (async () => {\n                setLoading(true);\n                await handleResultSelect(term);\n                setLoading(false);\n            })();\n        }\n    }, [term]);\n\n    return (\n        <>\n            <Prompt\n                message=\"You have items in your list. Are you sure you wish to leave?\"\n                when={saleListCards.length > 0}\n            />\n            <Grid container>\n                <Grid item xs={12} md={4}>\n                    <ControlledSearchBar\n                        value={term}\n                        onChange={(v) => setTerm(v)}\n                    />\n                </Grid>\n            </Grid>\n            <br />\n            <Grid container spacing={2}>\n                <Grid item xs={12} lg={8}>\n                    <Grid container justify=\"space-between\">\n                        <HeaderText>Inventory</HeaderText>\n                        {term && (\n                            <TotalStoreInventory\n                                searchResults={searchResults}\n                                title={term}\n                            />\n                        )}\n                    </Grid>\n                    <br />\n                    <BrowseCardList\n                        loading={loading}\n                        term={searchTerm}\n                        cards={searchResults}\n                    />\n                </Grid>\n                <Grid item xs={12} lg={4}>\n                    <Grid container justify=\"space-between\">\n                        <Box display=\"flex\" alignItems=\"center\">\n                            <HeaderText>\n                                {suspendedSale.name === ''\n                                    ? 'Sale Items'\n                                    : `${suspendedSale.name}'s Items`}\n                            </HeaderText>\n                            <TotalCardsLabel\n                                listLength={sum(\n                                    saleListCards.map((c) => c.qtyToSell)\n                                )}\n                            />\n                        </Box>\n                        <Box display=\"flex\">\n                            <SuspendSaleButton\n                                restoreSale={restoreSale}\n                                suspendSale={suspendSale}\n                                saleListLength={saleListCards.length}\n                                deleteSuspendedSale={deleteSuspendedSale}\n                                id={suspendedSale._id}\n                            />\n                            {saleListCards.length > 0 && (\n                                <PrintList saleListCards={saleListCards} />\n                            )}\n                        </Box>\n                    </Grid>\n                    <br />\n                    <SaleCartList saleList={saleListCards} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default Sale;\n","import {\n    createTheme,\n    CssBaseline,\n    makeStyles,\n    ThemeProvider,\n} from '@material-ui/core';\nimport React, { FC } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport AdminRoute from './AuthenticatedRoute';\nimport BrowseInventory from './BrowseInventory/BrowseInventory';\nimport BrowseReceiving from './BrowseReceiving/BrowseReceiving';\nimport BrowseSales from './BrowseSales/BrowseSales';\nimport BulkInventory from './BulkInventory/BulkInventory';\nimport AuthProvider from './context/AuthProvider';\nimport InventoryProvider from './context/InventoryContext';\nimport ReceivingProvider from './context/ReceivingContext';\nimport { SaleProvider } from './context/SaleContext';\nimport Home from './LandingPage/Home';\nimport Login from './Login/Login';\nimport ManageInventory from './ManageInventory/ManageInventory';\nimport NavBar from './NavBar/NavBar';\nimport PublicInventory from './PublicInventory/PublicInventory';\nimport Receiving from './Receiving/Receiving';\nimport Reporting from './Reporting/Reporting';\nimport Sale from './Sale/Sale';\nimport ToastProvider from './ui/ToastContext';\n\nconst useStyles = makeStyles(({ spacing }) => ({\n    contentContainer: {\n        paddingTop: spacing(10),\n        marginLeft: spacing(3),\n        marginRight: spacing(3),\n    },\n    backgroundColor: {\n        backgroundColor: '#f9fafb',\n        minHeight: '100vh',\n    },\n}));\n\nconst theme = createTheme({\n    palette: {\n        primary: {\n            main: '#2185d0',\n        },\n    },\n    overrides: {\n        MuiCssBaseline: {\n            '@global': {\n                a: {\n                    textDecoration: 'none',\n                },\n            },\n        },\n    },\n});\n\nconst App: FC = () => {\n    const { backgroundColor, contentContainer } = useStyles();\n\n    return (\n        <AuthProvider>\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <ToastProvider>\n                    <NavBar />\n                    <Switch>\n                        <Route exact path=\"/\" component={Home} />\n                        <div className={backgroundColor}>\n                            <div className={contentContainer}>\n                                <AdminRoute exact path=\"/manage-inventory\">\n                                    <InventoryProvider>\n                                        <ManageInventory />\n                                    </InventoryProvider>\n                                </AdminRoute>\n                                <AdminRoute exact path=\"/new-sale\">\n                                    <SaleProvider>\n                                        <Sale />\n                                    </SaleProvider>\n                                </AdminRoute>\n                                <AdminRoute exact path=\"/receiving\">\n                                    <ReceivingProvider>\n                                        <Receiving />\n                                    </ReceivingProvider>\n                                </AdminRoute>\n                                <AdminRoute exact path=\"/browse-sales\">\n                                    <BrowseSales />\n                                </AdminRoute>\n                                <AdminRoute exact path=\"/browse-inventory\">\n                                    <BrowseInventory />\n                                </AdminRoute>\n                                <AdminRoute exact path=\"/browse-receiving\">\n                                    <BrowseReceiving />\n                                </AdminRoute>\n                                <AdminRoute exact path=\"/bulk-add\">\n                                    <BulkInventory />\n                                </AdminRoute>\n                                <Route\n                                    exact\n                                    path=\"/public-inventory\"\n                                    component={PublicInventory}\n                                />\n                                <Route\n                                    exact\n                                    path=\"/reporting\"\n                                    component={Reporting}\n                                />\n                                <Route exact path=\"/login\" component={Login} />\n                            </div>\n                        </div>\n                    </Switch>\n                </ToastProvider>\n            </ThemeProvider>\n        </AuthProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import '@fontsource/roboto';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <HashRouter basename=\"/\">\n        <App />\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}