{"version":3,"sources":["common/useLocalStorage.ts","common/http.ts","utils/makeAuthHeader.ts","utils/endpoints.ts","context/loginQuery.ts","context/AuthProvider.tsx","AuthenticatedRoute.tsx","ui/Placeholder.tsx","ui/Button.tsx","ui/ControlledDropdown.tsx","ui/ControlledMultiSelect.tsx","common/autocompleteQuery.ts","ui/SearchBar.tsx","ui/ControlledSearchBar.tsx","ui/Typography.tsx","BrowseInventory/setNameQuery.ts","BrowseInventory/BrowseInventoryForm.tsx","utils/price.ts","common/Price.tsx","context/ReceivingContext.tsx","ui/CardImageTooltip.tsx","ui/SetIcon.tsx","BrowseInventory/BrowseInventoryRow.tsx","BrowseInventory/filteredCardsQuery.ts","BrowseInventory/BrowseInventory.tsx","ui/Loading.tsx","ui/FormikNativeDatePicker.tsx","BrowseReceiving/BrowseReceivingFilterDialog.tsx","common/Chip.tsx","ui/ToastContext.tsx","utils/createDisplayName.ts","utils/getCardImage.ts","utils/ScryfallCard.ts","context/cardSearchQuery.ts","context/receivingQuery.tsx","ui/MetaData.tsx","utils/displayEmpty.ts","utils/formatDate.ts","utils/pluralize.ts","utils/finishCondition.ts","BrowseReceiving/receivedByIdQuery.ts","BrowseReceiving/BrowseReceivingListDialog.tsx","BrowseReceiving/BrowseReceivingItem.tsx","BrowseReceiving/browseReceivingQuery.ts","BrowseReceiving/BrowseReceiving.tsx","utils/sum.ts","BrowseSales/BrowseSalesItem.tsx","BrowseSales/BrowseSalesList.tsx","BrowseSales/browseSalesQuery.ts","BrowseSales/BrowseSales.tsx","common/CardImage.tsx","ManageInventory/addCardToInventoryQuery.ts","ui/IntegerInput.tsx","utils/createFinishCondtition.ts","utils/dropdownOptions.ts","BulkInventory/bulkInventoryQuery.ts","BulkInventory/BulkSearchBar.tsx","BulkInventory/SubmittedCardsTable.tsx","BulkInventory/BulkInventory.tsx","context/InventoryContext.tsx","context/createSuspendedSaleQuery.ts","context/deleteSuspendedSaleQuery.ts","context/finishSaleQuery.tsx","context/getSuspendedSaleQuery.ts","context/SaleContext.tsx","utils/sortSaleList.ts","LandingPage/ch2.jpg","LandingPage/clubhouse_products.png","LandingPage/learn_to_play.jpg","LandingPage/tables.jpg","LandingPage/Home.tsx","ui/TextField.tsx","Login/Login.tsx","common/marketPriceQuery.ts","common/MarketPrice.tsx","ui/InventoryChip.tsx","utils/parseQoh.ts","common/QohLabels.tsx","utils/Language.ts","ui/CardHeader.tsx","ui/CardRowContainer.tsx","utils/checkCardFinish.ts","ManageInventory/ManageInventoryListItem.tsx","ManageInventory/allLocationInventoryQuery.ts","ManageInventory/TotalStoreInventory.tsx","ManageInventory/ManageInventory.tsx","NavBar/NavLinks.tsx","NavBar/NavBar.tsx","PublicInventory/PublicCard.tsx","PublicInventory/publicCardSearchQuery.ts","PublicInventory/PublicInventory.tsx","common/TotalCardsLabel.tsx","utils/useInterruptExit.ts","Receiving/ReceivingCartItem.tsx","Receiving/ReceivingCart.tsx","Receiving/CashReport.tsx","Reporting/Reporting.tsx","Receiving/ReceivingListModal.tsx","Receiving/ReceivingListTotals.tsx","Receiving/printCashReport.ts","Receiving/ReceivingSearchItem.tsx","Receiving/Receiving.tsx","Reporting/reportingQuery.ts","Sale/SaleCartPriceTotal.tsx","Sale/PrintList.tsx","Sale/FinishSale.tsx","Sale/SaleCartItem.tsx","Sale/SaleCartList.tsx","utils/roundPrice.ts","Sale/SaleSearchCard.tsx","Sale/SaleSearchCardList.tsx","Sale/getSuspendedSalesQuery.ts","Sale/SuspendSaleButton.tsx","Sale/Sale.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","err","console","log","storedValue","setStoredValue","value","valueToStore","Function","removeItem","setItem","stringify","http","axios","create","interceptors","request","use","config","headers","Authorization","makeAuthHeader","publicEndpoint","s","authedEndpoint","LOGIN","AUTOCOMPLETE","GET_CARDS_WITH_INFO_PUBLIC","GET_CARD_FROM_ALL_LOCATIONS","GET_CARDS_BY_FILTER","GET_SET_NAMES","SUSPEND_SALE","GET_SALES_BY_TITLE","RECEIVING","GET_CARDS_WITH_INFO","GET_REPORT","GET_BULK_CARDS","FINISH_SALE","ADD_CARD_TO_INVENTORY","RECEIVE_CARDS","GET_LIVE_PRICE","loginQuery","username","password","currentLocation","a","post","toLowerCase","data","tokenKey","locationKey","userKey","AuthContext","React","createContext","authToken","currentUser","isLoggedIn","handleLogout","handleLogin","Promise","useAuthContext","useContext","AuthProvider","children","history","useHistory","setAuthToken","setCurrentLocation","setCurrentUser","useEffect","storageListener","e","newValue","addEventListener","removeEventListener","token","push","Provider","AdminOnly","to","AdminRoute","props","useStyles","makeStyles","typography","spacing","font","fontWeight","fontWeightBold","container","boxShadow","backgroundColor","flexContainer","minHeight","Placeholder","icon","Paper","variant","className","Box","display","flexDirection","justifyContent","alignItems","Typography","Button","primary","color","disableElevation","ControlledDropdown","label","name","onChange","options","FormControl","size","fullWidth","InputLabel","Select","target","map","o","idx","MenuItem","text","FormHelperText","ControlledMultiSelect","multiple","renderValue","join","autocompleteQuery","cardName","get","params","title","popupIndicatorOpen","transform","SearchBar","classes","loading","setLoading","results","setResults","internalValue","setInternalValue","fetchResults","v","formattedResults","el","debouncedFetch","useCallback","_","debounce","handleSearchChange","val","length","handleResultSelect","reason","setTimeout","$","select","Autocomplete","id","autoHighlight","selectOnFocus","onInputChange","getOptionLabel","getOptionSelected","placeholder","closeIcon","popupIcon","noOptionsText","renderInput","ControlledSearchBar","HeaderText","SectionText","setNameQuery","formatDropdownOptions","finishDropdownOptions","sortByDropdownOptions","sortByDirectionDropdownOptions","sortByColorDropdownOptions","colorSpecificityDropdownOptions","typeLineOptions","frameOptions","initialFilters","setName","format","minPrice","maxPrice","finish","sortBy","colorsArray","sortByDirection","colorSpecificity","typeLine","frame","validate","FormContainer","withStyles","root","padding","BrowseInventoryForm","doSubmit","editionDropdownOptions","setEditionDropdownOptions","onSubmit","values","names","setNameOptions","concatWithBlankOption","useFormik","initialValues","handleChange","setFieldValue","handleSubmit","Grid","xs","sm","type","toString","onClick","price","Number","isNaN","toFixed","getPrice","Trade","DisplayPrice","num","transparentBackground","borderRounded","borderRadius","imageSize","width","height","CardImageTooltip","cardImage","Tooltip","placement","clsx","src","tooltip","StyledIcon","styled","fontSize","SetIcon","set","rarity","rarityClass","conditionMap","NM","LP","MP","HP","BrowseInventoryRow","card","finishCondition","quantityInStock","set_name","image_uri","split","condition","TableRow","TableCell","style","cursor","verticalAlign","Price","filteredCardsQuery","filters","page","InvertedLoader","palette","common","white","CircularProgress","BrowseInventory","cards","count","currentPage","numPages","isLoading","cachedFilters","searchTouched","state","setState","fetchData","queryFilters","undefined","colors","c","White","Blue","Black","Red","Green","sort","total","Math","ceil","Container","Modal","open","pb","TableContainer","component","p","Pagination","Table","TableHead","TableBody","_id","Loading","py","FormikNativeDatePicker","defaultValue","min","max","InputProps","inputProps","BrowseReceivingFilterDialog","dialogOpen","setDialogOpen","onDialogClose","enableReinitialize","Dialog","onClose","maxWidth","DialogTitle","DialogContent","startDate","endDate","DialogActions","foilContainer","backgroundImage","border","Chip","foil","ToastContext","createToast","useToastContext","ToastProvider","setOpen","severity","setSeverity","message","setMessage","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","Alert","createDisplayName","frame_effects","border_color","lang","nonfoil","promo_types","displayName","includes","toUpperCase","getCardImage","myImage","image_uris","normal","card_faces","ScryfallCard","printed_name","type_line","display_name","color_identity","tcgplayer_id","qoh","this","cardSearchQuery","inStockOnly","matchInStock","d","receivingQuery","customerName","customerContact","TRADE_TYPES","CASH","Cash","CREDIT","Credit","defaultContext","searchResults","receivingList","handleSearchSelect","addToList","removeFromList","activeTradeType","selectAll","commitToInventory","resetSearchResults","ReceivingContext","useReceivingContext","ReceivingProvider","setSearchResults","setReceivingList","term","cardsToCommit","quantity","creditPrice","cashPrice","marketPrice","tradeType","previousState","cardsToAdd","Array","uuid_key","uuid","filter","currentCard","selectType","newState","meta","content","MetaData","displayEmpty","str","formatDate","date","moment","pluralize","word","displayFinishCondition","FOIL_NM","FOIL_LP","FOIL_MP","FOIL_HP","NONFOIL_NM","NONFOIL_LP","NONFOIL_MP","NONFOIL_HP","receivedByIdQuery","receivedId","BrowseReceivingListDialog","setData","arr","received_cards","created_at","created_by","customer_name","customer_contact","List","b","bulk_card_data","localeCompare","trade","modeledCard","ListItem","ListItemText","secondary","BrowseReceivingItem","received","received_card_list","sum","r","Card","CardActionArea","disableRipple","CardContent","justify","browseReceivingQuery","subtract","BrowseReceiving","obj1","obj2","setFilters","receivedList","setReceivedList","formValues","md","lg","rl","nums","reduce","acc","curr","BrowseSalesItem","sale","card_list","sale_data","quantitySold","qtyToSell","saleID","createTime","BrowseSalesList","list","browseSalesQuery","BrowseSales","setTerm","salesList","setSalesList","sales","Divider","imageStyle","zIndex","appBar","transition","maxHeight","hoveredStyle","CardImage","image","hover","hovered","setHovered","onHover","onMouseOver","onMouseOut","addCardToInventoryQuery","payload","IntegerInput","onBlur","transformed","parseInt","createFinishCondition","finishes","cardConditions","bulkInventoryQuery","BulkSearchBar","onHighlight","setOptions","ref","useRef","current","focus","filterOptions","scryfall_id","onHighlightChange","renderOption","set_abbreviation","SubmittedCardsTable","bulkCard","random","imageContainer","placeholderImage","background","grey","BulkInventory","currentCardImage","setCurrentCardImage","submittedCards","setSubmittedCards","cardInfo","resetForm","isSubmitting","nonfoil_printing","foil_printing","disabled","InventoryContext","changeCardQuantity","InventoryProvider","copiedState","targetIndex","findIndex","createSuspendedSaleQuery","deleteSuspendedSaleQuery","saleId","delete","finishSaleQuery","getSuspendedSaleQuery","defaultSuspendedSale","notes","SaleContext","saleListCards","searchTerm","suspendedSale","addToSaleList","removeFromSaleList","restoreSale","suspendSale","deleteSuspendedSale","finalizeSale","resetSaleState","SaleProvider","setSaleListCards","setSearchTerm","setSuspendedSale","modeledData","saleList","ops","Sale","oldState","newCard","splice","ORDER","helpSort","arrayConst","colorsLength","cardFace","indexOf","sortSaleList","light","main","dark","primaryRgb","desktopMediaQuery","tabletMediaQuery","HeroImageContainer","marginTop","Image","div","rounded","LocationImageContainer","ImageGradient","ImageGradient2","HeroText","textAlign","h1","inverted","SubheaderText","HeaderContainer","ServicesContainer","gridGap","gridTemplateRows","gridTemplateColumns","LocationsContainer","LocationContainer","Content","Description","TextWidth","IconContainer","SectionDivider","Footer","bottom","paddingLeft","paddingBottom","paddingRight","paddingTop","FlexRow","Home","learn_to_play","Icon","ch1","ch2","clubhouse_products","href","rel","link","TextField","initialFormValues","location","formGap","locationDropdownOptions","errors","Login","validateOnChange","marketPriceQuery","scryfallId","Axios","marketPrices","medianPrices","displayPrice","MarketPrice","round","showMid","market","setMarket","median","setMedian","isFoil","_isMounted","n","loader","chip","leftChip","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","rightChip","InventoryChip","forwardRef","quantityColor","parseQoh","createInventoryLineItems","inventoryQty","matchStrings","matches","m","LabelWithPopup","popupLineItems","arrow","QohLabels","foilQuantity","nonfoilQuantity","foilLineItems","nonfoilLineItems","LANG_CODES","en","es","fr","de","it","pt","ja","ko","ru","zhs","zht","he","la","grc","ar","sa","px","language","languageCode","TcgPriceButton","tcgId","tcgUrl","Link","underline","SubheaderContainer","marginRight","CardHeader","selectedFinish","headerContainer","CardRowContainer","header","checkCardFinish","finishDisabled","isInteger","ManageInventoryListItem","setSelectedFinish","selectedCondition","validateOnMount","isValid","onFocus","allLocationInventoryQuery","labelContainer","marginLeft","chipContainer","TotalStoreInventory","foilQty","nonfoilQty","quantities","setQuantities","ManageInventory","NavLinks","pathname","useLocation","button","RouterLink","selected","replace","ListItemIcon","flexGrow","menuLinkText","menuButton","NavBar","drawerOpen","setDrawerOpen","AppBar","Toolbar","IconButton","edge","Drawer","anchor","direction","align","version","imageWrapper","cardImageRatio","inventoryRow","margin","inventoryWrapper","wrapper","PublicCard","publicCardSearchQuery","gridContainer","justifyItems","initialState","selectedLocation","initialFormState","locationOptions","PublicInventory","formSubmitted","setFormSubmitted","fetchCards","TotalCardsLabel","listLength","onInterrupt","preventDefault","returnValue","initBeforeUnload","showPrompt","useInterruptExit","initial","setShowPrompt","TRADE_TYPE","ReceivingCartItem","whiteSpace","ReceivingCart","CashReport","countByPriceAndID","chain","temp_uuid","groupBy","mapValues","mergedWithQty","uniqBy","tradeQty","totalCashOut","sumBy","Fragment","colSpan","TableFooter","RangeName","ReceivingListModal","showModal","setShowModal","cashTotal","creditTotal","fluid","closeOnDimmerClick","Header","scrolling","as","Item","Form","Group","widths","Field","Input","Actions","ReceivingListTotals","showCashModal","setShowCashModal","Or","trigger","floated","divToPrint","document","getElementById","popup","write","innerHTML","close","printCashReport","ReceivingSearchItem","handleFocus","Error","handleInventoryAdd","noValidate","castVal","step","Receiving","when","reportingQuery","allTimeDates","year","toISOString","add","lastMonthDates","Reporting","report","setReport","ALL_TIME","searchName","setSearchName","searchDates","setSearchDates","LAST_MONTH","countByCardName","quantity_sold","card_title","countByPrinting","card_metadata","finish_condition","estimated_price","quantity_on_hand","SaleCartPriceTotal","PrintWrapper","PrintList","componentRef","handlePrint","useReactToPrint","slc","FinishSale","submit","setSubmit","handleFinalizeSale","modalTrigger","basic","SaleCartItem","SaleCartList","roundPrice","SaleSearchCard","conditionSelectOptions","removeZeroedQuantites","pickBy","Object","entries","conditionFinish","qty","createConditionOptions","selectedFinishCondition","quantityToSell","roundedPrice","BrowseCardList","getSuspendedSalesQuery","ClearMargin","CharLimit","SuspendSaleButton","saleListLength","setSales","setSaleID","modalOpen","setModalOpen","setCustomerName","setNotes","setDisabled","suspendBtn","restoreBtn","deleteBtn","loadingBtn","setLoadingBtn","getSales","suspendedSales","clearFields","submitSuspendSale","submitRestoreSale","submitDeleteSale","columns","stackable","relaxed","Column","substring","TextArea","Message","info","contentContainer","theme","createMuiTheme","App","ThemeProvider","exact","path","Boolean","hostname","match","ReactDOM","render","basename","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7cfb34e.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst useLocalStorage = <T>(key: string, initialValue: T) => {\n    const [storedValue, setStoredValue] = useState<T>(() => {\n        try {\n            const item = window.localStorage.getItem(key);\n\n            if (item) {\n                try {\n                    const parsed = JSON.parse(item);\n                    return parsed;\n                } catch (error) {\n                    return initialValue;\n                }\n            } else {\n                return initialValue;\n            }\n        } catch (err) {\n            console.log(err);\n            return initialValue;\n        }\n    });\n\n    const setValue = (value: T | null) => {\n        try {\n            const valueToStore =\n                value instanceof Function ? value(storedValue) : value;\n\n            setStoredValue(valueToStore);\n\n            if (valueToStore === null) {\n                window.localStorage.removeItem(key);\n            } else {\n                window.localStorage.setItem(key, JSON.stringify(valueToStore));\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    return [storedValue, setValue] as const;\n};\n\nexport default useLocalStorage;\n","import axios, { AxiosRequestConfig } from 'axios';\nimport makeAuthHeader from '../utils/makeAuthHeader';\n\nconst http = axios.create();\n\n/**\n * This is essentially Axios middleware that sets the header prior to\n * continuing the request pipeline\n */\nhttp.interceptors.request.use((config: AxiosRequestConfig) => {\n    config.headers = makeAuthHeader();\n    return config;\n});\n\nexport default http;\n","/**\n * This function is a helper for Axios, it yields an object for Axios params\n */\nexport default function makeAuthHeader() {\n    const item = localStorage.getItem('clubhouse_JWT');\n\n    if (!item) return null;\n\n    return { Authorization: `Bearer ${JSON.parse(item)}` };\n}\n","// CRA Exposes this as 'development' internally for `npm start`, and 'production' in built code\nexport const isProd = () => process.env.NODE_ENV === 'production';\n\n/**\n * Asserts the env and returns the proper path prefix for resources\n */\nexport const getPrefix = () => {\n    if (isProd()) {\n        return 'https://clubhouse-collection.appspot.com';\n    } else {\n        return 'http://localhost:7331';\n    }\n};\n\n/**\n * Asserts the env and returns the proper path postfix for GCF functions\n */\nexport const testEndpoint = () => {\n    if (!isProd()) {\n        return '_test';\n    }\n    return '';\n};\n\ntype UrlCreator = (s: string) => string;\n\nexport const publicEndpoint: UrlCreator = (s) => `${getPrefix()}/${s}`;\nexport const authedEndpoint: UrlCreator = (s) => `${getPrefix()}/auth/${s}`;\nexport const gcfEndpoint: UrlCreator = (s) => `${s}${testEndpoint()}`;\n\n// Public endpoints\nexport const LOGIN = publicEndpoint('jwt');\nexport const AUTOCOMPLETE = publicEndpoint('autocomplete');\nexport const GET_CARDS_WITH_INFO_PUBLIC = publicEndpoint('getCardsWithInfo');\nexport const GET_CARD_FROM_ALL_LOCATIONS = publicEndpoint(\n    'getCardFromAllLocations'\n);\n\n// Private endpoints\nexport const GET_CARDS_BY_FILTER = authedEndpoint('getCardsByFilter');\nexport const GET_SET_NAMES = authedEndpoint('getDistinctSetNames');\nexport const SUSPEND_SALE = authedEndpoint('suspendSale');\nexport const GET_SALES_BY_TITLE = authedEndpoint('getSaleByTitle');\nexport const RECEIVING = authedEndpoint('getReceivedCards');\nexport const GET_ALL_SALES = authedEndpoint('allSales');\nexport const GET_CARDS_WITH_INFO = authedEndpoint('getCardsWithInfo');\nexport const GET_REPORT = authedEndpoint('getSalesReport');\nexport const GET_BULK_CARDS = authedEndpoint('bulkSearch');\nexport const FINISH_SALE = authedEndpoint('finishSale');\nexport const ADD_CARD_TO_INVENTORY = authedEndpoint('addCardToInventory');\nexport const RECEIVE_CARDS = authedEndpoint('receiveCards');\n\n// GCF endpoint\nexport const GET_LIVE_PRICE = gcfEndpoint(\n    `https://us-central1-clubhouse-collection.cloudfunctions.net/getPriceFromTcg`\n);\n","import http from '../common/http';\nimport { LOGIN } from '../utils/endpoints';\n\ntype ClubhouseLocation = 'ch1' | 'ch2';\n\ninterface ResponseData {\n    token: string;\n}\n\nconst loginQuery = async (\n    username: string,\n    password: string,\n    currentLocation: ClubhouseLocation\n) => {\n    try {\n        const { data } = await http.post<ResponseData>(LOGIN, {\n            username: username.toLowerCase(),\n            password,\n            currentLocation,\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default loginQuery;\n","import React, { FC, useContext, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport useLocalStorage from '../common/useLocalStorage';\nimport loginQuery from './loginQuery';\n\ninterface Props {}\n\nexport type ClubhouseLocation = 'ch1' | 'ch2';\n\nconst tokenKey = 'clubhouse_JWT';\nconst locationKey = 'currentLocation';\nconst userKey = 'currentUser';\n\ninterface Context {\n    handleLogin: (\n        username: string,\n        password: string,\n        currentLocation: ClubhouseLocation\n    ) => Promise<any>;\n    handleLogout: () => void;\n    isLoggedIn: () => boolean;\n    authToken: string | null;\n    currentLocation: ClubhouseLocation | null;\n    currentUser: string | null;\n}\n\nexport const AuthContext = React.createContext<Context>({\n    authToken: null,\n    currentLocation: null,\n    currentUser: null,\n    isLoggedIn: () => false,\n    handleLogout: () => null,\n    handleLogin: () => new Promise(() => null),\n});\n\nexport const useAuthContext = () => useContext(AuthContext);\n\nconst AuthProvider: FC<Props> = ({ children }) => {\n    const history = useHistory();\n    const [authToken, setAuthToken] = useLocalStorage(\n        tokenKey,\n        localStorage.getItem(tokenKey)\n    );\n\n    const [\n        currentLocation,\n        setCurrentLocation,\n    ] = useLocalStorage<ClubhouseLocation | null>(\n        locationKey,\n        localStorage.getItem(locationKey) as ClubhouseLocation\n    );\n\n    const [currentUser, setCurrentUser] = useLocalStorage<string | null>(\n        userKey,\n        localStorage.getItem(userKey)\n    );\n\n    /**\n     * Handles multi-tab logouts.\n     *\n     * If the token is cleared and the new value is `null`,\n     * we issue a logout to all other tabs\n     */\n    useEffect(() => {\n        const storageListener = (e: StorageEvent) => {\n            if (e.key === tokenKey && e.newValue === null) {\n                handleLogout();\n            }\n        };\n\n        window.addEventListener('storage', storageListener);\n\n        return () => window.removeEventListener('storage', storageListener);\n    }, []);\n\n    const handleLogin = async (\n        username: string,\n        password: string,\n        currentLocation: ClubhouseLocation\n    ) => {\n        try {\n            const data = await loginQuery(username, password, currentLocation);\n\n            if (data.token) {\n                setAuthToken(data.token);\n                setCurrentLocation(currentLocation);\n                setCurrentUser(username);\n            }\n\n            return data;\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const handleLogout = () => {\n        setAuthToken(null);\n        setCurrentLocation(null);\n        setCurrentUser(null);\n\n        history.push('/login');\n    };\n\n    const isLoggedIn = () => !!authToken;\n\n    return (\n        <AuthContext.Provider\n            value={{\n                authToken,\n                currentLocation,\n                currentUser,\n                handleLogin,\n                handleLogout,\n                isLoggedIn,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport default AuthProvider;\n","import React, { FC } from 'react';\nimport { Redirect, Route, RouteProps } from 'react-router';\nimport { useAuthContext } from './context/AuthProvider';\n\nconst AdminOnly: FC = ({ children }) => {\n    const { currentUser, currentLocation, authToken } = useAuthContext();\n\n    if (!currentUser || !currentLocation || !authToken) {\n        return <Redirect to=\"/\" />;\n    }\n\n    return <>{children}</>;\n};\n\nconst AdminRoute: FC<RouteProps> = ({ children, ...props }) => {\n    return (\n        <Route {...props}>\n            <AdminOnly>{children}</AdminOnly>\n        </Route>\n    );\n};\n\nexport default AdminRoute;\n","import { Box, makeStyles, Paper, Typography } from '@material-ui/core';\nimport React, { FC, ReactNode } from 'react';\n\nconst useStyles = makeStyles(({ typography, spacing }) => ({\n    font: {\n        fontWeight: typography.fontWeightBold,\n    },\n    container: {\n        boxShadow: '0 2px 25px 0 rgb(34 36 38 / 5%) inset',\n        backgroundColor: 'transparent',\n    },\n    flexContainer: {\n        minHeight: spacing(25),\n    },\n}));\n\ninterface Props {\n    icon?: ReactNode;\n}\n\nconst Placeholder: FC<Props> = ({ icon, children }) => {\n    const { font, container, flexContainer } = useStyles();\n\n    return (\n        <Paper variant=\"outlined\" className={container}>\n            <Box\n                display=\"flex\"\n                flexDirection=\"column\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                className={flexContainer}\n            >\n                {icon && icon}\n                <Typography variant=\"h6\" className={font}>\n                    {children}\n                </Typography>\n            </Box>\n        </Paper>\n    );\n};\n\nexport default Placeholder;\n","import { Button as MUIButton, ButtonProps } from '@material-ui/core';\nimport React, { FC } from 'react';\n\ntype Props = Omit<ButtonProps, 'variant' | 'color' | 'disableElevation'> & {\n    primary?: boolean;\n};\n\nconst Button: FC<Props> = ({ primary, children, ...props }) => {\n    return (\n        <MUIButton\n            color=\"primary\"\n            disableElevation\n            variant={primary ? 'contained' : 'outlined'}\n            {...props}\n        >\n            {children}\n        </MUIButton>\n    );\n};\n\nexport default Button;\n","import {\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    MenuItem,\n    Select,\n    SelectProps,\n} from '@material-ui/core';\nimport { ChangeEvent } from 'react';\n\nexport interface DropdownOption {\n    key: string;\n    value: string | number;\n    text: string;\n}\n\ntype ControlledDropdownProps = {\n    name: string;\n    value: string;\n    onChange: (value: string) => void;\n    options: DropdownOption[];\n    error?: string;\n} & Omit<SelectProps, 'name' | 'multiple' | 'value' | 'onChange' | 'error'>;\n\nfunction ControlledDropdown({\n    label,\n    name,\n    value,\n    onChange,\n    options,\n    error,\n    ...props\n}: ControlledDropdownProps) {\n    return (\n        <FormControl variant=\"outlined\" size=\"small\" fullWidth>\n            <InputLabel>{label}</InputLabel>\n            <Select\n                error={!!error}\n                label={label}\n                name={name}\n                value={value}\n                onChange={(e: ChangeEvent<{ value: unknown }>) => {\n                    onChange(e.target.value as string);\n                }}\n                {...props}\n            >\n                {options.map((o, idx) => (\n                    <MenuItem key={`${o.value}-${idx}`} value={o.value}>\n                        {o.text}\n                    </MenuItem>\n                ))}\n            </Select>\n            {error && <FormHelperText error>{error}</FormHelperText>}\n        </FormControl>\n    );\n}\n\nexport default ControlledDropdown;\n","import {\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select,\n    SelectProps,\n} from '@material-ui/core';\nimport { ChangeEvent } from 'react';\n\nexport interface DropdownOption {\n    key: string;\n    value: string | number;\n    text: string;\n}\n\ntype ControlledMultiSelectProps = {\n    name: string;\n    value: string[];\n    onChange: (value: string[]) => void;\n    options: DropdownOption[];\n} & Omit<SelectProps, 'name' | 'multiple' | 'value' | 'onChange'>;\n\nfunction ControlledMultiSelect({\n    label,\n    name,\n    value,\n    onChange,\n    options,\n    ...props\n}: ControlledMultiSelectProps) {\n    return (\n        <FormControl variant=\"outlined\" size=\"small\" fullWidth>\n            <InputLabel>{label}</InputLabel>\n            <Select\n                label={label}\n                name={name}\n                multiple\n                renderValue={(s) => (s as string[]).join(', ')}\n                value={value}\n                onChange={(e: ChangeEvent<{ value: unknown }>) => {\n                    onChange(e.target.value as string[]);\n                }}\n                {...props}\n            >\n                {options.map((o, idx) => (\n                    <MenuItem key={`${o.value}-${idx}`} value={o.value}>\n                        {o.text}\n                    </MenuItem>\n                ))}\n            </Select>\n        </FormControl>\n    );\n}\n\nexport default ControlledMultiSelect;\n","import axios from 'axios';\nimport { AUTOCOMPLETE } from '../utils/endpoints';\n\nconst autocompleteQuery = async (cardName: string) => {\n    try {\n        const { data } = await axios.get<string[]>(AUTOCOMPLETE, {\n            params: {\n                title: cardName,\n            },\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default autocompleteQuery;\n","import { makeStyles, TextField } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Autocomplete, {\n    AutocompleteChangeReason,\n} from '@material-ui/lab/Autocomplete';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport React, { ChangeEvent, FC, useCallback, useState } from 'react';\nimport autocompleteQuery from '../common/autocompleteQuery';\n\nexport type Option = { title: string };\n\nconst useStyles = makeStyles({\n    /*\n     * Prevents the option-list icon from rotating 180 degrees to preserve orientation of custom icon\n     */\n    popupIndicatorOpen: {\n        transform: 'rotate(0deg)',\n    },\n});\n\ninterface Props {\n    value: Option | null;\n    onChange: (result: Option | null) => void;\n}\n\nconst SearchBar: FC<Props> = ({ value, onChange }) => {\n    const classes = useStyles();\n    const [loading, setLoading] = useState<boolean>(false);\n    const [results, setResults] = useState<Option[]>([]);\n    const [internalValue, setInternalValue] = useState<Option | null>(value);\n\n    const fetchResults = async (v: string) => {\n        setLoading(true);\n        const data = await autocompleteQuery(v);\n        const formattedResults = data.map((el) => ({ title: el }));\n        setResults(formattedResults);\n        setLoading(false);\n    };\n\n    // Cache so it doesn't create a new instance each render\n    const debouncedFetch = useCallback(_.debounce(fetchResults, 500), []);\n\n    // `value` is the search input string\n    const handleSearchChange = async (_: ChangeEvent<{}>, val: string) => {\n        setInternalValue({ title: val });\n\n        // Skip undefined and short internalValues\n        if (!val || val.length < 3) {\n            setResults([]);\n            return;\n        }\n\n        await debouncedFetch(val);\n    };\n\n    const handleResultSelect = async (\n        _: ChangeEvent<{}>,\n        value: Option | null,\n        reason: AutocompleteChangeReason\n    ) => {\n        // If the user clears the input, then we need to reset the state\n        if (reason === 'clear') {\n            onChange(null);\n            return;\n        }\n\n        // This line is a hacky way to get around the fact that if we just select(), then\n        // when the user manually clicks the first (or any) result in the resultlist, it does not select,\n        // presumably because there is some collision between selecting the resultList element and focusing the input\n        setTimeout(() => $('#searchBar').select(), 10);\n\n        try {\n            setLoading(true);\n            setInternalValue(value);\n            await onChange(value);\n            setLoading(false);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    return (\n        <Autocomplete\n            id=\"searchBar\"\n            autoHighlight\n            selectOnFocus\n            value={internalValue}\n            onInputChange={handleSearchChange}\n            onChange={handleResultSelect}\n            loading={loading}\n            options={results}\n            getOptionLabel={(o) => o.title}\n            getOptionSelected={(o, v) => o.title === v.title}\n            placeholder=\"Enter a card title\"\n            closeIcon={null}\n            popupIcon={<SearchIcon />}\n            noOptionsText=\"No results found\"\n            classes={{\n                popupIndicatorOpen: classes.popupIndicatorOpen,\n            }}\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    label=\"Enter a card title\"\n                    variant=\"outlined\"\n                    size=\"small\"\n                />\n            )}\n        />\n    );\n};\n\nexport default SearchBar;\n","import { FC } from 'react';\nimport SearchBar from './SearchBar';\n\ninterface ControlledSearchBarProps {\n    value: string;\n    onChange: (value: string) => void;\n}\n\nexport const ControlledSearchBar: FC<ControlledSearchBarProps> = ({\n    value,\n    onChange,\n}) => {\n    return (\n        <SearchBar\n            value={value ? { title: value } : null}\n            onChange={(v) => (v ? onChange(v.title) : onChange(''))}\n        />\n    );\n};\n\nexport default ControlledSearchBar;\n","import { Typography } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nexport const HeaderText: FC = ({ children }) => {\n    return <Typography variant=\"h4\">{children}</Typography>;\n};\n\nexport const SectionText: FC = ({ children }) => {\n    return (\n        <Typography variant=\"h6\">\n            <b>{children}</b>\n        </Typography>\n    );\n};\n","import http from '../common/http';\nimport { GET_SET_NAMES } from '../utils/endpoints';\n\nconst setNameQuery = async () => {\n    try {\n        const { data } = await http.get<string[]>(GET_SET_NAMES);\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default setNameQuery;\n","import {\n    FormControl,\n    Grid,\n    Paper,\n    TextField,\n    withStyles,\n} from '@material-ui/core';\nimport { FormikHelpers, useFormik } from 'formik';\nimport React, { FC, useEffect, useState } from 'react';\nimport Button from '../ui/Button';\nimport ControlledDropdown, { DropdownOption } from '../ui/ControlledDropdown';\nimport ControlledMultiSelect from '../ui/ControlledMultiSelect';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport { SectionText } from '../ui/Typography';\nimport setNameQuery from './setNameQuery';\n\nconst formatDropdownOptions: DropdownOption[] = [\n    { key: 'qw', value: '', text: 'None' },\n    { key: 'we', value: 'standard', text: 'Standard' },\n    { key: 'er', value: 'future', text: 'Future' },\n    { key: 'rt', value: 'historic', text: 'Historic' },\n    { key: 'ty', value: 'pioneer', text: 'Pioneer' },\n    { key: 'yu', value: 'modern', text: 'Modern' },\n    { key: 'ui', value: 'legacy', text: 'Legacy' },\n    { key: 'io', value: 'pauper', text: 'Pauper' },\n    { key: 'op', value: 'vintage', text: 'Vintage' },\n    { key: 'as', value: 'penny', text: 'Penny' },\n    { key: 'sd', value: 'commander', text: 'Commander' },\n    { key: 'df', value: 'brawl', text: 'Brawl' },\n    { key: 'fg', value: 'duel', text: 'Duel' },\n    { key: 'gh', value: 'oldschool', text: 'Oldschool' },\n];\n\nconst priceOperatorDropdownOptions: DropdownOption[] = [\n    { key: 'gte', value: 'gte', text: '>=' },\n    { key: 'lte', value: 'lte', text: '<=' },\n    { key: 'gtx', value: 'gt', text: '>' },\n    { key: 'ltx', value: 'lt', text: '<' },\n];\n\nconst finishDropdownOptions: DropdownOption[] = [\n    { key: 'nonfoil_foil', value: '', text: 'None' },\n    { key: 'nonfoil', value: 'NONFOIL', text: 'Nonfoil' },\n    { key: 'foil', value: 'FOIL', text: 'Foil' },\n];\n\nconst sortByDropdownOptions: DropdownOption[] = [\n    { key: 'pricesort', value: 'price', text: 'Price' },\n    { key: 'alphasort', value: 'name', text: 'Card Name' },\n    { key: 'quantitySort', value: 'quantityInStock', text: 'Quantity' },\n];\n\nconst sortByDirectionDropdownOptions: DropdownOption[] = [\n    { key: 'descdirsort', value: 1, text: 'Ascending' },\n    { key: 'ascdirsort', value: -1, text: 'Descending' },\n];\n\nconst sortByColorDropdownOptions: DropdownOption[] = [\n    { key: 'w', value: 'White', text: 'White' },\n    { key: 'u', value: 'Blue', text: 'Blue' },\n    { key: 'b', value: 'Black', text: 'Black' },\n    { key: 'r', value: 'Red', text: 'Red' },\n    { key: 'g', value: 'Green', text: 'Green' },\n];\n\nconst colorSpecificityDropdownOptions: DropdownOption[] = [\n    { key: 'all', value: '', text: 'None' },\n    { key: 'colorless', value: 'colorless', text: 'Colorless only' },\n    { key: 'mono', value: 'mono', text: 'Monocolor only' },\n    { key: 'multi', value: 'multi', text: 'Multicolor only' },\n];\n\nconst typeLineOptions: DropdownOption[] = [\n    { key: 'na', value: '', text: 'None' },\n    { key: 'artifact', value: 'Artifact', text: 'Artifact' },\n    { key: 'creature', value: 'Creature', text: 'Creature' },\n    { key: 'enchantment', value: 'Enchantment', text: 'Enchantment' },\n    { key: 'instant', value: 'Instant', text: 'Instant' },\n    { key: 'land', value: 'Land', text: 'Land' },\n    { key: 'planeswalker', value: 'Planeswalker', text: 'Planeswalker' },\n    { key: 'sorcery', value: 'Sorcery', text: 'Sorcery' },\n    { key: 'tribal', value: 'Tribal', text: 'Tribal' },\n];\n\nconst frameOptions: DropdownOption[] = [\n    { key: 'na', value: '', text: 'None' },\n    { key: 'borderless', value: 'borderless', text: 'Borderless' },\n    { key: 'extendedArt', value: 'extendedArt', text: 'Extended Art' },\n    { key: 'showcase', value: 'showcase', text: 'Showcase' },\n];\n\nexport interface FormValues {\n    title: string;\n    setName: string;\n    format: string;\n    minPrice: string;\n    maxPrice: string;\n    finish: string;\n    colorsArray: string[];\n    colorSpecificity: string;\n    typeLine: string;\n    frame: string;\n    sortByDirection: number;\n    sortBy: string;\n}\n\nexport const initialFilters: FormValues = {\n    title: '',\n    setName: '',\n    format: '',\n    minPrice: '',\n    maxPrice: '',\n    finish: '',\n    sortBy: 'price',\n    colorsArray: [],\n    sortByDirection: -1,\n    colorSpecificity: '',\n    typeLine: '',\n    frame: '',\n};\n\n// No validations needed for now\nconst validate = () => {\n    return {};\n};\n\ninterface Props {\n    doSubmit: (v: FormValues, page: number) => Promise<void>;\n}\n\nconst FormContainer = withStyles(({ spacing }) => ({\n    root: {\n        padding: spacing(2),\n    },\n}))(Paper);\n\nconst BrowseInventoryForm: FC<Props> = ({ doSubmit }) => {\n    const [editionDropdownOptions, setEditionDropdownOptions] = useState<\n        DropdownOption[]\n    >([]);\n\n    const onSubmit = async (\n        values: FormValues,\n        {}: FormikHelpers<FormValues>\n    ) => {\n        try {\n            await doSubmit(\n                values,\n                // Always start at page 1 after filtering\n                1\n            );\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    useEffect(() => {\n        (async () => {\n            const names = await setNameQuery();\n\n            const setNameOptions = names.map((name, idx) => ({\n                key: `set${idx}`,\n                value: name,\n                text: name,\n            }));\n\n            const concatWithBlankOption = [\n                { key: 'snull', value: '', text: 'None' },\n                ...setNameOptions,\n            ];\n\n            setEditionDropdownOptions(concatWithBlankOption);\n        })();\n    }, []);\n\n    const { handleChange, setFieldValue, handleSubmit, values } = useFormik({\n        initialValues: initialFilters,\n        validate,\n        onSubmit,\n    });\n\n    return (\n        <FormContainer variant=\"outlined\">\n            <SectionText>Filters</SectionText>\n            <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                    <ControlledSearchBar\n                        value={values.title}\n                        onChange={(v) => setFieldValue('title', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"format\"\n                        label=\"Format\"\n                        options={formatDropdownOptions}\n                        value={values.format}\n                        onChange={(v) => setFieldValue('format', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"setName\"\n                        label=\"Edition\"\n                        options={editionDropdownOptions}\n                        value={values.setName}\n                        onChange={(v) => setFieldValue('setName', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"finish\"\n                        label=\"Finish\"\n                        options={finishDropdownOptions}\n                        value={values.finish}\n                        onChange={(v) => setFieldValue('finish', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledMultiSelect\n                        name=\"colorsArray\"\n                        label=\"Colors\"\n                        options={sortByColorDropdownOptions}\n                        value={values.colorsArray}\n                        onChange={(v) => setFieldValue('colorsArray', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"colorSpecificity\"\n                        label=\"Color specificity\"\n                        options={colorSpecificityDropdownOptions}\n                        value={values.colorSpecificity}\n                        onChange={(v) => setFieldValue('colorSpecificity', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"typeLine\"\n                        label=\"Type Line\"\n                        options={typeLineOptions}\n                        value={values.typeLine}\n                        onChange={(v) => setFieldValue('typeLine', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"frame\"\n                        label=\"Frame Effects\"\n                        options={frameOptions}\n                        value={values.frame}\n                        onChange={(v) => setFieldValue('frame', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <FormControl fullWidth>\n                        <TextField\n                            label=\"Minimum price\"\n                            variant=\"outlined\"\n                            size=\"small\"\n                            placeholder=\"Enter a price\"\n                            name=\"minPrice\"\n                            type=\"number\"\n                            onChange={handleChange}\n                        />\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <FormControl fullWidth>\n                        <TextField\n                            label=\"Maximum price\"\n                            variant=\"outlined\"\n                            size=\"small\"\n                            placeholder=\"Enter a price\"\n                            name=\"maxPrice\"\n                            type=\"number\"\n                            onChange={handleChange}\n                        />\n                    </FormControl>\n                </Grid>\n            </Grid>\n            <br />\n            <SectionText>{'Sort & Order'}</SectionText>\n            <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"sortBy\"\n                        label=\"Sort by\"\n                        options={sortByDropdownOptions}\n                        value={values.sortBy}\n                        onChange={(v) => setFieldValue('sortBy', v)}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <ControlledDropdown\n                        name=\"sortByDirection\"\n                        label=\"Order\"\n                        options={sortByDirectionDropdownOptions}\n                        value={values.sortByDirection.toString()}\n                        onChange={(v) => setFieldValue('sortByDirection', v)}\n                    />\n                </Grid>\n            </Grid>\n            <br />\n            <Button type=\"submit\" onClick={() => handleSubmit()} primary>\n                Submit\n            </Button>\n        </FormContainer>\n    );\n};\n\nexport default BrowseInventoryForm;\n","export type Price = number | string | null;\n\nexport function price(val: Price) {\n    if (val === null) return '$0.00';\n    let price: number = typeof val === 'string' ? Number(val) : val;\n    if (isNaN(price)) return '$0.00';\n    return `$${price.toFixed(2)}`;\n}\n","import React, { FC } from 'react';\nimport { Price, price } from '../utils/price';\n\ninterface Props {\n    num: Price;\n}\n\nexport function getPrice(val: Price) {\n    if (val === null) return '$0.00';\n    let price: number = typeof val === 'string' ? Number(val) : val;\n    if (isNaN(price)) return '$0.00';\n    return `$${price.toFixed(2)}`;\n}\n\nconst DisplayPrice: FC<Props> = ({ num }) => <span>{price(num)}</span>;\n\nexport default DisplayPrice;\n","import { sortBy } from 'lodash';\nimport React, { createContext, FC, useContext, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { useToastContext } from '../ui/ToastContext';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport cardSearchQuery from './cardSearchQuery';\nimport receivingQuery from './receivingQuery';\n\ninterface Props {}\n\nexport enum Trade {\n    Cash = 'CASH',\n    Credit = 'CREDIT',\n}\n\n// Customers can only receive cash or credit for their assets\nconst TRADE_TYPES = { CASH: Trade.Cash, CREDIT: Trade.Credit };\n\nexport type ReceivingCard = ScryfallCard & {\n    uuid_key: string;\n    finishCondition: string;\n    cashPrice: number | null;\n    marketPrice: number | null;\n    creditPrice: number | null;\n    tradeType: Trade;\n};\n\ninterface Context {\n    searchResults: ScryfallCard[];\n    receivingList: ReceivingCard[];\n    handleSearchSelect: (term: string) => void;\n    addToList: (\n        quantity: number,\n        card: ScryfallCard,\n        meta: AddToListMeta\n    ) => void;\n    removeFromList: (card: ReceivingCard) => void;\n    activeTradeType: (card: ReceivingCard, tradeType: Trade) => void;\n    selectAll: (trade: Trade) => void;\n    commitToInventory: (\n        customerName: string,\n        customerContact: string | null\n    ) => void;\n    resetSearchResults: () => void;\n}\n\nconst defaultContext: Context = {\n    searchResults: [],\n    receivingList: [],\n    handleSearchSelect: () => null,\n    addToList: () => null,\n    removeFromList: () => null,\n    activeTradeType: () => null,\n    selectAll: () => null,\n    commitToInventory: () => null,\n    resetSearchResults: () => null,\n};\n\ninterface AddToListMeta {\n    cashPrice: number | null;\n    marketPrice: number | null;\n    creditPrice: number | null;\n    finishCondition: string;\n}\n\nconst ReceivingContext = createContext<Context>(defaultContext);\n\nconst ReceivingProvider: FC<Props> = ({ children }) => {\n    const createToast = useToastContext();\n    const [searchResults, setSearchResults] = useState<ScryfallCard[]>([]);\n    const [receivingList, setReceivingList] = useState<ReceivingCard[]>([]);\n\n    const handleSearchSelect = async (term: string) => {\n        const cards = await cardSearchQuery({\n            cardName: term,\n            inStockOnly: false,\n        });\n\n        setSearchResults(cards);\n    };\n\n    /**\n     * Adds a card to the receiving list, with a unique uuid\n     */\n    const addToList = (\n        quantity: number,\n        card: ScryfallCard,\n        { cashPrice, marketPrice, creditPrice, finishCondition }: AddToListMeta\n    ) => {\n        const previousState = [...receivingList];\n\n        // Each line-item represents one card\n        const cardsToAdd: ReceivingCard[] = [...new Array(quantity)].map(() => {\n            const newCard: ReceivingCard = {\n                ...card,\n                cashPrice,\n                marketPrice,\n                creditPrice,\n                finishCondition,\n                // Set to cash if customer doesn't want credit\n                tradeType: creditPrice === 0 ? Trade.Cash : Trade.Credit,\n                uuid_key: uuid(),\n            };\n\n            return newCard;\n        });\n\n        setReceivingList(sortBy([...previousState, ...cardsToAdd], 'name'));\n    };\n\n    /**\n     * Removes a card from the receiving list using the uuid\n     */\n    const removeFromList = (card: ReceivingCard) => {\n        setReceivingList(\n            [...receivingList].filter((e) => e.uuid_key !== card.uuid_key)\n        );\n    };\n\n    /**\n     * Determines whether line-items use cash or credit.\n     * Assigns a new trade type.\n     */\n    const activeTradeType = (currentCard: ReceivingCard, tradeType: Trade) => {\n        setReceivingList(\n            [...receivingList].map((card) => {\n                if (card.uuid_key === currentCard.uuid_key) {\n                    card.tradeType = TRADE_TYPES[tradeType];\n                }\n                return card;\n            })\n        );\n    };\n\n    /**\n     * Sets all items to a tradeType, if possible\n     */\n    const selectAll = (selectType: Trade) => {\n        const { CASH, CREDIT } = TRADE_TYPES;\n\n        const newState = [...receivingList].map((card) => {\n            if (\n                selectType === CASH &&\n                card.cashPrice !== null &&\n                card.cashPrice > 0\n            )\n                card.tradeType = selectType;\n            else if (\n                selectType === CREDIT &&\n                card.creditPrice !== null &&\n                card.creditPrice > 0\n            )\n                card.tradeType = selectType;\n\n            return card;\n        });\n\n        setReceivingList(newState);\n    };\n\n    /**\n     * Persists all passed cards to inventory\n     */\n    const commitToInventory = async (\n        customerName: string,\n        customerContact: string | null\n    ) => {\n        try {\n            const cardsToCommit = receivingList.map((card) => ({\n                quantity: 1, // Only committing one per line-item\n                id: card.id,\n                name: card.name,\n                set_name: card.set_name,\n                finishCondition: card.finishCondition,\n                set: card.set,\n                creditPrice: card.creditPrice,\n                cashPrice: card.cashPrice,\n                marketPrice: card.marketPrice,\n                tradeType: card.tradeType,\n            }));\n\n            await receivingQuery({\n                cards: cardsToCommit,\n                customerName,\n                customerContact,\n            });\n\n            setSearchResults([]);\n            setReceivingList([]);\n\n            createToast({\n                severity: 'success',\n                message: `${receivingList.length} cards were added to inventory!`,\n            });\n        } catch (e) {\n            console.log(e);\n            createToast({\n                severity: 'error',\n                message: 'Error receiving cards',\n            });\n        }\n    };\n\n    const resetSearchResults = () => setSearchResults([]);\n\n    return (\n        <ReceivingContext.Provider\n            value={{\n                searchResults,\n                receivingList,\n                handleSearchSelect,\n                addToList,\n                removeFromList,\n                activeTradeType,\n                selectAll,\n                commitToInventory,\n                resetSearchResults,\n            }}\n        >\n            {children}\n        </ReceivingContext.Provider>\n    );\n};\n\nexport const useReceivingContext = () => useContext(ReceivingContext);\nexport default ReceivingProvider;\n","import { makeStyles, Tooltip } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { FC } from 'react';\n\ninterface Props {\n    cardImage: string;\n}\n\nconst useStyles = makeStyles({\n    transparentBackground: {\n        backgroundColor: 'transparent',\n    },\n    borderRounded: {\n        borderRadius: '7px 7px 7px 7px',\n    },\n    imageSize: {\n        width: 155,\n        height: 'auto',\n    },\n});\n\nconst CardImageTooltip: FC<Props> = ({ cardImage, children }) => {\n    const { transparentBackground, borderRounded, imageSize } = useStyles();\n\n    return (\n        <Tooltip\n            placement=\"bottom-start\"\n            title={\n                <img\n                    className={clsx(borderRounded, imageSize)}\n                    src={cardImage}\n                />\n            }\n            classes={{\n                tooltip: transparentBackground,\n            }}\n        >\n            <span>{children}</span>\n        </Tooltip>\n    );\n};\n\nexport default CardImageTooltip;\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\n\ninterface Props {\n    set: string;\n    rarity?: string;\n}\n\nconst StyledIcon = styled('i')({\n    fontSize: '20px',\n});\n\nconst SetIcon: FC<Props> = ({ set, rarity }) => {\n    const rarityClass = rarity ? `ss-${rarity}` : '';\n    return <StyledIcon className={`ss ss-fw ss-${set} ${rarityClass}`} />;\n};\n\nexport default SetIcon;\n","import { TableCell, TableRow } from '@material-ui/core';\nimport StarIcon from '@material-ui/icons/Star';\nimport React, { FC } from 'react';\nimport Price from '../common/Price';\nimport CardImageTooltip from '../ui/CardImageTooltip';\nimport SetIcon from '../ui/SetIcon';\nimport { Condition, Finish } from '../utils/ScryfallCard';\nimport { ResponseCard } from './filteredCardsQuery';\n\nconst conditionMap: Record<Condition, string> = {\n    NM: 'Near Mint',\n    LP: 'Light Play',\n    MP: 'Moderate Play',\n    HP: 'Heavy Play',\n};\n\ninterface Props {\n    card: ResponseCard;\n}\n\nconst BrowseInventoryRow: FC<Props> = ({\n    card: {\n        finishCondition,\n        quantityInStock,\n        name,\n        set_name,\n        price,\n        set,\n        rarity,\n        image_uri,\n    },\n}) => {\n    const finish = finishCondition.split('_')[0] as Finish;\n    const condition = finishCondition.split('_')[1] as Condition;\n\n    return (\n        <TableRow>\n            <TableCell>\n                <CardImageTooltip cardImage={image_uri}>\n                    <span style={{ cursor: 'help' }}>{name} </span>\n                </CardImageTooltip>\n                {finish === 'FOIL' && (\n                    // TODO: Pull out this inline styling into a custom component\n                    <StarIcon\n                        fontSize=\"small\"\n                        color=\"primary\"\n                        style={{ verticalAlign: 'middle' }}\n                    />\n                )}\n            </TableCell>\n            <TableCell>\n                <SetIcon set={set} rarity={rarity} />\n                {set_name}\n            </TableCell>\n            <TableCell>{conditionMap[condition]}</TableCell>\n            <TableCell>{quantityInStock}</TableCell>\n            <TableCell>\n                <Price num={price} />\n            </TableCell>\n        </TableRow>\n    );\n};\n\nexport default BrowseInventoryRow;\n","import http from '../common/http';\nimport { GET_CARDS_BY_FILTER } from '../utils/endpoints';\nimport { FinishCondition } from '../utils/ScryfallCard';\n\nexport interface Filters {\n    title?: string;\n    setName?: string;\n    format?: string;\n    minPrice?: number;\n    maxPrice?: number;\n    finish?: string;\n    colors?: string;\n    colorSpecificity?: string;\n    type?: string;\n    frame?: string;\n    sortByDirection: number;\n    sortBy: string;\n}\n\ntype Params = Filters & { page: number };\n\nexport interface ResponseCard {\n    _id: string;\n    image_uri: string;\n    name: string;\n    price: number;\n    rarity: string;\n    set: string;\n    set_name: string;\n    finishCondition: FinishCondition;\n    quantityInStock: number;\n}\n\ninterface ResponseData {\n    cards: ResponseCard[];\n    total: number;\n}\n\nconst filteredCardsQuery = async (filters: Filters, page: number) => {\n    const params: Params = { ...filters, page };\n\n    const { data } = await http.get<ResponseData>(GET_CARDS_BY_FILTER, {\n        params,\n    });\n\n    return data;\n};\n\nexport default filteredCardsQuery;\n","import {\n    Box,\n    CircularProgress,\n    Container,\n    Modal,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Typography,\n    withStyles,\n} from '@material-ui/core';\nimport ReportProblemIcon from '@material-ui/icons/ReportProblem';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Pagination from '@material-ui/lab/Pagination';\nimport React, { FC, useState } from 'react';\nimport Placeholder from '../ui/Placeholder';\nimport BrowseInventoryForm, {\n    FormValues,\n    initialFilters,\n} from './BrowseInventoryForm';\nimport BrowseInventoryRow from './BrowseInventoryRow';\nimport filteredCardsQuery, {\n    Filters,\n    ResponseCard,\n} from './filteredCardsQuery';\n\nconst LIMIT = 100; // Matching the backend for now\n\nexport const InvertedLoader = withStyles(({ palette }) => ({\n    root: {\n        color: palette.common.white,\n    },\n}))(CircularProgress);\n\ninterface State {\n    cards: ResponseCard[];\n    count: number;\n    currentPage: number;\n    numPages: number;\n    isLoading: boolean;\n    cachedFilters: FormValues;\n    searchTouched: boolean;\n}\n\nconst BrowseInventory: FC = () => {\n    const [state, setState] = useState<State>({\n        cards: [],\n        count: 0,\n        currentPage: 0,\n        numPages: 0,\n        isLoading: false,\n        cachedFilters: initialFilters,\n        searchTouched: false, // Tracks whether the user has initially searched for the 'no results' message\n    });\n\n    const fetchData = async (filters: FormValues, page: number) => {\n        try {\n            setState({ ...state, isLoading: true });\n\n            // Translates form types to the necessary types the query requires\n            const queryFilters: Filters = {\n                title: filters.title || undefined,\n                setName: filters.setName || undefined,\n                format: filters.format || undefined,\n                minPrice: filters.minPrice\n                    ? Number(filters.minPrice)\n                    : undefined,\n                maxPrice: filters.maxPrice\n                    ? Number(filters.maxPrice)\n                    : undefined,\n                finish: filters.finish || undefined,\n                colors:\n                    filters.colorsArray.length > 0\n                        ? filters.colorsArray\n                              .map((c) => {\n                                  const colorsMap: Record<string, string> = {\n                                      White: 'W',\n                                      Blue: 'U',\n                                      Black: 'B',\n                                      Red: 'R',\n                                      Green: 'G',\n                                  };\n\n                                  return colorsMap[c];\n                              })\n                              .sort()\n                              .join('')\n                        : undefined,\n                colorSpecificity: filters.colorSpecificity || undefined,\n                type: filters.typeLine || undefined,\n                frame: filters.frame || undefined,\n                sortByDirection: filters.sortByDirection,\n                sortBy: filters.sortBy,\n            };\n\n            const { cards, total } = await filteredCardsQuery(\n                queryFilters,\n                page\n            );\n\n            const numPages = Math.ceil(total / LIMIT);\n\n            setState({\n                ...state,\n                cards: cards,\n                count: total,\n                isLoading: false,\n                numPages: numPages,\n                currentPage: page,\n                searchTouched: true,\n                // Set the filters for pagination requests later\n                cachedFilters: filters,\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const {\n        cards,\n        isLoading,\n        currentPage,\n        numPages,\n        count,\n        cachedFilters,\n    } = state;\n\n    return (\n        <Container>\n            <Modal open={isLoading}>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                    height={1}\n                >\n                    <InvertedLoader />\n                </Box>\n            </Modal>\n            <Box pb={2}>\n                <Typography>\n                    <ReportProblemIcon\n                        fontSize=\"small\"\n                        color=\"primary\"\n                        style={{ verticalAlign: 'middle' }}\n                    />\n                    Prices from this table are updated weekly and are subject to\n                    fluctuations. Consult 'New Sale' or 'Manage Inventory' for\n                    up-to-date values\n                </Typography>\n            </Box>\n            <BrowseInventoryForm doSubmit={fetchData} />\n            <br />\n            {!!cards.length && (\n                <TableContainer component={Paper} variant=\"outlined\">\n                    <Box p={2} display=\"flex\" justifyContent=\"space-between\">\n                        <Pagination\n                            count={numPages}\n                            page={currentPage}\n                            onChange={(_, page) =>\n                                fetchData(cachedFilters, page)\n                            }\n                            color=\"primary\"\n                        />\n                        <Typography>Total results: {count}</Typography>\n                    </Box>\n                    <Table size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Name</TableCell>\n                                <TableCell>Edition</TableCell>\n                                <TableCell>Condition</TableCell>\n                                <TableCell>Quantity</TableCell>\n                                <TableCell>Estimated Price</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {cards.map((card) => (\n                                <BrowseInventoryRow\n                                    key={`${card._id}-${card.finishCondition}`}\n                                    card={card}\n                                />\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            )}\n            {!cards.length && (\n                <Placeholder icon={<SearchIcon style={{ fontSize: 80 }} />}>\n                    {state.searchTouched\n                        ? 'No results found'\n                        : 'Use the filters to browse inventory'}\n                </Placeholder>\n            )}\n        </Container>\n    );\n};\n\nexport default BrowseInventory;\n","import { Box, CircularProgress } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nconst Loading: FC = () => {\n    return (\n        <Box display=\"flex\" justifyContent=\"center\" width={1} py={3}>\n            <CircularProgress />\n        </Box>\n    );\n};\n\nexport default Loading;\n","import { FormControl, TextField } from '@material-ui/core';\nimport { ChangeEvent, FC } from 'react';\n\ninterface FormikNativeDatePickerProps {\n    label: string;\n    name: string;\n    defaultValue: string;\n    handleChange: (e: ChangeEvent) => void;\n    min?: string;\n    max?: string;\n}\n\nexport const FormikNativeDatePicker: FC<FormikNativeDatePickerProps> = ({\n    label,\n    name,\n    defaultValue,\n    handleChange,\n    min,\n    max,\n}) => {\n    return (\n        <FormControl fullWidth>\n            <TextField\n                id={name}\n                label={label}\n                name={name}\n                size=\"small\"\n                variant=\"outlined\"\n                type=\"date\"\n                onChange={handleChange}\n                defaultValue={defaultValue}\n                InputProps={{\n                    inputProps: {\n                        min,\n                        max,\n                    },\n                }}\n            />\n        </FormControl>\n    );\n};\n\nexport default FormikNativeDatePicker;\n","import {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Grid,\n} from '@material-ui/core';\nimport { useFormik } from 'formik';\nimport React, { FC, useState } from 'react';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport FormikNativeDatePicker from '../ui/FormikNativeDatePicker';\n\nexport interface FormValues {\n    cardName: string;\n    startDate: string;\n    endDate: string;\n}\n\ninterface Props {\n    onSubmit: (v: FormValues) => void;\n    filters: FormValues;\n}\n\n// No validations needed for now\nconst validate = () => {\n    return {};\n};\n\nconst BrowseReceivingFilterDialog: FC<Props> = ({ onSubmit, filters }) => {\n    const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n\n    const onDialogOpen = () => setDialogOpen(true);\n    const onDialogClose = () => setDialogOpen(false);\n\n    const { handleChange, values, setFieldValue, handleSubmit } = useFormik({\n        initialValues: filters,\n        validate,\n        onSubmit: async (v: FormValues) => {\n            await onSubmit(v);\n            onDialogClose();\n        },\n        /**\n         * Formik will not update `initialValues` from externally-controlled sources (ie. props) if changed,\n         * even if the component is unmounted. We have to flip this switch to initialize with updated prop values\n         */\n        enableReinitialize: true,\n    });\n\n    return (\n        <>\n            <Button\n                disableElevation\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={onDialogOpen}\n            >\n                Filter\n            </Button>\n            {dialogOpen && (\n                <Dialog open onClose={onDialogClose} maxWidth=\"sm\" fullWidth>\n                    <DialogTitle>Receiving search</DialogTitle>\n                    <DialogContent>\n                        <form>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12}>\n                                    <ControlledSearchBar\n                                        value={values.cardName}\n                                        onChange={(v) =>\n                                            setFieldValue('cardName', v)\n                                        }\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <FormikNativeDatePicker\n                                        label=\"Start date\"\n                                        name=\"startDate\"\n                                        defaultValue={filters.startDate}\n                                        handleChange={handleChange}\n                                        max={values.endDate}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <FormikNativeDatePicker\n                                        label=\"End date\"\n                                        name=\"endDate\"\n                                        defaultValue={filters.endDate}\n                                        handleChange={handleChange}\n                                        max={filters.endDate}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </form>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button variant=\"outlined\" onClick={onDialogClose}>\n                            Cancel\n                        </Button>\n                        <Button\n                            disableElevation\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => handleSubmit()}\n                        >\n                            Search\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            )}\n        </>\n    );\n};\n\nexport default BrowseReceivingFilterDialog;\n","import { Chip as MUIChip, ChipProps, makeStyles } from '@material-ui/core';\nimport clsx from 'clsx';\nimport React, { FC } from 'react';\n\ntype Props = ChipProps & { foil?: boolean };\n\nconst useStyles = makeStyles({\n    foilContainer: {\n        backgroundColor: '#ffcfdf !important',\n        backgroundImage:\n            'linear-gradient(90deg, #ffcfdf 0%, #b0f3f1 74%) !important',\n    },\n    border: {\n        borderRadius: 5,\n    },\n});\n\nconst Chip: FC<Props> = ({ foil, ...props }) => {\n    const { foilContainer, border } = useStyles();\n\n    if (foil) {\n        return <MUIChip {...props} className={clsx(foilContainer, border)} />;\n    }\n\n    return <MUIChip {...props} className={border} />;\n};\n\nexport default Chip;\n","import { Snackbar } from '@material-ui/core';\nimport { Alert, AlertProps } from '@material-ui/lab';\nimport React, { createContext, FC, useContext, useState } from 'react';\n\ntype Severity = AlertProps['severity'];\n\ninterface ToastArgs {\n    severity: Severity;\n    message: string;\n}\n\ninterface IToastContext {\n    createToast: ({ severity, message }: ToastArgs) => void;\n}\n\nconst ToastContext = createContext<IToastContext>({\n    createToast: () => null,\n});\n\nconst ToastProvider: FC = ({ children }) => {\n    const [open, setOpen] = useState<boolean>(false);\n    const [severity, setSeverity] = useState<Severity>('success');\n    const [message, setMessage] = useState<string>('');\n    const handleClose = () => setOpen(false);\n\n    const createToast = ({ severity, message }: ToastArgs) => {\n        setSeverity(severity);\n        setMessage(message);\n        setOpen(true);\n    };\n\n    return (\n        <ToastContext.Provider value={{ createToast }}>\n            <Snackbar\n                open={open}\n                autoHideDuration={3000}\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                onClose={handleClose}\n            >\n                <Alert severity={severity}>{message}</Alert>\n            </Snackbar>\n            {children}\n        </ToastContext.Provider>\n    );\n};\n\nexport const useToastContext = () => {\n    const { createToast } = useContext(ToastContext);\n    return createToast;\n};\n\nexport default ToastProvider;\n","import { ScryfallCard } from './ScryfallCard';\n\ntype Card = Pick<\n    ScryfallCard,\n    | 'name'\n    | 'frame_effects'\n    | 'border_color'\n    | 'lang'\n    | 'set'\n    | 'foil'\n    | 'nonfoil'\n    | 'promo_types'\n>;\n\n/** Computes the proper displayName for a card, depending on its properties */\nconst createDisplayName = (card: Card) => {\n    const {\n        name,\n        frame_effects,\n        border_color,\n        lang,\n        set,\n        foil,\n        nonfoil,\n        promo_types,\n    } = card;\n\n    let displayName: string = name;\n\n    // Covers strixhaven etched foil mystical archive cards\n    if (set === 'sta' && foil === true && nonfoil === false) {\n        displayName += ` (Etched foil)`;\n    } else if (promo_types.includes('godzillaseries')) {\n        // Covers cards like Godzilla series\n        displayName += ` (IP series)`;\n    } else if (frame_effects.includes('showcase')) {\n        // Covers showcase cards like comic-art Illuna, Apex of Wishes\n        displayName += ` (Showcase)`;\n    } else if (frame_effects.length === 0 && border_color === 'borderless') {\n        // Covers cards like comic-art Vivien, Monsters' Advocate\n        displayName += ` (Borderless)`;\n    } else if (frame_effects.includes('extendedart')) {\n        // Covers cards with extended left and roght border art\n        displayName += ` (Extended art)`;\n    }\n\n    if (lang !== 'en') displayName += ` (${lang.toUpperCase()})`;\n\n    return displayName;\n};\n\nexport default createDisplayName;\n","import { ScryfallCard } from './ScryfallCard';\n\nconst getCardImage = (card: ScryfallCard) => {\n    let myImage: string;\n\n    try {\n        // If normal prop doesn't exist, move to catch block for flip card faces\n        myImage = card.image_uris.normal;\n    } catch (e) {\n        myImage = card.card_faces[0].image_uris.normal;\n    }\n\n    return myImage;\n};\nexport default getCardImage;\n","import createDisplayName from './createDisplayName';\nimport getCardImage from './getCardImage';\n\n// Language codes from Scryfall. See https://scryfall.com/docs/api/languages for reference.\nexport type LanguageCode =\n    | 'en'\n    | 'es'\n    | 'fr'\n    | 'de'\n    | 'it'\n    | 'pt'\n    | 'ja'\n    | 'ko'\n    | 'ru'\n    | 'zhs'\n    | 'zht'\n    | 'he'\n    | 'la'\n    | 'grc'\n    | 'ar'\n    | 'sa'\n    | 'px';\n\nexport type Finish = 'FOIL' | 'NONFOIL';\n\nexport type Condition = 'NM' | 'LP' | 'MP' | 'HP';\n\nexport type FinishCondition = `${Finish}_${Condition}`\n\nexport type QOH = Partial<{\n    FOIL_NM: number;\n    FOIL_LP: number;\n    FOIL_MP: number;\n    FOIL_HP: number;\n    NONFOIL_NM: number;\n    NONFOIL_LP: number;\n    NONFOIL_MP: number;\n    NONFOIL_HP: number;\n}>;\n\nexport interface ImageURIs {\n    normal: string;\n}\n\nexport interface CardFace {\n    colors: string[];\n    type_line: string;\n    color_identity: string[];\n    image_uris: ImageURIs;\n}\n\nexport interface ScryfallApiCard {\n    id: string;\n    name: string;\n    printed_name?: string;\n    set: string;\n    set_name: string;\n    rarity: string;\n    image_uris: ImageURIs;\n    card_faces?: CardFace[];\n    nonfoil: boolean;\n    foil: boolean;\n    colors: string[];\n    type_line: string;\n    frame_effects?: string[];\n    lang: LanguageCode;\n    border_color: string;\n    display_name?: string;\n    cardImage?: string;\n    color_identity: string[];\n    qoh?: QOH;\n    quantity?: number;\n    qtyToSell?: number;\n    finishCondition?: string;\n    price?: number;\n    promo_types?: string[];\n    tcgplayer_id?: number;\n}\n\n/**\n * TODO: We should return this from the API. The backend should control this data shape\n *\n * This class wraps the Scryfall API request data and models it to something we can control.\n * Also acts as a safeguard for any future updates to Scryfall's API data model and makes\n * the code easier to maintain and debug.\n */\nexport class ScryfallCard {\n    public id: string;\n    public name: string;\n    public printed_name: string | null;\n    public set: string;\n    public set_name: string;\n    public rarity: string;\n    public image_uris: { normal: string };\n    public card_faces: CardFace[];\n    public nonfoil: boolean;\n    public foil: boolean;\n    public colors: string[];\n    public type_line: string;\n    public frame_effects: string[];\n    public lang: LanguageCode;\n    public border_color: string;\n    public display_name: string;\n    public cardImage: string;\n    public color_identity: string[];\n    public promo_types: string[];\n    public tcgplayer_id: number | null;\n    public qoh: QOH;\n\n    public constructor(card: ScryfallApiCard) {\n        this.id = card.id;\n        this.name = card.name;\n        this.printed_name = card.printed_name || null;\n        this.set = card.set;\n        this.set_name = card.set_name;\n        this.rarity = card.rarity;\n        this.image_uris = card.image_uris || null;\n        this.card_faces = card.card_faces || [];\n        this.nonfoil = card.nonfoil;\n        this.foil = card.foil;\n        this.colors = card.colors;\n        this.type_line = card.type_line;\n        this.frame_effects = card.frame_effects || [];\n        this.lang = card.lang;\n        this.border_color = card.border_color;\n        this.color_identity = card.color_identity || null;\n        this.promo_types = card.promo_types || [];\n        this.cardImage = getCardImage(this);\n        this.display_name = createDisplayName(this);\n        this.tcgplayer_id = card.tcgplayer_id || null;\n        this.qoh = card.qoh ? card.qoh : {};\n    }\n}\n","import http from '../common/http';\nimport { GET_CARDS_WITH_INFO } from '../utils/endpoints';\nimport { ScryfallApiCard, ScryfallCard } from '../utils/ScryfallCard';\n\ninterface Params {\n    cardName: string;\n    inStockOnly: boolean;\n}\n\n/**\n * Fetches cards from the DB by title when a user selects a title after querying.\n * This function merges the data (inventory quantity and card objects) from two endpoints into one array.\n */\nconst cardSearchQuery = async ({ cardName, inStockOnly }: Params) => {\n    try {\n        const { data } = await http.get<ScryfallApiCard[]>(\n            GET_CARDS_WITH_INFO,\n            {\n                params: {\n                    title: cardName,\n                    matchInStock: inStockOnly,\n                },\n            }\n        );\n\n        return data.map((d) => new ScryfallCard(d));\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default cardSearchQuery;\n","import http from '../common/http';\nimport { RECEIVE_CARDS } from '../utils/endpoints';\nimport { Trade } from './ReceivingContext';\n\ninterface ReceivingQueryCard {\n    quantity: number;\n    finishCondition: string;\n    id: string;\n    name: string;\n    set_name: string;\n    set: string;\n    marketPrice: number | null;\n    cashPrice: number | null;\n    creditPrice: number | null;\n    tradeType: Trade;\n}\n\ninterface Payload {\n    cards: ReceivingQueryCard[];\n    customerName: string;\n    customerContact: string | null;\n}\n\nconst receivingQuery = async ({\n    cards,\n    customerName,\n    customerContact,\n}: Payload) => {\n    try {\n        // We do not expect to use the return type, so we designate it `void`\n        const { data } = await http.post<void>(RECEIVE_CARDS, {\n            cards,\n            customerName,\n            customerContact,\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default receivingQuery;\n","import { makeStyles } from '@material-ui/core';\nimport React, { FC } from 'react';\n\nconst useStyles = makeStyles({\n    meta: {\n        '& > *:not(:last-of-type):after': {\n            content: '\" • \"',\n        },\n    },\n});\n\nconst MetaData: FC = ({ children }) => {\n    const { meta } = useStyles();\n    return <span className={meta}>{children}</span>;\n};\n\nexport default MetaData;\n","/**\n * Used for old entities did not have certain fields\n */\nconst displayEmpty = (str: string | null): string => {\n    return str ? str : '—';\n};\n\nexport default displayEmpty;\n","import moment from 'moment';\n\nfunction formatDate(date: string) {\n    return moment(date).format('MM/DD/YYYY - h:mm A');\n}\n\nexport default formatDate;\n","export default function pluralize(quantity: number, word: string) {\n    return `${word}${quantity === 1 ? '' : 's'}`;\n}\n","import { QOH } from '../utils/ScryfallCard';\n\ntype FinishConditionLabels = Record<keyof QOH, string>;\n\nconst displayFinishCondition = (finishCondition: keyof QOH) => {\n    const finishConditionLabels: FinishConditionLabels = {\n        FOIL_NM: 'Foil (NM)',\n        FOIL_LP: 'Foil (LP)',\n        FOIL_MP: 'Foil (MP)',\n        FOIL_HP: 'Foil (HP)',\n        NONFOIL_NM: 'Nonfoil (NM)',\n        NONFOIL_LP: 'Nonfoil (LP)',\n        NONFOIL_MP: 'Nonfoil (MP)',\n        NONFOIL_HP: 'Nonfoil (HP)',\n    };\n\n    return finishConditionLabels[finishCondition];\n};\n\nexport default displayFinishCondition;\n","import http from '../common/http';\nimport { ClubhouseLocation } from '../context/AuthProvider';\nimport { Trade } from '../context/ReceivingContext';\nimport { RECEIVING } from '../utils/endpoints';\nimport { FinishCondition, ScryfallApiCard } from '../utils/ScryfallCard';\n\ninterface ReceivedUser {\n    _id: string;\n    lightspeedEmployeeNumber: number;\n    locations: ClubhouseLocation[];\n    username: string;\n}\n\n/**\n * Individual receiving entities contain bulk card information\n * so users can view images, frames, etc.\n */\nexport interface ReceivedCard {\n    quantity: number;\n    marketPrice: number;\n    cashPrice: number;\n    creditPrice: number;\n    tradeType: Trade;\n    finishCondition: FinishCondition;\n    // TODO: this casing difference is mildly irritating...\n    bulk_card_data: ScryfallApiCard;\n}\n\nexport interface Received {\n    _id: string;\n    created_at: string;\n    employee_number: string;\n    received_cards: ReceivedCard[];\n    created_by: ReceivedUser;\n    customer_name: string | null;\n    customer_contact: string | null;\n}\n\nconst receivedByIdQuery = async (receivedId: string) => {\n    const { data } = await http.get<Received>(`${RECEIVING}/${receivedId}`);\n\n    // We still need to convert ScryfallApiCard to ScryfallCard downstream\n    return data;\n};\n\nexport default receivedByIdQuery;\n","import {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    List,\n    ListItem,\n    ListItemText,\n    Typography,\n} from '@material-ui/core';\nimport React, { FC, useEffect, useState } from 'react';\nimport { Trade } from '../context/ReceivingContext';\nimport CardImageTooltip from '../ui/CardImageTooltip';\nimport Loading from '../ui/Loading';\nimport MetaData from '../ui/MetaData';\nimport SetIcon from '../ui/SetIcon';\nimport displayEmpty from '../utils/displayEmpty';\nimport displayFinishCondition from '../utils/finishCondition';\nimport formatDate from '../utils/formatDate';\nimport { price } from '../utils/price';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport receivedByIdQuery, { Received } from './receivedByIdQuery';\n\ninterface Props {\n    receivedId: string;\n    onClose: () => void;\n}\n\nfunction alphaSort<T extends { bulk_card_data: { name: string } }>(arr: T[]) {\n    return [...arr].sort((a, b) =>\n        a.bulk_card_data.name.localeCompare(b.bulk_card_data.name)\n    );\n}\n\nfunction displayTrade(trade: Trade) {\n    if (trade === Trade.Credit) return 'Credit';\n    else if (trade === Trade.Cash) return 'Cash';\n}\n\nconst BrowseReceivingListDialog: FC<Props> = ({ receivedId, onClose }) => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [data, setData] = useState<Received | null>(null);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                setLoading(true);\n                const data = await receivedByIdQuery(receivedId);\n                setData(data);\n                setLoading(false);\n            } catch (err) {\n                console.log(err);\n            }\n        })();\n    }, []);\n\n    if (!data || loading) {\n        return (\n            <Dialog open onClose={onClose} maxWidth=\"md\" fullWidth>\n                <DialogTitle>Received cards</DialogTitle>\n                <DialogContent>\n                    <Loading />\n                </DialogContent>\n            </Dialog>\n        );\n    }\n\n    const {\n        received_cards: receivingList,\n        created_at,\n        created_by,\n        customer_name,\n        customer_contact,\n    } = data;\n\n    return (\n        <Dialog open onClose={onClose} maxWidth=\"md\" fullWidth>\n            <DialogTitle>\n                Received cards\n                <Typography color=\"textSecondary\">\n                    <MetaData>\n                        <span>{formatDate(created_at)}</span>\n                        <span>Received by {created_by.username}</span>\n                        <span>Customer: {displayEmpty(customer_name)}</span>\n                        <span>\n                            Customer contact: {displayEmpty(customer_contact)}\n                        </span>\n                    </MetaData>\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <List>\n                    {alphaSort(receivingList).map((card) => {\n                        const {\n                            finishCondition,\n                            tradeType,\n                            creditPrice,\n                            cashPrice,\n                            marketPrice,\n                        } = card;\n\n                        const modeledCard = new ScryfallCard(\n                            card.bulk_card_data\n                        );\n\n                        const {\n                            name,\n                            cardImage,\n                            set,\n                            set_name,\n                            rarity,\n                        } = modeledCard;\n\n                        return (\n                            <ListItem>\n                                <ListItemText\n                                    primary={\n                                        <>\n                                            <CardImageTooltip\n                                                cardImage={cardImage}\n                                            >\n                                                <span\n                                                    style={{ cursor: 'help' }}\n                                                >\n                                                    {name}{' '}\n                                                </span>\n                                            </CardImageTooltip>\n                                            <SetIcon\n                                                set={set}\n                                                rarity={rarity}\n                                            />\n                                            <span>({set_name})</span>\n                                        </>\n                                    }\n                                    secondary={\n                                        <MetaData>\n                                            <span>\n                                                {displayFinishCondition(\n                                                    finishCondition\n                                                )}\n                                            </span>\n                                            <span>\n                                                {displayTrade(tradeType)}\n                                            </span>\n                                            {tradeType === Trade.Credit && (\n                                                <span>\n                                                    Credit price:{' '}\n                                                    {price(creditPrice)}\n                                                </span>\n                                            )}\n                                            {tradeType === Trade.Cash && (\n                                                <>\n                                                    <span>\n                                                        Cash price:{' '}\n                                                        {price(cashPrice)}\n                                                    </span>\n                                                    <span>\n                                                        Market price:{' '}\n                                                        {price(marketPrice)}\n                                                    </span>\n                                                </>\n                                            )}\n                                        </MetaData>\n                                    }\n                                />\n                            </ListItem>\n                        );\n                    })}\n                </List>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} variant=\"outlined\" color=\"primary\">\n                    Dismiss\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default BrowseReceivingListDialog;\n","import {\n    Card,\n    CardActionArea,\n    CardContent,\n    Grid,\n    Typography,\n} from '@material-ui/core';\nimport { sum } from 'lodash';\nimport React, { FC, useState } from 'react';\nimport Chip from '../common/Chip';\nimport { getPrice } from '../common/Price';\nimport { Trade } from '../context/ReceivingContext';\nimport MetaData from '../ui/MetaData';\nimport displayEmpty from '../utils/displayEmpty';\nimport formatDate from '../utils/formatDate';\nimport pluralize from '../utils/pluralize';\nimport BrowseReceivingListDialog from './BrowseReceivingListDialog';\nimport { Received } from './browseReceivingQuery';\n\ninterface Props {\n    received: Received;\n}\n\nconst BrowseReceivingItem: FC<Props> = ({ received }) => {\n    const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n    const {\n        received_card_list,\n        created_at,\n        created_by,\n        customer_name,\n    } = received;\n\n    const cashPrice = sum(\n        received_card_list\n            .filter((r) => r.tradeType === Trade.Cash)\n            .map((r) => r.cashPrice)\n    );\n\n    const creditPrice = sum(\n        received_card_list\n            .filter((r) => r.tradeType === Trade.Credit)\n            .map((r) => r.creditPrice)\n    );\n\n    return (\n        <>\n            {dialogOpen && (\n                <BrowseReceivingListDialog\n                    receivedId={received._id}\n                    onClose={() => setDialogOpen(false)}\n                />\n            )}\n            <Card variant=\"outlined\">\n                <CardActionArea\n                    disableRipple\n                    onClick={() => setDialogOpen(true)}\n                >\n                    <CardContent>\n                        <Grid\n                            container\n                            spacing={2}\n                            justify=\"space-between\"\n                            alignItems=\"center\"\n                        >\n                            <Grid item>\n                                <Typography variant=\"h6\">\n                                    {`${received_card_list.length} ${pluralize(\n                                        received_card_list.length,\n                                        'card'\n                                    )}`}\n                                </Typography>\n                                <Typography color=\"textSecondary\">\n                                    <MetaData>\n                                        <span>{formatDate(created_at)}</span>\n                                        <span>\n                                            Received by {created_by.username}\n                                        </span>\n                                        <span>\n                                            Customer:{' '}\n                                            {displayEmpty(customer_name)}\n                                        </span>\n                                    </MetaData>\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Chip\n                                    size=\"small\"\n                                    label={`Cash: ${getPrice(cashPrice)}`}\n                                    color={\n                                        cashPrice > 0 ? 'primary' : undefined\n                                    }\n                                />\n                                <Chip\n                                    size=\"small\"\n                                    label={`Credit: ${getPrice(creditPrice)}`}\n                                    color={\n                                        creditPrice > 0 ? 'primary' : undefined\n                                    }\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </CardActionArea>\n            </Card>\n        </>\n    );\n};\n\nexport default BrowseReceivingItem;\n","import http from '../common/http';\nimport { ClubhouseLocation } from '../context/AuthProvider';\nimport { Trade } from '../context/ReceivingContext';\nimport { RECEIVING } from '../utils/endpoints';\nimport { FinishCondition } from '../utils/ScryfallCard';\n\nexport interface ReceivedCard {\n    quantity: number;\n    marketPrice: number;\n    cashPrice: number;\n    creditPrice: number;\n    tradeType: Trade;\n    finishCondition: FinishCondition;\n    id: string;\n    name: string;\n    set_name: string;\n    set: string;\n}\n\ninterface ReceivedUser {\n    _id: string;\n    lightspeedEmployeeNumber: number;\n    locations: ClubhouseLocation[];\n    username: string;\n}\n\nexport interface Received {\n    _id: string;\n    created_at: string;\n    employee_number: string;\n    received_card_list: ReceivedCard[];\n    created_by: ReceivedUser;\n    customer_name: string | null;\n    customer_contact: string | null;\n}\n\ninterface Payload {\n    cardName: string | null;\n    startDate: string | null;\n    endDate: string | null;\n}\n\nconst browseReceivingQuery = async ({\n    cardName,\n    startDate,\n    endDate,\n}: Payload) => {\n    try {\n        const { data } = await http.get<Received[]>(RECEIVING, {\n            params: { cardName, startDate, endDate },\n        });\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default browseReceivingQuery;\n","import { Box, Button, Container, Grid, Typography } from '@material-ui/core';\nimport moment from 'moment';\nimport React, { FC, useEffect, useState } from 'react';\nimport Loading from '../ui/Loading';\nimport Placeholder from '../ui/Placeholder';\nimport { HeaderText, SectionText } from '../ui/Typography';\nimport BrowseReceivingFilterDialog, {\n    FormValues,\n} from './BrowseReceivingFilterDialog';\nimport BrowseReceivingItem from './BrowseReceivingItem';\nimport browseReceivingQuery, { Received } from './browseReceivingQuery';\n\ninterface Filters {\n    cardName: string;\n    startDate: string;\n    endDate: string;\n}\n\nconst initialFilters: Filters = {\n    cardName: '',\n    startDate: moment().subtract(30, 'days').format('YYYY-MM-DD'),\n    endDate: moment().format('YYYY-MM-DD'),\n};\n\nfunction shallowCompare(obj1: Filters, obj2: Filters) {\n    return JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\nconst BrowseReceiving: FC = () => {\n    const [filters, setFilters] = useState<Filters>(initialFilters);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [receivedList, setReceivedList] = useState<Received[]>([]);\n\n    const onSubmit = async (formValues: FormValues) => {\n        /**\n         * If the types of `Filters` changes, we can convert them here\n         * from the submitted form values.\n         */\n        setFilters({ ...filters, ...formValues }); // preserves order when using JSON.stringify to diff\n    };\n\n    const onClearFilters = () => setFilters(initialFilters);\n\n    useEffect(() => {\n        (async () => {\n            const { cardName, startDate, endDate } = filters;\n\n            setLoading(true);\n            const received = await browseReceivingQuery({\n                cardName: cardName ? cardName : null,\n                startDate,\n                endDate,\n            });\n            setLoading(false);\n            setReceivedList(received);\n        })();\n    }, [filters]);\n\n    return (\n        <Container>\n            <Box pb={2}>\n                <HeaderText>Browse Receiving</HeaderText>\n            </Box>\n            <Box>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"space-between\"\n                    alignItems=\"center\"\n                >\n                    <div>\n                        <SectionText>Results</SectionText>\n                        <Typography color=\"textSecondary\">\n                            {`Searching ${\n                                filters.cardName || 'all cards'\n                            } from ${filters.startDate} to ${filters.endDate}`}\n                        </Typography>\n                    </div>\n                    <div>\n                        {!shallowCompare(initialFilters, filters) && (\n                            <Button color=\"primary\" onClick={onClearFilters}>\n                                Clear filters\n                            </Button>\n                        )}\n                        <BrowseReceivingFilterDialog\n                            filters={filters}\n                            onSubmit={onSubmit}\n                        />\n                    </div>\n                </Box>\n            </Box>\n            <Grid container justify=\"space-between\" spacing={2}>\n                <Grid item alignItems=\"center\" md={12} lg={6}></Grid>\n                {loading ? (\n                    <Loading />\n                ) : receivedList.length === 0 ? (\n                    <Grid item xs={12}>\n                        <Placeholder>No results</Placeholder>\n                    </Grid>\n                ) : (\n                    receivedList.map((rl) => (\n                        <Grid item xs={12} key={rl._id}>\n                            <BrowseReceivingItem received={rl} />\n                        </Grid>\n                    ))\n                )}\n            </Grid>\n        </Container>\n    );\n};\n\nexport default BrowseReceiving;\n","/**\n * Sums numbers up\n */\nexport default function sum(nums: number[]): number {\n    return nums.reduce((acc, curr) => acc + curr, 0);\n}\n","import { TableCell, TableRow } from '@material-ui/core';\nimport React, { FC } from 'react';\nimport formatDate from '../utils/formatDate';\nimport sum from '../utils/sum';\nimport { Sale } from './browseSalesQuery';\n\ninterface Props {\n    sale: Sale;\n}\n\nconst BrowseSalesItem: FC<Props> = ({ sale }) => {\n    const { card_list, sale_data } = sale;\n\n    const quantitySold = sum(card_list.map((c) => Number(c.qtyToSell)));\n\n    return (\n        <TableRow>\n            <TableCell>{sale_data.saleID}</TableCell>\n            <TableCell>{formatDate(sale_data.createTime)}</TableCell>\n            <TableCell>{quantitySold}</TableCell>\n        </TableRow>\n    );\n};\n\nexport default BrowseSalesItem;\n","import {\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n} from '@material-ui/core';\nimport React, { FC } from 'react';\nimport BrowseSalesItem from './BrowseSalesItem';\nimport { Sale } from './browseSalesQuery';\n\ninterface Props {\n    list: Sale[];\n}\n\nconst BrowseSalesList: FC<Props> = ({ list }) => {\n    return (\n        <TableContainer component={Paper} variant=\"outlined\">\n            <Table size=\"small\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Sale ID</TableCell>\n                        <TableCell>Date of Sale</TableCell>\n                        <TableCell>Quantity Sold</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {list.map((sale) => (\n                        <BrowseSalesItem sale={sale} />\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nexport default BrowseSalesList;\n","import http from '../common/http';\nimport { SaleListCard } from '../context/SaleContext';\nimport { GET_SALES_BY_TITLE } from '../utils/endpoints';\n\ninterface SaleData {\n    total: string;\n    saleID: string;\n    timeStamp: string;\n    createTime: string;\n}\n\nexport interface Sale {\n    _id: string;\n    sale_data: SaleData;\n    card_list: SaleListCard[];\n}\n\ninterface Payload {\n    cardName: string;\n}\n\nconst browseSalesQuery = async ({ cardName }: Payload) => {\n    try {\n        const { data } = await http.get<Sale[]>(GET_SALES_BY_TITLE, {\n            params: { cardName: cardName },\n        });\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default browseSalesQuery;\n","import { Box, Divider, Grid, Typography } from '@material-ui/core';\nimport React, { FC, useEffect, useState } from 'react';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport Loading from '../ui/Loading';\nimport { HeaderText } from '../ui/Typography';\nimport BrowseSalesList from './BrowseSalesList';\nimport browseSalesQuery, { Sale } from './browseSalesQuery';\n\nconst BrowseSales: FC = () => {\n    const [term, setTerm] = useState<string>('');\n    const [loading, setLoading] = useState<boolean>(false);\n    const [salesList, setSalesList] = useState<Sale[]>([]);\n\n    const handleSearchSelect = async (cardName: string) => {\n        const sales = await browseSalesQuery({ cardName });\n        setSalesList(sales);\n    };\n\n    useEffect(() => {\n        if (term) {\n            (async () => {\n                setLoading(true);\n                await handleSearchSelect(term);\n                setLoading(false);\n            })();\n        }\n    }, [term]);\n\n    return (\n        <div>\n            <Grid container>\n                <Grid item xs={12} md={4}>\n                    <ControlledSearchBar\n                        value={term}\n                        onChange={(v) => setTerm(v)}\n                    />\n                </Grid>\n            </Grid>\n            <br />\n            <HeaderText>Browse Sales</HeaderText>\n            <Divider />\n\n            {loading ? (\n                <Loading />\n            ) : (\n                <>\n                    <Box py={2}>\n                        {term !== '' && (\n                            <Typography>\n                                {salesList.length} results for <em>{term}</em>\n                            </Typography>\n                        )}\n                    </Box>\n                    <BrowseSalesList list={salesList} />\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default BrowseSales;\n","import { makeStyles } from '@material-ui/core';\nimport clsx from 'clsx';\nimport React, { FC, useState } from 'react';\n\ninterface Props {\n    image: string;\n    hover?: boolean;\n}\n\nconst useStyles = makeStyles(({ zIndex }) => ({\n    imageStyle: {\n        boxShadow: '2px 2px 5px 0 rgba(0,0,0,.25)',\n        zIndex: zIndex.appBar,\n        transition: 'all .2s ease-in-out',\n        maxWidth: '100%',\n        maxHeight: '100%',\n    },\n    hoveredStyle: {\n        transform: 'scale(1.75)',\n    },\n}));\n\nconst CardImage: FC<Props> = ({ image, hover }) => {\n    const { imageStyle, hoveredStyle } = useStyles();\n    const [hovered, setHovered] = useState<boolean>(false);\n\n    const onHover = (val: boolean) => {\n        if (!hover) return;\n        setHovered(val);\n    };\n\n    return (\n        <img\n            src={image}\n            className={clsx(imageStyle, {\n                [hoveredStyle]: hovered,\n            })}\n            onMouseOver={() => onHover(true)}\n            onMouseOut={() => onHover(false)}\n        />\n    );\n};\n\nexport default CardImage;\n","import http from '../common/http';\nimport { ADD_CARD_TO_INVENTORY } from '../utils/endpoints';\nimport { QOH } from '../utils/ScryfallCard';\n\ninterface CardInfo {\n    id: string;\n    name: string;\n    set_name: string;\n    set: string;\n}\n\ninterface Payload {\n    quantity: number;\n    finishCondition: string;\n    cardInfo: CardInfo;\n}\n\ninterface ResponseData {\n    _id: string;\n    name: string;\n    set: string;\n    qoh: QOH;\n}\n\nconst addCardToInventoryQuery = async (payload: Payload) => {\n    try {\n        const { data } = await http.post<ResponseData>(\n            ADD_CARD_TO_INVENTORY,\n            payload\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default addCardToInventoryQuery;\n","import { TextField, TextFieldProps } from '@material-ui/core';\nimport React, { FC } from 'react';\n\ntype Props = Omit<TextFieldProps, 'value' | 'onChange' | 'label' | 'name'> & {\n    value: string;\n    onChange: (v: string) => void;\n    label: string;\n    name: string;\n};\n\nconst IntegerInput: FC<Props> = ({\n    value,\n    onChange,\n    label,\n    name,\n    ...props\n}) => {\n    return (\n        <TextField\n            fullWidth\n            type=\"number\"\n            size=\"small\"\n            variant=\"outlined\"\n            label={label}\n            name={name}\n            value={value}\n            InputProps={{\n                inputProps: {\n                    min: 1,\n                },\n            }}\n            onBlur={(e) => {\n                const value = e.target.value;\n                const transformed = parseInt(value);\n                if (isNaN(transformed) || transformed < 1) {\n                    return onChange('1');\n                } else {\n                    onChange(transformed.toString());\n                }\n            }}\n            onChange={(e) => {\n                onChange(e.target.value);\n            }}\n            {...props}\n        />\n    );\n};\n\nexport default IntegerInput;\n","import { Condition, Finish, FinishCondition } from '../utils/ScryfallCard';\n\nconst createFinishCondition = (\n    finish: Finish,\n    condition: Condition\n): FinishCondition => {\n    return `${finish}_${condition}` as FinishCondition;\n};\n\nexport default createFinishCondition;\n","export const finishes = [\n    { key: 'NONFOIL', text: 'Nonfoil', value: 'NONFOIL' },\n    { key: 'FOIL', text: 'Foil', value: 'FOIL' },\n];\n\nexport const cardConditions = [\n    { key: 'NM', text: 'Near Mint', value: 'NM' },\n    { key: 'LP', text: 'Light Play', value: 'LP' },\n    { key: 'MP', text: 'Moderate Play', value: 'MP' },\n    { key: 'HP', text: 'Heavy Play', value: 'HP' },\n];\n","import http from '../common/http';\nimport { GET_BULK_CARDS } from '../utils/endpoints';\n\nexport interface BulkCard {\n    scryfall_id: string;\n    name: string;\n    display_name: string;\n    set_abbreviation: string;\n    set_name: string;\n    rarity: string;\n    foil_printing: boolean;\n    nonfoil_printing: boolean;\n    frame: string;\n    image: string;\n}\n\nconst bulkInventoryQuery = async (cardName: string) => {\n    try {\n        const { data } = await http.get<BulkCard[]>(GET_BULK_CARDS, {\n            params: {\n                cardName,\n            },\n        });\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default bulkInventoryQuery;\n","import { makeStyles, TextField, Typography } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Autocomplete, {\n    AutocompleteChangeReason,\n} from '@material-ui/lab/Autocomplete';\nimport _ from 'lodash';\nimport React, {\n    ChangeEvent,\n    FC,\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport SetIcon from '../ui/SetIcon';\nimport bulkInventoryQuery, { BulkCard } from './bulkInventoryQuery';\n\nexport type Option = BulkCard;\n\nconst useStyles = makeStyles({\n    /*\n     * Prevents the option-list icon from rotating 180 degrees to preserve orientation of custom icon\n     */\n    popupIndicatorOpen: {\n        transform: 'rotate(0deg)',\n    },\n});\n\ninterface Props {\n    value: Option | null;\n    onChange: (result: Option | null) => void;\n    onHighlight?: (o: Option | null) => void;\n}\n\nconst BulkSearchBar: FC<Props> = ({ value, onChange, onHighlight }) => {\n    const classes = useStyles();\n    const [loading, setLoading] = useState<boolean>(false);\n    const [options, setOptions] = useState<Option[]>([]);\n    const [internalValue, setInternalValue] = useState<Option | null>(value);\n    const ref = useRef<HTMLInputElement>();\n\n    useEffect(() => {\n        // If `value` is `null` on prop change, set the internal value to `null` as well\n        if (!value) {\n            setInternalValue(null);\n        }\n        // Focus the input when it is cleared\n        if (ref && ref.current) {\n            ref.current.focus();\n        }\n    }, [value]);\n\n    const fetchResults = async (v: string) => {\n        setLoading(true);\n        const data = await bulkInventoryQuery(v);\n        await setOptions(data);\n        setLoading(false);\n    };\n\n    // Cache so it doesn't create a new instance each render\n    const debouncedFetch = useCallback(_.debounce(fetchResults, 750), []);\n\n    const handleSearchChange = async (_: ChangeEvent<{}>, val: string) => {\n        // Skip undefined and short internalValues\n        if (!val || val.length < 3) {\n            setOptions([]);\n            return;\n        }\n\n        await debouncedFetch(val);\n    };\n\n    const handleResultSelect = async (\n        _: ChangeEvent<{}>,\n        value: Option | null,\n        reason: AutocompleteChangeReason\n    ) => {\n        // If the user clears the input, then we need to reset the state\n        if (reason === 'clear') {\n            onChange(null);\n            setInternalValue(null);\n            return;\n        }\n\n        try {\n            setLoading(true);\n            setInternalValue(value);\n            await onChange(value);\n            setLoading(false);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    return (\n        <>\n            <Autocomplete\n                id=\"searchBar\"\n                autoHighlight\n                selectOnFocus\n                value={internalValue}\n                onInputChange={handleSearchChange}\n                onChange={handleResultSelect}\n                loading={loading}\n                options={options}\n                getOptionLabel={(o) => o.display_name}\n                // We do not want to filter options based on user input\n                // This overrides the default behavior\n                filterOptions={(o) => o}\n                getOptionSelected={(o, v) => o.scryfall_id === v.scryfall_id}\n                onHighlightChange={(_, o) => {\n                    if (onHighlight) {\n                        onHighlight(o);\n                    }\n                }}\n                renderOption={(o) => {\n                    return (\n                        <div>\n                            <Typography component=\"span\">\n                                {o.display_name}\n                            </Typography>\n                            <SetIcon\n                                set={o.set_abbreviation}\n                                rarity={o.rarity}\n                            />\n                        </div>\n                    );\n                }}\n                placeholder=\"Enter a card title\"\n                closeIcon={null}\n                popupIcon={<SearchIcon />}\n                noOptionsText=\"No results found\"\n                classes={{\n                    popupIndicatorOpen: classes.popupIndicatorOpen,\n                }}\n                renderInput={(params) => (\n                    <div ref={params.InputProps.ref}>\n                        <TextField\n                            inputProps={{ ref }}\n                            {...params.inputProps}\n                            fullWidth\n                            label=\"Enter a card title\"\n                            variant=\"outlined\"\n                            size=\"small\"\n                        />\n                    </div>\n                )}\n            />\n        </>\n    );\n};\n\nexport default BulkSearchBar;\n","import {\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n} from '@material-ui/core';\nimport React, { FC } from 'react';\nimport { FormValues } from './BulkInventory';\n\ninterface Props {\n    cards: FormValues[];\n}\n\nconst SubmittedCardsTable: FC<Props> = ({ cards }) => {\n    return (\n        <TableContainer component={Paper} variant=\"outlined\">\n            <Table size=\"small\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>\n                            <b>Name</b>\n                        </TableCell>\n                        <TableCell>\n                            <b>Quantity</b>\n                        </TableCell>\n                        <TableCell>\n                            <b>Finish</b>\n                        </TableCell>\n                        <TableCell>\n                            <b>Condition</b>\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {cards.map((c) => {\n                        if (c.bulkCard) {\n                            const { bulkCard, quantity, finish, condition } = c;\n\n                            return (\n                                <TableRow\n                                    key={`${\n                                        c.bulkCard.scryfall_id\n                                    }-${Math.random()}`}\n                                >\n                                    <TableCell>\n                                        {bulkCard.display_name}\n                                    </TableCell>\n                                    <TableCell>{quantity}</TableCell>\n                                    <TableCell>{finish}</TableCell>\n                                    <TableCell>{condition}</TableCell>\n                                </TableRow>\n                            );\n                        }\n                    })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nexport default SubmittedCardsTable;\n","import {\n    Container,\n    FormControl,\n    Grid,\n    InputLabel,\n    makeStyles,\n    MenuItem,\n    Select,\n} from '@material-ui/core';\nimport { useFormik } from 'formik';\nimport React, { FC, useEffect, useState } from 'react';\nimport CardImage from '../common/CardImage';\nimport addCardToInventoryQuery from '../ManageInventory/addCardToInventoryQuery';\nimport Button from '../ui/Button';\nimport ControlledDropdown from '../ui/ControlledDropdown';\nimport IntegerInput from '../ui/IntegerInput';\nimport { useToastContext } from '../ui/ToastContext';\nimport { SectionText } from '../ui/Typography';\nimport createFinishCondition from '../utils/createFinishCondtition';\nimport { cardConditions } from '../utils/dropdownOptions';\nimport { Condition, Finish } from '../utils/ScryfallCard';\nimport { BulkCard } from './bulkInventoryQuery';\nimport BulkSearchBar from './BulkSearchBar';\nimport SubmittedCardsTable from './SubmittedCardsTable';\n\nconst useStyles = makeStyles(({ palette }) => ({\n    imageContainer: { maxWidth: 200, height: 'auto' },\n    placeholderImage: {\n        background: `repeating-linear-gradient(\n            45deg,\n            ${palette.grey[200]},\n            ${palette.grey[200]} 10px,\n            ${palette.grey[300]} 10px,\n            ${palette.grey[300]} 20px\n          )`,\n        borderRadius: 10,\n        height: 280,\n        width: 200,\n    },\n}));\n\nexport interface FormValues {\n    bulkCard: BulkCard | null;\n    finish: Finish;\n    quantity: string;\n    condition: Condition;\n}\n\nconst BulkInventory: FC = () => {\n    const { imageContainer, placeholderImage } = useStyles();\n    const [currentCardImage, setCurrentCardImage] = useState<string>('');\n    const [submittedCards, setSubmittedCards] = useState<FormValues[]>([]);\n    const createToast = useToastContext();\n\n    const onSubmit = async (values: FormValues) => {\n        try {\n            if (values.bulkCard) {\n                await addCardToInventoryQuery({\n                    quantity: Number(values.quantity),\n                    finishCondition: createFinishCondition(\n                        values.finish,\n                        values.condition\n                    ),\n                    cardInfo: {\n                        id: values.bulkCard.scryfall_id,\n                        name: values.bulkCard.name,\n                        set_name: values.bulkCard.set_name,\n                        set: values.bulkCard.set_abbreviation,\n                    },\n                });\n\n                createToast({\n                    message: `Added ${values.quantity}x ${values.bulkCard.name} to inventory`,\n                    severity: 'success',\n                });\n            }\n            setSubmittedCards([values, ...submittedCards]);\n            resetForm();\n        } catch (err) {\n            console.log(err);\n            createToast({\n                message: `Error adding card`,\n                severity: 'error',\n            });\n        }\n    };\n\n    const {\n        values,\n        setFieldValue,\n        handleSubmit,\n        resetForm,\n        isSubmitting,\n    } = useFormik<FormValues>({\n        initialValues: {\n            bulkCard: null,\n            finish: 'NONFOIL',\n            quantity: '1',\n            condition: 'NM',\n        },\n        onSubmit,\n    });\n\n    useEffect(() => {\n        if (values.bulkCard) {\n            // Reset condtion when cards change\n            setFieldValue('condition', 'NM');\n\n            // Reset quantity when cards change\n            setFieldValue('quantity', '1');\n\n            // If _only_ a foil printing exists, set to foil\n            if (!values.bulkCard.nonfoil_printing) {\n                setFieldValue('finish', 'FOIL');\n                return;\n            }\n            // If _only_ a nonfoil printing exists, set to nonfoil\n            if (!values.bulkCard.foil_printing) {\n                setFieldValue('finish', 'NONFOIL');\n                return;\n            }\n            // Otherwise both exist, default to nonfoil\n            setFieldValue('finish', 'NONFOIL');\n        }\n    }, [values.bulkCard]);\n\n    return (\n        <Container maxWidth=\"md\">\n            <Grid container spacing={3}>\n                <Grid item xs={8}>\n                    <form>\n                        <Grid container spacing={3} xs={12}>\n                            <Grid item xs={12}>\n                                <SectionText>Card search</SectionText>\n                                <br />\n                                <BulkSearchBar\n                                    value={values.bulkCard}\n                                    onChange={(v) =>\n                                        setFieldValue('bulkCard', v)\n                                    }\n                                    onHighlight={(o) =>\n                                        setCurrentCardImage(o?.image || '')\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={4}>\n                                <FormControl\n                                    variant=\"outlined\"\n                                    size=\"small\"\n                                    fullWidth\n                                    disabled={!values.bulkCard}\n                                >\n                                    <InputLabel>Finish</InputLabel>\n                                    <Select\n                                        label=\"Finish\"\n                                        value={values.finish}\n                                        onChange={(e) =>\n                                            setFieldValue(\n                                                'finish',\n                                                e.target.value as string\n                                            )\n                                        }\n                                    >\n                                        <MenuItem\n                                            key=\"nonfoil\"\n                                            value=\"FOIL\"\n                                            disabled={\n                                                !values.bulkCard?.foil_printing\n                                            }\n                                        >\n                                            Foil\n                                        </MenuItem>\n                                        <MenuItem\n                                            key=\"foil\"\n                                            value=\"NONFOIL\"\n                                            disabled={\n                                                !values.bulkCard\n                                                    ?.nonfoil_printing\n                                            }\n                                        >\n                                            Nonfoil\n                                        </MenuItem>\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <ControlledDropdown\n                                    disabled={!values.bulkCard}\n                                    name=\"condition\"\n                                    label=\"Condition\"\n                                    options={cardConditions}\n                                    value={values.condition}\n                                    onChange={(v) =>\n                                        setFieldValue('condition', v)\n                                    }\n                                />\n                            </Grid>\n                            <Grid item xs={4}>\n                                <IntegerInput\n                                    label=\"Quantity\"\n                                    name=\"quantity\"\n                                    value={values.quantity}\n                                    onChange={(v) =>\n                                        setFieldValue('quantity', v)\n                                    }\n                                    disabled={!values.bulkCard}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button\n                                    fullWidth\n                                    type=\"submit\"\n                                    primary\n                                    onClick={() => handleSubmit()}\n                                    disabled={!values.bulkCard || isSubmitting}\n                                >\n                                    Add to inventory\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </Grid>\n                <Grid item xs={4}>\n                    <SectionText>Card preview</SectionText>\n                    <br />\n                    {currentCardImage ? (\n                        <div className={imageContainer}>\n                            <CardImage image={currentCardImage} />\n                        </div>\n                    ) : (\n                        <div className={imageContainer}>\n                            <div className={placeholderImage} />\n                        </div>\n                    )}\n                </Grid>\n            </Grid>\n            {submittedCards.length > 0 && (\n                <div>\n                    <SectionText>Recently added cards</SectionText>\n                    <SubmittedCardsTable cards={submittedCards} />\n                </div>\n            )}\n        </Container>\n    );\n};\n\nexport default BulkInventory;\n","import React, { createContext, FC, useState } from 'react';\nimport { QOH, ScryfallCard } from '../utils/ScryfallCard';\nimport cardSearchQuery from './cardSearchQuery';\n\ninterface Props {}\n\ninterface Context {\n    searchResults: ScryfallCard[];\n    changeCardQuantity: (id: string, qoh: QOH) => void;\n    handleSearchSelect: (term: string) => void;\n}\n\nexport const InventoryContext = createContext<Context>({\n    searchResults: [],\n    changeCardQuantity: () => null,\n    handleSearchSelect: () => null,\n});\n\nconst InventoryProvider: FC<Props> = ({ children }) => {\n    const [searchResults, setSearchResults] = useState<ScryfallCard[]>([]);\n\n    const handleSearchSelect = async (term: string) => {\n        const cards = await cardSearchQuery({\n            cardName: term,\n            inStockOnly: false,\n        });\n\n        setSearchResults(cards);\n    };\n\n    const changeCardQuantity = (id: string, qoh: QOH) => {\n        const copiedState = [...searchResults];\n        const targetIndex = copiedState.findIndex((e) => e.id === id);\n        copiedState[targetIndex].qoh = qoh;\n        setSearchResults(copiedState);\n    };\n\n    return (\n        <InventoryContext.Provider\n            value={{ searchResults, changeCardQuantity, handleSearchSelect }}\n        >\n            {children}\n        </InventoryContext.Provider>\n    );\n};\n\nexport default InventoryProvider;\n","import http from '../common/http';\nimport { SUSPEND_SALE } from '../utils/endpoints';\nimport { SaleListCard } from './SaleContext';\n\ninterface Payload {\n    customerName: string;\n    notes: string;\n    saleList: SaleListCard[];\n}\n\ninterface ResponseData {\n    ops: [{ name: string }];\n}\n\nconst createSuspendedSaleQuery = async (payload: Payload) => {\n    try {\n        const { data } = await http.post<ResponseData>(SUSPEND_SALE, payload);\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default createSuspendedSaleQuery;\n","import http from '../common/http';\nimport { SUSPEND_SALE } from '../utils/endpoints';\n\nconst deleteSuspendedSaleQuery = async (saleId: string) => {\n    try {\n        const { data } = await http.delete<void>(`${SUSPEND_SALE}/${saleId}`);\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default deleteSuspendedSaleQuery;\n","import http from '../common/http';\nimport { FINISH_SALE } from '../utils/endpoints';\nimport { SaleListCard } from './SaleContext';\n\ninterface Payload {\n    cards: SaleListCard[];\n}\n\ninterface ResponseData {\n    sale_data: {\n        Sale: {\n            saleID: string;\n        };\n    };\n}\n\nconst finishSaleQuery = async (payload: Payload) => {\n    try {\n        const { data } = await http.post<ResponseData>(FINISH_SALE, payload);\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default finishSaleQuery;\n","import http from '../common/http';\nimport { SUSPEND_SALE } from '../utils/endpoints';\nimport { SaleListCard } from './SaleContext';\n\nexport interface SuspendedSale {\n    _id: string;\n    name: string;\n    notes: string;\n    list: SaleListCard[];\n}\n\nconst getSuspendedSaleQuery = async (saleId: string) => {\n    try {\n        const { data } = await http.get<SuspendedSale>(\n            `${SUSPEND_SALE}/${saleId}`\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default getSuspendedSaleQuery;\n","import $ from 'jquery';\nimport React, { createContext, FC, useState } from 'react';\nimport { useToastContext } from '../ui/ToastContext';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport sortSaleList from '../utils/sortSaleList';\nimport cardSearchQuery from './cardSearchQuery';\nimport createSuspendedSaleQuery from './createSuspendedSaleQuery';\nimport deleteSuspendedSaleQuery from './deleteSuspendedSaleQuery';\nimport finishSaleQuery from './finishSaleQuery';\nimport getSuspendedSaleQuery, { SuspendedSale } from './getSuspendedSaleQuery';\n\ninterface Props {}\n\ninterface SuspendSaleArgs {\n    customerName: string;\n    notes: string;\n}\n\nexport type SaleListCard = ScryfallCard & {\n    finishCondition: string;\n    qtyToSell: number;\n    price: number;\n};\n\nexport interface SaleContext {\n    saleListCards: SaleListCard[];\n    searchResults: ScryfallCard[];\n    searchTerm: string;\n    suspendedSale: SuspendedSale;\n    handleResultSelect: (term: string) => void;\n    addToSaleList: (\n        card: ScryfallCard,\n        finishCondition: string,\n        qtyToSell: number,\n        price: number\n    ) => void;\n    removeFromSaleList: (id: string, finishCondition: string) => void;\n    restoreSale: (saleId: string) => void;\n    suspendSale: (args: SuspendSaleArgs) => void;\n    deleteSuspendedSale: () => void;\n    finalizeSale: () => void;\n    resetSaleState: () => void;\n}\n\nconst defaultSuspendedSale: SuspendedSale = {\n    _id: '',\n    name: '',\n    notes: '',\n    list: [],\n};\n\nexport const SaleContext = createContext<SaleContext>({\n    saleListCards: [],\n    searchResults: [],\n    searchTerm: '',\n    suspendedSale: defaultSuspendedSale,\n    handleResultSelect: () => null,\n    addToSaleList: () => null,\n    removeFromSaleList: () => null,\n    restoreSale: () => null,\n    suspendSale: () => null,\n    deleteSuspendedSale: () => null,\n    finalizeSale: () => null,\n    resetSaleState: () => null,\n});\n\nexport const SaleProvider: FC<Props> = ({ children }) => {\n    const createToast = useToastContext();\n    const [saleListCards, setSaleListCards] = useState<SaleListCard[]>([]);\n    const [searchTerm, setSearchTerm] = useState<string>('');\n    const [searchResults, setSearchResults] = useState<ScryfallCard[]>([]);\n    const [suspendedSale, setSuspendedSale] = useState<SuspendedSale>(\n        defaultSuspendedSale\n    );\n\n    /**\n     * Executes after a user selects an autocompleted suggestion\n     */\n    const handleResultSelect = async (term: string) => {\n        const cards = await cardSearchQuery({\n            cardName: term,\n            inStockOnly: true,\n        });\n\n        setSearchResults(cards);\n        setSearchTerm(term);\n\n        if (cards.length === 0) {\n            $('#searchBar').focus().select();\n        }\n    };\n\n    /**\n     * Adds product to the sale list\n     */\n    const addToSaleList = (\n        card: ScryfallCard,\n        finishCondition: string,\n        qtyToSell: number,\n        price: number\n    ) => {\n        const oldState = [...saleListCards];\n\n        const newCard: SaleListCard = {\n            ...card,\n            finishCondition,\n            qtyToSell,\n            price,\n        };\n\n        // Need to make sure same ID's with differing conditions are separate line-items\n        const idx = oldState.findIndex((el) => {\n            return (\n                el.id === newCard.id && el.finishCondition === finishCondition\n            );\n        });\n\n        if (idx !== -1) {\n            oldState.splice(idx, 1, newCard);\n        } else {\n            oldState.push(newCard);\n        }\n\n        setSaleListCards(sortSaleList(oldState));\n    };\n\n    /**\n     * Removes product from the sale list\n     */\n    const removeFromSaleList = (id: string, finishCondition: string) => {\n        const newState = [...saleListCards].filter((c) => {\n            return !(c.id === id && c.finishCondition === finishCondition);\n        });\n\n        setSaleListCards(newState);\n    };\n\n    /**\n     * Restores a sale (assigns a saleList to state) from a suspended sale from the db\n     */\n    const restoreSale = async (id: string) => {\n        try {\n            const sale = await getSuspendedSaleQuery(id);\n\n            const modeledData = sale.list.map((c) => c);\n\n            setSaleListCards(modeledData);\n            setSuspendedSale(sale);\n\n            createToast({\n                severity: 'success',\n                message: `You are viewing ${sale.name}'s sale`,\n            });\n        } catch (e) {\n            console.log(e);\n            createToast({\n                severity: 'error',\n                message: `Error`,\n            });\n        }\n    };\n\n    /**\n     * Suspends a sale (persists it to mongo) via the SuspendedSale component and API\n     */\n    const suspendSale = async ({\n        customerName,\n        notes,\n    }: {\n        customerName: string;\n        notes: string;\n    }) => {\n        const { _id } = suspendedSale;\n\n        try {\n            if (!!_id)\n                // If we're suspended, delete the previous to replace\n                await deleteSuspendedSaleQuery(_id);\n\n            const data = await createSuspendedSaleQuery({\n                customerName: customerName,\n                notes: notes,\n                saleList: saleListCards,\n            });\n\n            resetSaleState();\n\n            createToast({\n                severity: 'success',\n                message: `${data.ops[0].name}'s sale was suspended`,\n            });\n        } catch (e) {\n            console.log(e);\n            createToast({\n                severity: 'error',\n                message: 'Error suspending sale',\n            });\n        }\n    };\n\n    const deleteSuspendedSale = async () => {\n        try {\n            const { _id, name } = suspendedSale;\n            await deleteSuspendedSaleQuery(_id);\n\n            resetSaleState();\n\n            createToast({\n                severity: 'success',\n                message: `${name}'s sale was deleted`,\n            });\n        } catch (e) {\n            console.log(e);\n            createToast({\n                severity: 'error',\n                message: 'Error deleting suspended sale',\n            });\n        }\n    };\n\n    /**\n     * Extracts the saleList state and uses it to complete sale\n     */\n    const finalizeSale = async () => {\n        const { _id } = suspendedSale;\n\n        try {\n            // Must delete currently suspended sale to faithfully restore inventory prior to sale\n            if (!!_id) await deleteSuspendedSaleQuery(_id);\n\n            const { sale_data } = await finishSaleQuery({\n                cards: saleListCards,\n            });\n\n            createToast({\n                severity: 'success',\n                message: `Sale created: ID #${sale_data.Sale.saleID}`,\n            });\n\n            resetSaleState();\n        } catch (e) {\n            console.log(e);\n            createToast({\n                severity: 'error',\n                message: 'Sale was not created',\n            });\n\n            resetSaleState();\n        }\n    };\n\n    const resetSaleState = () => {\n        setSaleListCards([]);\n        setSearchResults([]);\n        setSearchTerm('');\n        setSuspendedSale(defaultSuspendedSale);\n    };\n\n    return (\n        <SaleContext.Provider\n            value={{\n                saleListCards,\n                searchTerm,\n                searchResults,\n                suspendedSale,\n                handleResultSelect,\n                addToSaleList,\n                removeFromSaleList,\n                restoreSale,\n                suspendSale,\n                deleteSuspendedSale,\n                finalizeSale,\n                resetSaleState,\n            }}\n        >\n            {children}\n        </SaleContext.Provider>\n    );\n};\n","import { ScryfallCard } from './ScryfallCard';\n\n/**\n * Takes in an unordered group of cards and sorts them according to The Clubhouse's specs:\n * WUBRG, then multicolor, then colorless, then land, alphabetically within each color/category\n */\nexport default function sortSaleList<T extends ScryfallCard>(cards: T[]) {\n    const ORDER = ['W', 'U', 'B', 'R', 'G', 'MULTI', 'COLORLESS', 'LAND'];\n\n    /**\n     * Main helper function that manages sort order\n     * @param {Object} card\n     */\n    function helpSort(card: ScryfallCard) {\n        let arrayConst = null;\n\n        let colorsLength = null;\n        let cardFace = null;\n\n        try {\n            // If colors don't exist, it's a flip card or storybook frame\n            colorsLength = card.colors.length;\n            cardFace = card;\n        } catch (e) {\n            try {\n                // Storybook frames from Eldraine may throw error\n                colorsLength = card.card_faces[0].colors.length;\n                cardFace = card.card_faces[0];\n            } catch (e) {\n                colorsLength = card.colors.length;\n                cardFace = card;\n            }\n        }\n\n        // Apply logic to return correct constant enum\n        if (colorsLength === 0) {\n            arrayConst = 'COLORLESS';\n        } else if (colorsLength === 1) {\n            arrayConst = cardFace.colors[0];\n        } else if (colorsLength > 1) {\n            arrayConst = 'MULTI';\n        }\n\n        // Drill into colorless cards, if they are lands or not\n        if (arrayConst === 'COLORLESS') {\n            if (cardFace.color_identity) {\n                if (cardFace.color_identity.length === 1) {\n                    arrayConst = cardFace.color_identity[0];\n                }\n                if (cardFace.color_identity.length > 1) {\n                    arrayConst = 'MULTI';\n                }\n            }\n            if (cardFace.type_line.includes('Land')) {\n                arrayConst = 'LAND';\n            }\n        }\n\n        // Final check to guard against a null arrayConst\n        if (!arrayConst) {\n            arrayConst = 'LAND';\n        }\n\n        return arrayConst;\n    }\n\n    const alphaSort = cards.sort((a, b) => {\n        return a.name.localeCompare(b.name);\n    });\n\n    const sorted = alphaSort.sort((a, b) => {\n        return ORDER.indexOf(helpSort(a)) - ORDER.indexOf(helpSort(b));\n    });\n\n    return sorted;\n}\n","export default __webpack_public_path__ + \"static/media/ch2.f55f010a.jpg\";","export default __webpack_public_path__ + \"static/media/clubhouse_products.e622049f.png\";","export default __webpack_public_path__ + \"static/media/learn_to_play.91a17850.jpg\";","export default __webpack_public_path__ + \"static/media/tables.451be904.jpg\";","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport ch2 from './ch2.jpg';\nimport clubhouse_products from './clubhouse_products.png';\nimport learn_to_play from './learn_to_play.jpg';\nimport ch1 from './tables.jpg';\n\nconst colors = {\n    primary: '#2185d0',\n    white: '#ffffff',\n    gray: {\n        light: '#99aab5',\n        main: '#2c2f33',\n        dark: '#23272a',\n    },\n};\n\nconst primaryRgb = '13, 49, 69,';\nconst bodyBackground = '#f8f5ef';\n\nconst desktopMediaQuery = `@media only screen and (min-width: 769px)`;\nconst tabletMediaQuery = `@media only screen and (max-width: 768px)`;\n\nconst headerHeight = 52;\nconst borderRadius = 7;\n\nconst HeroImageContainer = styled('div')({\n    width: '100%',\n    height: 500,\n});\n\nconst Container = styled('div')({\n    marginTop: headerHeight,\n});\n\ninterface ImageProps {\n    src: string;\n    rounded?: boolean;\n}\n\nconst Image = styled.div<ImageProps>`\n    background: url(${({ src }) => src});\n    background-size: cover;\n    height: 100%;\n    width: 100%;\n    border-radius: ${({ rounded }) => (rounded ? `${borderRadius}px` : '0px')};\n`;\n\nconst LocationImageContainer = styled('div')({\n    width: '100%',\n    height: 350,\n    borderRadius: borderRadius,\n});\n\nconst ImageGradient = styled('div')({\n    backgroundImage: `linear-gradient(\n        to top,\n        rgba(${primaryRgb} 0.9),\n        rgba(${primaryRgb} 0.85),\n        rgba(${primaryRgb} 0.70),\n        rgba(${primaryRgb} 0.60),\n        rgba(255, 255, 255, 0)\n    )`,\n    height: '100%',\n    width: '100%',\n});\n\nconst ImageGradient2 = styled('div')({\n    backgroundColor: `rgba(${primaryRgb} 0.85)`,\n    height: '100%',\n    width: '100%',\n    borderRadius: borderRadius,\n});\n\nconst HeroText = styled('h1')({\n    color: colors.white,\n    textAlign: 'center',\n    [tabletMediaQuery]: {\n        fontSize: 40,\n    },\n    [desktopMediaQuery]: {\n        fontSize: 50,\n    },\n});\n\ninterface HeaderTextProps {\n    inverted?: boolean;\n}\n\nconst HeaderText = styled.h1<HeaderTextProps>`\n    color: ${({ inverted }) => (inverted ? colors.white : colors.gray.main)};\n`;\n\nconst SectionText = styled('h2')({\n    color: colors.white,\n    textAlign: 'center',\n});\n\nconst SubheaderText = styled('div')({\n    color: colors.white,\n    fontSize: 18,\n});\n\nconst HeaderContainer = styled('div')({\n    display: 'flex',\n    height: 'inherit',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n});\n\nconst ServicesContainer = styled('div')({\n    display: 'grid',\n    gridGap: 60,\n    [tabletMediaQuery]: {\n        gridTemplateRows: '1fr 1fr 1fr',\n    },\n    [desktopMediaQuery]: {\n        gridTemplateColumns: '1fr 1fr 1fr',\n    },\n});\n\nconst LocationsContainer = styled('div')({\n    display: 'grid',\n    gridGap: 20,\n    [tabletMediaQuery]: {\n        gridTemplateRows: '1fr 1fr',\n    },\n    [desktopMediaQuery]: {\n        gridTemplateColumns: '1fr 1fr',\n    },\n});\n\nconst LocationContainer = styled('div')({\n    padding: 40,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    height: '100%',\n});\n\nconst Content = styled('div')({\n    padding: 20,\n});\n\ninterface DescriptionProps {\n    inverted?: boolean;\n}\n\nconst Description = styled.div<DescriptionProps>`\n    color: ${({ inverted }) => (inverted ? colors.white : colors.gray.main)};\n    font-size: 18px;\n`;\n\nconst TextWidth = styled('div')({\n    [tabletMediaQuery]: {\n        width: '100%',\n    },\n    [desktopMediaQuery]: {\n        width: '50%',\n    },\n});\n\nconst IconContainer = styled('div')({\n    padding: 40,\n    backgroundColor: colors.gray.main,\n    borderRadius: borderRadius,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n});\n\nconst SectionDivider = styled('div')({\n    width: '100%',\n    padding: 40,\n});\n\nconst Footer = styled('div')({\n    bottom: 0,\n    backgroundColor: colors.gray.dark,\n    [tabletMediaQuery]: {\n        padding: 20,\n    },\n    [desktopMediaQuery]: {\n        paddingLeft: 40,\n        paddingBottom: 20,\n        paddingRight: 40,\n        paddingTop: 40,\n    },\n});\n\ninterface FlexRowProps {\n    justify?: 'center' | 'space-between';\n}\n\nconst FlexRow = styled.div<FlexRowProps>`\n    display: flex;\n    justify-content: ${({ justify }) => justify || 'space-between'};\n    align-items: center;\n`;\n\nconst Home: FC = () => {\n    return (\n        <Container style={{ backgroundColor: bodyBackground }}>\n            <HeroImageContainer>\n                <Image src={learn_to_play}>\n                    <ImageGradient>\n                        <HeaderContainer>\n                            <HeroText>The Clubhouse is open 🎉</HeroText>\n                            <TextWidth>\n                                <SubheaderText>\n                                    <SectionText>\n                                        We are open all week for your tabletop\n                                        gaming needs!\n                                    </SectionText>\n                                </SubheaderText>\n                            </TextWidth>\n                            <br />\n                            <Link to=\"/public-inventory\">\n                                <Button size=\"huge\" primary>\n                                    Browse cards\n                                </Button>\n                            </Link>\n                        </HeaderContainer>\n                    </ImageGradient>\n                </Image>\n            </HeroImageContainer>\n            <SectionDivider />\n            <Content>\n                <HeaderText>Your local game store.</HeaderText>\n                <TextWidth>\n                    <Description>\n                        We take pride in our friendly community of players, and\n                        always ensure that our customers are well served.\n                    </Description>\n                </TextWidth>\n            </Content>\n            <Content>\n                <ServicesContainer>\n                    <div>\n                        <IconContainer>\n                            <Icon name=\"box\" size=\"huge\" inverted />\n                            <SectionText>Large product selection</SectionText>\n                        </IconContainer>\n                        <br />\n                        <Description>\n                            We stock an extensive selection of singles and CCG\n                            supplies just for you! When the deck-building itch\n                            strikes, turn to us\n                        </Description>\n                    </div>\n                    <div>\n                        <IconContainer>\n                            <Icon name=\"users\" size=\"huge\" inverted />\n                            <SectionText>Inclusive community</SectionText>\n                        </IconContainer>\n                        <br />\n                        <Description>\n                            Young or seasoned, beginner or advanced, we welcome\n                            all players!\n                        </Description>\n                    </div>\n                    <div>\n                        <IconContainer>\n                            <Icon name=\"dollar sign\" size=\"huge\" inverted />\n                            <SectionText>Cash or credit trade-ins</SectionText>\n                        </IconContainer>\n                        <br />\n                        <Description>\n                            Whether a whole collection or a single card, come on\n                            by and have one of our expert managers appraise it\n                            using competitive market rates\n                        </Description>\n                    </div>\n                </ServicesContainer>\n            </Content>\n            <SectionDivider />\n            <Content>\n                <HeaderText>Two convenient locations</HeaderText>\n                <LocationsContainer>\n                    <LocationImageContainer>\n                        <Image src={ch1} rounded>\n                            <ImageGradient2>\n                                <LocationContainer>\n                                    <HeaderText inverted>Beaverton</HeaderText>\n                                    <SectionDivider />\n                                    <div>\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"map marker alternate\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            13895 SW Farmington Rd, Beaverton,\n                                            OR 97005\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"clock\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            Mon - Fri 12pm to 7pm, Sat - Sun\n                                            11am to 7pm\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"phone\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            (503) 268-1449\n                                        </Description>\n                                    </div>\n                                </LocationContainer>\n                            </ImageGradient2>\n                        </Image>\n                    </LocationImageContainer>\n                    <LocationImageContainer>\n                        <Image src={ch2} rounded>\n                            <ImageGradient2>\n                                <LocationContainer>\n                                    <HeaderText inverted>Hillsboro</HeaderText>\n                                    <SectionDivider />\n                                    <div>\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"map marker alternate\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            1300 SW Oak St Suite B, Hillsboro,\n                                            OR 97123\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"clock\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            Mon - Fri 12pm to 7pm, Sat - Sun\n                                            11am to 7pm\n                                        </Description>\n                                        <br />\n                                        <Description inverted>\n                                            <Icon\n                                                name=\"phone\"\n                                                size=\"large\"\n                                                inverted\n                                            />\n                                            (971) 249-3096\n                                        </Description>\n                                    </div>\n                                </LocationContainer>\n                            </ImageGradient2>\n                        </Image>\n                    </LocationImageContainer>\n                </LocationsContainer>\n            </Content>\n            <SectionDivider />\n            <LocationImageContainer>\n                <Image src={clubhouse_products}>\n                    <ImageGradient>\n                        <HeaderContainer>\n                            <HeroText>We look forward to seeing you</HeroText>\n                            <TextWidth>\n                                <SubheaderText>\n                                    Follow us on Facebook or become a member of\n                                    our Discord community for up-to-date\n                                    announcements on store events, product\n                                    releases, pre-orders, and so much more!\n                                </SubheaderText>\n                            </TextWidth>\n                        </HeaderContainer>\n                    </ImageGradient>\n                </Image>\n            </LocationImageContainer>\n            <Footer>\n                <FlexRow>\n                    <Description inverted>© 2021 The Clubhouse</Description>\n                    <div>\n                        <a\n                            href=\"https://discord.gg/Wpej7dQ\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <Icon link name=\"discord\" size=\"huge\" inverted />\n                        </a>\n                        <a\n                            href=\"https://www.facebook.com/RGTClubhouse/\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <Icon link name=\"facebook\" size=\"huge\" inverted />\n                        </a>\n                    </div>\n                </FlexRow>\n                <FlexRow justify=\"center\">\n                    <Link to=\"/login\">\n                        <Button size=\"tiny\" color=\"black\">\n                            Staff login\n                        </Button>\n                    </Link>\n                </FlexRow>\n            </Footer>\n        </Container>\n    );\n};\n\nexport default Home;\n","import {\n    FormHelperText,\n    TextField as MUITextField,\n    TextFieldProps,\n} from '@material-ui/core';\nimport { FC } from 'react';\n\ntype Props = {\n    error?: string;\n    label: string;\n} & Omit<TextFieldProps, 'error' | 'variant' | 'size' | 'label'>;\n\nconst TextField: FC<Props> = ({ error, label, ...props }) => {\n    return (\n        <>\n            <MUITextField\n                id={label}\n                label={label}\n                variant=\"outlined\"\n                size=\"small\"\n                error={!!error}\n                {...props}\n            />\n            {error && <FormHelperText error>{error}</FormHelperText>}\n        </>\n    );\n};\n\nexport default TextField;\n","import { Box, Container, makeStyles, Paper } from '@material-ui/core';\nimport { FormikErrors, useFormik } from 'formik';\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { ClubhouseLocation, useAuthContext } from '../context/AuthProvider';\nimport Button from '../ui/Button';\nimport ControlledDropdown from '../ui/ControlledDropdown';\nimport TextField from '../ui/TextField';\nimport { useToastContext } from '../ui/ToastContext';\n\ninterface FormValues {\n    username: string;\n    password: string;\n    location: ClubhouseLocation | null;\n}\n\nconst initialFormValues: FormValues = {\n    username: '',\n    password: '',\n    location: null,\n};\n\nconst useStyles = makeStyles(({ spacing }) => ({\n    formGap: {\n        '& > *:not(:last-child)': {\n            paddingBottom: spacing(2),\n        },\n    },\n}));\n\nconst locationDropdownOptions = [\n    {\n        key: 'beaverton',\n        text: 'Beaverton',\n        value: 'ch1',\n    },\n    {\n        key: 'hillsboro',\n        text: 'Hillsboro',\n        value: 'ch2',\n    },\n];\n\nconst validate = ({ username, password, location }: FormValues) => {\n    const errors: FormikErrors<FormValues> = {};\n\n    if (!username) {\n        errors.username = 'Required';\n    }\n\n    if (!password) {\n        errors.password = 'Required';\n    }\n\n    if (!location) {\n        errors.location = 'Please select a location';\n    }\n\n    return errors;\n};\n\nconst Login = () => {\n    const { formGap } = useStyles();\n    const { isLoggedIn, handleLogin } = useAuthContext();\n    const createToast = useToastContext();\n\n    const onSubmit = async ({ username, password, location }: FormValues) => {\n        if (!location) return;\n\n        const data = await handleLogin(username, password, location);\n\n        if (data.token) {\n            createToast({\n                severity: 'success',\n                message: `Enjoy your time here!`,\n            });\n        } else {\n            createToast({\n                severity: 'error',\n                message: data,\n            });\n        }\n    };\n\n    const {\n        values,\n        handleChange,\n        handleSubmit,\n        setFieldValue,\n        errors,\n        isSubmitting,\n    } = useFormik({\n        initialValues: initialFormValues,\n        validate,\n        onSubmit,\n        validateOnChange: false,\n    });\n\n    if (isLoggedIn()) return <Redirect to=\"/manage-inventory\" />;\n\n    return (\n        <Container maxWidth=\"xs\">\n            <Paper variant=\"outlined\">\n                <Box p={3}>\n                    <form className={formGap}>\n                        <div>\n                            <TextField\n                                error={errors.username}\n                                name=\"username\"\n                                label=\"Username\"\n                                fullWidth\n                                onChange={handleChange}\n                            />\n                        </div>\n                        <div>\n                            <TextField\n                                error={errors.password}\n                                name=\"password\"\n                                type=\"password\"\n                                label=\"Password\"\n                                fullWidth\n                                onChange={handleChange}\n                            />\n                        </div>\n                        <ControlledDropdown\n                            error={errors.location}\n                            value={values.location || ''}\n                            label=\"Location\"\n                            name=\"location\"\n                            options={locationDropdownOptions}\n                            onChange={(v) => {\n                                setFieldValue('location', v);\n                            }}\n                        />\n                        <Button\n                            fullWidth\n                            primary\n                            onClick={() => handleSubmit()}\n                            disabled={isSubmitting}\n                        >\n                            Submit\n                        </Button>\n                    </form>\n                </Box>\n            </Paper>\n        </Container>\n    );\n};\n\nexport default Login;\n","import Axios from 'axios';\nimport { GET_LIVE_PRICE } from '../utils/endpoints';\n\ninterface ResponseData {\n    marketPrices: { foil: number; normal: number };\n    medianPrices: { foil: number; normal: number };\n}\n\ninterface Payload {\n    scryfallId: string;\n}\n\nconst marketPriceQuery = async ({ scryfallId }: Payload) => {\n    try {\n        const { data } = await Axios.get<ResponseData>(GET_LIVE_PRICE, {\n            params: { scryfallId },\n        });\n\n        const { marketPrices, medianPrices } = data;\n\n        return {\n            marketPrices,\n            medianPrices,\n        };\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default marketPriceQuery;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Finish } from '../utils/ScryfallCard';\nimport Chip from './Chip';\nimport marketPriceQuery from './marketPriceQuery';\n\ninterface Props {\n    id: string;\n    finish: Finish;\n    round: boolean;\n    showMid: boolean;\n}\n\n// Rounds the passed number to the nearest fifty cents\nconst roundNearestStep = (n: number) => Math.ceil(n * 2) / 2;\n\nconst displayPrice = (price: number | null) =>\n    !!price ? `$${price.toFixed(2)}` : 'N/A';\n\nconst MarketPrice: FC<Props> = ({ id, finish, round, showMid = true }) => {\n    const [market, setMarket] = useState<number | null>(null);\n    const [median, setMedian] = useState<number | null>(null);\n    const [loading, setLoading] = useState<boolean>(false);\n    const isFoil = finish === 'FOIL';\n\n    useEffect(() => {\n        (async function fetchData() {\n            let _isMounted = true;\n            setLoading(true);\n\n            const { marketPrices, medianPrices } = await marketPriceQuery({\n                scryfallId: id,\n            });\n\n            if (_isMounted) {\n                if (isFoil) {\n                    setMarket(Number(marketPrices.foil));\n                    setMedian(Number(medianPrices.foil));\n                } else {\n                    setMarket(Number(marketPrices.normal));\n                    setMedian(Number(medianPrices.normal));\n                }\n\n                setLoading(false);\n            }\n\n            return () => (_isMounted = false);\n        })();\n    }, [id, finish]);\n\n    const loader = <span>Loading...</span>;\n\n    return (\n        <>\n            <Chip\n                size=\"small\"\n                foil={isFoil}\n                label={\n                    loading ? (\n                        loader\n                    ) : (\n                        <span>\n                            Mkt.{' '}\n                            {round\n                                ? displayPrice(\n                                      market ? roundNearestStep(market) : null\n                                  )\n                                : displayPrice(market)}\n                        </span>\n                    )\n                }\n            />\n            {showMid && (\n                <Chip\n                    size=\"small\"\n                    foil={isFoil}\n                    label={\n                        loading ? (\n                            loader\n                        ) : (\n                            <span>Mid. {displayPrice(median)}</span>\n                        )\n                    }\n                />\n            )}\n        </>\n    );\n};\n\nexport default MarketPrice;\n","import { Chip, makeStyles } from '@material-ui/core';\nimport React, { FC, forwardRef } from 'react';\n\nconst useStyles = makeStyles({\n    container: {\n        display: 'inline-block',\n        borderRadius: 5,\n    },\n    chip: {\n        borderRadius: 5,\n    },\n    leftChip: {\n        borderTopRightRadius: 0,\n        borderBottomRightRadius: 0,\n        borderTopLeftRadius: 5,\n        borderBottomLeftRadius: 5,\n    },\n    rightChip: {\n        borderTopLeftRadius: 0,\n        borderBottomLeftRadius: 0,\n        borderTopRightRadius: 5,\n        borderBottomRightRadius: 5,\n    },\n});\n\ninterface Props {\n    label: string;\n    quantity: number;\n}\n\n/**\n * We need to forward the refs from possible tooltip implementations to this custom\n * component so `Tooltip` can access and modify the underlying children\n */\nconst InventoryChip: FC<Props> = forwardRef<HTMLDivElement, Props>(\n    (props, ref) => {\n        const { quantity, label } = props;\n        const { container, leftChip, rightChip } = useStyles();\n        const quantityColor = quantity > 0 ? 'primary' : undefined;\n\n        return (\n            <div {...props} ref={ref} className={container}>\n                <Chip\n                    color={quantityColor}\n                    className={leftChip}\n                    size=\"small\"\n                    label={label}\n                />\n                <Chip\n                    color={quantityColor}\n                    className={rightChip}\n                    size=\"small\"\n                    label={quantity}\n                />\n            </div>\n        );\n    }\n);\n\nexport default InventoryChip;\n","import { QOH } from './ScryfallCard';\n\nexport default function parseQoh(qoh: QOH) {\n    const foilQty =\n        (qoh?.FOIL_NM || 0) +\n        (qoh?.FOIL_LP || 0) +\n        (qoh?.FOIL_MP || 0) +\n        (qoh?.FOIL_HP || 0);\n\n    const nonfoilQty =\n        (qoh?.NONFOIL_NM || 0) +\n        (qoh?.NONFOIL_LP || 0) +\n        (qoh?.NONFOIL_MP || 0) +\n        (qoh?.NONFOIL_HP || 0);\n\n    return [foilQty, nonfoilQty] as const;\n}\n","import { Tooltip, Typography } from '@material-ui/core';\nimport React, { FC } from 'react';\nimport InventoryChip from '../ui/InventoryChip';\nimport displayFinishCondition from '../utils/finishCondition';\nimport parseQoh from '../utils/parseQoh';\nimport { QOH } from '../utils/ScryfallCard';\n\nexport const createInventoryLineItems = (\n    inventoryQty: QOH,\n    matchStrings: (keyof QOH)[]\n): string[] => {\n    const matches = matchStrings\n        .map((finishCondition) => {\n            const quantity = inventoryQty[finishCondition];\n            if (quantity && quantity > 0)\n                return `${displayFinishCondition(\n                    finishCondition\n                )}: ${quantity}`;\n        })\n        .filter((m): m is string => !!m);\n\n    if (matches.length === 0) return ['None in stock'];\n    return matches;\n};\n\ninterface Props {\n    inventoryQty: QOH;\n}\n\ninterface LabelWithPopupProps {\n    quantity: number;\n    label: string;\n    popupLineItems: string[];\n}\n\nconst LabelWithPopup: FC<LabelWithPopupProps> = ({\n    quantity,\n    label,\n    popupLineItems,\n}) => (\n    <Tooltip\n        title={popupLineItems.map((item) => (\n            <Typography key={Math.random()} variant=\"body2\">\n                {item}\n            </Typography>\n        ))}\n        arrow\n        placement=\"top\"\n    >\n        <InventoryChip quantity={quantity} label={label} />\n    </Tooltip>\n);\n\n// This component parses the `qoh` object from mongo into something more presentable\nconst QohLabels: FC<Props> = ({ inventoryQty }) => {\n    const [foilQuantity, nonfoilQuantity] = parseQoh(inventoryQty);\n\n    const foilLineItems = createInventoryLineItems(inventoryQty, [\n        'FOIL_NM',\n        'FOIL_LP',\n        'FOIL_MP',\n        'FOIL_HP',\n    ]);\n\n    const nonfoilLineItems = createInventoryLineItems(inventoryQty, [\n        'NONFOIL_NM',\n        'NONFOIL_LP',\n        'NONFOIL_MP',\n        'NONFOIL_HP',\n    ]);\n\n    return (\n        <>\n            <LabelWithPopup\n                label=\"Foil\"\n                quantity={foilQuantity}\n                popupLineItems={foilLineItems}\n            />\n            <LabelWithPopup\n                label=\"Nonfoil\"\n                quantity={nonfoilQuantity}\n                popupLineItems={nonfoilLineItems}\n            />\n        </>\n    );\n};\n\nexport default QohLabels;\n","import { LanguageCode } from './ScryfallCard';\n\nconst LANG_CODES: Record<LanguageCode, string> = {\n    en: 'English',\n    es: 'Spanish',\n    fr: 'French',\n    de: 'German',\n    it: 'Italian',\n    pt: 'Portuguese',\n    ja: 'Japanese',\n    ko: 'Korean',\n    ru: 'Russian',\n    zhs: 'Simplified Chinese',\n    zht: 'Traditional Chinese',\n    he: 'Hebrew',\n    la: 'Latin',\n    grc: 'Ancient Greek',\n    ar: 'Arabic',\n    sa: 'Sanskrit',\n    px: 'Phyrexian',\n};\n\nfunction language(languageCode: LanguageCode): string {\n    return LANG_CODES[languageCode];\n}\n\nexport default language;\n","import { Box, Link, Typography, withStyles } from '@material-ui/core';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport React, { FC } from 'react';\nimport MarketPrice from '../common/MarketPrice';\nimport QohLabels from '../common/QohLabels';\nimport language from '../utils/Language';\nimport { Finish, ScryfallCard } from '../utils/ScryfallCard';\nimport Button from './Button';\nimport SetIcon from './SetIcon';\n\ninterface Props {\n    card: ScryfallCard;\n    selectedFinish: Finish;\n    showMid?: boolean;\n    round?: boolean;\n}\n\n// TODO: remove this shim after TCG api approval and integration\nconst TcgPriceButton: FC<{ tcgId: number | null }> = ({ tcgId }) => {\n    const tcgUrl = `https://www.tcgplayer.com/product/${tcgId}`;\n\n    if (!tcgId) {\n        return (\n            <Button disabled size=\"small\">\n                TCG Link unavailable\n            </Button>\n        );\n    }\n\n    return (\n        <Link href={tcgUrl} target=\"_blank\" underline=\"none\">\n            <Button size=\"small\">\n                View on TCG <OpenInNewIcon fontSize=\"small\" />\n            </Button>\n        </Link>\n    );\n};\n\nconst SubheaderContainer = withStyles(({ spacing }) => ({\n    root: {\n        '& > div': {\n            marginRight: spacing(1),\n        },\n    },\n}))(Box);\n\nconst CardHeader: FC<Props> = ({\n    card,\n    selectedFinish,\n    showMid = false,\n    round = false,\n}) => {\n    const {\n        id,\n        display_name,\n        set,\n        rarity,\n        set_name,\n        qoh,\n        lang,\n        tcgplayer_id,\n    } = card;\n\n    return (\n        <Box>\n            <Box display=\"flex\" alignItems=\"center\">\n                <Typography variant=\"h6\">\n                    <b>{display_name}</b>\n                </Typography>\n                <SetIcon set={set} rarity={rarity} />\n            </Box>\n            <SubheaderContainer>\n                <Typography variant=\"body2\">\n                    {set_name} ({set.toUpperCase()}) - {language(lang)}\n                </Typography>\n                <QohLabels inventoryQty={qoh} />\n                <MarketPrice\n                    id={id}\n                    finish={selectedFinish}\n                    showMid={showMid}\n                    round={round}\n                />\n                <TcgPriceButton tcgId={tcgplayer_id} />\n            </SubheaderContainer>\n        </Box>\n    );\n};\n\nexport default CardHeader;\n","import { Box, Grid, makeStyles, Paper } from '@material-ui/core';\nimport React, { FC, ReactNode } from 'react';\n\ninterface Props {\n    image: ReactNode;\n    header: ReactNode;\n}\n\nconst useStyles = makeStyles(({ spacing }) => ({\n    headerContainer: {\n        paddingBottom: spacing(3),\n    },\n}));\n\nconst CardRowContainer: FC<Props> = ({ image, header, children }) => {\n    const { headerContainer } = useStyles();\n\n    return (\n        <Paper variant=\"outlined\">\n            <Box p={2}>\n                <Grid container spacing={2}>\n                    <Grid item>{image}</Grid>\n                    <Grid item xs={10}>\n                        <div className={headerContainer}>{header}</div>\n                        <div>{children}</div>\n                    </Grid>\n                </Grid>\n            </Box>\n        </Paper>\n    );\n};\n\nexport default CardRowContainer;\n","import { Finish } from '../utils/ScryfallCard';\n\ninterface CardFinishState {\n    selectedFinish: Finish;\n    finishDisabled: boolean;\n}\n\n/**\n * Seeds state from props. Used to determine if cards have only foil, nonfoil, or both printings\n * from their `foil` and `nonfoil` properties\n *\n * @param {Boolean} nonfoilProp\n * @param {Boolean} foilProp\n */\nexport default function checkCardFinish(\n    nonfoil: boolean,\n    foil: boolean\n): CardFinishState {\n    if (!nonfoil && foil) {\n        return { selectedFinish: 'FOIL', finishDisabled: true };\n    } else if (nonfoil && !foil) {\n        return { selectedFinish: 'NONFOIL', finishDisabled: true };\n    } else {\n        return { selectedFinish: 'NONFOIL', finishDisabled: false };\n    }\n}\n","import { Box, Grid } from '@material-ui/core';\nimport { FormikErrors, FormikHelpers, useFormik } from 'formik';\nimport $ from 'jquery';\nimport React, { ChangeEvent, FC, useContext, useState } from 'react';\nimport CardImage from '../common/CardImage';\nimport { InventoryContext } from '../context/InventoryContext';\nimport Button from '../ui/Button';\nimport CardHeader from '../ui/CardHeader';\nimport CardRowContainer from '../ui/CardRowContainer';\nimport ControlledDropdown from '../ui/ControlledDropdown';\nimport TextField from '../ui/TextField';\nimport { useToastContext } from '../ui/ToastContext';\nimport checkCardFinish from '../utils/checkCardFinish';\nimport createFinishCondition from '../utils/createFinishCondtition';\nimport { cardConditions, finishes } from '../utils/dropdownOptions';\nimport { Condition, Finish, ScryfallCard } from '../utils/ScryfallCard';\nimport addCardToInventoryQuery from './addCardToInventoryQuery';\n\ninterface Props {\n    card: ScryfallCard;\n}\n\ninterface FormValues {\n    selectedFinish: Finish;\n    selectedCondition: Condition;\n    quantity: string;\n}\n\nconst validate = ({ quantity }: FormValues) => {\n    let errors: FormikErrors<FormValues> = {};\n\n    if (!Number(quantity) || !Number.isInteger(+quantity) || +quantity > 100) {\n        errors.quantity = 'error';\n    }\n\n    return errors;\n};\n\nconst ManageInventoryListItem: FC<Props> = ({ card }) => {\n    const createToast = useToastContext();\n    const { foil, nonfoil, name, set_name, set, id, cardImage } = card;\n\n    const [selectedFinish, setSelectedFinish] = useState<Finish>(\n        checkCardFinish(nonfoil, foil).selectedFinish\n    );\n\n    const { changeCardQuantity } = useContext(InventoryContext);\n\n    const initialFormValues: FormValues = {\n        selectedFinish: checkCardFinish(nonfoil, foil).selectedFinish,\n        selectedCondition: 'NM',\n        quantity: '0',\n    };\n\n    const onSubmit = async (\n        { quantity, selectedFinish, selectedCondition }: FormValues,\n        { resetForm }: FormikHelpers<FormValues>\n    ) => {\n        try {\n            const { qoh } = await addCardToInventoryQuery({\n                quantity: parseInt(quantity, 10),\n                finishCondition: createFinishCondition(\n                    selectedFinish,\n                    selectedCondition\n                ),\n                cardInfo: { id, name, set_name, set },\n            });\n\n            // Imperatively reset the form using Formik actions\n            resetForm();\n\n            changeCardQuantity(id, qoh);\n\n            createToast({\n                severity: 'success',\n                message: `${quantity}x ${name} ${\n                    parseInt(quantity, 10) > 0 ? 'added' : 'removed'\n                }!`,\n            });\n\n            // Highlight the input after successful card add\n            $('#searchBar').focus().select();\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const {\n        values,\n        handleSubmit,\n        setFieldValue,\n        isSubmitting,\n        isValid,\n    } = useFormik({\n        initialValues: initialFormValues,\n        validate,\n        onSubmit,\n        validateOnMount: true,\n    });\n\n    return (\n        <CardRowContainer\n            image={\n                <Box width={100}>\n                    <CardImage image={cardImage} hover />\n                </Box>\n            }\n            header={\n                <CardHeader card={card} selectedFinish={selectedFinish} round />\n            }\n        >\n            <form onSubmit={handleSubmit}>\n                <Grid container alignItems=\"center\" spacing={2}>\n                    <Grid item>\n                        <TextField\n                            type=\"number\"\n                            label=\"Quantity\"\n                            value={values.quantity}\n                            onChange={(e: ChangeEvent<HTMLInputElement>) =>\n                                setFieldValue('quantity', e.target.value)\n                            }\n                            onFocus={() => {\n                                if (+values.quantity === 0) {\n                                    setFieldValue('quantity', '');\n                                }\n                            }}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <ControlledDropdown\n                            name=\"finish\"\n                            label=\"Finish\"\n                            value={values.selectedFinish}\n                            options={finishes}\n                            disabled={\n                                checkCardFinish(nonfoil, foil).finishDisabled\n                            }\n                            onChange={(value) => {\n                                setSelectedFinish(value as Finish);\n                                setFieldValue('selectedFinish', value);\n                            }}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <ControlledDropdown\n                            name=\"condition\"\n                            label=\"Condition\"\n                            value={values.selectedCondition}\n                            options={cardConditions}\n                            onChange={(value) => {\n                                setFieldValue('selectedCondition', value);\n                            }}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            type=\"submit\"\n                            primary\n                            disabled={!isValid || isSubmitting}\n                        >\n                            Add to inventory\n                        </Button>\n                    </Grid>\n                </Grid>\n            </form>\n        </CardRowContainer>\n    );\n};\n\nexport default ManageInventoryListItem;\n","import axios from 'axios';\nimport { GET_CARD_FROM_ALL_LOCATIONS } from '../utils/endpoints';\n\ninterface Quantities {\n    foilQty: number;\n    nonfoilQty: number;\n}\n\nexport interface ResponseData {\n    ch1: Quantities;\n    ch2: Quantities;\n}\n\ninterface Payload {\n    title: string;\n}\n\n/**\n * Fetches total inventory for the given card name across all store locations\n */\nconst allLocationInventoryQuery = async ({ title }: Payload) => {\n    try {\n        const { data } = await axios.get<ResponseData>(\n            GET_CARD_FROM_ALL_LOCATIONS,\n            {\n                params: { title },\n            }\n        );\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default allLocationInventoryQuery;\n","import { Box, makeStyles, Typography } from '@material-ui/core';\nimport React, { FC, useEffect, useState } from 'react';\nimport InventoryChip from '../ui/InventoryChip';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport allLocationInventoryQuery, {\n    ResponseData,\n} from './allLocationInventoryQuery';\n\nconst useStyles = makeStyles(({ spacing }) => ({\n    labelContainer: {\n        display: 'flex',\n        alignItems: 'center',\n        '& > *': {\n            marginLeft: spacing(2),\n        },\n    },\n    chipContainer: {\n        display: 'inline',\n        '& > *': {\n            display: 'inline',\n        },\n        '& > *:first-child': {\n            paddingRight: spacing(1),\n        },\n    },\n}));\n\ninterface Props {\n    title: string;\n    searchResults: ScryfallCard[];\n}\n\nconst TotalStoreInventory: FC<Props> = ({ title, searchResults }) => {\n    const { labelContainer, chipContainer } = useStyles();\n    const [quantities, setQuantities] = useState<ResponseData>({\n        ch1: { foilQty: 0, nonfoilQty: 0 },\n        ch2: { foilQty: 0, nonfoilQty: 0 },\n    });\n\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                setLoading(true);\n                const data = await allLocationInventoryQuery({ title });\n                setQuantities(data);\n                setLoading(false);\n            } catch (err) {\n                console.log(err);\n            }\n        })();\n    }, [title, searchResults]);\n\n    if (loading) {\n        return (\n            <div className={labelContainer}>\n                <div>\n                    <Typography>Beaverton totals:</Typography>\n                    <Typography>Loading...</Typography>\n                </div>\n                <div>\n                    <Typography>Hillsboro totals:</Typography>\n                    <Typography>Loading...</Typography>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className={labelContainer}>\n            <div>\n                <Typography>Beaverton totals:</Typography>\n                <Box className={chipContainer}>\n                    <InventoryChip\n                        label=\"Foil\"\n                        quantity={quantities.ch1.foilQty}\n                    />\n                    <InventoryChip\n                        label=\"Nonfoil\"\n                        quantity={quantities.ch1.nonfoilQty}\n                    />\n                </Box>\n            </div>\n            <div>\n                <Typography>Hillsboro totals:</Typography>\n                <Box className={chipContainer}>\n                    <InventoryChip\n                        label=\"Foil\"\n                        quantity={quantities.ch2.foilQty}\n                    />\n                    <InventoryChip\n                        label=\"Nonfoil\"\n                        quantity={quantities.ch2.nonfoilQty}\n                    />\n                </Box>\n            </div>\n        </div>\n    );\n};\n\nexport default TotalStoreInventory;\n","import { Grid } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { InventoryContext } from '../context/InventoryContext';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport Loading from '../ui/Loading';\nimport Placeholder from '../ui/Placeholder';\nimport { HeaderText } from '../ui/Typography';\nimport ManageInventoryListItem from './ManageInventoryListItem';\nimport TotalStoreInventory from './TotalStoreInventory';\n\nexport default function ManageInventory() {\n    const [term, setTerm] = useState<string>('');\n    const [loading, setLoading] = useState<boolean>(false);\n    const { searchResults, handleSearchSelect } = useContext(InventoryContext);\n\n    useEffect(() => {\n        if (term) {\n            (async () => {\n                setLoading(true);\n                await handleSearchSelect(term);\n                setLoading(false);\n            })();\n        }\n    }, [term]);\n\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={12} md={4}>\n                    <ControlledSearchBar\n                        value={term}\n                        onChange={(v) => setTerm(v)}\n                    />\n                </Grid>\n            </Grid>\n            <br />\n            <Grid container justify=\"space-between\">\n                <HeaderText>Manage Inventory</HeaderText>\n                {searchResults.length > 0 && (\n                    <TotalStoreInventory\n                        searchResults={searchResults}\n                        title={searchResults[0].name}\n                    />\n                )}\n            </Grid>\n            <br />\n            {loading ? (\n                <Loading />\n            ) : (\n                <>\n                    {!searchResults.length && (\n                        <Placeholder\n                            icon={<SearchIcon style={{ fontSize: 80 }} />}\n                        >\n                            <em>\n                                \"For the first time in his life, Grakk felt a\n                                little warm and fuzzy inside.\"\n                            </em>\n                        </Placeholder>\n                    )}\n                    <Grid container spacing={2}>\n                        {searchResults.map((card) => (\n                            <Grid item xs={12} key={card.id}>\n                                <ManageInventoryListItem card={card} />\n                            </Grid>\n                        ))}\n                    </Grid>\n                </>\n            )}\n        </>\n    );\n}\n","import { Divider, List, ListItem, ListItemIcon } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter';\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport ListAltIcon from '@material-ui/icons/ListAlt';\nimport QueueIcon from '@material-ui/icons/Queue';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport React, { FC } from 'react';\nimport { Link as RouterLink, useLocation } from 'react-router-dom';\nimport { useAuthContext } from '../context/AuthProvider';\n\nconst NavLinks: FC<{}> = () => {\n    const { pathname } = useLocation();\n    const { handleLogout } = useAuthContext();\n\n    return (\n        <List>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/manage-inventory\"\n                selected={pathname === '/manage-inventory'}\n                replace\n            >\n                <ListItemIcon>\n                    <AddIcon color=\"primary\" />\n                </ListItemIcon>\n                Manage Inventory\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/bulk-add\"\n                selected={pathname === '/bulk-add'}\n                replace\n            >\n                <ListItemIcon>\n                    <QueueIcon color=\"primary\" />\n                </ListItemIcon>\n                Bulk Entry\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/new-sale\"\n                selected={pathname === '/new-sale'}\n                replace\n            >\n                <ListItemIcon>\n                    <AttachMoneyIcon color=\"primary\" />\n                </ListItemIcon>\n                New Sale\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/receiving\"\n                selected={pathname === '/receiving'}\n                replace\n            >\n                <ListItemIcon>\n                    <ListAltIcon color=\"primary\" />\n                </ListItemIcon>\n                Receiving\n            </ListItem>\n            <Divider />\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/browse-inventory\"\n                selected={pathname === '/browse-inventory'}\n                replace\n            >\n                <ListItemIcon>\n                    <BusinessCenterIcon color=\"primary\" />\n                </ListItemIcon>\n                Browse Inventory\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/browse-sales\"\n                selected={pathname === '/browse-sales'}\n                replace\n            >\n                <ListItemIcon>\n                    <VisibilityIcon color=\"primary\" />\n                </ListItemIcon>\n                Browse Sales\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/browse-receiving\"\n                selected={pathname === '/browse-receiving'}\n                replace\n            >\n                <ListItemIcon>\n                    <ViewListIcon color=\"primary\" />\n                </ListItemIcon>\n                Browse Receiving\n            </ListItem>\n            <ListItem\n                button\n                component={RouterLink}\n                to=\"/reporting\"\n                selected={pathname === '/reporting'}\n                replace\n            >\n                <ListItemIcon>\n                    <EqualizerIcon color=\"primary\" />\n                </ListItemIcon>\n                Reporting (Beta)\n            </ListItem>\n            <Divider />\n            <ListItem button onClick={() => handleLogout()}>\n                <ListItemIcon>\n                    <ExitToAppIcon color=\"primary\" />\n                </ListItemIcon>\n                Log Out\n            </ListItem>\n        </List>\n    );\n};\n\nexport default NavLinks;\n","import {\n    AppBar,\n    Box,\n    Drawer,\n    Grid,\n    IconButton,\n    makeStyles,\n    Toolbar,\n    Typography,\n} from '@material-ui/core';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport React, { FC, useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { version } from '../../package.json';\nimport { ClubhouseLocation, useAuthContext } from '../context/AuthProvider';\nimport NavLinks from './NavLinks';\n\nconst useStyles = makeStyles(({ spacing, typography, palette }) => ({\n    title: {\n        flexGrow: 1,\n    },\n    menuLinkText: {\n        fontWeight: typography.fontWeightBold,\n        '&:hover': {\n            color: palette.common.white,\n        },\n    },\n    list: {\n        width: 250,\n    },\n    menuButton: {\n        marginRight: spacing(2),\n    },\n}));\n\n// TODO: This information needs to be populated on the backend via a collection of shop entities\nconst getClubhouseLocationName = (location: ClubhouseLocation | null) => {\n    if (location === 'ch1') return 'Beaverton';\n    if (location === 'ch2') return 'Hillsboro';\n    return '';\n};\n\nconst NavBar: FC<{}> = () => {\n    const { isLoggedIn, currentLocation, currentUser } = useAuthContext();\n    const [drawerOpen, setDrawerOpen] = useState<boolean>(false);\n    const { title, list, menuButton, menuLinkText } = useStyles();\n\n    return (\n        <AppBar>\n            <Toolbar>\n                {isLoggedIn() && (\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        className={menuButton}\n                        onClick={() => setDrawerOpen(true)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                )}\n                <div className={title}>\n                    <Typography\n                        color=\"inherit\"\n                        className={menuLinkText}\n                        component={RouterLink}\n                        variant=\"h6\"\n                        to=\"/\"\n                    >\n                        Clubhouse Collection\n                    </Typography>\n                </div>\n                <Typography\n                    color=\"inherit\"\n                    className={menuLinkText}\n                    component={RouterLink}\n                    variant=\"button\"\n                    to=\"/public-inventory\"\n                >\n                    Search cards\n                </Typography>\n                <Drawer\n                    anchor=\"left\"\n                    open={drawerOpen}\n                    onClose={() => setDrawerOpen(false)}\n                >\n                    <Box\n                        py={2}\n                        display=\"flex\"\n                        flexDirection=\"column\"\n                        justifyContent=\"space-between\"\n                        height={1}\n                    >\n                        <div>\n                            <Grid\n                                container\n                                direction=\"row\"\n                                alignItems=\"center\"\n                                justify=\"center\"\n                            >\n                                <LocationOnIcon color=\"primary\" />\n                                <Typography color=\"primary\" variant=\"h6\">\n                                    {getClubhouseLocationName(currentLocation)}\n                                </Typography>\n                            </Grid>\n                            <Typography color=\"textSecondary\" align=\"center\">\n                                Logged in as {currentUser}\n                            </Typography>\n                            <div\n                                className={list}\n                                onClick={() => setDrawerOpen(false)}\n                            >\n                                <NavLinks />\n                            </div>\n                        </div>\n                        <Typography color=\"textSecondary\" align=\"center\">\n                            Version {version}\n                        </Typography>\n                    </Box>\n                </Drawer>\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nexport default NavBar;\n","import { makeStyles } from '@material-ui/core';\nimport React, { FC } from 'react';\nimport CardImage from '../common/CardImage';\nimport MarketPrice from '../common/MarketPrice';\nimport InventoryChip from '../ui/InventoryChip';\nimport parseQoh from '../utils/parseQoh';\nimport { ScryfallCard } from '../utils/ScryfallCard';\n\ninterface Props {\n    card: ScryfallCard;\n}\n\n// These numbers were the originally calculated px values\nconst cardImageRatio = 418.3 / 300;\nconst cardImageWidth = 275;\nconst cardImageHeight = cardImageRatio * cardImageWidth;\n\nconst useStyles = makeStyles(() => ({\n    imageWrapper: {\n        width: `${cardImageWidth}px`,\n        height: `${cardImageHeight}px`,\n        boxShadow: `2px 2px 5px 0 rgba(0, 0, 0, 0.25)`,\n        background: `repeating-linear-gradient(\n            45deg,\n            #bfbfbf,\n            #bfbfbf 10px,\n            #b0b0b0 10px,\n            #b0b0b0 20px\n        )`,\n        borderRadius: `15px`,\n        '& > img': {\n            borderRadius: '15px',\n        },\n    },\n    inventoryRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        margin: '5px',\n    },\n    inventoryWrapper: {\n        display: 'flex',\n        width: '100%',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        padding: ' 5px',\n        backgroundColor: 'rgba(0, 0, 0, 0.9)',\n        borderRadius: '10px 10px 10px 10px',\n        boxShadow: '2px 2px 5px 0 rgba(0, 0, 0, 0.25)',\n    },\n    wrapper: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        width: `${cardImageWidth}px`,\n    },\n}));\n\nconst PublicCard: FC<Props> = ({ card }) => {\n    const {\n        imageWrapper,\n        inventoryRow,\n        inventoryWrapper,\n        wrapper,\n    } = useStyles();\n    const { id, cardImage } = card;\n    const [foilQty, nonfoilQty] = parseQoh(card.qoh);\n\n    return (\n        <div className={wrapper}>\n            <div className={imageWrapper}>\n                <CardImage image={cardImage} />\n            </div>\n            <div className={inventoryWrapper}>\n                {foilQty > 0 && (\n                    <div className={inventoryRow}>\n                        <InventoryChip quantity={foilQty} label=\"Foil\" />\n                        <MarketPrice\n                            id={id}\n                            finish=\"FOIL\"\n                            round\n                            showMid={false}\n                        />\n                    </div>\n                )}\n                {nonfoilQty > 0 && (\n                    <div className={inventoryRow}>\n                        <InventoryChip quantity={nonfoilQty} label=\"Nonfoil\" />\n                        <MarketPrice\n                            id={id}\n                            finish=\"NONFOIL\"\n                            round\n                            showMid={false}\n                        />\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default PublicCard;\n","import axios from 'axios';\nimport { ClubhouseLocation } from '../context/AuthProvider';\nimport { GET_CARDS_WITH_INFO_PUBLIC } from '../utils/endpoints';\nimport { ScryfallApiCard, ScryfallCard } from '../utils/ScryfallCard';\n\ninterface Params {\n    title: string;\n    matchInStock: boolean;\n    location: ClubhouseLocation;\n}\n\n/**\n * Fetches cards from the DB by title when a user selects a title after querying.\n * This function merges the data (inventory quantity and card objects) from two endpoints into one array.\n */\nconst publicCardSearchQuery = async (params: Params) => {\n    try {\n        const { data } = await axios.get<ScryfallApiCard[]>(\n            GET_CARDS_WITH_INFO_PUBLIC,\n            {\n                params,\n            }\n        );\n\n        return data.map((d) => new ScryfallCard(d));\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default publicCardSearchQuery;\n","import { Grid, makeStyles, Typography } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { FormikErrors, useFormik } from 'formik';\nimport React, { FC, useState } from 'react';\nimport { ClubhouseLocation } from '../context/AuthProvider';\nimport Button from '../ui/Button';\nimport ControlledDropdown from '../ui/ControlledDropdown';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport Placeholder from '../ui/Placeholder';\nimport { HeaderText } from '../ui/Typography';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport PublicCard from './PublicCard';\nimport publicCardSearchQuery from './publicCardSearchQuery';\n\ninterface State {\n    searchResults: ScryfallCard[];\n    searchTerm: string;\n    selectedLocation: ClubhouseLocation;\n}\n\ninterface FormValues {\n    searchTerm: string;\n    selectedLocation: ClubhouseLocation;\n}\n\nconst useStyles = makeStyles({\n    gridContainer: {\n        display: 'grid',\n        gridGap: '20px',\n        gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))',\n        justifyItems: 'center',\n    },\n});\n\nconst initialState: State = {\n    searchResults: [],\n    searchTerm: '',\n    selectedLocation: 'ch1',\n};\n\nconst initialFormState: FormValues = {\n    searchTerm: '',\n    selectedLocation: 'ch1',\n};\n\nconst locationOptions = [\n    { key: 'beaverton', text: 'CH Beaverton', value: 'ch1' },\n    { key: 'hillsboro', text: 'CH Hillsboro', value: 'ch2' },\n];\n\nconst validate = ({ searchTerm }: FormValues) => {\n    let errors: FormikErrors<FormValues> = {};\n\n    if (!searchTerm) {\n        errors.searchTerm = 'error';\n    }\n\n    return errors;\n};\n\nconst PublicInventory: FC = () => {\n    const { gridContainer } = useStyles();\n    const [state, setState] = useState<State>(initialState);\n    const [formSubmitted, setFormSubmitted] = useState<boolean>(false);\n\n    const fetchCards = async ({\n        title,\n        location,\n    }: {\n        title: string;\n        location: ClubhouseLocation;\n    }) => {\n        try {\n            const cards = await publicCardSearchQuery({\n                title,\n                location,\n                matchInStock: true,\n            });\n\n            setState({\n                ...state,\n                searchResults: cards,\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const onSubmit = async ({ searchTerm, selectedLocation }: FormValues) => {\n        await fetchCards({\n            title: searchTerm,\n            location: selectedLocation,\n        });\n\n        setFormSubmitted(true);\n    };\n\n    const { values, handleSubmit, setFieldValue, isSubmitting } = useFormik({\n        initialValues: initialFormState,\n        validate,\n        onSubmit,\n    });\n\n    return (\n        <>\n            <HeaderText>Inventory Search</HeaderText>\n            <Typography>\n                Card prices subject to change. Consult a Clubhouse employee for\n                final estimates\n            </Typography>\n            <br />\n            <form onSubmit={handleSubmit}>\n                <Grid container spacing={2} alignItems=\"center\">\n                    <Grid item xs={12} md={4}>\n                        <ControlledSearchBar\n                            value={values.searchTerm}\n                            onChange={(v) => setFieldValue('searchTerm', v)}\n                        />\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                        <ControlledDropdown\n                            name=\"storeLocation\"\n                            value={values.selectedLocation}\n                            options={locationOptions}\n                            onChange={(v) =>\n                                setFieldValue('selectedLocation', v)\n                            }\n                        />\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                        <Button\n                            type=\"submit\"\n                            primary\n                            disabled={!values.searchTerm || isSubmitting}\n                        >\n                            Search\n                        </Button>\n                    </Grid>\n                </Grid>\n            </form>\n            <br />\n            {state.searchResults.length > 0 ? (\n                <div className={gridContainer}>\n                    {state.searchResults.map((c) => (\n                        <PublicCard key={c.id} card={c} />\n                    ))}\n                </div>\n            ) : (\n                <Placeholder icon={<SearchIcon style={{ fontSize: 80 }} />}>\n                    {formSubmitted ? (\n                        <span>No cards found in stock</span>\n                    ) : (\n                        <span>Search for a card</span>\n                    )}\n                </Placeholder>\n            )}\n        </>\n    );\n};\n\nexport default PublicInventory;\n","import React, { FC } from 'react';\nimport pluralize from '../utils/pluralize';\nimport Chip from './Chip';\n\ninterface Props {\n    listLength: number;\n}\n\nconst TotalCardsLabel: FC<Props> = ({ listLength }) => {\n    if (listLength === 0) return null;\n\n    return (\n        <Chip\n            label={`${listLength} ${pluralize(listLength, 'card')}`}\n            size=\"small\"\n        />\n    );\n};\n\nexport default TotalCardsLabel;\n","import { useEffect, useState } from 'react';\n\n/**\n * The browser emits a \"beforeunload\" event right before the user closes a tab or refreshes\n * to indicate freeing resources. We interrupt this process and render a confirmation dialog.\n */\nconst onInterrupt = (e: BeforeUnloadEvent) => {\n    e.preventDefault();\n    e.returnValue = '';\n};\n\nconst initBeforeUnload = (showPrompt: boolean) => {\n    if (showPrompt) {\n        window.addEventListener('beforeunload', onInterrupt);\n    } else {\n        window.removeEventListener('beforeunload', onInterrupt);\n    }\n};\n\n/**\n * Custom hook that tracks whether or not we add the listener event,\n * based on an initial value.\n */\nconst useInterruptExit = (initial: boolean) => {\n    const [showPrompt, setShowPrompt] = useState<boolean>(initial);\n\n    initBeforeUnload(showPrompt);\n\n    useEffect(() => {\n        initBeforeUnload(showPrompt);\n\n        // Remember to remove the listener on unmount!\n        return () => {\n            window.removeEventListener('beforeunload', onInterrupt);\n        };\n    }, [showPrompt]);\n\n    return { showPrompt, setShowPrompt };\n};\n\nexport default useInterruptExit;\n","import { Box, Grid, IconButton, ListItem, Typography } from '@material-ui/core';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport CloseIcon from '@material-ui/icons/Close';\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\nimport React, { FC } from 'react';\nimport Chip from '../common/Chip';\nimport Price from '../common/Price';\nimport {\n    ReceivingCard,\n    Trade,\n    useReceivingContext,\n} from '../context/ReceivingContext';\nimport CardImageTooltip from '../ui/CardImageTooltip';\nimport SetIcon from '../ui/SetIcon';\n\ninterface Props {\n    card: ReceivingCard;\n}\n\n// Defines whether it uses cash or credit for trade types\nconst TRADE_TYPE = { CASH: 'CASH', CREDIT: 'CREDIT' };\n\nconst ReceivingCartItem: FC<Props> = ({ card }) => {\n    const {\n        display_name,\n        set,\n        rarity,\n        cashPrice,\n        creditPrice,\n        finishCondition,\n        tradeType,\n        cardImage,\n    } = card;\n    const { CASH, CREDIT } = TRADE_TYPE;\n    const { removeFromList, activeTradeType } = useReceivingContext();\n\n    return (\n        <ListItem>\n            <Grid container alignItems=\"center\" justify=\"space-between\">\n                <Grid item>\n                    <CardImageTooltip cardImage={cardImage}>\n                        <Box display=\"flex\" alignItems=\"center\">\n                            <Typography variant=\"h6\" style={{ cursor: 'help' }}>\n                                {display_name}\n                            </Typography>\n                            <SetIcon set={set} rarity={rarity} />\n                            <Chip size=\"small\" label={set.toUpperCase()} />\n                        </Box>\n                    </CardImageTooltip>\n                    {finishCondition && (\n                        <span>\n                            {finishCondition.split('_')[1]} {' | '}\n                            {finishCondition.split('_')[0]}\n                        </span>\n                    )}\n                    <div>\n                        <span style={{ whiteSpace: 'nowrap' }}>\n                            Cash:{' '}\n                            <b>\n                                <Price num={cashPrice || 0} />\n                            </b>\n                        </span>\n                        {' • '}\n                        <span style={{ whiteSpace: 'nowrap' }}>\n                            Credit:{' '}\n                            <b>\n                                <Price num={creditPrice || 0} />\n                            </b>\n                        </span>\n                    </div>\n                </Grid>\n                <Grid item>\n                    <IconButton\n                        color={tradeType === CASH ? 'primary' : undefined}\n                        onClick={() => activeTradeType(card, Trade.Cash)}\n                        disabled={cashPrice === 0}\n                    >\n                        <AttachMoneyIcon />\n                    </IconButton>\n                    <IconButton\n                        color={tradeType === CREDIT ? 'primary' : undefined}\n                        onClick={() => activeTradeType(card, Trade.Credit)}\n                        disabled={creditPrice === 0}\n                    >\n                        <CreditCardIcon />\n                    </IconButton>\n                    <IconButton\n                        onClick={() => removeFromList(card)}\n                        color=\"secondary\"\n                    >\n                        <CloseIcon />\n                    </IconButton>\n                </Grid>\n            </Grid>\n        </ListItem>\n    );\n};\n\nexport default ReceivingCartItem;\n","import { Divider, List, Paper } from '@material-ui/core';\nimport React, { FC, Fragment } from 'react';\nimport { ReceivingCard } from '../context/ReceivingContext';\nimport ReceivingCartItem from './ReceivingCartItem';\n\ninterface Props {\n    cards: ReceivingCard[];\n}\n\nconst ReceivingCart: FC<Props> = ({ cards }) => {\n    return (\n        <>\n            {cards.length > 0 && (\n                <List component={Paper} variant=\"outlined\">\n                    {cards.map((card, idx, arr) => (\n                        <Fragment key={`${card.id}-${idx}`}>\n                            <ReceivingCartItem card={card} />\n                            {idx !== arr.length - 1 && <Divider />}\n                        </Fragment>\n                    ))}\n                </List>\n            )}\n        </>\n    );\n};\n\nexport default ReceivingCart;\n","import {\n    Table,\n    TableBody,\n    TableCell,\n    TableFooter,\n    TableHead,\n    TableRow,\n} from '@material-ui/core';\nimport _ from 'lodash';\nimport React, { FC } from 'react';\nimport Price from '../common/Price';\nimport { ReceivingCard } from '../context/ReceivingContext';\n\ninterface Props {\n    receivingList: ReceivingCard[];\n}\n\n// Am I crazy or is this logic really convoluted?\n// Perhaps look at this down the line for improvement...\nconst CashReport: FC<Props> = ({ receivingList }) => {\n    // If id, cashPrice and marketPrice are the same, goes in one bucket\n    const countByPriceAndID = _.chain(receivingList)\n        .filter((c) => c.tradeType === 'CASH')\n        .map((c) => {\n            // Note: We're creating a unique uuid-esque comparator string based on:\n            // `id`, `cashPrice`, `marketPrice`, and `finishCondition`\n            return {\n                ...c,\n                temp_uuid: `${c.id}-${c.cashPrice}-${c.marketPrice}-${c.finishCondition}`,\n            };\n        })\n        .groupBy('temp_uuid')\n        .mapValues((val) => val.length)\n        .value();\n\n    const uniqLineItems = _.chain(receivingList)\n        .filter((c) => c.tradeType === 'CASH')\n        .map((c) => {\n            return {\n                ...c,\n                temp_uuid: `${c.id}-${c.cashPrice}-${c.marketPrice}-${c.finishCondition}`,\n            };\n        })\n        .uniqBy('temp_uuid')\n        .value();\n\n    const mergedWithQty = uniqLineItems.map((c) => {\n        return { ...c, tradeQty: countByPriceAndID[c.temp_uuid] }; // Add a trade quantity referencing the previous count\n    });\n\n    const totalCashOut = _.chain(receivingList)\n        .filter((c) => c.tradeType === 'CASH')\n        .sumBy((c) => c.cashPrice || 0)\n        .value();\n\n    return (\n        <React.Fragment>\n            <div id=\"cash-report\">\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell colSpan={6}>Employee Name:</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>Card Name</TableCell>\n                            <TableCell>Market Value</TableCell>\n                            <TableCell>Condition</TableCell>\n                            <TableCell>Quantity</TableCell>\n                            <TableCell>Cash Offer</TableCell>\n                            <TableCell>Cash Out</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {mergedWithQty.map((c) => {\n                            return (\n                                <TableRow key={c.temp_uuid}>\n                                    <TableCell>{c.name}</TableCell>\n                                    <TableCell>\n                                        <Price num={c.marketPrice} />\n                                    </TableCell>\n                                    <TableCell>{c.finishCondition}</TableCell>\n                                    <TableCell>{c.tradeQty}</TableCell>\n                                    <TableCell>\n                                        <Price num={c.cashPrice} />\n                                    </TableCell>\n                                    <TableCell>\n                                        <Price\n                                            num={\n                                                c.tradeQty * (c.cashPrice || 0)\n                                            }\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                    <TableFooter>\n                        <TableCell colSpan={6}>\n                            Total: <Price num={totalCashOut} />\n                        </TableCell>\n                    </TableFooter>\n                </Table>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default CashReport;\n","import {\n    Box,\n    Grid,\n    MenuItem,\n    Paper,\n    Select,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n} from '@material-ui/core';\nimport moment from 'moment';\nimport React, { ChangeEvent, useEffect, useState } from 'react';\nimport Loading from '../ui/Loading';\nimport { HeaderText, SectionText } from '../ui/Typography';\nimport displayFinishCondition from '../utils/finishCondition';\nimport { price } from '../utils/price';\nimport reportingQuery, { ResponseData } from './reportingQuery';\n\ninterface SearchDates {\n    startDate: string;\n    endDate: string;\n}\n\nenum RangeName {\n    ALL_TIME = 'All time',\n    LAST_MONTH = 'Last 30 days',\n}\n\nconst allTimeDates: SearchDates = {\n    startDate: moment().year(1999).toISOString(),\n    endDate: moment().add(1, 'days').toISOString(),\n};\n\nconst lastMonthDates: SearchDates = {\n    startDate: moment().subtract(30, 'days').toISOString(),\n    endDate: moment().add(1, 'days').toISOString(),\n};\n\nconst Reporting = () => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [report, setReport] = useState<ResponseData | null>(null);\n    const [searchName, setSearchName] = useState<RangeName>(RangeName.ALL_TIME);\n    const [searchDates, setSearchDates] = useState<SearchDates>(allTimeDates);\n\n    useEffect(() => {\n        (async () => {\n            setLoading(true);\n            const data = await reportingQuery(searchDates);\n            setLoading(false);\n            setReport(data);\n        })();\n    }, [searchName, searchDates]);\n\n    const onChange = (e: ChangeEvent<{ value: unknown }>) => {\n        if (e.target.value === RangeName.ALL_TIME) {\n            setSearchName(RangeName.ALL_TIME);\n            setSearchDates(allTimeDates);\n        } else if (e.target.value === RangeName.LAST_MONTH) {\n            setSearchName(RangeName.LAST_MONTH);\n            setSearchDates(lastMonthDates);\n        } else {\n            throw new Error('Range selection not found');\n        }\n    };\n\n    return (\n        <div>\n            <Box\n                pb={2}\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"space-between\"\n            >\n                <HeaderText>Reporting</HeaderText>\n                <Select value={searchName} onChange={onChange}>\n                    <MenuItem value={RangeName.ALL_TIME}>All time</MenuItem>\n                    <MenuItem value={RangeName.LAST_MONTH}>\n                        Last 30 days\n                    </MenuItem>\n                </Select>\n            </Box>\n            {loading || !report ? (\n                <Loading />\n            ) : (\n                <Grid container spacing={2}>\n                    <Grid item xs={12} md={4}>\n                        <SectionText>Top cards sold by name</SectionText>\n                        <TableContainer component={Paper} variant=\"outlined\">\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>\n                                            <b>Quantity sold</b>\n                                        </TableCell>\n                                        <TableCell>\n                                            <b>Card name</b>\n                                        </TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {report.countByCardName.map((c) => (\n                                        <TableRow key={c._id}>\n                                            <TableCell>\n                                                {c.quantity_sold}\n                                            </TableCell>\n                                            <TableCell>\n                                                {c.card_title}\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Grid>\n                    <Grid item xs={12} md={8}>\n                        <SectionText>\n                            Top cards sold by a single printing\n                        </SectionText>\n                        <TableContainer component={Paper} variant=\"outlined\">\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>\n                                            <b>Quantity sold</b>\n                                        </TableCell>\n                                        <TableCell>\n                                            <b>Card name</b>\n                                        </TableCell>\n                                        <TableCell>\n                                            <b>Edition</b>\n                                        </TableCell>\n                                        <TableCell>\n                                            <b>Finish (Condition)</b>\n                                        </TableCell>\n                                        <TableCell>\n                                            <b>Estimated market price</b>\n                                        </TableCell>\n                                        <TableCell>\n                                            <b>Quantity on hand</b>\n                                        </TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {report.countByPrinting.map((c) => (\n                                        <TableRow key={c._id}>\n                                            <TableCell>\n                                                {c.quantity_sold}\n                                            </TableCell>\n                                            <TableCell>\n                                                {c.card_title}\n                                            </TableCell>\n                                            <TableCell>\n                                                {c.card_metadata.set_name}\n                                            </TableCell>\n                                            <TableCell>\n                                                {displayFinishCondition(\n                                                    c.finish_condition\n                                                )}\n                                            </TableCell>\n                                            <TableCell>\n                                                {c.estimated_price !== null\n                                                    ? price(c.estimated_price)\n                                                    : '—'}\n                                            </TableCell>\n                                            <TableCell>\n                                                {c.quantity_on_hand}\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Grid>\n                </Grid>\n            )}\n        </div>\n    );\n};\n\nexport default Reporting;\n","import { FormikErrors, useFormik } from 'formik';\nimport React, { FC, useState } from 'react';\nimport { Button, Form, Header, List, Modal } from 'semantic-ui-react';\nimport Price from '../common/Price';\nimport { Trade, useReceivingContext } from '../context/ReceivingContext';\nimport sum from '../utils/sum';\n\ninterface Props {}\n\ninterface FormValues {\n    customerName: string;\n    customerContact: string;\n}\n\nconst initialFormValues: FormValues = {\n    customerName: '',\n    customerContact: '',\n};\n\n// TODO: Extract and generalize this\nconst validate = ({ customerName, customerContact }: FormValues) => {\n    const errors: FormikErrors<FormValues> = {};\n\n    if (!customerName) {\n        errors.customerName = 'Required';\n    }\n\n    if (customerName.length < 3) {\n        errors.customerName = 'Min 3 characters';\n    }\n\n    if (customerName.length > 50) {\n        errors.customerName = 'Max 50 characters';\n    }\n\n    if (customerContact.length > 50) {\n        errors.customerContact = 'Max 50 characters';\n    }\n\n    return errors;\n};\n\nconst ReceivingListModal: FC<Props> = () => {\n    const [loading, setLoading] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n\n    const { receivingList, commitToInventory } = useReceivingContext();\n\n    const onSubmit = async ({ customerName, customerContact }: FormValues) => {\n        setLoading(true);\n        await commitToInventory(\n            customerName,\n            customerContact ? customerContact : null\n        );\n        setLoading(false);\n    };\n\n    const { handleChange, handleSubmit, errors } = useFormik({\n        initialValues: initialFormValues,\n        validate,\n        onSubmit,\n    });\n\n    const cashTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Trade.Cash)\n            .map((c) => c.cashPrice || 0)\n    );\n\n    const creditTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Trade.Credit)\n            .map((c) => c.creditPrice || 0)\n    );\n\n    return (\n        <>\n            <Button\n                fluid\n                color=\"blue\"\n                disabled={receivingList.length === 0}\n                onClick={() => setShowModal(true)}\n            >\n                Commit to inventory\n            </Button>\n            {setShowModal && (\n                <Modal\n                    closeOnDimmerClick={false}\n                    open={showModal}\n                    onClose={() => setShowModal(false)}\n                >\n                    <Modal.Header>Receiving confirmation</Modal.Header>\n                    <Modal.Content scrolling>\n                        <Header as=\"h5\">\n                            Committing the following cards to inventory:\n                        </Header>\n                        <List>\n                            {receivingList.map((c) => {\n                                return (\n                                    <List.Item key={c.uuid_key}>\n                                        {`● ${c.name} | ${c.set_name} (\n                                        ${c.set.toUpperCase()})`}\n                                    </List.Item>\n                                );\n                            })}\n                        </List>\n                        <Header as=\"h5\">The customer is owed:</Header>\n                        <List>\n                            {cashTotal > 0 ? (\n                                <List.Item>\n                                    ● <Price num={cashTotal} /> in cold, hard\n                                    cash\n                                </List.Item>\n                            ) : null}\n                            {creditTotal > 0 ? (\n                                <List.Item>\n                                    ● <Price num={creditTotal} /> in store\n                                    credit\n                                </List.Item>\n                            ) : null}\n                        </List>\n                    </Modal.Content>\n                    <Modal.Content>\n                        <Form>\n                            <Form.Group widths=\"equal\">\n                                <Form.Field>\n                                    <label>Customer name</label>\n                                    <Form.Input\n                                        onChange={handleChange}\n                                        name=\"customerName\"\n                                        error={errors.customerName}\n                                    />\n                                </Form.Field>\n                                <Form.Field>\n                                    <label>Customer contact (optional)</label>\n                                    <Form.Input\n                                        onChange={handleChange}\n                                        name=\"customerContact\"\n                                        error={errors.customerContact}\n                                    />\n                                </Form.Field>\n                            </Form.Group>\n                        </Form>\n                    </Modal.Content>\n                    <Modal.Actions>\n                        <Button onClick={() => setShowModal(false)}>\n                            Cancel\n                        </Button>\n                        <Button\n                            color=\"blue\"\n                            type=\"submit\"\n                            loading={loading}\n                            disabled={loading}\n                            onClick={() => handleSubmit()}\n                        >\n                            Submit\n                        </Button>\n                    </Modal.Actions>\n                </Modal>\n            )}\n        </>\n    );\n};\n\nexport default ReceivingListModal;\n","import { Box, Grid, Paper, Typography } from '@material-ui/core';\nimport React, { FC, useState } from 'react';\nimport { Button, Modal } from 'semantic-ui-react';\nimport Price from '../common/Price';\nimport { Trade, useReceivingContext } from '../context/ReceivingContext';\nimport sum from '../utils/sum';\nimport CashReport from './CashReport';\nimport printCashReport from './printCashReport';\nimport ReceivingListModal from './ReceivingListModal';\n\ninterface Props {}\n\nconst ReceivingListTotals: FC<Props> = () => {\n    const { Cash, Credit } = Trade;\n    const [showCashModal, setShowCashModal] = useState(false);\n    const { receivingList, selectAll } = useReceivingContext();\n\n    const openCashModal = () => setShowCashModal(true);\n    const closeCashModal = () => setShowCashModal(false);\n\n    const handlePrintCashReport = () => {\n        setShowCashModal(false); // Close the modal so users don't have to after printing in new tab\n        printCashReport();\n    };\n\n    const cashTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Cash)\n            .map((c) => c.cashPrice || 0)\n    );\n\n    const creditTotal = sum(\n        receivingList\n            .filter((c) => c.tradeType === Credit)\n            .map((c) => c.creditPrice || 0)\n    );\n\n    return (\n        <Paper variant=\"outlined\">\n            <Box p={2}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} justify=\"space-between\">\n                        <Button.Group fluid>\n                            <Button\n                                id=\"select-all-cash\"\n                                onClick={() => selectAll(Trade.Cash)}\n                            >\n                                Select all cash\n                            </Button>\n                            <Button.Or />\n                            <Button\n                                id=\"select-all-credit\"\n                                onClick={() => selectAll(Trade.Credit)}\n                            >\n                                Select all credit\n                            </Button>\n                        </Button.Group>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Modal\n                            open={showCashModal}\n                            trigger={\n                                <Button\n                                    floated=\"right\"\n                                    color={cashTotal > 0 ? 'green' : undefined}\n                                    disabled={cashTotal === 0}\n                                    onClick={openCashModal}\n                                >\n                                    Generate cash report\n                                </Button>\n                            }\n                        >\n                            <Modal.Content>\n                                <CashReport receivingList={receivingList} />\n                            </Modal.Content>\n                            <Modal.Actions>\n                                <Button\n                                    onClick={handlePrintCashReport}\n                                    color=\"blue\"\n                                >\n                                    Print Report\n                                </Button>\n                                <Button onClick={closeCashModal}>Cancel</Button>\n                            </Modal.Actions>\n                        </Modal>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Box\n                            display=\"flex\"\n                            justifyContent=\"space-between\"\n                            alignItems=\"center\"\n                        >\n                            <Typography>CASH DUE</Typography>\n\n                            <Typography variant=\"h6\">\n                                <b>\n                                    <Price num={cashTotal} />\n                                </b>\n                            </Typography>\n                        </Box>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Box\n                            display=\"flex\"\n                            justifyContent=\"space-between\"\n                            alignItems=\"center\"\n                        >\n                            <Typography>CREDIT DUE</Typography>\n\n                            <Typography variant=\"h6\">\n                                <b>\n                                    <Price num={creditTotal} />\n                                </b>\n                            </Typography>\n                        </Box>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <ReceivingListModal />\n                    </Grid>\n                </Grid>\n            </Box>\n        </Paper>\n    );\n};\n\nexport default ReceivingListTotals;\n","const printStyle = `\n    body {\n        font-family: 'helvetica neue', helvetica, arial, sans-serif;\n    }\n\n    table {\n        table-layout: fixed;\n        width: 100%;\n        border-collapse: collapse;\n        border: 1px solid gray;\n        text-align: left;\n    }\n\n    thead th:nth-child(1) {\n        width: 30%;\n    }\n\n    thead th:nth-child(2) {\n        width: 20%;\n    }\n\n    thead th:nth-child(3) {\n        width: 15%;\n    }\n\n    thead th:nth-child(4) {\n        width: 35%;\n    }\n\n    th, td {\n        border: 1px solid #ddd;\n        padding: 10px;\n    }\n\n    tfoot {\n        text-align: right !important;\n    }\n`;\n\n/**\n * We're creating a new tab here for the modal table and writing CSS to it - not the most elegant solution from a UX and\n * code standpoint, but time was of the essence for this release. Refactor down the road.\n *\n * The id cash-report is found on the cash report table\n */\nexport default function printCashReport() {\n    const divToPrint = document.getElementById('cash-report')!;\n    const popup = window.open('', '_blank');\n    if (popup) {\n        popup.document.open();\n        popup.document.write(`<html>`);\n        popup.document.write(`<head>`);\n        popup.document.write(`<title>Cash Report</title>`);\n        popup.document.write(`<style>${printStyle}</style>`);\n        popup.document.write(`</head>`);\n        popup.document.write(`<body onload=\"window.print()\">`);\n        popup.document.write(`${divToPrint.innerHTML}`);\n        popup.document.write(`</body>`);\n        popup.document.write(`</html>`);\n        popup.document.close();\n    }\n}\n","import { Box, Grid } from '@material-ui/core';\nimport { FormikErrors, useFormik } from 'formik';\nimport $ from 'jquery';\nimport React, { ChangeEvent, FC, FocusEvent } from 'react';\nimport CardImage from '../common/CardImage';\nimport { useReceivingContext } from '../context/ReceivingContext';\nimport Button from '../ui/Button';\nimport CardHeader from '../ui/CardHeader';\nimport CardRowContainer from '../ui/CardRowContainer';\nimport ControlledDropdown from '../ui/ControlledDropdown';\nimport TextField from '../ui/TextField';\nimport { useToastContext } from '../ui/ToastContext';\nimport checkCardFinish from '../utils/checkCardFinish';\nimport createFinishCondition from '../utils/createFinishCondtition';\nimport { cardConditions, finishes } from '../utils/dropdownOptions';\nimport { Condition, Finish, ScryfallCard } from '../utils/ScryfallCard';\n\ninterface Props {\n    card: ScryfallCard;\n}\n\ninterface FormValues {\n    quantity: number;\n    cashPrice: number;\n    creditPrice: number;\n    marketPrice: number;\n    selectedCondition: Condition;\n    selectedFinish: Finish;\n}\n\nconst validate = ({\n    quantity,\n    cashPrice,\n    creditPrice,\n    marketPrice,\n    selectedFinish,\n    selectedCondition,\n}: FormValues) => {\n    const errors: FormikErrors<FormValues> = {};\n\n    if (!quantity) errors.quantity = 'error';\n\n    if (!cashPrice && !creditPrice) {\n        errors.cashPrice = 'error';\n        errors.creditPrice = 'error';\n    }\n\n    if (cashPrice) {\n        // Cards with cash prices must have market prices specified\n        if (!marketPrice) errors.marketPrice = 'error';\n    }\n\n    if (!selectedFinish) errors.selectedFinish = 'error';\n    if (!selectedCondition) errors.selectedCondition = 'error';\n\n    // Cash, credit, and market prices should not be negative\n    if (cashPrice < 0) errors.cashPrice = 'Cannot be negative';\n    if (creditPrice < 0) errors.creditPrice = 'Cannot be negative';\n    if (marketPrice < 0) errors.marketPrice = 'Cannot be negative';\n\n    return errors;\n};\n\nconst ReceivingSearchItem: FC<Props> = ({ card }) => {\n    const createToast = useToastContext();\n    const initialValues: FormValues = {\n        quantity: 1,\n        cashPrice: 0,\n        creditPrice: 0,\n        marketPrice: 0,\n        selectedCondition: 'NM',\n        selectedFinish: checkCardFinish(card.nonfoil, card.foil).selectedFinish,\n    };\n\n    // Determines whether the select finish dropdown is permanently disabled, seeded from props\n    const finishDisabled = checkCardFinish(card.nonfoil, card.foil)\n        .finishDisabled;\n\n    const { addToList } = useReceivingContext();\n\n    const handleFocus = (\n        e: FocusEvent<HTMLInputElement | HTMLTextAreaElement>\n    ) => e.target.select();\n\n    const handleInventoryAdd = ({\n        quantity,\n        cashPrice,\n        creditPrice,\n        marketPrice,\n        selectedFinish,\n        selectedCondition,\n    }: FormValues) => {\n        if (!quantity) throw new Error('Quantity is missing');\n\n        addToList(quantity, card, {\n            cashPrice: cashPrice || 0,\n            marketPrice: marketPrice || 0,\n            creditPrice: creditPrice || 0,\n            finishCondition: createFinishCondition(\n                selectedFinish,\n                selectedCondition\n            ),\n        });\n\n        createToast({\n            severity: 'success',\n            message: `${quantity}x ${card.name} added to buylist!`,\n        });\n\n        // Highlight the input after successful card add\n        $('#searchBar').focus().select();\n    };\n\n    const {\n        handleSubmit,\n        setFieldValue,\n        values,\n        isValid,\n        handleChange,\n    } = useFormik({\n        initialValues,\n        validate,\n        onSubmit: (v, { resetForm }) => {\n            handleInventoryAdd(v);\n            resetForm();\n        },\n        validateOnMount: true,\n    });\n\n    const { cardImage } = card;\n\n    return (\n        <CardRowContainer\n            image={\n                <Box width={150}>\n                    <CardImage image={cardImage} />\n                </Box>\n            }\n            header={\n                <CardHeader\n                    card={card}\n                    selectedFinish={values.selectedFinish}\n                    showMid\n                />\n            }\n        >\n            <form onSubmit={handleSubmit} noValidate>\n                <Grid container alignItems=\"center\" spacing={2}>\n                    <Grid item>\n                        <TextField\n                            type=\"number\"\n                            label=\"Quantity\"\n                            value={values.quantity}\n                            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                const castVal = parseInt(e.target.value);\n                                setFieldValue(\n                                    'quantity',\n                                    Math.min(castVal < 0 ? 0 : castVal, 50)\n                                );\n                            }}\n                            onFocus={(e) => e.target.select()}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <TextField\n                            label=\"Credit Price\"\n                            name=\"creditPrice\"\n                            type=\"number\"\n                            value={values.creditPrice}\n                            onChange={handleChange}\n                            onFocus={handleFocus}\n                            inputProps={{\n                                step: 0.25,\n                            }}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <TextField\n                            label=\"Cash Price\"\n                            name=\"cashPrice\"\n                            type=\"number\"\n                            value={values.cashPrice}\n                            onChange={handleChange}\n                            onFocus={handleFocus}\n                            inputProps={{\n                                step: 0.25,\n                            }}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <TextField\n                            label=\"Market Price\"\n                            name=\"marketPrice\"\n                            type=\"number\"\n                            value={values.marketPrice}\n                            onChange={handleChange}\n                            onFocus={handleFocus}\n                            disabled={!values.cashPrice}\n                            inputProps={{\n                                step: 0.25,\n                            }}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid container alignItems=\"center\" spacing={2}>\n                    <Grid item>\n                        <ControlledDropdown\n                            name=\"selectedFinish\"\n                            label=\"Finish\"\n                            options={finishes}\n                            value={values.selectedFinish}\n                            onChange={(v) => {\n                                setFieldValue('selectedFinish', v);\n                            }}\n                            disabled={finishDisabled}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <ControlledDropdown\n                            name=\"selectedCondition\"\n                            label=\"Condition\"\n                            options={cardConditions}\n                            value={values.selectedCondition}\n                            onChange={(v) => {\n                                setFieldValue('selectedCondition', v);\n                            }}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <Button type=\"submit\" primary disabled={!isValid}>\n                            Add to list\n                        </Button>\n                    </Grid>\n                </Grid>\n            </form>\n        </CardRowContainer>\n    );\n};\n\nexport default ReceivingSearchItem;\n","import { Grid } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport React, { FC, useEffect, useState } from 'react';\nimport { Prompt } from 'react-router';\nimport TotalCardsLabel from '../common/TotalCardsLabel';\nimport { useReceivingContext } from '../context/ReceivingContext';\nimport TotalStoreInventory from '../ManageInventory/TotalStoreInventory';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport Loading from '../ui/Loading';\nimport Placeholder from '../ui/Placeholder';\nimport { HeaderText } from '../ui/Typography';\nimport useInterruptExit from '../utils/useInterruptExit';\nimport ReceivingCart from './ReceivingCart';\nimport ReceivingListTotals from './ReceivingListTotals';\nimport ReceivingSearchItem from './ReceivingSearchItem';\n\ninterface Props {}\n\nconst Receiving: FC<Props> = () => {\n    const { setShowPrompt } = useInterruptExit(false);\n    const [term, setTerm] = useState<string>('');\n    const [loading, setLoading] = useState<boolean>(false);\n    const {\n        searchResults,\n        receivingList,\n        handleSearchSelect,\n        resetSearchResults,\n    } = useReceivingContext();\n\n    /**\n     * Reset the search results on unmount to clear store\n     */\n    useEffect(() => {\n        return () => resetSearchResults();\n    }, []);\n\n    /**\n     * Maintains whether or not we show the exit prompt on tab close or refresh\n     */\n    useEffect(() => {\n        if (receivingList.length > 0) {\n            setShowPrompt(true);\n        } else {\n            setShowPrompt(false);\n        }\n    }, [receivingList]);\n\n    useEffect(() => {\n        if (term) {\n            (async () => {\n                setLoading(true);\n                await handleSearchSelect(term);\n                setLoading(false);\n            })();\n        }\n    }, [term]);\n\n    return (\n        <>\n            <Prompt\n                message=\"You have items in your list. Are you sure you wish to leave?\"\n                when={receivingList.length > 0}\n            />\n            <Grid container>\n                <Grid item xs={12} md={4}>\n                    <ControlledSearchBar\n                        value={term}\n                        onChange={(v) => setTerm(v)}\n                    />\n                </Grid>\n            </Grid>\n            <br />\n            <Grid container spacing={2}>\n                <Grid item xs={12} lg={8}>\n                    <Grid container justify=\"space-between\">\n                        <HeaderText>Card Search</HeaderText>\n                        {searchResults.length > 0 && (\n                            <TotalStoreInventory\n                                searchResults={searchResults}\n                                title={searchResults[0].name}\n                            />\n                        )}\n                    </Grid>\n                    <br />\n                    {!loading && !searchResults.length && (\n                        <Placeholder\n                            icon={<SearchIcon style={{ fontSize: 80 }} />}\n                        >\n                            <em>\"So many cards, so little time.\"</em>\n                        </Placeholder>\n                    )}\n                    {loading ? (\n                        <Loading />\n                    ) : (\n                        <Grid container spacing={2}>\n                            {searchResults.map((card) => (\n                                <Grid item xs={12} key={card.id}>\n                                    <ReceivingSearchItem card={card} />\n                                </Grid>\n                            ))}\n                        </Grid>\n                    )}\n                </Grid>\n                <Grid item xs={12} lg={4}>\n                    <Grid container justify=\"space-between\">\n                        <HeaderText>Buylist</HeaderText>\n                        <TotalCardsLabel listLength={receivingList.length} />\n                    </Grid>\n                    <br />\n                    {!receivingList.length && (\n                        <Placeholder\n                            icon={<SearchIcon style={{ fontSize: 80 }} />}\n                        >\n                            <em>\"If you receive it, they will come.\"</em>\n                        </Placeholder>\n                    )}\n                    <ReceivingCart cards={receivingList} />\n                    <br />\n                    {receivingList.length > 0 && <ReceivingListTotals />}\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default Receiving;\n","import http from '../common/http';\nimport { GET_REPORT } from '../utils/endpoints';\nimport {\n    Finish,\n    FinishCondition,\n    ScryfallApiCard,\n} from '../utils/ScryfallCard';\n\nexport interface ResponseData {\n    countByPrinting: Array<{\n        _id: string;\n        scryfall_id: string;\n        quantity_sold: number;\n        card_title: string;\n        card_metadata: ScryfallApiCard;\n        quantity_on_hand: number;\n        finish: Finish;\n        finish_condition: FinishCondition;\n        estimated_price: number;\n    }>;\n    countByCardName: Array<{\n        _id: string;\n        quantity_sold: number;\n        card_title: string;\n    }>;\n}\n\ninterface Args {\n    startDate: string;\n    endDate: string;\n}\n\nconst reportingQuery = async ({ startDate, endDate }: Args) => {\n    try {\n        const { data } = await http.get<ResponseData>(GET_REPORT, {\n            params: { startDate, endDate },\n        });\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default reportingQuery;\n","import React, { FC } from 'react';\nimport Price from '../common/Price';\nimport { SaleListCard } from '../context/SaleContext';\nimport sum from '../utils/sum';\n\ninterface Props {\n    saleList: SaleListCard[];\n}\n\nconst SaleCartPriceTotal: FC<Props> = ({ saleList }) => {\n    const total = sum(saleList.map((c) => c.qtyToSell * Number(c.price)));\n\n    return (\n        <div id=\"sale-price-total\">\n            <Price num={total} />\n        </div>\n    );\n};\n\nexport default SaleCartPriceTotal;\n","import React, { FC, useRef } from 'react';\nimport { useReactToPrint } from 'react-to-print';\nimport { Button, Icon } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport Price from '../common/Price';\nimport { SaleListCard } from '../context/SaleContext';\nimport SaleCartPriceTotal from './SaleCartPriceTotal';\n\ninterface Props {\n    saleListCards: SaleListCard[];\n}\n\nconst PrintWrapper = styled.div`\n    @media print {\n        background-color: white;\n        margin: 0;\n        padding: 0;\n        font-size: 30px;\n        line-height: 40px;\n        z-index: 5000;\n        overflow: hidden;\n    }\n    @media screen {\n        display: none !important;\n    }\n`;\n\nconst PrintList: FC<Props> = ({ saleListCards }) => {\n    const componentRef = useRef<HTMLDivElement>(null);\n\n    const handlePrint = useReactToPrint({\n        content: () => componentRef.current,\n    });\n\n    return (\n        <>\n            <div>\n                <Button size=\"tiny\" onClick={handlePrint} icon>\n                    <Icon name=\"print\" />\n                </Button>\n            </div>\n            <PrintWrapper ref={componentRef}>\n                <ul>\n                    {saleListCards.map((slc) => {\n                        return (\n                            <li key={slc.id}>\n                                <b>\n                                    {slc.display_name} | x{slc.qtyToSell} |{' '}\n                                    {slc.finishCondition} | {slc.set_name} |{' '}\n                                    <Price num={slc.price} />\n                                </b>\n                            </li>\n                        );\n                    })}\n                </ul>\n                <span>\n                    <b>\n                        Subtotal:{' '}\n                        <SaleCartPriceTotal saleList={saleListCards} />\n                    </b>\n                </span>\n            </PrintWrapper>\n        </>\n    );\n};\n\nexport default PrintList;\n","import React, { FC, useContext, useState } from 'react';\nimport { Button, Header, Icon, Modal } from 'semantic-ui-react';\nimport { SaleContext } from '../context/SaleContext';\n\ninterface Props {}\n\nconst FinishSale: FC<Props> = () => {\n    const [submit, setSubmit] = useState({ loading: false, disabled: false });\n    const [showModal, setShowModal] = useState(false);\n    const { finalizeSale } = useContext(SaleContext);\n\n    const handleFinalizeSale = async () => {\n        setSubmit({ loading: true, disabled: true });\n        await finalizeSale();\n    };\n\n    const modalTrigger = (\n        <Button fluid primary onClick={() => setShowModal(true)}>\n            Finalize sale\n        </Button>\n    );\n\n    return (\n        <Modal basic open={showModal} trigger={modalTrigger}>\n            <Modal.Content>\n                <Header inverted as=\"h2\">\n                    Finalize this sale?\n                </Header>\n                <p>\n                    Click 'Yes' to create a sale in Lightspeed. Ensure that you\n                    have all cards pulled and double-checked the customer list.\n                    Undoing this action will require manual data entry!\n                </p>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button\n                    basic\n                    color=\"red\"\n                    inverted\n                    onClick={() => setShowModal(false)}\n                >\n                    <Icon name=\"remove\" /> No\n                </Button>\n                <Button\n                    color=\"green\"\n                    inverted\n                    onClick={handleFinalizeSale}\n                    loading={submit.loading}\n                    disabled={submit.disabled}\n                >\n                    <Icon name=\"checkmark\" /> Yes\n                </Button>\n            </Modal.Actions>\n        </Modal>\n    );\n};\n\nexport default FinishSale;\n","import { Box, Grid, IconButton, ListItem, Typography } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport React, { FC, useContext } from 'react';\nimport Chip from '../common/Chip';\nimport Price from '../common/Price';\nimport { SaleContext, SaleListCard } from '../context/SaleContext';\nimport CardImageTooltip from '../ui/CardImageTooltip';\nimport SetIcon from '../ui/SetIcon';\n\ninterface Props {\n    card: SaleListCard;\n}\n\nconst SaleCartItem: FC<Props> = ({\n    card: {\n        display_name,\n        set,\n        finishCondition,\n        qtyToSell,\n        price,\n        rarity,\n        id,\n        cardImage,\n    },\n}) => {\n    const { removeFromSaleList } = useContext(SaleContext);\n\n    return (\n        <ListItem>\n            <Grid container alignItems=\"center\" justify=\"space-between\">\n                <Grid item>\n                    <CardImageTooltip cardImage={cardImage}>\n                        <Box display=\"flex\" alignItems=\"center\">\n                            <Typography variant=\"h6\" style={{ cursor: 'help' }}>\n                                {display_name}\n                            </Typography>\n                            <SetIcon set={set} rarity={rarity} />\n                            <Chip size=\"small\" label={set.toUpperCase()} />\n                        </Box>\n                    </CardImageTooltip>\n                    <div className=\"line-item-price\">\n                        {qtyToSell}x @ <Price num={price} />\n                        {' • '}\n                        {finishCondition && (\n                            <span>\n                                {finishCondition.split('_')[1]} {' | '}\n                                {finishCondition.split('_')[0]}\n                            </span>\n                        )}\n                    </div>\n                </Grid>\n                <Grid item>\n                    <IconButton\n                        onClick={() => removeFromSaleList(id, finishCondition)}\n                        color=\"secondary\"\n                    >\n                        <CloseIcon />\n                    </IconButton>\n                </Grid>\n            </Grid>\n        </ListItem>\n    );\n};\n\nexport default SaleCartItem;\n","import { Box, Divider, Grid, List, Paper, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport React, { FC, Fragment } from 'react';\nimport { SaleListCard } from '../context/SaleContext';\nimport Placeholder from '../ui/Placeholder';\nimport FinishSale from './FinishSale';\nimport SaleCartItem from './SaleCartItem';\nimport SaleCartPriceTotal from './SaleCartPriceTotal';\n\ninterface Props {\n    saleList: SaleListCard[];\n}\n\nconst SaleCartList: FC<Props> = ({ saleList }) => {\n    if (saleList.length === 0) {\n        return (\n            <Placeholder icon={<AddIcon style={{ fontSize: 80 }} />}>\n                <em>\"Give them what they need\"</em>\n            </Placeholder>\n        );\n    }\n\n    return (\n        <>\n            <List component={Paper} variant=\"outlined\">\n                {saleList.map((card, idx, arr) => (\n                    <Fragment\n                        key={`${card.id}${card.finishCondition}${card.qtyToSell}`}\n                    >\n                        <SaleCartItem card={card} />\n                        {idx !== arr.length - 1 && <Divider />}\n                    </Fragment>\n                ))}\n            </List>\n            <br />\n            <Paper variant=\"outlined\">\n                <Box p={2}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Box\n                                display=\"flex\"\n                                justifyContent=\"space-between\"\n                                alignItems=\"center\"\n                            >\n                                <Typography>SUBTOTAL</Typography>\n                                <Typography variant=\"h6\">\n                                    <b>\n                                        <SaleCartPriceTotal\n                                            saleList={saleList}\n                                        />\n                                    </b>\n                                </Typography>\n                            </Box>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <FinishSale />\n                        </Grid>\n                    </Grid>\n                </Box>\n            </Paper>\n        </>\n    );\n};\n\nexport default SaleCartList;\n","const roundPrice = (num: number) => {\n    return Math.round(num * 1e2) / 1e2;\n};\n\nexport default roundPrice;\n","import { Box, Grid } from '@material-ui/core';\nimport { FormikErrors, useFormik } from 'formik';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport React, { ChangeEvent, FC, FocusEvent, useContext } from 'react';\nimport CardImage from '../common/CardImage';\nimport { SaleContext } from '../context/SaleContext';\nimport Button from '../ui/Button';\nimport CardHeader from '../ui/CardHeader';\nimport CardRowContainer from '../ui/CardRowContainer';\nimport ControlledDropdown from '../ui/ControlledDropdown';\nimport TextField from '../ui/TextField';\nimport roundPrice from '../utils/roundPrice';\nimport { Finish, QOH, ScryfallCard } from '../utils/ScryfallCard';\n\ninterface ConditionOptions {\n    text: string;\n    value: keyof QOH;\n    key: string;\n}\n\n/**\n * Creates a list of conditions for the dropdown menu from the `qoh`\n * Note: Is this not needed if we default select initially?\n * @param {Object} qoh\n * @param {String} id\n */\nfunction createConditionOptions(qoh: QOH, id: string): ConditionOptions[] {\n    const removeZeroedQuantites = _.pickBy(qoh, (p) => p && p > 0); // Quantites of zero not included\n\n    return Object.entries(removeZeroedQuantites).map((d) => {\n        const [conditionFinish, qty] = d;\n\n        return {\n            text: `${conditionFinish.split('_').join(' | ')} | Qty: ${qty}`,\n            value: conditionFinish as keyof QOH,\n            key: `${id}${conditionFinish}`,\n        };\n    });\n}\n\ninterface FormValues {\n    quantityToSell: number;\n    price: number;\n    selectedFinishCondition: keyof QOH;\n}\n\nconst handleFocus = (e: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) =>\n    e.target.select();\n\ninterface Props {\n    card: ScryfallCard;\n}\n\nconst SaleSearchCard: FC<Props> = ({ card }) => {\n    const { addToSaleList } = useContext(SaleContext);\n\n    const conditionSelectOptions = createConditionOptions(card.qoh, card.id);\n\n    const onSubmit = ({\n        selectedFinishCondition,\n        quantityToSell,\n        price,\n    }: FormValues) => {\n        const roundedPrice = roundPrice(price);\n\n        addToSaleList(\n            card,\n            selectedFinishCondition,\n            quantityToSell,\n            roundedPrice\n        );\n\n        // Highlight the input after successful card add\n        $('#searchBar').focus().select();\n    };\n\n    const initialFormValues = {\n        selectedFinishCondition: conditionSelectOptions[0].value,\n        price: 0,\n        quantityToSell: 0,\n    };\n\n    const validate = ({\n        quantityToSell,\n        price,\n        selectedFinishCondition: selectedFinish,\n    }: FormValues) => {\n        const errors: FormikErrors<FormValues> = {};\n\n        if (!quantityToSell) errors.quantityToSell = 'error';\n        if (!price) errors.price = 'error';\n\n        if (!selectedFinish) {\n            errors.selectedFinishCondition = 'error';\n        }\n\n        if (quantityToSell > card.qoh[selectedFinish]!) {\n            errors.quantityToSell = 'error';\n        }\n\n        if (price < 0) {\n            errors.price = 'error';\n        }\n\n        if (quantityToSell < 1) {\n            errors.quantityToSell = 'error';\n        }\n\n        return errors;\n    };\n\n    const {\n        handleChange,\n        handleSubmit,\n        setFieldValue,\n        values,\n        isValid,\n    } = useFormik({\n        initialValues: initialFormValues,\n        validate,\n        onSubmit,\n        validateOnMount: true,\n    });\n\n    return (\n        <CardRowContainer\n            image={\n                <Box width={100}>\n                    <CardImage image={card.cardImage} />\n                </Box>\n            }\n            header={\n                <CardHeader\n                    card={card}\n                    showMid\n                    round\n                    selectedFinish={\n                        values.selectedFinishCondition.split('_')[0] as Finish\n                    }\n                />\n            }\n        >\n            <form onSubmit={handleSubmit}>\n                <Grid container alignItems=\"center\" spacing={2}>\n                    <Grid item>\n                        <ControlledDropdown\n                            name=\"selectedFinishCondition\"\n                            label=\"Select finish/condition\"\n                            options={conditionSelectOptions}\n                            value={values.selectedFinishCondition}\n                            onChange={(v) => {\n                                setFieldValue('selectedFinishCondition', v);\n                                setFieldValue('quantityToSell', 0);\n                            }}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <TextField\n                            type=\"number\"\n                            label=\"Quantity to sell\"\n                            value={values.quantityToSell}\n                            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                const castVal = parseInt(e.target.value);\n\n                                if (\n                                    castVal >\n                                    card.qoh[values.selectedFinishCondition]!\n                                ) {\n                                    return;\n                                }\n\n                                setFieldValue('quantityToSell', castVal);\n                            }}\n                            onFocus={handleFocus}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <TextField\n                            label=\"Price\"\n                            name=\"price\"\n                            type=\"number\"\n                            value={values.price}\n                            onChange={handleChange}\n                            onFocus={handleFocus}\n                            inputProps={{\n                                step: 0.5,\n                            }}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <Button type=\"submit\" primary disabled={!isValid}>\n                            Add to sale\n                        </Button>\n                    </Grid>\n                </Grid>\n            </form>\n        </CardRowContainer>\n    );\n};\n\nexport default SaleSearchCard;\n","import { Grid } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport React, { FC } from 'react';\nimport Loading from '../ui/Loading';\nimport Placeholder from '../ui/Placeholder';\nimport { ScryfallCard } from '../utils/ScryfallCard';\nimport SaleSearchCard from './SaleSearchCard';\n\ninterface Props {\n    loading: boolean;\n    term: string;\n    cards: ScryfallCard[];\n}\n\nconst BrowseCardList: FC<Props> = ({ loading, term, cards }) => {\n    // Creates text to notify the user of zero-result searches\n    const searchNotification = () => {\n        if (term && !cards.length) {\n            // Check to make sure the user has searched and no results\n            return (\n                <p>\n                    Zero results for <em>{term}</em>\n                </p>\n            );\n        }\n        return (\n            <p>\n                <em>\"Don't give the people what they want\"</em>\n            </p>\n        );\n    };\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    if (cards.length === 0) {\n        return (\n            <Placeholder icon={<SearchIcon style={{ fontSize: 80 }} />}>\n                <span>{searchNotification()}</span>\n            </Placeholder>\n        );\n    }\n\n    return (\n        <Grid container spacing={2}>\n            {cards.map((card) => {\n                return (\n                    <Grid item xs={12} key={card.id}>\n                        <SaleSearchCard card={card} />\n                    </Grid>\n                );\n            })}\n        </Grid>\n    );\n};\n\nexport default BrowseCardList;\n","import http from '../common/http';\nimport { SuspendedSale } from '../context/getSuspendedSaleQuery';\nimport { SUSPEND_SALE } from '../utils/endpoints';\n\nconst getSuspendedSalesQuery = async () => {\n    try {\n        const { data } = await http.get<SuspendedSale[]>(SUSPEND_SALE);\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\nexport default getSuspendedSalesQuery;\n","import React, { FC, useEffect, useState } from 'react';\nimport {\n    Button,\n    DropdownProps,\n    Form,\n    Grid,\n    Message,\n    Modal,\n    TextAreaProps,\n} from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { SuspendedSale } from '../context/getSuspendedSaleQuery';\nimport { SaleContext } from '../context/SaleContext';\nimport getSuspendedSalesQuery from './getSuspendedSalesQuery';\n\ninterface Props {\n    id: string;\n    saleListLength: number;\n    restoreSale: SaleContext['restoreSale'];\n    deleteSuspendedSale: SaleContext['deleteSuspendedSale'];\n    suspendSale: SaleContext['suspendSale'];\n}\n\ninterface SuspendButtonState {\n    suspendBtn: boolean;\n    restoreBtn: boolean;\n    deleteBtn: boolean;\n}\n\nconst Divider = styled.div`\n    border-left: 1px solid rgba(0, 0, 0, 0.2);\n    height: 100%;\n`;\n\nconst ClearMargin = styled.div`\n    margin-top: 0px;\n    margin-bottom: 0px;\n`;\n\nconst CharLimit = styled.p`\n    font-size: 12px;\n    color: rgba(0, 0, 0, 0.2);\n    float: right;\n`;\n\nconst SuspendSaleButton: FC<Props> = ({\n    restoreSale,\n    deleteSuspendedSale,\n    saleListLength,\n    suspendSale,\n    id,\n}) => {\n    const [sales, setSales] = useState<SuspendedSale[]>([]);\n    const [saleID, setSaleID] = useState<string>('');\n    const [modalOpen, setModalOpen] = useState<boolean>(false);\n    const [customerName, setCustomerName] = useState<string>('');\n    const [notes, setNotes] = useState<string>('');\n    const [disabled, setDisabled] = useState<boolean>(false);\n    const [loadingBtn, setLoadingBtn] = useState<SuspendButtonState>({\n        suspendBtn: false,\n        restoreBtn: false,\n        deleteBtn: false,\n    });\n\n    const getSales = async () => {\n        const suspendedSales = await getSuspendedSalesQuery();\n\n        setSales(suspendedSales);\n    };\n\n    const clearFields = () => {\n        setCustomerName('');\n        setNotes('');\n        setSaleID('');\n    };\n\n    // Get the previously suspended sales on mount and parent state (_id) change\n    useEffect(() => {\n        getSales();\n    }, [id]); // If the parent-level suspended-sale _id changes, we fetch again\n\n    const modalTrigger = (\n        <div>\n            <Button\n                size=\"tiny\"\n                id=\"suspend-sale-btn\"\n                onClick={() => setModalOpen(true)}\n                icon=\"ellipsis horizontal\"\n            />\n        </div>\n    );\n\n    const submitSuspendSale = async () => {\n        setDisabled(true);\n        setLoadingBtn({ ...loadingBtn, suspendBtn: true });\n        await suspendSale({ customerName, notes });\n        setModalOpen(false); // Close the modal to avoid \"flicker\" when state re-renders\n        await getSales(); // Parent _id does not change, re-fetch sales\n        clearFields();\n        setDisabled(false);\n        setLoadingBtn({ ...loadingBtn, suspendBtn: false });\n    };\n\n    const submitRestoreSale = async () => {\n        setDisabled(true);\n        setLoadingBtn({ ...loadingBtn, restoreBtn: true });\n        await restoreSale(saleID);\n        setModalOpen(false);\n        clearFields();\n        setDisabled(false);\n        setLoadingBtn({ ...loadingBtn, restoreBtn: false });\n    };\n\n    const submitDeleteSale = async () => {\n        setDisabled(true);\n        setLoadingBtn({ ...loadingBtn, deleteBtn: true });\n        await deleteSuspendedSale();\n        setModalOpen(false);\n        clearFields();\n        setDisabled(false);\n        setLoadingBtn({ ...loadingBtn, deleteBtn: false });\n    };\n\n    return (\n        <React.Fragment>\n            <Modal trigger={modalTrigger} open={modalOpen}>\n                <Modal.Header>Sales menu</Modal.Header>\n                <Modal.Content>\n                    <Grid columns={2} stackable relaxed=\"very\">\n                        {saleListLength > 0 && (\n                            <React.Fragment>\n                                <Grid.Column width=\"7\">\n                                    <h3>Suspend Sale</h3>\n                                    <Form>\n                                        <ClearMargin>\n                                            <Form.Input\n                                                id=\"suspend-sale-name\"\n                                                label=\"Customer Name\"\n                                                placeholder=\"Jace, the Mind Sculptor\"\n                                                value={customerName}\n                                                onChange={(e, { value }) =>\n                                                    setCustomerName(\n                                                        value.substring(0, 50)\n                                                    )\n                                                }\n                                            />\n                                        </ClearMargin>\n                                        <ClearMargin>\n                                            <CharLimit>\n                                                {customerName.length}/50\n                                            </CharLimit>\n                                        </ClearMargin>\n                                        <ClearMargin>\n                                            <Form.TextArea\n                                                label=\"Notes\"\n                                                placeholder=\"Sometimes, I forget things...\"\n                                                value={notes}\n                                                onChange={(\n                                                    e,\n                                                    { value }: TextAreaProps\n                                                ) => {\n                                                    if (\n                                                        typeof value ===\n                                                        'string'\n                                                    ) {\n                                                        setNotes(\n                                                            value.substring(\n                                                                0,\n                                                                150\n                                                            )\n                                                        );\n                                                    }\n                                                }}\n                                            />\n                                        </ClearMargin>\n                                        <ClearMargin>\n                                            <CharLimit>\n                                                {notes.length}/150\n                                            </CharLimit>\n                                        </ClearMargin>\n                                        <Form.Button\n                                            id=\"suspend-sale-submit\"\n                                            primary\n                                            disabled={disabled || !customerName}\n                                            loading={loadingBtn.suspendBtn}\n                                            onClick={submitSuspendSale}\n                                        >\n                                            Suspend Sale\n                                        </Form.Button>\n                                    </Form>\n                                </Grid.Column>\n                                <Grid.Column width=\"1\">\n                                    <Divider />\n                                </Grid.Column>\n                            </React.Fragment>\n                        )}\n                        <Grid.Column width=\"7\">\n                            <h3>Restore Sale</h3>\n                            {sales.length > 0 && (\n                                <React.Fragment>\n                                    <Form>\n                                        <Form.Select\n                                            fluid\n                                            label=\"Previously suspended sales\"\n                                            options={sales.map((s) => {\n                                                return {\n                                                    key: s._id,\n                                                    text: s.name,\n                                                    value: s._id,\n                                                };\n                                            })}\n                                            placeholder=\"Select a sale\"\n                                            onChange={(\n                                                e,\n                                                { value }: DropdownProps\n                                            ) => {\n                                                if (typeof value === 'string') {\n                                                    setSaleID(value);\n                                                }\n                                            }}\n                                        />\n                                        <Form.Button\n                                            primary\n                                            disabled={disabled || !saleID}\n                                            loading={loadingBtn.restoreBtn}\n                                            onClick={submitRestoreSale}\n                                        >\n                                            Restore Sale\n                                        </Form.Button>\n                                    </Form>\n                                </React.Fragment>\n                            )}\n                            {sales.length === 0 && (\n                                <Message info>\n                                    <Message.Header>No sales</Message.Header>\n                                    Suspend a sale first\n                                </Message>\n                            )}\n                        </Grid.Column>\n                    </Grid>\n                </Modal.Content>\n                <Modal.Actions>\n                    {!!id && (\n                        <Button\n                            color=\"red\"\n                            disabled={disabled}\n                            loading={loadingBtn.deleteBtn}\n                            onClick={submitDeleteSale}\n                        >\n                            Delete current Sale\n                        </Button>\n                    )}\n                    <Button\n                        primary\n                        disabled={disabled}\n                        onClick={() => setModalOpen(false)}\n                    >\n                        Cancel\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nexport default SuspendSaleButton;\n","import { Box, Grid } from '@material-ui/core';\nimport React, { FC, useContext, useEffect, useState } from 'react';\nimport { Prompt } from 'react-router';\nimport TotalCardsLabel from '../common/TotalCardsLabel';\nimport { SaleContext } from '../context/SaleContext';\nimport TotalStoreInventory from '../ManageInventory/TotalStoreInventory';\nimport ControlledSearchBar from '../ui/ControlledSearchBar';\nimport { HeaderText } from '../ui/Typography';\nimport sum from '../utils/sum';\nimport useInterruptExit from '../utils/useInterruptExit';\nimport PrintList from './PrintList';\nimport SaleCartList from './SaleCartList';\nimport BrowseCardList from './SaleSearchCardList';\nimport SuspendSaleButton from './SuspendSaleButton';\n\ninterface Props {}\n\nconst Sale: FC<Props> = () => {\n    const { setShowPrompt } = useInterruptExit(false);\n    const [term, setTerm] = useState<string>('');\n    const [loading, setLoading] = useState<boolean>(false);\n    const {\n        saleListCards,\n        searchTerm,\n        searchResults,\n        handleResultSelect,\n        suspendedSale,\n        restoreSale,\n        deleteSuspendedSale,\n        suspendSale,\n    } = useContext(SaleContext);\n\n    /**\n     * Maintains whether or not we show the exit prompt on tab close or refresh\n     */\n    useEffect(() => {\n        if (saleListCards.length > 0) {\n            setShowPrompt(true);\n        } else {\n            setShowPrompt(false);\n        }\n    }, [saleListCards]);\n\n    useEffect(() => {\n        if (term) {\n            (async () => {\n                setLoading(true);\n                await handleResultSelect(term);\n                setLoading(false);\n            })();\n        }\n    }, [term]);\n\n    return (\n        <>\n            <Prompt\n                message=\"You have items in your list. Are you sure you wish to leave?\"\n                when={saleListCards.length > 0}\n            />\n            <Grid container>\n                <Grid item xs={12} md={4}>\n                    <ControlledSearchBar\n                        value={term}\n                        onChange={(v) => setTerm(v)}\n                    />\n                </Grid>\n            </Grid>\n            <br />\n            <Grid container spacing={2}>\n                <Grid item xs={12} lg={8}>\n                    <Grid container justify=\"space-between\">\n                        <HeaderText>Inventory</HeaderText>\n                        {term && (\n                            <TotalStoreInventory\n                                searchResults={searchResults}\n                                title={term}\n                            />\n                        )}\n                    </Grid>\n                    <br />\n                    <BrowseCardList\n                        loading={loading}\n                        term={searchTerm}\n                        cards={searchResults}\n                    />\n                </Grid>\n                <Grid item xs={12} lg={4}>\n                    <Grid container justify=\"space-between\">\n                        <Box display=\"flex\" alignItems=\"center\">\n                            <HeaderText>\n                                {suspendedSale.name === ''\n                                    ? 'Sale Items'\n                                    : `${suspendedSale.name}'s Items`}\n                            </HeaderText>\n                            <TotalCardsLabel\n                                listLength={sum(\n                                    saleListCards.map((c) => c.qtyToSell)\n                                )}\n                            />\n                        </Box>\n                        <Box display=\"flex\">\n                            <SuspendSaleButton\n                                restoreSale={restoreSale}\n                                suspendSale={suspendSale}\n                                saleListLength={saleListCards.length}\n                                deleteSuspendedSale={deleteSuspendedSale}\n                                id={suspendedSale._id}\n                            />\n                            {saleListCards.length > 0 && (\n                                <PrintList saleListCards={saleListCards} />\n                            )}\n                        </Box>\n                    </Grid>\n                    <br />\n                    <SaleCartList saleList={saleListCards} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default Sale;\n","import { createMuiTheme, makeStyles, ThemeProvider } from '@material-ui/core';\nimport React, { FC } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport AdminRoute from './AuthenticatedRoute';\nimport BrowseInventory from './BrowseInventory/BrowseInventory';\nimport BrowseReceiving from './BrowseReceiving/BrowseReceiving';\nimport BrowseSales from './BrowseSales/BrowseSales';\nimport BulkInventory from './BulkInventory/BulkInventory';\nimport AuthProvider from './context/AuthProvider';\nimport InventoryProvider from './context/InventoryContext';\nimport ReceivingProvider from './context/ReceivingContext';\nimport { SaleProvider } from './context/SaleContext';\nimport Home from './LandingPage/Home';\nimport Login from './Login/Login';\nimport ManageInventory from './ManageInventory/ManageInventory';\nimport NavBar from './NavBar/NavBar';\nimport PublicInventory from './PublicInventory/PublicInventory';\nimport Receiving from './Receiving/Receiving';\nimport Reporting from './Reporting/Reporting';\nimport Sale from './Sale/Sale';\nimport ToastProvider from './ui/ToastContext';\n\nconst useStyles = makeStyles(({ spacing }) => ({\n    contentContainer: {\n        paddingTop: spacing(10),\n        marginLeft: spacing(3),\n        marginRight: spacing(3),\n    },\n    backgroundColor: {\n        backgroundColor: '#f9fafb',\n        minHeight: '100vh',\n    },\n}));\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#2185d0',\n        },\n    },\n});\n\nconst App: FC = () => {\n    const { backgroundColor, contentContainer } = useStyles();\n\n    return (\n        <AuthProvider>\n            <ThemeProvider theme={theme}>\n                <ToastProvider>\n                    <NavBar />\n                    <Switch>\n                        <Route exact path=\"/\" component={Home} />\n                        <div className={backgroundColor}>\n                            <div className={contentContainer}>\n                                <AdminRoute exact path=\"/manage-inventory\">\n                                    <InventoryProvider>\n                                        <ManageInventory />\n                                    </InventoryProvider>\n                                </AdminRoute>\n                                <AdminRoute exact path=\"/new-sale\">\n                                    <SaleProvider>\n                                        <Sale />\n                                    </SaleProvider>\n                                </AdminRoute>\n                                <AdminRoute exact path=\"/receiving\">\n                                    <ReceivingProvider>\n                                        <Receiving />\n                                    </ReceivingProvider>\n                                </AdminRoute>\n                                <AdminRoute exact path=\"/browse-sales\">\n                                    <BrowseSales />\n                                </AdminRoute>\n                                <AdminRoute exact path=\"/browse-inventory\">\n                                    <BrowseInventory />\n                                </AdminRoute>\n                                <AdminRoute exact path=\"/browse-receiving\">\n                                    <BrowseReceiving />\n                                </AdminRoute>\n                                <AdminRoute exact path=\"/bulk-add\">\n                                    <BulkInventory />\n                                </AdminRoute>\n                                <Route\n                                    exact\n                                    path=\"/public-inventory\"\n                                    component={PublicInventory}\n                                />\n                                <Route\n                                    exact\n                                    path=\"/reporting\"\n                                    component={Reporting}\n                                />\n                                <Route exact path=\"/login\" component={Login} />\n                            </div>\n                        </div>\n                    </Switch>\n                </ToastProvider>\n            </ThemeProvider>\n        </AuthProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import '@fontsource/roboto';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <HashRouter basename=\"/\">\n        <App />\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}